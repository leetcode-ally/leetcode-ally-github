{
  "two-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "1",
        "title": "Two Sum",
        "titleSlug": "two-sum",
        "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face=\"monospace\">&nbsp;</font>time complexity?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 54070,
        "dislikes": 1799,
        "similarQuestions": "[{\"title\": \"3Sum\", \"titleSlug\": \"3sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"4Sum\", \"titleSlug\": \"4sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum II - Input Array Is Sorted\", \"titleSlug\": \"two-sum-ii-input-array-is-sorted\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum III - Data structure design\", \"titleSlug\": \"two-sum-iii-data-structure-design\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum IV - Input is a BST\", \"titleSlug\": \"two-sum-iv-input-is-a-bst\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum Less Than K\", \"titleSlug\": \"two-sum-less-than-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Max Number of K-Sum Pairs\", \"titleSlug\": \"max-number-of-k-sum-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Good Meals\", \"titleSlug\": \"count-good-meals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Pairs With Absolute Difference K\", \"titleSlug\": \"count-number-of-pairs-with-absolute-difference-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Pairs of Strings With Concatenation Equal to Target\", \"titleSlug\": \"number-of-pairs-of-strings-with-concatenation-equal-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All K-Distant Indices in an Array\", \"titleSlug\": \"find-all-k-distant-indices-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"First Letter to Appear Twice\", \"titleSlug\": \"first-letter-to-appear-twice\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Excellent Pairs\", \"titleSlug\": \"number-of-excellent-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Arithmetic Triplets\", \"titleSlug\": \"number-of-arithmetic-triplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Node With Highest Edge Score\", \"titleSlug\": \"node-with-highest-edge-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check Distances Between Same Letters\", \"titleSlug\": \"check-distances-between-same-letters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Subarrays With Equal Sum\", \"titleSlug\": \"find-subarrays-with-equal-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Largest Positive Integer That Exists With Its Negative\", \"titleSlug\": \"largest-positive-integer-that-exists-with-its-negative\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Distinct Averages\", \"titleSlug\": \"number-of-distinct-averages\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Pairs Whose Sum is Less than Target\", \"titleSlug\": \"count-pairs-whose-sum-is-less-than-target\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"11.8M\", \"totalSubmission\": \"22.9M\", \"totalAcceptedRaw\": 11781166, \"totalSubmissionRaw\": 22930467, \"acRate\": \"51.4%\"}",
        "hints": [
          "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
          "So, if we fix one of the numbers, say <code>x</code>, we have to scan the entire array to find the next number <code>y</code> which is <code>value - x</code> where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
          "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "3sum",
          "title": "3Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "4sum",
          "title": "4Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "two-sum-ii-input-array-is-sorted",
          "title": "Two Sum II - Input Array Is Sorted",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-iii-data-structure-design",
          "title": "Two Sum III - Data structure design",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-sum-equals-k",
          "title": "Subarray Sum Equals K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-iv-input-is-a-bst",
          "title": "Two Sum IV - Input is a BST",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-less-than-k",
          "title": "Two Sum Less Than K",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "max-number-of-k-sum-pairs",
          "title": "Max Number of K-Sum Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-good-meals",
          "title": "Count Good Meals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-number-of-pairs-with-absolute-difference-k",
          "title": "Count Number of Pairs With Absolute Difference K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
          "title": "Number of Pairs of Strings With Concatenation Equal to Target",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-all-k-distant-indices-in-an-array",
          "title": "Find All K-Distant Indices in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "first-letter-to-appear-twice",
          "title": "First Letter to Appear Twice",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-excellent-pairs",
          "title": "Number of Excellent Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-arithmetic-triplets",
          "title": "Number of Arithmetic Triplets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "node-with-highest-edge-score",
          "title": "Node With Highest Edge Score",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-distances-between-same-letters",
          "title": "Check Distances Between Same Letters",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-subarrays-with-equal-sum",
          "title": "Find Subarrays With Equal Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "largest-positive-integer-that-exists-with-its-negative",
          "title": "Largest Positive Integer That Exists With Its Negative",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-distinct-averages",
          "title": "Number of Distinct Averages",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-pairs-whose-sum-is-less-than-target",
          "title": "Count Pairs Whose Sum is Less than Target",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
        "So, if we fix one of the numbers, say <code>x</code>, we have to scan the entire array to find the next number <code>y</code> which is <code>value - x</code> where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
        "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "add-two-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "2",
        "title": "Add Two Numbers",
        "titleSlug": "add-two-numbers",
        "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,0,8]\n<strong>Explanation:</strong> 342 + 465 = 807.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>Output:</strong> [8,9,9,9,0,0,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 29479,
        "dislikes": 5735,
        "similarQuestions": "[{\"title\": \"Multiply Strings\", \"titleSlug\": \"multiply-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add Binary\", \"titleSlug\": \"add-binary\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Two Integers\", \"titleSlug\": \"sum-of-two-integers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add Strings\", \"titleSlug\": \"add-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add Two Numbers II\", \"titleSlug\": \"add-two-numbers-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add to Array-Form of Integer\", \"titleSlug\": \"add-to-array-form-of-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add Two Polynomials Represented as Linked Lists\", \"titleSlug\": \"add-two-polynomials-represented-as-linked-lists\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Double a Number Represented as a Linked List\", \"titleSlug\": \"double-a-number-represented-as-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Math", "slug": "math" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"4.2M\", \"totalSubmission\": \"10M\", \"totalAcceptedRaw\": 4169866, \"totalSubmissionRaw\": 9959662, \"acRate\": \"41.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "multiply-strings",
          "title": "Multiply Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-binary",
          "title": "Add Binary",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-two-integers",
          "title": "Sum of Two Integers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-strings",
          "title": "Add Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-numbers-ii",
          "title": "Add Two Numbers II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-to-array-form-of-integer",
          "title": "Add to Array-Form of Integer",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-polynomials-represented-as-linked-lists",
          "title": "Add Two Polynomials Represented as Linked Lists",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "double-a-number-represented-as-a-linked-list",
          "title": "Double a Number Represented as a Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Math", "slug": "math" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "longest-substring-without-repeating-characters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "3",
        "title": "Longest Substring Without Repeating Characters",
        "titleSlug": "longest-substring-without-repeating-characters",
        "content": "<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword=\"substring-nonempty\"><strong>substring</strong></span> without repeating characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 38275,
        "dislikes": 1756,
        "similarQuestions": "[{\"title\": \"Longest Substring with At Most Two Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-two-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Substring with At Most K Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-k-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarrays with K Different Integers\", \"titleSlug\": \"subarrays-with-k-different-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Erasure Value\", \"titleSlug\": \"maximum-erasure-value\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Equal Count Substrings\", \"titleSlug\": \"number-of-equal-count-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Consecutive Cards to Pick Up\", \"titleSlug\": \"minimum-consecutive-cards-to-pick-up\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Nice Subarray\", \"titleSlug\": \"longest-nice-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Optimal Partition of String\", \"titleSlug\": \"optimal-partition-of-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Complete Subarrays in an Array\", \"titleSlug\": \"count-complete-subarrays-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"5.3M\", \"totalSubmission\": \"15.3M\", \"totalAcceptedRaw\": 5257953, \"totalSubmissionRaw\": 15328478, \"acRate\": \"34.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
          "title": "Longest Substring with At Most Two Distinct Characters",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
          "title": "Longest Substring with At Most K Distinct Characters",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "subarrays-with-k-different-integers",
          "title": "Subarrays with K Different Integers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-erasure-value",
          "title": "Maximum Erasure Value",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-equal-count-substrings",
          "title": "Number of Equal Count Substrings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-consecutive-cards-to-pick-up",
          "title": "Minimum Consecutive Cards to Pick Up",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-nice-subarray",
          "title": "Longest Nice Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "optimal-partition-of-string",
          "title": "Optimal Partition of String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-complete-subarrays-in-an-array",
          "title": "Count Complete Subarrays in an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "median-of-two-sorted-arrays": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "4",
        "title": "Median of Two Sorted Arrays",
        "titleSlug": "median-of-two-sorted-arrays",
        "content": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 27124,
        "dislikes": 2984,
        "similarQuestions": "[{\"title\": \"Median of a Row Wise Sorted Matrix\", \"titleSlug\": \"median-of-a-row-wise-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" }
        ],
        "stats": "{\"totalAccepted\": \"2.3M\", \"totalSubmission\": \"6M\", \"totalAcceptedRaw\": 2319991, \"totalSubmissionRaw\": 5977628, \"acRate\": \"38.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "median-of-a-row-wise-sorted-matrix",
          "title": "Median of a Row Wise Sorted Matrix",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" }
      ]
    }
  },
  "longest-palindromic-substring": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "5",
        "title": "Longest Palindromic Substring",
        "titleSlug": "longest-palindromic-substring",
        "content": "<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword=\"palindromic-string\"><em>palindromic</em></span> <span data-keyword=\"substring-nonempty\"><em>substring</em></span> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 28311,
        "dislikes": 1681,
        "similarQuestions": "[{\"title\": \"Shortest Palindrome\", \"titleSlug\": \"shortest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation\", \"titleSlug\": \"palindrome-permutation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Palindrome Pairs\", \"titleSlug\": \"palindrome-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Palindromic Subsequence\", \"titleSlug\": \"longest-palindromic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindromic Substrings\", \"titleSlug\": \"palindromic-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"2.8M\", \"totalSubmission\": \"8.4M\", \"totalAcceptedRaw\": 2819087, \"totalSubmissionRaw\": 8433068, \"acRate\": \"33.4%\"}",
        "hints": [
          "How can we reuse a previously computed palindrome to compute a larger palindrome?",
          "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
          "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "shortest-palindrome",
          "title": "Shortest Palindrome",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-permutation",
          "title": "Palindrome Permutation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "palindrome-pairs",
          "title": "Palindrome Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-subsequence",
          "title": "Longest Palindromic Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "palindromic-substrings",
          "title": "Palindromic Substrings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
          "title": "Maximum Number of Non-overlapping Palindrome Substrings",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "How can we reuse a previously computed palindrome to compute a larger palindrome?",
        "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
        "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "zigzag-conversion": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "6",
        "title": "Zigzag Conversion",
        "titleSlug": "zigzag-conversion",
        "content": "<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n\n<pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n\n<pre>\nstring convert(string s, int numRows);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 4\n<strong>Output:</strong> &quot;PINALSIGYAHRPI&quot;\n<strong>Explanation:</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A&quot;, numRows = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), <code>&#39;,&#39;</code> and <code>&#39;.&#39;</code>.</li>\n\t<li><code>1 &lt;= numRows &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7106,
        "dislikes": 13892,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1198331, \"totalSubmissionRaw\": 2561129, \"acRate\": \"46.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "reverse-integer": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "7",
        "title": "Reverse Integer",
        "titleSlug": "reverse-integer",
        "content": "<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12300,
        "dislikes": 13246,
        "similarQuestions": "[{\"title\": \"String to Integer (atoi)\", \"titleSlug\": \"string-to-integer-atoi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reverse Bits\", \"titleSlug\": \"reverse-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"A Number After a Double Reversal\", \"titleSlug\": \"a-number-after-a-double-reversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Number of Distinct Integers After Reverse Operations\", \"titleSlug\": \"count-number-of-distinct-integers-after-reverse-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"3M\", \"totalSubmission\": \"10.5M\", \"totalAcceptedRaw\": 2957248, \"totalSubmissionRaw\": 10504003, \"acRate\": \"28.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "string-to-integer-atoi",
          "title": "String to Integer (atoi)",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-bits",
          "title": "Reverse Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "a-number-after-a-double-reversal",
          "title": "A Number After a Double Reversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-number-of-distinct-integers-after-reverse-operations",
          "title": "Count Number of Distinct Integers After Reverse Operations",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "string-to-integer-atoi": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "8",
        "title": "String to Integer (atoi)",
        "titleSlug": "string-to-integer-atoi",
        "content": "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++&#39;s <code>atoi</code> function).</p>\n\n<p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p>\n\n<ol>\n\t<li>Read in and ignore any leading whitespace.</li>\n\t<li>Check if the next character (if not already at the end of the string) is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li>\n\t<li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li>\n\t<li>Convert these digits into an integer (i.e. <code>&quot;123&quot; -&gt; 123</code>, <code>&quot;0032&quot; -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li>\n\t<li>If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be clamped to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be clamped to <code>2<sup>31</sup> - 1</code>.</li>\n\t<li>Return the integer as the final result.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Only the space character <code>&#39; &#39;</code> is considered a whitespace character.</li>\n\t<li><strong>Do not ignore</strong> any characters other than the leading whitespace or the rest of the string after the digits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;42&quot;\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The underlined characters are what is read in, the caret is the current reader position.\nStep 1: &quot;42&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;42&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>42</u>&quot; (&quot;42&quot; is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 42.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;   -42&quot;\n<strong>Output:</strong> -42\n<strong>Explanation:</strong>\nStep 1: &quot;<u>   </u>-42&quot; (leading whitespace is read and ignored)\n            ^\nStep 2: &quot;   <u>-</u>42&quot; (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3: &quot;   -<u>42</u>&quot; (&quot;42&quot; is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is -42.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;4193 with words&quot;\n<strong>Output:</strong> 4193\n<strong>Explanation:</strong>\nStep 1: &quot;4193 with words&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;4193 with words&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>4193</u> with words&quot; (&quot;4193&quot; is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 4193.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4087,
        "dislikes": 12717,
        "similarQuestions": "[{\"title\": \"Reverse Integer\", \"titleSlug\": \"reverse-integer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Number\", \"titleSlug\": \"valid-number\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if Numbers Are Ascending in a Sentence\", \"titleSlug\": \"check-if-numbers-are-ascending-in-a-sentence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"8.3M\", \"totalAcceptedRaw\": 1409874, \"totalSubmissionRaw\": 8315088, \"acRate\": \"17.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-integer",
          "title": "Reverse Integer",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "valid-number",
          "title": "Valid Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-numbers-are-ascending-in-a-sentence",
          "title": "Check if Numbers Are Ascending in a Sentence",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "palindrome-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "9",
        "title": "Palindrome Number",
        "titleSlug": "palindrome-number",
        "content": "<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword=\"palindrome-integer\"><em><strong>palindrome</strong></em></span><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 11783,
        "dislikes": 2651,
        "similarQuestions": "[{\"title\": \"Palindrome Linked List\", \"titleSlug\": \"palindrome-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Palindrome With Fixed Length\", \"titleSlug\": \"find-palindrome-with-fixed-length\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strictly Palindromic Number\", \"titleSlug\": \"strictly-palindromic-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"  Count Symmetric Integers\", \"titleSlug\": \"count-symmetric-integers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"4M\", \"totalSubmission\": \"7.3M\", \"totalAcceptedRaw\": 4024622, \"totalSubmissionRaw\": 7298720, \"acRate\": \"55.1%\"}",
        "hints": ["Beware of overflow when you reverse the integer."]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-linked-list",
          "title": "Palindrome Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-palindrome-with-fixed-length",
          "title": "Find Palindrome With Fixed Length",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "strictly-palindromic-number",
          "title": "Strictly Palindromic Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-symmetric-integers",
          "title": "  Count Symmetric Integers",
          "isPaidOnly": false
        }
      ],
      "hints": ["Beware of overflow when you reverse the integer."],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "regular-expression-matching": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "10",
        "title": "Regular Expression Matching",
        "titleSlug": "regular-expression-matching",
        "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 11706,
        "dislikes": 2014,
        "similarQuestions": "[{\"title\": \"Wildcard Matching\", \"titleSlug\": \"wildcard-matching\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"898.3K\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 898326, \"totalSubmissionRaw\": 3206694, \"acRate\": \"28.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "wildcard-matching",
          "title": "Wildcard Matching",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "container-with-most-water": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "11",
        "title": "Container With Most Water",
        "titleSlug": "container-with-most-water",
        "content": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>\n\n<p>Return <em>the maximum amount of water a container can store</em>.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 27686,
        "dislikes": 1569,
        "similarQuestions": "[{\"title\": \"Trapping Rain Water\", \"titleSlug\": \"trapping-rain-water\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Tastiness of Candy Basket\", \"titleSlug\": \"maximum-tastiness-of-candy-basket\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber IV\", \"titleSlug\": \"house-robber-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"2.6M\", \"totalSubmission\": \"4.8M\", \"totalAcceptedRaw\": 2596893, \"totalSubmissionRaw\": 4760491, \"acRate\": \"54.6%\"}",
        "hints": [
          "If you simulate the problem, it will be O(n^2) which is not efficient.",
          "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.",
          "How can you calculate the amount of water at each step?"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "trapping-rain-water",
          "title": "Trapping Rain Water",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-tastiness-of-candy-basket",
          "title": "Maximum Tastiness of Candy Basket",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-iv",
          "title": "House Robber IV",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "If you simulate the problem, it will be O(n^2) which is not efficient.",
        "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.",
        "How can you calculate the amount of water at each step?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "integer-to-roman": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "12",
        "title": "Integer to Roman",
        "titleSlug": "integer-to-roman",
        "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given an integer, convert it to a roman numeral.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 3\n<strong>Output:</strong> &quot;III&quot;\n<strong>Explanation:</strong> 3 is represented as 3 ones.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 58\n<strong>Output:</strong> &quot;LVIII&quot;\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1994\n<strong>Output:</strong> &quot;MCMXCIV&quot;\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6650,
        "dislikes": 5424,
        "similarQuestions": "[{\"title\": \"Roman to Integer\", \"titleSlug\": \"roman-to-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Integer to English Words\", \"titleSlug\": \"integer-to-english-words\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1170366, \"totalSubmissionRaw\": 1833859, \"acRate\": \"63.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "roman-to-integer",
          "title": "Roman to Integer",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "integer-to-english-words",
          "title": "Integer to English Words",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "roman-to-integer": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "13",
        "title": "Roman to Integer",
        "titleSlug": "roman-to-integer",
        "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two ones added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 13138,
        "dislikes": 806,
        "similarQuestions": "[{\"title\": \"Integer to Roman\", \"titleSlug\": \"integer-to-roman\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"3.3M\", \"totalSubmission\": \"5.4M\", \"totalAcceptedRaw\": 3251785, \"totalSubmissionRaw\": 5404210, \"acRate\": \"60.2%\"}",
        "hints": [
          "Problem is simpler to solve by working the string from back to front and using a map."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "integer-to-roman",
          "title": "Integer to Roman",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Problem is simpler to solve by working the string from back to front and using a map."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "longest-common-prefix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "14",
        "title": "Longest Common Prefix",
        "titleSlug": "longest-common-prefix",
        "content": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>Output:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 16602,
        "dislikes": 4366,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"2.9M\", \"totalSubmission\": \"7M\", \"totalAcceptedRaw\": 2946426, \"totalSubmissionRaw\": 7009851, \"acRate\": \"42.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "3sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "15",
        "title": "3Sum",
        "titleSlug": "3sum",
        "content": "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 29465,
        "dislikes": 2679,
        "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"3Sum Closest\", \"titleSlug\": \"3sum-closest\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"4Sum\", \"titleSlug\": \"4sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"3Sum Smaller\", \"titleSlug\": \"3sum-smaller\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Arithmetic Triplets\", \"titleSlug\": \"number-of-arithmetic-triplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Sum of Mountain Triplets I\", \"titleSlug\": \"minimum-sum-of-mountain-triplets-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Sum of Mountain Triplets II\", \"titleSlug\": \"minimum-sum-of-mountain-triplets-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"3.2M\", \"totalSubmission\": \"9.4M\", \"totalAcceptedRaw\": 3174700, \"totalSubmissionRaw\": 9377685, \"acRate\": \"33.9%\"}",
        "hints": [
          "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
          "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
          "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum",
          "title": "Two Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "3sum-closest",
          "title": "3Sum Closest",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "4sum",
          "title": "4Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "3sum-smaller",
          "title": "3Sum Smaller",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-arithmetic-triplets",
          "title": "Number of Arithmetic Triplets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-sum-of-mountain-triplets-i",
          "title": "Minimum Sum of Mountain Triplets I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-sum-of-mountain-triplets-ii",
          "title": "Minimum Sum of Mountain Triplets II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
        "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
        "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "3sum-closest": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "16",
        "title": "3Sum Closest",
        "titleSlug": "3sum-closest",
        "content": "<p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p>\n\n<p>Return <em>the sum of the three integers</em>.</p>\n\n<p>You may assume that each input would have exactly one solution.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,2,1,-4], target = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0], target = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 500</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10104,
        "dislikes": 536,
        "similarQuestions": "[{\"title\": \"3Sum\", \"titleSlug\": \"3sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"3Sum Smaller\", \"titleSlug\": \"3sum-smaller\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1141602, \"totalSubmissionRaw\": 2501983, \"acRate\": \"45.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "3sum",
          "title": "3Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "3sum-smaller",
          "title": "3Sum Smaller",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "letter-combinations-of-a-phone-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "17",
        "title": "Letter Combinations of a Phone Number",
        "titleSlug": "letter-combinations-of-a-phone-number",
        "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 17719,
        "dislikes": 931,
        "similarQuestions": "[{\"title\": \"Generate Parentheses\", \"titleSlug\": \"generate-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Watch\", \"titleSlug\": \"binary-watch\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Number of Texts\", \"titleSlug\": \"count-number-of-texts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 1853956, \"totalSubmissionRaw\": 3120648, \"acRate\": \"59.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "generate-parentheses",
          "title": "Generate Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum",
          "title": "Combination Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "binary-watch",
          "title": "Binary Watch",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-number-of-texts",
          "title": "Count Number of Texts",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "4sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "18",
        "title": "4Sum",
        "titleSlug": "4sum",
        "content": "<p>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= a, b, c, d&nbsp;&lt; n</code></li>\n\t<li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.</li>\n\t<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,-1,0,-2,2], target = 0\n<strong>Output:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2], target = 8\n<strong>Output:</strong> [[2,2,2,2]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10820,
        "dislikes": 1307,
        "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"3Sum\", \"titleSlug\": \"3sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"4Sum II\", \"titleSlug\": \"4sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Special Quadruplets\", \"titleSlug\": \"count-special-quadruplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"868K\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 868025, \"totalSubmissionRaw\": 2411730, \"acRate\": \"36.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum",
          "title": "Two Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "3sum",
          "title": "3Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "4sum-ii",
          "title": "4Sum II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-special-quadruplets",
          "title": "Count Special Quadruplets",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "remove-nth-node-from-end-of-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "19",
        "title": "Remove Nth Node From End of List",
        "titleSlug": "remove-nth-node-from-end-of-list",
        "content": "<p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], n = 2\n<strong>Output:</strong> [1,2,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1], n = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,2], n = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>sz</code>.</li>\n\t<li><code>1 &lt;= sz &lt;= 30</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do this in one pass?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 17721,
        "dislikes": 738,
        "similarQuestions": "[{\"title\": \"Swapping Nodes in a Linked List\", \"titleSlug\": \"swapping-nodes-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Delete N Nodes After M Nodes of a Linked List\", \"titleSlug\": \"delete-n-nodes-after-m-nodes-of-a-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Delete the Middle Node of a Linked List\", \"titleSlug\": \"delete-the-middle-node-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"2.4M\", \"totalSubmission\": \"5.5M\", \"totalAcceptedRaw\": 2369695, \"totalSubmissionRaw\": 5463493, \"acRate\": \"43.4%\"}",
        "hints": [
          "Maintain two pointers and update one with a delay of n steps."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "swapping-nodes-in-a-linked-list",
          "title": "Swapping Nodes in a Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "delete-n-nodes-after-m-nodes-of-a-linked-list",
          "title": "Delete N Nodes After M Nodes of a Linked List",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "delete-the-middle-node-of-a-linked-list",
          "title": "Delete the Middle Node of a Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Maintain two pointers and update one with a delay of n steps."
      ],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "valid-parentheses": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "20",
        "title": "Valid Parentheses",
        "titleSlug": "valid-parentheses",
        "content": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()[]{}&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(]&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 22969,
        "dislikes": 1605,
        "similarQuestions": "[{\"title\": \"Generate Parentheses\", \"titleSlug\": \"generate-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Valid Parentheses\", \"titleSlug\": \"longest-valid-parentheses\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Remove Invalid Parentheses\", \"titleSlug\": \"remove-invalid-parentheses\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check If Word Is Valid After Substitutions\", \"titleSlug\": \"check-if-word-is-valid-after-substitutions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if a Parentheses String Can Be Valid\", \"titleSlug\": \"check-if-a-parentheses-string-can-be-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Move Pieces to Obtain a String\", \"titleSlug\": \"move-pieces-to-obtain-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"4.1M\", \"totalSubmission\": \"10.2M\", \"totalAcceptedRaw\": 4099890, \"totalSubmissionRaw\": 10168418, \"acRate\": \"40.3%\"}",
        "hints": [
          "Use a stack of characters.",
          "When you encounter an opening bracket, push it to the top of the stack.",
          "When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "generate-parentheses",
          "title": "Generate Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-valid-parentheses",
          "title": "Longest Valid Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "remove-invalid-parentheses",
          "title": "Remove Invalid Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "check-if-word-is-valid-after-substitutions",
          "title": "Check If Word Is Valid After Substitutions",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "check-if-a-parentheses-string-can-be-valid",
          "title": "Check if a Parentheses String Can Be Valid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "move-pieces-to-obtain-a-string",
          "title": "Move Pieces to Obtain a String",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Use a stack of characters.",
        "When you encounter an opening bracket, push it to the top of the stack.",
        "When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "merge-two-sorted-lists": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "21",
        "title": "Merge Two Sorted Lists",
        "titleSlug": "merge-two-sorted-lists",
        "content": "<p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p>\n\n<p>Merge the two lists into one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p>\n\n<p>Return <em>the head of the merged linked list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" style=\"width: 662px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> list1 = [1,2,4], list2 = [1,3,4]\n<strong>Output:</strong> [1,1,2,3,4,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [], list2 = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [], list2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 20771,
        "dislikes": 1960,
        "similarQuestions": "[{\"title\": \"Merge k Sorted Lists\", \"titleSlug\": \"merge-k-sorted-lists\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Merge Sorted Array\", \"titleSlug\": \"merge-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sort List\", \"titleSlug\": \"sort-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Word Distance II\", \"titleSlug\": \"shortest-word-distance-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add Two Polynomials Represented as Linked Lists\", \"titleSlug\": \"add-two-polynomials-represented-as-linked-lists\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subsequence Between Sorted Arrays\", \"titleSlug\": \"longest-common-subsequence-between-sorted-arrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Merge Two 2D Arrays by Summing Values\", \"titleSlug\": \"merge-two-2d-arrays-by-summing-values\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"3.8M\", \"totalSubmission\": \"6M\", \"totalAcceptedRaw\": 3784523, \"totalSubmissionRaw\": 5950161, \"acRate\": \"63.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "merge-k-sorted-lists",
          "title": "Merge k Sorted Lists",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "merge-sorted-array",
          "title": "Merge Sorted Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-list",
          "title": "Sort List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-word-distance-ii",
          "title": "Shortest Word Distance II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-polynomials-represented-as-linked-lists",
          "title": "Add Two Polynomials Represented as Linked Lists",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-common-subsequence-between-sorted-arrays",
          "title": "Longest Common Subsequence Between Sorted Arrays",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "merge-two-2d-arrays-by-summing-values",
          "title": "Merge Two 2D Arrays by Summing Values",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "generate-parentheses": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "22",
        "title": "Generate Parentheses",
        "titleSlug": "generate-parentheses",
        "content": "<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 20243,
        "dislikes": 853,
        "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check if a Parentheses String Can Be Valid\", \"titleSlug\": \"check-if-a-parentheses-string-can-be-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.2M\", \"totalAcceptedRaw\": 1646136, \"totalSubmissionRaw\": 2229056, \"acRate\": \"73.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "letter-combinations-of-a-phone-number",
          "title": "Letter Combinations of a Phone Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "valid-parentheses",
          "title": "Valid Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "check-if-a-parentheses-string-can-be-valid",
          "title": "Check if a Parentheses String Can Be Valid",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "merge-k-sorted-lists": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "23",
        "title": "Merge k Sorted Lists",
        "titleSlug": "merge-k-sorted-lists",
        "content": "<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>\n\n<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>Output:</strong> [1,1,2,3,4,4,5,6]\n<strong>Explanation:</strong> The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[]]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>k == lists.length</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li>The sum of <code>lists[i].length</code> will not exceed <code>10<sup>4</sup></code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 18782,
        "dislikes": 680,
        "similarQuestions": "[{\"title\": \"Merge Two Sorted Lists\", \"titleSlug\": \"merge-two-sorted-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Ugly Number II\", \"titleSlug\": \"ugly-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Subarrays With Maximum Bitwise OR\", \"titleSlug\": \"smallest-subarrays-with-maximum-bitwise-or\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Merge Sort", "slug": "merge-sort" }
        ],
        "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 1835456, \"totalSubmissionRaw\": 3554378, \"acRate\": \"51.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "merge-two-sorted-lists",
          "title": "Merge Two Sorted Lists",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ugly-number-ii",
          "title": "Ugly Number II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-subarrays-with-maximum-bitwise-or",
          "title": "Smallest Subarrays With Maximum Bitwise OR",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Merge Sort", "slug": "merge-sort" }
      ]
    }
  },
  "swap-nodes-in-pairs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "24",
        "title": "Swap Nodes in Pairs",
        "titleSlug": "swap-nodes-in-pairs",
        "content": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head. You must solve the problem without&nbsp;modifying the values in the list&#39;s nodes (i.e., only nodes themselves may be changed.)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" style=\"width: 422px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4]\n<strong>Output:</strong> [2,1,4,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the&nbsp;list&nbsp;is in the range <code>[0, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11521,
        "dislikes": 419,
        "similarQuestions": "[{\"title\": \"Reverse Nodes in k-Group\", \"titleSlug\": \"reverse-nodes-in-k-group\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Swapping Nodes in a Linked List\", \"titleSlug\": \"swapping-nodes-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1272421, \"totalSubmissionRaw\": 2001916, \"acRate\": \"63.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "reverse-nodes-in-k-group",
          "title": "Reverse Nodes in k-Group",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "swapping-nodes-in-a-linked-list",
          "title": "Swapping Nodes in a Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "reverse-nodes-in-k-group": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "25",
        "title": "Reverse Nodes in k-Group",
        "titleSlug": "reverse-nodes-in-k-group",
        "content": "<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p>\n\n<p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p>\n\n<p>You may not alter the values in the list&#39;s nodes, only nodes themselves may be changed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [2,1,4,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 3\n<strong>Output:</strong> [3,2,1,4,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you solve the problem in <code>O(1)</code> extra memory space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 13003,
        "dislikes": 641,
        "similarQuestions": "[{\"title\": \"Swap Nodes in Pairs\", \"titleSlug\": \"swap-nodes-in-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Swapping Nodes in a Linked List\", \"titleSlug\": \"swapping-nodes-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reverse Nodes in Even Length Groups\", \"titleSlug\": \"reverse-nodes-in-even-length-groups\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"831.2K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 831235, \"totalSubmissionRaw\": 1448040, \"acRate\": \"57.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "swap-nodes-in-pairs",
          "title": "Swap Nodes in Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "swapping-nodes-in-a-linked-list",
          "title": "Swapping Nodes in a Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-nodes-in-even-length-groups",
          "title": "Reverse Nodes in Even Length Groups",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "remove-duplicates-from-sorted-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "26",
        "title": "Remove Duplicates from Sorted Array",
        "titleSlug": "remove-duplicates-from-sorted-array",
        "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>. Then return <em>the number of unique elements in </em><code>nums</code>.</p>\n\n<p>Consider the number of unique elements of <code>nums</code> to be <code>k</code>, to get accepted, you need to do the following things:</p>\n\n<ul>\n\t<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the unique elements in the order they were present in <code>nums</code> initially. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>\n\t<li>Return <code>k</code>.</li>\n</ul>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 2, nums = [1,2,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>Output:</strong> 5, nums = [0,1,2,3,4,_,_,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 13408,
        "dislikes": 17711,
        "similarQuestions": "[{\"title\": \"Remove Element\", \"titleSlug\": \"remove-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Remove Duplicates from Sorted Array II\", \"titleSlug\": \"remove-duplicates-from-sorted-array-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Apply Operations to an Array\", \"titleSlug\": \"apply-operations-to-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Distances\", \"titleSlug\": \"sum-of-distances\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"3.8M\", \"totalSubmission\": \"6.9M\", \"totalAcceptedRaw\": 3751817, \"totalSubmissionRaw\": 6934605, \"acRate\": \"54.1%\"}",
        "hints": [
          "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_rem_dup.png\" width=\"500\"/>",
          "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
          "Essentially, once an element is encountered, you simply need to <b>bypass</b> its duplicates and move on to the next unique element."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "remove-element",
          "title": "Remove Element",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-duplicates-from-sorted-array-ii",
          "title": "Remove Duplicates from Sorted Array II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "apply-operations-to-an-array",
          "title": "Apply Operations to an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-distances",
          "title": "Sum of Distances",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_rem_dup.png\" width=\"500\"/>",
        "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
        "Essentially, once an element is encountered, you simply need to <b>bypass</b> its duplicates and move on to the next unique element."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "remove-element": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "27",
        "title": "Remove Element",
        "titleSlug": "remove-element",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>. The order of the elements may be changed. Then return <em>the number of elements in </em><code>nums</code><em> which are not equal to </em><code>val</code>.</p>\n\n<p>Consider the number of elements in <code>nums</code> which are not equal to <code>val</code> be <code>k</code>, to get accepted, you need to do the following things:</p>\n\n<ul>\n\t<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>\n\t<li>Return <code>k</code>.</li>\n</ul>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,2,3], val = 3\n<strong>Output:</strong> 2, nums = [2,2,_,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,2,3,0,4,2], val = 2\n<strong>Output:</strong> 5, nums = [0,1,4,0,3,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1756,
        "dislikes": 2608,
        "similarQuestions": "[{\"title\": \"Remove Duplicates from Sorted Array\", \"titleSlug\": \"remove-duplicates-from-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Remove Linked List Elements\", \"titleSlug\": \"remove-linked-list-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Move Zeroes\", \"titleSlug\": \"move-zeroes\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"2.4M\", \"totalSubmission\": \"4.4M\", \"totalAcceptedRaw\": 2431222, \"totalSubmissionRaw\": 4383041, \"acRate\": \"55.5%\"}",
        "hints": [
          "The problem statement clearly asks us to modify the array in-place and it also says that the element beyond the new length of the array can be anything. Given an element, we need to remove all the occurrences of it from the array. We don't technically need to <b>remove</b> that element per-say, right?",
          "We can move all the occurrences of this element to the end of the array. Use two pointers!\r\n<br><img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_remove_element.png\" width=\"500\"/>",
          "Yet another direction of thought is to consider the elements to be removed as non-existent. In a single pass, if we keep copying the visible elements in-place, that should also solve this problem for us."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "remove-duplicates-from-sorted-array",
          "title": "Remove Duplicates from Sorted Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "remove-linked-list-elements",
          "title": "Remove Linked List Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "move-zeroes",
          "title": "Move Zeroes",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The problem statement clearly asks us to modify the array in-place and it also says that the element beyond the new length of the array can be anything. Given an element, we need to remove all the occurrences of it from the array. We don't technically need to <b>remove</b> that element per-say, right?",
        "We can move all the occurrences of this element to the end of the array. Use two pointers!\r\n<br><img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_remove_element.png\" width=\"500\"/>",
        "Yet another direction of thought is to consider the elements to be removed as non-existent. In a single pass, if we keep copying the visible elements in-place, that should also solve this problem for us."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "find-the-index-of-the-first-occurrence-in-a-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "28",
        "title": "Find the Index of the First Occurrence in a String",
        "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
        "content": "<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;sad&quot; occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5253,
        "dislikes": 323,
        "similarQuestions": "[{\"title\": \"Shortest Palindrome\", \"titleSlug\": \"shortest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Repeated Substring Pattern\", \"titleSlug\": \"repeated-substring-pattern\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "String Matching", "slug": "string-matching" }
        ],
        "stats": "{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"5.2M\", \"totalAcceptedRaw\": 2161661, \"totalSubmissionRaw\": 5238256, \"acRate\": \"41.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "shortest-palindrome",
          "title": "Shortest Palindrome",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "repeated-substring-pattern",
          "title": "Repeated Substring Pattern",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "String Matching", "slug": "string-matching" }
      ]
    }
  },
  "divide-two-integers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "29",
        "title": "Divide Two Integers",
        "titleSlug": "divide-two-integers",
        "content": "<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers <strong>without</strong> using multiplication, division, and mod operator.</p>\n\n<p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>8.345</code> would be truncated to <code>8</code>, and <code>-2.7335</code> would be truncated to <code>-2</code>.</p>\n\n<p>Return <em>the <strong>quotient</strong> after dividing </em><code>dividend</code><em> by </em><code>divisor</code>.</p>\n\n<p><strong>Note: </strong>Assume we are dealing with an environment that could only store integers within the <strong>32-bit</strong> signed integer range: <code>[&minus;2<sup>31</sup>, 2<sup>31</sup> &minus; 1]</code>. For this problem, if the quotient is <strong>strictly greater than</strong> <code>2<sup>31</sup> - 1</code>, then return <code>2<sup>31</sup> - 1</code>, and if the quotient is <strong>strictly less than</strong> <code>-2<sup>31</sup></code>, then return <code>-2<sup>31</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 10, divisor = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 10/3 = 3.33333.. which is truncated to 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 7, divisor = -3\n<strong>Output:</strong> -2\n<strong>Explanation:</strong> 7/-3 = -2.33333.. which is truncated to -2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>divisor != 0</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4834,
        "dislikes": 14493,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"679.3K\", \"totalSubmission\": \"4M\", \"totalAcceptedRaw\": 679293, \"totalSubmissionRaw\": 3955044, \"acRate\": \"17.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "substring-with-concatenation-of-all-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "30",
        "title": "Substring with Concatenation of All Words",
        "titleSlug": "substring-with-concatenation-of-all-words",
        "content": "<p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of <strong>the same length</strong>.</p>\n\n<p>A <strong>concatenated substring</strong> in <code>s</code> is a substring that contains all the strings of any permutation of <code>words</code> concatenated.</p>\n\n<ul>\n\t<li>For example, if <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>, then <code>&quot;abcdef&quot;</code>, <code>&quot;abefcd&quot;</code>, <code>&quot;cdabef&quot;</code>, <code>&quot;cdefab&quot;</code>, <code>&quot;efabcd&quot;</code>, and <code>&quot;efcdab&quot;</code> are all concatenated strings. <code>&quot;acdbef&quot;</code> is not a concatenated substring because it is not the concatenation of any permutation of <code>words</code>.</li>\n</ul>\n\n<p>Return <em>the starting indices of all the concatenated substrings in </em><code>s</code>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]\n<strong>Output:</strong> [0,9]\n<strong>Explanation:</strong> Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is &quot;barfoo&quot;. It is the concatenation of [&quot;bar&quot;,&quot;foo&quot;] which is a permutation of words.\nThe substring starting at 9 is &quot;foobar&quot;. It is the concatenation of [&quot;foo&quot;,&quot;bar&quot;] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]\n<strong>Output:</strong> [6,9,12]\n<strong>Explanation:</strong> Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is &quot;foobarthe&quot;. It is the concatenation of [&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;] which is a permutation of words.\nThe substring starting at 9 is &quot;barthefoo&quot;. It is the concatenation of [&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;] which is a permutation of words.\nThe substring starting at 12 is &quot;thefoobar&quot;. It is the concatenation of [&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;] which is a permutation of words.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1561,
        "dislikes": 165,
        "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"400.2K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 400222, \"totalSubmissionRaw\": 1258171, \"acRate\": \"31.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-substring",
          "title": "Minimum Window Substring",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "next-permutation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "31",
        "title": "Next Permutation",
        "titleSlug": "next-permutation",
        "content": "<p>A <strong>permutation</strong> of an array of integers is an arrangement of its members into a sequence or linear order.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [1,2,3]</code>, the following are all the permutations of <code>arr</code>: <code>[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.</li>\n</ul>\n\n<p>The <strong>next permutation</strong> of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the <strong>next permutation</strong> of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</p>\n\n<ul>\n\t<li>For example, the next permutation of <code>arr = [1,2,3]</code> is <code>[1,3,2]</code>.</li>\n\t<li>Similarly, the next permutation of <code>arr = [2,3,1]</code> is <code>[3,1,2]</code>.</li>\n\t<li>While the next permutation of <code>arr = [3,2,1]</code> is <code>[1,2,3]</code> because <code>[3,2,1]</code> does not have a lexicographical larger rearrangement.</li>\n</ul>\n\n<p>Given an array of integers <code>nums</code>, <em>find the next permutation of</em> <code>nums</code>.</p>\n\n<p>The replacement must be <strong><a href=\"http://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a></strong> and use only constant extra memory.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,5]\n<strong>Output:</strong> [1,5,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 17510,
        "dislikes": 4462,
        "similarQuestions": "[{\"title\": \"Permutations\", \"titleSlug\": \"permutations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations II\", \"titleSlug\": \"permutations-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutation Sequence\", \"titleSlug\": \"permutation-sequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation II\", \"titleSlug\": \"palindrome-permutation-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Adjacent Swaps to Reach the Kth Smallest Number\", \"titleSlug\": \"minimum-adjacent-swaps-to-reach-the-kth-smallest-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 1215886, \"totalSubmissionRaw\": 3114645, \"acRate\": \"39.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "permutations",
          "title": "Permutations",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutations-ii",
          "title": "Permutations II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "permutation-sequence",
          "title": "Permutation Sequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "palindrome-permutation-ii",
          "title": "Palindrome Permutation II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
          "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "longest-valid-parentheses": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "32",
        "title": "Longest Valid Parentheses",
        "titleSlug": "longest-valid-parentheses",
        "content": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, return <em>the length of the longest valid (well-formed) parentheses </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 11986,
        "dislikes": 380,
        "similarQuestions": "[{\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"684.7K\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 684718, \"totalSubmissionRaw\": 2043103, \"acRate\": \"33.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-parentheses",
          "title": "Valid Parentheses",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "search-in-rotated-sorted-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "33",
        "title": "Search in Rotated Sorted Array",
        "titleSlug": "search-in-rotated-sorted-array",
        "content": "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>\n\n<p>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is an ascending array that is possibly rotated.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 25112,
        "dislikes": 1475,
        "similarQuestions": "[{\"title\": \"Search in Rotated Sorted Array II\", \"titleSlug\": \"search-in-rotated-sorted-array-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Minimum in Rotated Sorted Array\", \"titleSlug\": \"find-minimum-in-rotated-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Pour Water Between Buckets to Make Water Levels Equal\", \"titleSlug\": \"pour-water-between-buckets-to-make-water-levels-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"6.2M\", \"totalAcceptedRaw\": 2477945, \"totalSubmissionRaw\": 6157229, \"acRate\": \"40.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "search-in-rotated-sorted-array-ii",
          "title": "Search in Rotated Sorted Array II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-minimum-in-rotated-sorted-array",
          "title": "Find Minimum in Rotated Sorted Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "pour-water-between-buckets-to-make-water-levels-equal",
          "title": "Pour Water Between Buckets to Make Water Levels Equal",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "find-first-and-last-position-of-element-in-sorted-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "34",
        "title": "Find First and Last Position of Element in Sorted Array",
        "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
        "content": "<p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p>\n\n<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8\n<strong>Output:</strong> [3,4]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6\n<strong>Output:</strong> [-1,-1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [], target = 0\n<strong>Output:</strong> [-1,-1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums</code> is a non-decreasing array.</li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 19723,
        "dislikes": 477,
        "similarQuestions": "[{\"title\": \"First Bad Version\", \"titleSlug\": \"first-bad-version\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Plates Between Candles\", \"titleSlug\": \"plates-between-candles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Target Indices After Sorting Array\", \"titleSlug\": \"find-target-indices-after-sorting-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"4.3M\", \"totalAcceptedRaw\": 1857839, \"totalSubmissionRaw\": 4254502, \"acRate\": \"43.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "first-bad-version",
          "title": "First Bad Version",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "plates-between-candles",
          "title": "Plates Between Candles",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-target-indices-after-sorting-array",
          "title": "Find Target Indices After Sorting Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "search-insert-position": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "35",
        "title": "Search Insert Position",
        "titleSlug": "search-insert-position",
        "content": "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 5\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 7\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 15353,
        "dislikes": 672,
        "similarQuestions": "[{\"title\": \"First Bad Version\", \"titleSlug\": \"first-bad-version\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"2.6M\", \"totalSubmission\": \"5.7M\", \"totalAcceptedRaw\": 2583845, \"totalSubmissionRaw\": 5745600, \"acRate\": \"45.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "first-bad-version",
          "title": "First Bad Version",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "valid-sudoku": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "36",
        "title": "Valid Sudoku",
        "titleSlug": "valid-sudoku",
        "content": "<p>Determine if a&nbsp;<code>9 x 9</code> Sudoku board&nbsp;is valid.&nbsp;Only the filled cells need to be validated&nbsp;<strong>according to the following rules</strong>:</p>\n\n<ol>\n\t<li>Each row&nbsp;must contain the&nbsp;digits&nbsp;<code>1-9</code> without repetition.</li>\n\t<li>Each column must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\n\t<li>Each of the nine&nbsp;<code>3 x 3</code> sub-boxes of the grid must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\n\t<li>Only the filled cells need to be validated according to the mentioned&nbsp;rules.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" />\n<pre>\n<strong>Input:</strong> board = \n[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]\n,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]\n,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]\n,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]\n,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = \n[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]\n,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]\n,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]\n,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]\n,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]\n,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Same as Example 1, except with the <strong>5</strong> in the top left corner being modified to <strong>8</strong>. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 9</code></li>\n\t<li><code>board[i].length == 9</code></li>\n\t<li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10126,
        "dislikes": 1049,
        "similarQuestions": "[{\"title\": \"Sudoku Solver\", \"titleSlug\": \"sudoku-solver\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if Every Row and Column Contains All Numbers\", \"titleSlug\": \"check-if-every-row-and-column-contains-all-numbers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 1344626, \"totalSubmissionRaw\": 2277428, \"acRate\": \"59.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "sudoku-solver",
          "title": "Sudoku Solver",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-every-row-and-column-contains-all-numbers",
          "title": "Check if Every Row and Column Contains All Numbers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "sudoku-solver": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "37",
        "title": "Sudoku Solver",
        "titleSlug": "sudoku-solver",
        "content": "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\n\n<p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p>\n\n<ol>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\n</ol>\n\n<p>The <code>&#39;.&#39;</code> character indicates empty cells.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> [[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Explanation:</strong>&nbsp;The input board is shown above and the only valid solution is shown below:\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" />\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 9</code></li>\n\t<li><code>board[i].length == 9</code></li>\n\t<li><code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the input board has only one solution.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 9112,
        "dislikes": 235,
        "similarQuestions": "[{\"title\": \"Valid Sudoku\", \"titleSlug\": \"valid-sudoku\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Unique Paths III\", \"titleSlug\": \"unique-paths-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"530.9K\", \"totalSubmission\": \"886.9K\", \"totalAcceptedRaw\": 530897, \"totalSubmissionRaw\": 886919, \"acRate\": \"59.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "valid-sudoku",
          "title": "Valid Sudoku",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "unique-paths-iii",
          "title": "Unique Paths III",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "count-and-say": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "38",
        "title": "Count and Say",
        "titleSlug": "count-and-say",
        "content": "<p>The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula:</p>\n\n<ul>\n\t<li><code>countAndSay(1) = &quot;1&quot;</code></li>\n\t<li><code>countAndSay(n)</code> is the way you would &quot;say&quot; the digit string from <code>countAndSay(n-1)</code>, which is then converted into a different digit string.</li>\n</ul>\n\n<p>To determine how you &quot;say&quot; a digit string, split it into the <strong>minimal</strong> number of substrings such that each substring contains exactly <strong>one</strong> unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.</p>\n\n<p>For example, the saying and conversion for digit string <code>&quot;3322251&quot;</code>:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg\" style=\"width: 581px; height: 172px;\" />\n<p>Given a positive integer <code>n</code>, return <em>the </em><code>n<sup>th</sup></code><em> term of the <strong>count-and-say</strong> sequence</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> &quot;1&quot;\n<strong>Explanation:</strong> This is the base case.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> &quot;1211&quot;\n<strong>Explanation:</strong>\ncountAndSay(1) = &quot;1&quot;\ncountAndSay(2) = say &quot;1&quot; = one 1 = &quot;11&quot;\ncountAndSay(3) = say &quot;11&quot; = two 1&#39;s = &quot;21&quot;\ncountAndSay(4) = say &quot;21&quot; = one 2 + one 1 = &quot;12&quot; + &quot;11&quot; = &quot;1211&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3708,
        "dislikes": 7768,
        "similarQuestions": "[{\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"String Compression\", \"titleSlug\": \"string-compression\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"862.6K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 862601, \"totalSubmissionRaw\": 1600051, \"acRate\": \"53.9%\"}",
        "hints": [
          "Create a helper function that maps an integer to pairs of its digits and their frequencies. For example, if you call this function with \"223314444411\", then it maps it to an array of pairs [[2,2], [3,2], [1,1], [4,5], [1, 2]].",
          "Create another helper function that takes the array of pairs and creates a new integer. For example, if you call this function with [[2,2], [3,2], [1,1], [4,5], [1, 2]], it should create \"22\"+\"23\"+\"11\"+\"54\"+\"21\" = \"2223115421\".",
          "Now, with the two helper functions, you can start with \"1\" and call the two functions alternatively n-1 times. The answer is the last integer you will obtain."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "encode-and-decode-strings",
          "title": "Encode and Decode Strings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "string-compression",
          "title": "String Compression",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Create a helper function that maps an integer to pairs of its digits and their frequencies. For example, if you call this function with \"223314444411\", then it maps it to an array of pairs [[2,2], [3,2], [1,1], [4,5], [1, 2]].",
        "Create another helper function that takes the array of pairs and creates a new integer. For example, if you call this function with [[2,2], [3,2], [1,1], [4,5], [1, 2]], it should create \"22\"+\"23\"+\"11\"+\"54\"+\"21\" = \"2223115421\".",
        "Now, with the two helper functions, you can start with \"1\" and call the two functions alternatively n-1 times. The answer is the last integer you will obtain."
      ],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "combination-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "39",
        "title": "Combination Sum",
        "titleSlug": "combination-sum",
        "content": "<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p>\n\n<p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the <span data-keyword=\"frequency-array\">frequency</span> of at least one of the chosen numbers is different.</p>\n\n<p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,6,7], target = 7\n<strong>Output:</strong> [[2,2,3],[7]]\n<strong>Explanation:</strong>\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,5], target = 8\n<strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2], target = 1\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 30</code></li>\n\t<li><code>2 &lt;= candidates[i] &lt;= 40</code></li>\n\t<li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 40</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 18063,
        "dislikes": 373,
        "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum II\", \"titleSlug\": \"combination-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combinations\", \"titleSlug\": \"combinations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum III\", \"titleSlug\": \"combination-sum-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Factor Combinations\", \"titleSlug\": \"factor-combinations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Combination Sum IV\", \"titleSlug\": \"combination-sum-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1739766, \"totalSubmissionRaw\": 2466324, \"acRate\": \"70.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "letter-combinations-of-a-phone-number",
          "title": "Letter Combinations of a Phone Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum-ii",
          "title": "Combination Sum II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "combinations",
          "title": "Combinations",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum-iii",
          "title": "Combination Sum III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "factor-combinations",
          "title": "Factor Combinations",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum-iv",
          "title": "Combination Sum IV",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "combination-sum-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "40",
        "title": "Combination Sum II",
        "titleSlug": "combination-sum-ii",
        "content": "<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sum to <code>target</code>.</p>\n\n<p>Each number in <code>candidates</code>&nbsp;may only be used <strong>once</strong> in the combination.</p>\n\n<p><strong>Note:</strong>&nbsp;The solution set must not contain duplicate combinations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [10,1,2,7,6,1,5], target = 8\n<strong>Output:</strong> \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,5,2,1,2], target = 5\n<strong>Output:</strong> \n[\n[1,2,2],\n[5]\n]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;candidates.length &lt;= 100</code></li>\n\t<li><code>1 &lt;=&nbsp;candidates[i] &lt;= 50</code></li>\n\t<li><code>1 &lt;= target &lt;= 30</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9974,
        "dislikes": 265,
        "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"877.7K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 877675, \"totalSubmissionRaw\": 1625541, \"acRate\": \"54.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum",
          "title": "Combination Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "first-missing-positive": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "41",
        "title": "First Missing Positive",
        "titleSlug": "first-missing-positive",
        "content": "<p>Given an unsorted integer array <code>nums</code>, return the smallest missing positive integer.</p>\n\n<p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The numbers in the range [1,2] are all in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1 is in the array but 2 is missing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The smallest positive integer 1 is missing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 15535,
        "dislikes": 1737,
        "similarQuestions": "[{\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All Numbers Disappeared in an Array\", \"titleSlug\": \"find-all-numbers-disappeared-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Couples Holding Hands\", \"titleSlug\": \"couples-holding-hands\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Smallest Number in Infinite Set\", \"titleSlug\": \"smallest-number-in-infinite-set\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range I\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Missing Non-negative Integer After Operations\", \"titleSlug\": \"smallest-missing-non-negative-integer-after-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range II\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"996.5K\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 996531, \"totalSubmissionRaw\": 2655667, \"acRate\": \"37.5%\"}",
        "hints": [
          "Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?",
          "We don't care about duplicates or non-positive integers",
          "Remember that O(2n) = O(n)"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "missing-number",
          "title": "Missing Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-duplicate-number",
          "title": "Find the Duplicate Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-all-numbers-disappeared-in-an-array",
          "title": "Find All Numbers Disappeared in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "couples-holding-hands",
          "title": "Couples Holding Hands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-number-in-infinite-set",
          "title": "Smallest Number in Infinite Set",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i",
          "title": "Maximum Number of Integers to Choose From a Range I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-missing-non-negative-integer-after-operations",
          "title": "Smallest Missing Non-negative Integer After Operations",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii",
          "title": "Maximum Number of Integers to Choose From a Range II",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?",
        "We don't care about duplicates or non-positive integers",
        "Remember that O(2n) = O(n)"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "trapping-rain-water": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "42",
        "title": "Trapping Rain Water",
        "titleSlug": "trapping-rain-water",
        "content": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 30142,
        "dislikes": 448,
        "similarQuestions": "[{\"title\": \"Container With Most Water\", \"titleSlug\": \"container-with-most-water\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Product of Array Except Self\", \"titleSlug\": \"product-of-array-except-self\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Trapping Rain Water II\", \"titleSlug\": \"trapping-rain-water-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Pour Water\", \"titleSlug\": \"pour-water\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Value of an Ordered Triplet II\", \"titleSlug\": \"maximum-value-of-an-ordered-triplet-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"3M\", \"totalAcceptedRaw\": 1805064, \"totalSubmissionRaw\": 2989370, \"acRate\": \"60.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "container-with-most-water",
          "title": "Container With Most Water",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "product-of-array-except-self",
          "title": "Product of Array Except Self",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "trapping-rain-water-ii",
          "title": "Trapping Rain Water II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "pour-water",
          "title": "Pour Water",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-value-of-an-ordered-triplet-ii",
          "title": "Maximum Value of an Ordered Triplet II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "multiply-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "43",
        "title": "Multiply Strings",
        "titleSlug": "multiply-strings",
        "content": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\n\n<p><strong>Note:</strong>&nbsp;You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> num1 = \"2\", num2 = \"3\"\n<strong>Output:</strong> \"6\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> num1 = \"123\", num2 = \"456\"\n<strong>Output:</strong> \"56088\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of digits only.</li>\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number <code>0</code> itself.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6809,
        "dislikes": 3175,
        "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Plus One\", \"titleSlug\": \"plus-one\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add Binary\", \"titleSlug\": \"add-binary\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add Strings\", \"titleSlug\": \"add-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Apply Discount to Prices\", \"titleSlug\": \"apply-discount-to-prices\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"735.3K\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 735341, \"totalSubmissionRaw\": 1847874, \"acRate\": \"39.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-numbers",
          "title": "Add Two Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "plus-one",
          "title": "Plus One",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-binary",
          "title": "Add Binary",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-strings",
          "title": "Add Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "apply-discount-to-prices",
          "title": "Apply Discount to Prices",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "wildcard-matching": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "44",
        "title": "Wildcard Matching",
        "titleSlug": "wildcard-matching",
        "content": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;?&#39;</code> Matches any single character.</li>\n\t<li><code>&#39;*&#39;</code> Matches any sequence of characters (including the empty sequence).</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cb&quot;, p = &quot;?a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;?&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 7938,
        "dislikes": 323,
        "similarQuestions": "[{\"title\": \"Regular Expression Matching\", \"titleSlug\": \"regular-expression-matching\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"528.9K\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 528855, \"totalSubmissionRaw\": 1927147, \"acRate\": \"27.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "regular-expression-matching",
          "title": "Regular Expression Matching",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "jump-game-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "45",
        "title": "Jump Game II",
        "titleSlug": "jump-game-ii",
        "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p>\n\n<p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= j &lt;= nums[i]</code> and</li>\n\t<li><code>i + j &lt; n</code></li>\n</ul>\n\n<p>Return <em>the minimum number of jumps to reach </em><code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,0,1,4]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>It&#39;s guaranteed that you can reach <code>nums[n - 1]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 13870,
        "dislikes": 509,
        "similarQuestions": "[{\"title\": \"Jump Game\", \"titleSlug\": \"jump-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game III\", \"titleSlug\": \"jump-game-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VII\", \"titleSlug\": \"jump-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VIII\", \"titleSlug\": \"jump-game-viii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Visited Cells in a Grid\", \"titleSlug\": \"minimum-number-of-visited-cells-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Jumps to Reach the Last Index\", \"titleSlug\": \"maximum-number-of-jumps-to-reach-the-last-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Visit Array Positions to Maximize Score\", \"titleSlug\": \"visit-array-positions-to-maximize-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1088286, \"totalSubmissionRaw\": 2704124, \"acRate\": \"40.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game",
          "title": "Jump Game",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-iii",
          "title": "Jump Game III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-vii",
          "title": "Jump Game VII",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-viii",
          "title": "Jump Game VIII",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-visited-cells-in-a-grid",
          "title": "Minimum Number of Visited Cells in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
          "title": "Maximum Number of Jumps to Reach the Last Index",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "visit-array-positions-to-maximize-score",
          "title": "Visit Array Positions to Maximize Score",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "permutations": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "46",
        "title": "Permutations",
        "titleSlug": "permutations",
        "content": "<p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [[0,1],[1,0]]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 6</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 18379,
        "dislikes": 296,
        "similarQuestions": "[{\"title\": \"Next Permutation\", \"titleSlug\": \"next-permutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations II\", \"titleSlug\": \"permutations-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutation Sequence\", \"titleSlug\": \"permutation-sequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Combinations\", \"titleSlug\": \"combinations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1896631, \"totalSubmissionRaw\": 2442489, \"acRate\": \"77.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "next-permutation",
          "title": "Next Permutation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutations-ii",
          "title": "Permutations II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "permutation-sequence",
          "title": "Permutation Sequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "combinations",
          "title": "Combinations",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "permutations-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "47",
        "title": "Permutations II",
        "titleSlug": "permutations-ii",
        "content": "<p>Given a collection of numbers, <code>nums</code>,&nbsp;that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 8</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8265,
        "dislikes": 137,
        "similarQuestions": "[{\"title\": \"Next Permutation\", \"titleSlug\": \"next-permutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations\", \"titleSlug\": \"permutations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation II\", \"titleSlug\": \"palindrome-permutation-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Squareful Arrays\", \"titleSlug\": \"number-of-squareful-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"865.3K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 865290, \"totalSubmissionRaw\": 1480129, \"acRate\": \"58.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "next-permutation",
          "title": "Next Permutation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutations",
          "title": "Permutations",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "palindrome-permutation-ii",
          "title": "Palindrome Permutation II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-squareful-arrays",
          "title": "Number of Squareful Arrays",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "rotate-image": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "48",
        "title": "Rotate Image",
        "titleSlug": "rotate-image",
        "content": "<p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).</p>\n\n<p>You have to rotate the image <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg\" style=\"width: 500px; height: 188px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg\" style=\"width: 500px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n<strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16769,
        "dislikes": 748,
        "similarQuestions": "[{\"title\": \"Determine Whether Matrix Can Be Obtained By Rotation\", \"titleSlug\": \"determine-whether-matrix-can-be-obtained-by-rotation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1530725, \"totalSubmissionRaw\": 2089269, \"acRate\": \"73.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "determine-whether-matrix-can-be-obtained-by-rotation",
          "title": "Determine Whether Matrix Can Be Obtained By Rotation",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "group-anagrams": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "49",
        "title": "Group Anagrams",
        "titleSlug": "group-anagrams",
        "content": "<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n<strong>Output:</strong> [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> strs = [\"\"]\n<strong>Output:</strong> [[\"\"]]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> strs = [\"a\"]\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 17899,
        "dislikes": 536,
        "similarQuestions": "[{\"title\": \"Valid Anagram\", \"titleSlug\": \"valid-anagram\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Group Shifted Strings\", \"titleSlug\": \"group-shifted-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Resultant Array After Removing Anagrams\", \"titleSlug\": \"find-resultant-array-after-removing-anagrams\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Anagrams\", \"titleSlug\": \"count-anagrams\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"2.4M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 2430226, \"totalSubmissionRaw\": 3608576, \"acRate\": \"67.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-anagram",
          "title": "Valid Anagram",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "group-shifted-strings",
          "title": "Group Shifted Strings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-resultant-array-after-removing-anagrams",
          "title": "Find Resultant Array After Removing Anagrams",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-anagrams",
          "title": "Count Anagrams",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "powx-n": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "50",
        "title": "Pow(x, n)",
        "titleSlug": "powx-n",
        "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li>\n\t<li><code>n</code> is an integer.</li>\n\t<li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9153,
        "dislikes": 9030,
        "similarQuestions": "[{\"title\": \"Sqrt(x)\", \"titleSlug\": \"sqrtx\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Super Pow\", \"titleSlug\": \"super-pow\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Collisions of Monkeys on a Polygon\", \"titleSlug\": \"count-collisions-of-monkeys-on-a-polygon\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"4.3M\", \"totalAcceptedRaw\": 1483541, \"totalSubmissionRaw\": 4333445, \"acRate\": \"34.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "sqrtx",
          "title": "Sqrt(x)",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "super-pow",
          "title": "Super Pow",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-collisions-of-monkeys-on-a-polygon",
          "title": "Count Collisions of Monkeys on a Polygon",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "n-queens": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "51",
        "title": "N-Queens",
        "titleSlug": "n-queens",
        "content": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens puzzle</strong></em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>Each solution contains a distinct board configuration of the n-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space, respectively.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> [[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[&quot;Q&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 11751,
        "dislikes": 259,
        "similarQuestions": "[{\"title\": \"N-Queens II\", \"titleSlug\": \"n-queens-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Grid Illumination\", \"titleSlug\": \"grid-illumination\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"649.9K\", \"totalSubmission\": \"969.4K\", \"totalAcceptedRaw\": 649917, \"totalSubmissionRaw\": 969361, \"acRate\": \"67.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "n-queens-ii",
          "title": "N-Queens II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "grid-illumination",
          "title": "Grid Illumination",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "n-queens-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "52",
        "title": "N-Queens II",
        "titleSlug": "n-queens-ii",
        "content": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>the number of distinct solutions to the&nbsp;<strong>n-queens puzzle</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two distinct solutions to the 4-queens puzzle as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3704,
        "dislikes": 256,
        "similarQuestions": "[{\"title\": \"N-Queens\", \"titleSlug\": \"n-queens\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Backtracking", "slug": "backtracking" }],
        "stats": "{\"totalAccepted\": \"351.3K\", \"totalSubmission\": \"480.8K\", \"totalAcceptedRaw\": 351258, \"totalSubmissionRaw\": 480751, \"acRate\": \"73.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "n-queens",
          "title": "N-Queens",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Backtracking", "slug": "backtracking" }]
    }
  },
  "maximum-subarray": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "53",
        "title": "Maximum Subarray",
        "titleSlug": "maximum-subarray",
        "content": "<p>Given an integer array <code>nums</code>, find the <span data-keyword=\"subarray-nonempty\">subarray</span> with the largest sum, and return <em>its sum</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The subarray [4,-1,2,1] has the largest sum 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The subarray [1] has the largest sum 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,-1,7,8]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> The subarray [5,4,-1,7,8] has the largest sum 23.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 32868,
        "dislikes": 1374,
        "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock\", \"titleSlug\": \"best-time-to-buy-and-sell-stock\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Degree of an Array\", \"titleSlug\": \"degree-of-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Turbulent Subarray\", \"titleSlug\": \"longest-turbulent-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Score Of Spliced Array\", \"titleSlug\": \"maximum-score-of-spliced-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Absolute Sum of Any Subarray\", \"titleSlug\": \"maximum-absolute-sum-of-any-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Subarray Sum After One Operation\", \"titleSlug\": \"maximum-subarray-sum-after-one-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Substring With Largest Variance\", \"titleSlug\": \"substring-with-largest-variance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Subarrays With Score Less Than K\", \"titleSlug\": \"count-subarrays-with-score-less-than-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Value of a String in an Array\", \"titleSlug\": \"maximum-value-of-a-string-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Substring With Maximum Cost\", \"titleSlug\": \"find-the-substring-with-maximum-cost\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Items With the Maximum Sum\", \"titleSlug\": \"k-items-with-the-maximum-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"3.6M\", \"totalSubmission\": \"7.1M\", \"totalAcceptedRaw\": 3580187, \"totalSubmissionRaw\": 7089161, \"acRate\": \"50.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "best-time-to-buy-and-sell-stock",
          "title": "Best Time to Buy and Sell Stock",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-subarray",
          "title": "Maximum Product Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "degree-of-an-array",
          "title": "Degree of an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-turbulent-subarray",
          "title": "Longest Turbulent Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-score-of-spliced-array",
          "title": "Maximum Score Of Spliced Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-absolute-sum-of-any-subarray",
          "title": "Maximum Absolute Sum of Any Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-subarray-sum-after-one-operation",
          "title": "Maximum Subarray Sum After One Operation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "substring-with-largest-variance",
          "title": "Substring With Largest Variance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-subarrays-with-score-less-than-k",
          "title": "Count Subarrays With Score Less Than K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-value-of-a-string-in-an-array",
          "title": "Maximum Value of a String in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-substring-with-maximum-cost",
          "title": "Find the Substring With Maximum Cost",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "k-items-with-the-maximum-sum",
          "title": "K Items With the Maximum Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "spiral-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "54",
        "title": "Spiral Matrix",
        "titleSlug": "spiral-matrix",
        "content": "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n<strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 13998,
        "dislikes": 1218,
        "similarQuestions": "[{\"title\": \"Spiral Matrix II\", \"titleSlug\": \"spiral-matrix-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix III\", \"titleSlug\": \"spiral-matrix-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix IV\", \"titleSlug\": \"spiral-matrix-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1277882, \"totalSubmissionRaw\": 2645431, \"acRate\": \"48.3%\"}",
        "hints": [
          "Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do.",
          "We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column, and then we move inwards by 1 and repeat. That's all. That is all the simulation that we need.",
          "Think about when you want to switch the progress on one of the indexes. If you progress on i out of [i, j], you'll shift in the same column. Similarly, by changing values for j, you'd be shifting in the same row.\r\nAlso, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to simulate edge cases like a single column or a single row to see if anything breaks or not."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix-ii",
          "title": "Spiral Matrix II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix-iii",
          "title": "Spiral Matrix III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix-iv",
          "title": "Spiral Matrix IV",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do.",
        "We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column, and then we move inwards by 1 and repeat. That's all. That is all the simulation that we need.",
        "Think about when you want to switch the progress on one of the indexes. If you progress on i out of [i, j], you'll shift in the same column. Similarly, by changing values for j, you'd be shifting in the same row.\r\nAlso, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to simulate edge cases like a single column or a single row to see if anything breaks or not."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "jump-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "55",
        "title": "Jump Game",
        "titleSlug": "jump-game",
        "content": "<p>You are given an integer array <code>nums</code>. You are initially positioned at the array&#39;s <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p>\n\n<p>Return <code>true</code><em> if you can reach the last index, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,0,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 18438,
        "dislikes": 1105,
        "similarQuestions": "[{\"title\": \"Jump Game II\", \"titleSlug\": \"jump-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game III\", \"titleSlug\": \"jump-game-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VII\", \"titleSlug\": \"jump-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game VIII\", \"titleSlug\": \"jump-game-viii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Visited Cells in a Grid\", \"titleSlug\": \"minimum-number-of-visited-cells-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Largest Element in an Array after Merge Operations\", \"titleSlug\": \"largest-element-in-an-array-after-merge-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"4.4M\", \"totalAcceptedRaw\": 1679266, \"totalSubmissionRaw\": 4355841, \"acRate\": \"38.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-ii",
          "title": "Jump Game II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-iii",
          "title": "Jump Game III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-vii",
          "title": "Jump Game VII",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-viii",
          "title": "Jump Game VIII",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-visited-cells-in-a-grid",
          "title": "Minimum Number of Visited Cells in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "largest-element-in-an-array-after-merge-operations",
          "title": "Largest Element in an Array after Merge Operations",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "merge-intervals": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "56",
        "title": "Merge Intervals",
        "titleSlug": "merge-intervals",
        "content": "<p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[4,5]]\n<strong>Output:</strong> [[1,5]]\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 21363,
        "dislikes": 732,
        "similarQuestions": "[{\"title\": \"Insert Interval\", \"titleSlug\": \"insert-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms\", \"titleSlug\": \"meeting-rooms\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms II\", \"titleSlug\": \"meeting-rooms-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Teemo Attacking\", \"titleSlug\": \"teemo-attacking\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add Bold Tag in String\", \"titleSlug\": \"add-bold-tag-in-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Employee Free Time\", \"titleSlug\": \"employee-free-time\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Partition Labels\", \"titleSlug\": \"partition-labels\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Interval List Intersections\", \"titleSlug\": \"interval-list-intersections\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Amount of New Area Painted Each Day\", \"titleSlug\": \"amount-of-new-area-painted-each-day\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Substring of One Repeating Character\", \"titleSlug\": \"longest-substring-of-one-repeating-character\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Integers in Intervals\", \"titleSlug\": \"count-integers-in-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Divide Intervals Into Minimum Number of Groups\", \"titleSlug\": \"divide-intervals-into-minimum-number-of-groups\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Determine if Two Events Have Conflict\", \"titleSlug\": \"determine-if-two-events-have-conflict\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Ways to Group Overlapping Ranges\", \"titleSlug\": \"count-ways-to-group-overlapping-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Points That Intersect With Cars\", \"titleSlug\": \"points-that-intersect-with-cars\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"4.6M\", \"totalAcceptedRaw\": 2166993, \"totalSubmissionRaw\": 4628087, \"acRate\": \"46.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "insert-interval",
          "title": "Insert Interval",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "meeting-rooms",
          "title": "Meeting Rooms",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "meeting-rooms-ii",
          "title": "Meeting Rooms II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "teemo-attacking",
          "title": "Teemo Attacking",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "add-bold-tag-in-string",
          "title": "Add Bold Tag in String",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "range-module",
          "title": "Range Module",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "employee-free-time",
          "title": "Employee Free Time",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "partition-labels",
          "title": "Partition Labels",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "interval-list-intersections",
          "title": "Interval List Intersections",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "amount-of-new-area-painted-each-day",
          "title": "Amount of New Area Painted Each Day",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-substring-of-one-repeating-character",
          "title": "Longest Substring of One Repeating Character",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-integers-in-intervals",
          "title": "Count Integers in Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "divide-intervals-into-minimum-number-of-groups",
          "title": "Divide Intervals Into Minimum Number of Groups",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "determine-if-two-events-have-conflict",
          "title": "Determine if Two Events Have Conflict",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-ways-to-group-overlapping-ranges",
          "title": "Count Ways to Group Overlapping Ranges",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "points-that-intersect-with-cars",
          "title": "Points That Intersect With Cars",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "insert-interval": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "57",
        "title": "Insert Interval",
        "titleSlug": "insert-interval",
        "content": "<p>You are given an array of non-overlapping intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represent the start and the end of the <code>i<sup>th</sup></code> interval and <code>intervals</code> is sorted in ascending order by <code>start<sub>i</sub></code>. You are also given an interval <code>newInterval = [start, end]</code> that represents the start and end of another interval.</p>\n\n<p>Insert <code>newInterval</code> into <code>intervals</code> such that <code>intervals</code> is still sorted in ascending order by <code>start<sub>i</sub></code> and <code>intervals</code> still does not have any overlapping intervals (merge overlapping intervals if necessary).</p>\n\n<p>Return <code>intervals</code><em> after the insertion</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>Output:</strong> [[1,5],[6,9]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n<strong>Output:</strong> [[1,2],[3,10],[12,16]]\n<strong>Explanation:</strong> Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals</code> is sorted by <code>start<sub>i</sub></code> in <strong>ascending</strong> order.</li>\n\t<li><code>newInterval.length == 2</code></li>\n\t<li><code>0 &lt;= start &lt;= end &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9365,
        "dislikes": 689,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Integers in Intervals\", \"titleSlug\": \"count-integers-in-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"904.8K\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 904828, \"totalSubmissionRaw\": 2279067, \"acRate\": \"39.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "range-module",
          "title": "Range Module",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-integers-in-intervals",
          "title": "Count Integers in Intervals",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "length-of-last-word": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "58",
        "title": "Length of Last Word",
        "titleSlug": "length-of-last-word",
        "content": "<p>Given a string <code>s</code> consisting of words and spaces, return <em>the length of the <strong>last</strong> word in the string.</em></p>\n\n<p>A <strong>word</strong> is a maximal <span data-keyword=\"substring-nonempty\">substring</span> consisting of non-space characters only.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello World&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The last word is &quot;World&quot; with length 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;   fly me   to   the moon  &quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The last word is &quot;moon&quot; with length 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;luffy is still joyboy&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The last word is &quot;joyboy&quot; with length 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There will be at least one word in <code>s</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4395,
        "dislikes": 230,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1525507, \"totalSubmissionRaw\": 3195422, \"acRate\": \"47.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "spiral-matrix-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "59",
        "title": "Spiral Matrix II",
        "titleSlug": "spiral-matrix-ii",
        "content": "<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n<sup>2</sup></code> in spiral order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [[1,2,3],[8,9,4],[7,6,5]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6165,
        "dislikes": 249,
        "similarQuestions": "[{\"title\": \"Spiral Matrix\", \"titleSlug\": \"spiral-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix III\", \"titleSlug\": \"spiral-matrix-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix IV\", \"titleSlug\": \"spiral-matrix-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"539K\", \"totalSubmission\": \"764.8K\", \"totalAcceptedRaw\": 539025, \"totalSubmissionRaw\": 764757, \"acRate\": \"70.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix",
          "title": "Spiral Matrix",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix-iii",
          "title": "Spiral Matrix III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix-iv",
          "title": "Spiral Matrix IV",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "permutation-sequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "60",
        "title": "Permutation Sequence",
        "titleSlug": "permutation-sequence",
        "content": "<p>The set <code>[1, 2, 3, ...,&nbsp;n]</code> contains a total of <code>n!</code> unique permutations.</p>\n\n<p>By listing and labeling all of the permutations in order, we get the following sequence for <code>n = 3</code>:</p>\n\n<ol>\n\t<li><code>&quot;123&quot;</code></li>\n\t<li><code>&quot;132&quot;</code></li>\n\t<li><code>&quot;213&quot;</code></li>\n\t<li><code>&quot;231&quot;</code></li>\n\t<li><code>&quot;312&quot;</code></li>\n\t<li><code>&quot;321&quot;</code></li>\n</ol>\n\n<p>Given <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> permutation sequence.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 3\n<strong>Output:</strong> \"213\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 4, k = 9\n<strong>Output:</strong> \"2314\"\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> \"123\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n\t<li><code>1 &lt;= k &lt;= n!</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 6443,
        "dislikes": 463,
        "similarQuestions": "[{\"title\": \"Next Permutation\", \"titleSlug\": \"next-permutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations\", \"titleSlug\": \"permutations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"367.2K\", \"totalSubmission\": \"797.9K\", \"totalAcceptedRaw\": 367184, \"totalSubmissionRaw\": 797941, \"acRate\": \"46.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "next-permutation",
          "title": "Next Permutation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutations",
          "title": "Permutations",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "rotate-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "61",
        "title": "Rotate List",
        "titleSlug": "rotate-list",
        "content": "<p>Given the <code>head</code> of a linked&nbsp;list, rotate the list to the right by <code>k</code> places.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg\" style=\"width: 450px; height: 191px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [4,5,1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg\" style=\"width: 305px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> head = [0,1,2], k = 4\n<strong>Output:</strong> [2,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 500]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9167,
        "dislikes": 1420,
        "similarQuestions": "[{\"title\": \"Rotate Array\", \"titleSlug\": \"rotate-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Linked List in Parts\", \"titleSlug\": \"split-linked-list-in-parts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"857.5K\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 857488, \"totalSubmissionRaw\": 2309257, \"acRate\": \"37.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "rotate-array",
          "title": "Rotate Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "split-linked-list-in-parts",
          "title": "Split Linked List in Parts",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "unique-paths": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "62",
        "title": "Unique Paths",
        "titleSlug": "unique-paths",
        "content": "<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>\n\n<p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>\n\n<p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 7\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16038,
        "dislikes": 421,
        "similarQuestions": "[{\"title\": \"Unique Paths II\", \"titleSlug\": \"unique-paths-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Sum\", \"titleSlug\": \"minimum-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Dungeon Game\", \"titleSlug\": \"dungeon-game\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Cost in a Grid\", \"titleSlug\": \"minimum-path-cost-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost Homecoming of a Robot in a Grid\", \"titleSlug\": \"minimum-cost-homecoming-of-a-robot-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Reach a Position After Exactly k Steps\", \"titleSlug\": \"number-of-ways-to-reach-a-position-after-exactly-k-steps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paths in Matrix Whose Sum Is Divisible by K\", \"titleSlug\": \"paths-in-matrix-whose-sum-is-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Combinatorics", "slug": "combinatorics" }
        ],
        "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1674413, \"totalSubmissionRaw\": 2620120, \"acRate\": \"63.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "unique-paths-ii",
          "title": "Unique Paths II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-sum",
          "title": "Minimum Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "dungeon-game",
          "title": "Dungeon Game",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-cost-in-a-grid",
          "title": "Minimum Path Cost in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
          "title": "Minimum Cost Homecoming of a Robot in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
          "title": "Number of Ways to Reach a Position After Exactly k Steps",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
          "title": "Paths in Matrix Whose Sum Is Divisible by K",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Combinatorics", "slug": "combinatorics" }
      ]
    }
  },
  "unique-paths-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "63",
        "title": "Unique Paths II",
        "titleSlug": "unique-paths-ii",
        "content": "<p>You are given an <code>m x n</code> integer array <code>grid</code>. There is a robot initially located at the <b>top-left corner</b> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>\n\n<p>An obstacle and space are marked as <code>1</code> or <code>0</code> respectively in <code>grid</code>. A path that the robot takes cannot include <strong>any</strong> square that is an obstacle.</p>\n\n<p>Return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>\n\n<p>The testcases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -&gt; Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right -&gt; Right\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> obstacleGrid = [[0,1],[0,0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == obstacleGrid.length</code></li>\n\t<li><code>n == obstacleGrid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8415,
        "dislikes": 496,
        "similarQuestions": "[{\"title\": \"Unique Paths\", \"titleSlug\": \"unique-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Unique Paths III\", \"titleSlug\": \"unique-paths-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Cost in a Grid\", \"titleSlug\": \"minimum-path-cost-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paths in Matrix Whose Sum Is Divisible by K\", \"titleSlug\": \"paths-in-matrix-whose-sum-is-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"851.7K\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 851747, \"totalSubmissionRaw\": 2068420, \"acRate\": \"41.2%\"}",
        "hints": [
          "Use dynamic programming since, from each cell, you can move to the right or down.",
          "assume dp[i][j] is the number of unique paths to reach (i, j). dp[i][j] = dp[i][j -1] + dp[i - 1][j]. Be careful when you encounter an obstacle. set its value in dp to 0."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "unique-paths",
          "title": "Unique Paths",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "unique-paths-iii",
          "title": "Unique Paths III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-cost-in-a-grid",
          "title": "Minimum Path Cost in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
          "title": "Paths in Matrix Whose Sum Is Divisible by K",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Use dynamic programming since, from each cell, you can move to the right or down.",
        "assume dp[i][j] is the number of unique paths to reach (i, j). dp[i][j] = dp[i][j -1] + dp[i - 1][j]. Be careful when you encounter an obstacle. set its value in dp to 0."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "minimum-path-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "64",
        "title": "Minimum Path Sum",
        "titleSlug": "minimum-path-sum",
        "content": "<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p>\n\n<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,3,1],[1,5,1],[4,2,1]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Because the path 1 &rarr; 3 &rarr; 1 &rarr; 1 &rarr; 1 minimizes the sum.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,2,3],[4,5,6]]\n<strong>Output:</strong> 12\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 200</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12000,
        "dislikes": 157,
        "similarQuestions": "[{\"title\": \"Unique Paths\", \"titleSlug\": \"unique-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Dungeon Game\", \"titleSlug\": \"dungeon-game\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Cherry Pickup\", \"titleSlug\": \"cherry-pickup\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Cost in a Grid\", \"titleSlug\": \"minimum-path-cost-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Points with Cost\", \"titleSlug\": \"maximum-number-of-points-with-cost\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost Homecoming of a Robot in a Grid\", \"titleSlug\": \"minimum-cost-homecoming-of-a-robot-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paths in Matrix Whose Sum Is Divisible by K\", \"titleSlug\": \"paths-in-matrix-whose-sum-is-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if There is a Path With Equal Number of 0's And 1's\", \"titleSlug\": \"check-if-there-is-a-path-with-equal-number-of-0s-and-1s\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost of a Path With Special Roads\", \"titleSlug\": \"minimum-cost-of-a-path-with-special-roads\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 1074111, \"totalSubmissionRaw\": 1698349, \"acRate\": \"63.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "unique-paths",
          "title": "Unique Paths",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "dungeon-game",
          "title": "Dungeon Game",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "cherry-pickup",
          "title": "Cherry Pickup",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-cost-in-a-grid",
          "title": "Minimum Path Cost in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-points-with-cost",
          "title": "Maximum Number of Points with Cost",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
          "title": "Minimum Cost Homecoming of a Robot in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
          "title": "Paths in Matrix Whose Sum Is Divisible by K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
          "title": "Check if There is a Path With Equal Number of 0's And 1's",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-of-a-path-with-special-roads",
          "title": "Minimum Cost of a Path With Special Roads",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "valid-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "65",
        "title": "Valid Number",
        "titleSlug": "valid-number",
        "content": "<p>A <strong>valid number</strong> can be split up into these components (in order):</p>\n\n<ol>\n\t<li>A <strong>decimal number</strong> or an <strong>integer</strong>.</li>\n\t<li>(Optional) An <code>&#39;e&#39;</code> or <code>&#39;E&#39;</code>, followed by an <strong>integer</strong>.</li>\n</ol>\n\n<p>A <strong>decimal number</strong> can be split up into these components (in order):</p>\n\n<ol>\n\t<li>(Optional) A sign character (either <code>&#39;+&#39;</code> or <code>&#39;-&#39;</code>).</li>\n\t<li>One of the following formats:\n\t<ol>\n\t\t<li>One or more digits, followed by a dot <code>&#39;.&#39;</code>.</li>\n\t\t<li>One or more digits, followed by a dot <code>&#39;.&#39;</code>, followed by one or more digits.</li>\n\t\t<li>A dot <code>&#39;.&#39;</code>, followed by one or more digits.</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p>An <strong>integer</strong> can be split up into these components (in order):</p>\n\n<ol>\n\t<li>(Optional) A sign character (either <code>&#39;+&#39;</code> or <code>&#39;-&#39;</code>).</li>\n\t<li>One or more digits.</li>\n</ol>\n\n<p>For example, all the following are valid numbers: <code>[&quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;]</code>, while the following are not valid numbers: <code>[&quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;]</code>.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>valid number</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;e&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;.&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>s</code> consists of only English letters (both uppercase and lowercase), digits (<code>0-9</code>), plus <code>&#39;+&#39;</code>, minus <code>&#39;-&#39;</code>, or dot <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1139,
        "dislikes": 1854,
        "similarQuestions": "[{\"title\": \"String to Integer (atoi)\", \"titleSlug\": \"string-to-integer-atoi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"332.7K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 332689, \"totalSubmissionRaw\": 1731566, \"acRate\": \"19.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "string-to-integer-atoi",
          "title": "String to Integer (atoi)",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "plus-one": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "66",
        "title": "Plus One",
        "titleSlug": "plus-one",
        "content": "<p>You are given a <strong>large integer</strong> represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>i<sup>th</sup></code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0</code>&#39;s.</p>\n\n<p>Increment the large integer by one and return <em>the resulting array of digits</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [1,2,3]\n<strong>Output:</strong> [1,2,4]\n<strong>Explanation:</strong> The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [4,3,2,1]\n<strong>Output:</strong> [4,3,2,2]\n<strong>Explanation:</strong> The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [9]\n<strong>Output:</strong> [1,0]\n<strong>Explanation:</strong> The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n\t<li><code>digits</code> does not contain any leading <code>0</code>&#39;s.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8747,
        "dislikes": 5290,
        "similarQuestions": "[{\"title\": \"Multiply Strings\", \"titleSlug\": \"multiply-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add Binary\", \"titleSlug\": \"add-binary\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Plus One Linked List\", \"titleSlug\": \"plus-one-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add to Array-Form of Integer\", \"titleSlug\": \"add-to-array-form-of-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Reduce an Integer to 0\", \"titleSlug\": \"minimum-operations-to-reduce-an-integer-to-0\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"2M\", \"totalSubmission\": \"4.5M\", \"totalAcceptedRaw\": 2011627, \"totalSubmissionRaw\": 4510063, \"acRate\": \"44.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "multiply-strings",
          "title": "Multiply Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-binary",
          "title": "Add Binary",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "plus-one-linked-list",
          "title": "Plus One Linked List",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-to-array-form-of-integer",
          "title": "Add to Array-Form of Integer",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-operations-to-reduce-an-integer-to-0",
          "title": "Minimum Operations to Reduce an Integer to 0",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "add-binary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "67",
        "title": "Add Binary",
        "titleSlug": "add-binary",
        "content": "<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 9042,
        "dislikes": 915,
        "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Multiply Strings\", \"titleSlug\": \"multiply-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Plus One\", \"titleSlug\": \"plus-one\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add to Array-Form of Integer\", \"titleSlug\": \"add-to-array-form-of-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1330165, \"totalSubmissionRaw\": 2509854, \"acRate\": \"53.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-numbers",
          "title": "Add Two Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "multiply-strings",
          "title": "Multiply Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "plus-one",
          "title": "Plus One",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-to-array-form-of-integer",
          "title": "Add to Array-Form of Integer",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "text-justification": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "68",
        "title": "Text Justification",
        "titleSlug": "text-justification",
        "content": "<p>Given an array of strings <code>words</code> and a width <code>maxWidth</code>, format the text such that each line has exactly <code>maxWidth</code> characters and is fully (left and right) justified.</p>\n\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <code>maxWidth</code> characters.</p>\n\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n\n<p>For the last line of text, it should be left-justified, and no extra space is inserted between words.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A word is defined as a character sequence consisting of non-space characters only.</li>\n\t<li>Each word&#39;s length is guaranteed to be greater than <code>0</code> and not exceed <code>maxWidth</code>.</li>\n\t<li>The input array <code>words</code> contains at least one word.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20\n<strong>Output:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of only English letters and symbols.</li>\n\t<li><code>1 &lt;= maxWidth &lt;= 100</code></li>\n\t<li><code>words[i].length &lt;= maxWidth</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3426,
        "dislikes": 4418,
        "similarQuestions": "[{\"title\": \"Rearrange Spaces Between Words\", \"titleSlug\": \"rearrange-spaces-between-words\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Divide a String Into Groups of Size k\", \"titleSlug\": \"divide-a-string-into-groups-of-size-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Split Message Based on Limit\", \"titleSlug\": \"split-message-based-on-limit\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"376.5K\", \"totalSubmission\": \"895.6K\", \"totalAcceptedRaw\": 376452, \"totalSubmissionRaw\": 895561, \"acRate\": \"42.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "rearrange-spaces-between-words",
          "title": "Rearrange Spaces Between Words",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "divide-a-string-into-groups-of-size-k",
          "title": "Divide a String Into Groups of Size k",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "split-message-based-on-limit",
          "title": "Split Message Based on Limit",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "sqrtx": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "69",
        "title": "Sqrt(x)",
        "titleSlug": "sqrtx",
        "content": "<p>Given a non-negative integer <code>x</code>, return <em>the square root of </em><code>x</code><em> rounded down to the nearest integer</em>. The returned integer should be <strong>non-negative</strong> as well.</p>\n\n<p>You <strong>must not use</strong> any built-in exponent function or operator.</p>\n\n<ul>\n\t<li>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 4 is 2, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 8\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7717,
        "dislikes": 4407,
        "similarQuestions": "[{\"title\": \"Pow(x, n)\", \"titleSlug\": \"powx-n\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Perfect Square\", \"titleSlug\": \"valid-perfect-square\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"4.6M\", \"totalAcceptedRaw\": 1755297, \"totalSubmissionRaw\": 4589966, \"acRate\": \"38.2%\"}",
        "hints": [
          "Try exploring all integers. (Credits: @annujoshi)",
          "Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "powx-n",
          "title": "Pow(x, n)",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "valid-perfect-square",
          "title": "Valid Perfect Square",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Try exploring all integers. (Credits: @annujoshi)",
        "Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "climbing-stairs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "70",
        "title": "Climbing Stairs",
        "titleSlug": "climbing-stairs",
        "content": "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>\n\n<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 45</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 20688,
        "dislikes": 719,
        "similarQuestions": "[{\"title\": \"Min Cost Climbing Stairs\", \"titleSlug\": \"min-cost-climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Fibonacci Number\", \"titleSlug\": \"fibonacci-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-th Tribonacci Number\", \"titleSlug\": \"n-th-tribonacci-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Rounds to Complete All Tasks\", \"titleSlug\": \"minimum-rounds-to-complete-all-tasks\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Ways to Place Houses\", \"titleSlug\": \"count-number-of-ways-to-place-houses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Reach a Position After Exactly k Steps\", \"titleSlug\": \"number-of-ways-to-reach-a-position-after-exactly-k-steps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Ways To Build Good Strings\", \"titleSlug\": \"count-ways-to-build-good-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Frog Jump II\", \"titleSlug\": \"frog-jump-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"2.8M\", \"totalSubmission\": \"5.4M\", \"totalAcceptedRaw\": 2824929, \"totalSubmissionRaw\": 5405272, \"acRate\": \"52.3%\"}",
        "hints": [
          "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "min-cost-climbing-stairs",
          "title": "Min Cost Climbing Stairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "fibonacci-number",
          "title": "Fibonacci Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-th-tribonacci-number",
          "title": "N-th Tribonacci Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-rounds-to-complete-all-tasks",
          "title": "Minimum Rounds to Complete All Tasks",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-number-of-ways-to-place-houses",
          "title": "Count Number of Ways to Place Houses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
          "title": "Number of Ways to Reach a Position After Exactly k Steps",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-ways-to-build-good-strings",
          "title": "Count Ways To Build Good Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "frog-jump-ii",
          "title": "Frog Jump II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "simplify-path": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "71",
        "title": "Simplify Path",
        "titleSlug": "simplify-path",
        "content": "<p>Given a string <code>path</code>, which is an <strong>absolute path</strong> (starting with a slash <code>&#39;/&#39;</code>) to a file or directory in a Unix-style file system, convert it to the simplified <strong>canonical path</strong>.</p>\n\n<p>In a Unix-style file system, a period <code>&#39;.&#39;</code> refers to the current directory, a double period <code>&#39;..&#39;</code> refers to the directory up a level, and any multiple consecutive slashes (i.e. <code>&#39;//&#39;</code>) are treated as a single slash <code>&#39;/&#39;</code>. For this problem, any other format of periods such as <code>&#39;...&#39;</code> are treated as file/directory names.</p>\n\n<p>The <strong>canonical path</strong> should have the following format:</p>\n\n<ul>\n\t<li>The path starts with a single slash <code>&#39;/&#39;</code>.</li>\n\t<li>Any two directories are separated by a single slash <code>&#39;/&#39;</code>.</li>\n\t<li>The path does not end with a trailing <code>&#39;/&#39;</code>.</li>\n\t<li>The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period <code>&#39;.&#39;</code> or double period <code>&#39;..&#39;</code>)</li>\n</ul>\n\n<p>Return <em>the simplified <strong>canonical path</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/home/&quot;\n<strong>Output:</strong> &quot;/home&quot;\n<strong>Explanation:</strong> Note that there is no trailing slash after the last directory name.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/../&quot;\n<strong>Output:</strong> &quot;/&quot;\n<strong>Explanation:</strong> Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/home//foo/&quot;\n<strong>Output:</strong> &quot;/home/foo&quot;\n<strong>Explanation:</strong> In the canonical path, multiple consecutive slashes are replaced by a single one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= path.length &lt;= 3000</code></li>\n\t<li><code>path</code> consists of English letters, digits, period <code>&#39;.&#39;</code>, slash <code>&#39;/&#39;</code> or <code>&#39;_&#39;</code>.</li>\n\t<li><code>path</code> is a valid absolute Unix path.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5226,
        "dislikes": 1146,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"661.2K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 661171, \"totalSubmissionRaw\": 1595991, \"acRate\": \"41.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "edit-distance": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "72",
        "title": "Edit Distance",
        "titleSlug": "edit-distance",
        "content": "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p>\n\n<p>You have the following three operations permitted on a word:</p>\n\n<ul>\n\t<li>Insert a character</li>\n\t<li>Delete a character</li>\n\t<li>Replace a character</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nintention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 14200,
        "dislikes": 189,
        "similarQuestions": "[{\"title\": \"One Edit Distance\", \"titleSlug\": \"one-edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Delete Operation for Two Strings\", \"titleSlug\": \"delete-operation-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum ASCII Delete Sum for Two Strings\", \"titleSlug\": \"minimum-ascii-delete-sum-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Uncrossed Lines\", \"titleSlug\": \"uncrossed-lines\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum White Tiles After Covering With Carpets\", \"titleSlug\": \"minimum-white-tiles-after-covering-with-carpets\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"772.9K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 772934, \"totalSubmissionRaw\": 1384996, \"acRate\": \"55.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "one-edit-distance",
          "title": "One Edit Distance",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "delete-operation-for-two-strings",
          "title": "Delete Operation for Two Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
          "title": "Minimum ASCII Delete Sum for Two Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "uncrossed-lines",
          "title": "Uncrossed Lines",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-white-tiles-after-covering-with-carpets",
          "title": "Minimum White Tiles After Covering With Carpets",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "set-matrix-zeroes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "73",
        "title": "Set Matrix Zeroes",
        "titleSlug": "set-matrix-zeroes",
        "content": "<p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>&#39;s.</p>\n\n<p>You must do it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg\" style=\"width: 450px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg\" style=\"width: 450px; height: 137px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n<strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[0].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li>\n\t<li>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li>\n\t<li>Could you devise a constant space solution?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 13675,
        "dislikes": 685,
        "similarQuestions": "[{\"title\": \"Game of Life\", \"titleSlug\": \"game-of-life\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Laser Beams in a Bank\", \"titleSlug\": \"number-of-laser-beams-in-a-bank\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Remove Adjacent Ones in Matrix\", \"titleSlug\": \"minimum-operations-to-remove-adjacent-ones-in-matrix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Remove All Ones With Row and Column Flips II\", \"titleSlug\": \"remove-all-ones-with-row-and-column-flips-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 1237133, \"totalSubmissionRaw\": 2277565, \"acRate\": \"54.3%\"}",
        "hints": [
          "If any cell of the matrix has a zero we can record its row and column number using additional memory.\r\nBut if you don't want to use extra memory then you can manipulate the array instead. i.e. simulating exactly what the question says.",
          "Setting cell values to zero on the fly while iterating might lead to discrepancies. What if you use some other integer value as your marker?\r\nThere is still a better approach for this problem with 0(1) space.",
          "We could have used 2 sets to keep a record of rows/columns which need to be set to zero. But for an O(1) space solution, you can use one of the rows and and one of the columns to keep track of this information.",
          "We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "game-of-life",
          "title": "Game of Life",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-laser-beams-in-a-bank",
          "title": "Number of Laser Beams in a Bank",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-operations-to-remove-adjacent-ones-in-matrix",
          "title": "Minimum Operations to Remove Adjacent Ones in Matrix",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-all-ones-with-row-and-column-flips-ii",
          "title": "Remove All Ones With Row and Column Flips II",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "If any cell of the matrix has a zero we can record its row and column number using additional memory.\r\nBut if you don't want to use extra memory then you can manipulate the array instead. i.e. simulating exactly what the question says.",
        "Setting cell values to zero on the fly while iterating might lead to discrepancies. What if you use some other integer value as your marker?\r\nThere is still a better approach for this problem with 0(1) space.",
        "We could have used 2 sets to keep a record of rows/columns which need to be set to zero. But for an O(1) space solution, you can use one of the rows and and one of the columns to keep track of this information.",
        "We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "search-a-2d-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "74",
        "title": "Search a 2D Matrix",
        "titleSlug": "search-a-2d-matrix",
        "content": "<p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p>\n\n<ul>\n\t<li>Each row is sorted in non-decreasing order.</li>\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n\n<p>Given an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code> <em>or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 15041,
        "dislikes": 397,
        "similarQuestions": "[{\"title\": \"Search a 2D Matrix II\", \"titleSlug\": \"search-a-2d-matrix-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Message Based on Limit\", \"titleSlug\": \"split-message-based-on-limit\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1586532, \"totalSubmissionRaw\": 3203498, \"acRate\": \"49.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "search-a-2d-matrix-ii",
          "title": "Search a 2D Matrix II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "split-message-based-on-limit",
          "title": "Split Message Based on Limit",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "sort-colors": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "75",
        "title": "Sort Colors",
        "titleSlug": "sort-colors",
        "content": "<p>Given an array <code>nums</code> with <code>n</code> objects colored red, white, or blue, sort them <strong><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a> </strong>so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p>\n\n<p>We will use the integers <code>0</code>, <code>1</code>, and <code>2</code> to represent the color red, white, and blue, respectively.</p>\n\n<p>You must solve this problem without using the library&#39;s sort function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,0,2,1,1,0]\n<strong>Output:</strong> [0,0,1,1,2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,0,1]\n<strong>Output:</strong> [0,1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>nums[i]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Could you come up with a one-pass algorithm using only&nbsp;constant extra space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 17267,
        "dislikes": 603,
        "similarQuestions": "[{\"title\": \"Sort List\", \"titleSlug\": \"sort-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Wiggle Sort\", \"titleSlug\": \"wiggle-sort\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Wiggle Sort II\", \"titleSlug\": \"wiggle-sort-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"2.8M\", \"totalAcceptedRaw\": 1720866, \"totalSubmissionRaw\": 2817574, \"acRate\": \"61.1%\"}",
        "hints": [
          "A rather straight forward solution is a two-pass algorithm using counting sort.",
          "Iterate the array counting number of 0's, 1's, and 2's.",
          "Overwrite array with the total number of 0's, then 1's and followed by 2's."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "sort-list",
          "title": "Sort List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "wiggle-sort",
          "title": "Wiggle Sort",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "wiggle-sort-ii",
          "title": "Wiggle Sort II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "A rather straight forward solution is a two-pass algorithm using counting sort.",
        "Iterate the array counting number of 0's, 1's, and 2's.",
        "Overwrite array with the total number of 0's, then 1's and followed by 2's."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "minimum-window-substring": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "76",
        "title": "Minimum Window Substring",
        "titleSlug": "minimum-window-substring",
        "content": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword=\"substring-nonempty\"><strong><em>substring</em></strong></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 16678,
        "dislikes": 681,
        "similarQuestions": "[{\"title\": \"Substring with Concatenation of All Words\", \"titleSlug\": \"substring-with-concatenation-of-all-words\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Permutation in String\", \"titleSlug\": \"permutation-in-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Range Covering Elements from K Lists\", \"titleSlug\": \"smallest-range-covering-elements-from-k-lists\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Window Subsequence\", \"titleSlug\": \"minimum-window-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.8M\", \"totalAcceptedRaw\": 1162540, \"totalSubmissionRaw\": 2792811, \"acRate\": \"41.6%\"}",
        "hints": [
          "Use two pointers to create a window of letters in s, which would have all the characters from t.",
          "Expand the right pointer until all the characters of t are covered.",
          "Once all the characters are covered, move the left pointer and ensure that all the characters are still covered to minimize the subarray size.",
          "Continue expanding the right and left pointers until you reach the end of s."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "substring-with-concatenation-of-all-words",
          "title": "Substring with Concatenation of All Words",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-size-subarray-sum",
          "title": "Minimum Size Subarray Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sliding-window-maximum",
          "title": "Sliding Window Maximum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutation-in-string",
          "title": "Permutation in String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "smallest-range-covering-elements-from-k-lists",
          "title": "Smallest Range Covering Elements from K Lists",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-subsequence",
          "title": "Minimum Window Subsequence",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Use two pointers to create a window of letters in s, which would have all the characters from t.",
        "Expand the right pointer until all the characters of t are covered.",
        "Once all the characters are covered, move the left pointer and ensure that all the characters are still covered to minimize the subarray size.",
        "Continue expanding the right and left pointers until you reach the end of s."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "combinations": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "77",
        "title": "Combinations",
        "titleSlug": "combinations",
        "content": "<p>Given two integers <code>n</code> and <code>k</code>, return <em>all possible combinations of</em> <code>k</code> <em>numbers chosen from the range</em> <code>[1, n]</code>.</p>\n\n<p>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, k = 2\n<strong>Output:</strong> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n<strong>Explanation:</strong> There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> [[1]]\n<strong>Explanation:</strong> There is 1 choose 1 = 1 total combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7939,
        "dislikes": 207,
        "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations\", \"titleSlug\": \"permutations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Backtracking", "slug": "backtracking" }],
        "stats": "{\"totalAccepted\": \"833.5K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 833490, \"totalSubmissionRaw\": 1195338, \"acRate\": \"69.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum",
          "title": "Combination Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutations",
          "title": "Permutations",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Backtracking", "slug": "backtracking" }]
    }
  },
  "subsets": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "78",
        "title": "Subsets",
        "titleSlug": "subsets",
        "content": "<p>Given an integer array <code>nums</code> of <strong>unique</strong> elements, return <em>all possible</em> <span data-keyword=\"subset\"><em>subsets</em></span> <em>(the power set)</em>.</p>\n\n<p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [[],[0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the numbers of&nbsp;<code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16310,
        "dislikes": 247,
        "similarQuestions": "[{\"title\": \"Subsets II\", \"titleSlug\": \"subsets-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Generalized Abbreviation\", \"titleSlug\": \"generalized-abbreviation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Letter Case Permutation\", \"titleSlug\": \"letter-case-permutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Array Given Subset Sums\", \"titleSlug\": \"find-array-given-subset-sums\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Number of Maximum Bitwise-OR Subsets\", \"titleSlug\": \"count-number-of-maximum-bitwise-or-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"2.2M\", \"totalAcceptedRaw\": 1679091, \"totalSubmissionRaw\": 2190007, \"acRate\": \"76.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "subsets-ii",
          "title": "Subsets II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "generalized-abbreviation",
          "title": "Generalized Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "letter-case-permutation",
          "title": "Letter Case Permutation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-array-given-subset-sums",
          "title": "Find Array Given Subset Sums",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-number-of-maximum-bitwise-or-subsets",
          "title": "Count Number of Maximum Bitwise-OR Subsets",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "word-search": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "79",
        "title": "Word Search",
        "titleSlug": "word-search",
        "content": "<p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> <em>if</em> <code>word</code> <em>exists in the grid</em>.</p>\n\n<p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/word3.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n = board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 6</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 15</code></li>\n\t<li><code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you use search pruning to make your solution faster with a larger <code>board</code>?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 14792,
        "dislikes": 611,
        "similarQuestions": "[{\"title\": \"Word Search II\", \"titleSlug\": \"word-search-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"3.5M\", \"totalAcceptedRaw\": 1439161, \"totalSubmissionRaw\": 3502509, \"acRate\": \"41.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "word-search-ii",
          "title": "Word Search II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "remove-duplicates-from-sorted-array-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "80",
        "title": "Remove Duplicates from Sorted Array II",
        "titleSlug": "remove-duplicates-from-sorted-array-ii",
        "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove some duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears <strong>at most twice</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p>\n\n<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>&nbsp;should hold the final result. It does not matter what you leave beyond the first&nbsp;<code>k</code>&nbsp;elements.</p>\n\n<p>Return <code>k</code><em> after placing the final result in the first </em><code>k</code><em> slots of </em><code>nums</code>.</p>\n\n<p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,2,2,3]\n<strong>Output:</strong> 5, nums = [1,1,2,2,3,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,1,2,3,3]\n<strong>Output:</strong> 7, nums = [0,0,1,1,2,3,3,_,_]\n<strong>Explanation:</strong> Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6327,
        "dislikes": 1199,
        "similarQuestions": "[{\"title\": \"Remove Duplicates from Sorted Array\", \"titleSlug\": \"remove-duplicates-from-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"762K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 761978, \"totalSubmissionRaw\": 1351981, \"acRate\": \"56.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "remove-duplicates-from-sorted-array",
          "title": "Remove Duplicates from Sorted Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "search-in-rotated-sorted-array-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "81",
        "title": "Search in Rotated Sorted Array II",
        "titleSlug": "search-in-rotated-sorted-array-ii",
        "content": "<p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with <strong>distinct</strong> values).</p>\n\n<p>Before being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <code>true</code><em> if </em><code>target</code><em> is in </em><code>nums</code><em>, or </em><code>false</code><em> if it is not in </em><code>nums</code><em>.</em></p>\n\n<p>You must decrease the overall operation steps as much as possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 0\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 3\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is guaranteed to be rotated at some pivot.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> This problem is similar to&nbsp;<a href=\"/problems/search-in-rotated-sorted-array/description/\" target=\"_blank\">Search in Rotated Sorted Array</a>, but&nbsp;<code>nums</code> may contain <strong>duplicates</strong>. Would this affect the runtime complexity? How and why?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8120,
        "dislikes": 997,
        "similarQuestions": "[{\"title\": \"Search in Rotated Sorted Array\", \"titleSlug\": \"search-in-rotated-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"660.5K\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 660494, \"totalSubmissionRaw\": 1767409, \"acRate\": \"37.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "search-in-rotated-sorted-array",
          "title": "Search in Rotated Sorted Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "remove-duplicates-from-sorted-list-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "82",
        "title": "Remove Duplicates from Sorted List II",
        "titleSlug": "remove-duplicates-from-sorted-list-ii",
        "content": "<p>Given the <code>head</code> of a sorted linked list, <em>delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,3,4,4,5]\n<strong>Output:</strong> [1,2,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg\" style=\"width: 500px; height: 205px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,1,2,3]\n<strong>Output:</strong> [2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8499,
        "dislikes": 221,
        "similarQuestions": "[{\"title\": \"Remove Duplicates from Sorted List\", \"titleSlug\": \"remove-duplicates-from-sorted-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Remove Duplicates From an Unsorted Linked List\", \"titleSlug\": \"remove-duplicates-from-an-unsorted-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"676.9K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 676854, \"totalSubmissionRaw\": 1445013, \"acRate\": \"46.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "remove-duplicates-from-sorted-list",
          "title": "Remove Duplicates from Sorted List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-duplicates-from-an-unsorted-linked-list",
          "title": "Remove Duplicates From an Unsorted Linked List",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "remove-duplicates-from-sorted-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "83",
        "title": "Remove Duplicates from Sorted List",
        "titleSlug": "remove-duplicates-from-sorted-list",
        "content": "<p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list1.jpg\" style=\"width: 302px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/list2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,1,2,3,3]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8316,
        "dislikes": 283,
        "similarQuestions": "[{\"title\": \"Remove Duplicates from Sorted List II\", \"titleSlug\": \"remove-duplicates-from-sorted-list-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Duplicates From an Unsorted Linked List\", \"titleSlug\": \"remove-duplicates-from-an-unsorted-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Linked List", "slug": "linked-list" }],
        "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1380863, \"totalSubmissionRaw\": 2663325, \"acRate\": \"51.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "remove-duplicates-from-sorted-list-ii",
          "title": "Remove Duplicates from Sorted List II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-duplicates-from-an-unsorted-linked-list",
          "title": "Remove Duplicates From an Unsorted Linked List",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Linked List", "slug": "linked-list" }]
    }
  },
  "largest-rectangle-in-histogram": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "84",
        "title": "Largest Rectangle in Histogram",
        "titleSlug": "largest-rectangle-in-histogram",
        "content": "<p>Given an array of integers <code>heights</code> representing the histogram&#39;s bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\" style=\"width: 522px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,1,5,6,2,3]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg\" style=\"width: 202px; height: 362px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 16413,
        "dislikes": 239,
        "similarQuestions": "[{\"title\": \"Maximal Rectangle\", \"titleSlug\": \"maximal-rectangle\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Score of a Good Subarray\", \"titleSlug\": \"maximum-score-of-a-good-subarray\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"797.3K\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 797331, \"totalSubmissionRaw\": 1821115, \"acRate\": \"43.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximal-rectangle",
          "title": "Maximal Rectangle",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-score-of-a-good-subarray",
          "title": "Maximum Score of a Good Subarray",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "maximal-rectangle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "85",
        "title": "Maximal Rectangle",
        "titleSlug": "maximal-rectangle",
        "content": "<p>Given a <code>rows x cols</code>&nbsp;binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, find the largest rectangle containing only <code>1</code>&#39;s and return <em>its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" style=\"width: 402px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The maximal rectangle is shown in the above picture.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == matrix.length</code></li>\n\t<li><code>cols == matrix[i].length</code></li>\n\t<li><code>1 &lt;= row, cols &lt;= 200</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 9597,
        "dislikes": 159,
        "similarQuestions": "[{\"title\": \"Largest Rectangle in Histogram\", \"titleSlug\": \"largest-rectangle-in-histogram\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximal Square\", \"titleSlug\": \"maximal-square\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"379.8K\", \"totalSubmission\": \"820K\", \"totalAcceptedRaw\": 379825, \"totalSubmissionRaw\": 820004, \"acRate\": \"46.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "largest-rectangle-in-histogram",
          "title": "Largest Rectangle in Histogram",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximal-square",
          "title": "Maximal Square",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "partition-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "86",
        "title": "Partition List",
        "titleSlug": "partition-list",
        "content": "<p>Given the <code>head</code> of a linked list and a value <code>x</code>, partition it such that all nodes <strong>less than</strong> <code>x</code> come before nodes <strong>greater than or equal</strong> to <code>x</code>.</p>\n\n<p>You should <strong>preserve</strong> the original relative order of the nodes in each of the two partitions.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/partition.jpg\" style=\"width: 662px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,4,3,2,5,2], x = 3\n<strong>Output:</strong> [1,2,2,4,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [2,1], x = 2\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 200]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>-200 &lt;= x &lt;= 200</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7105,
        "dislikes": 808,
        "similarQuestions": "[{\"title\": \"Partition Array According to Given Pivot\", \"titleSlug\": \"partition-array-according-to-given-pivot\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"576.2K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 576165, \"totalSubmissionRaw\": 1037501, \"acRate\": \"55.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "partition-array-according-to-given-pivot",
          "title": "Partition Array According to Given Pivot",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "scramble-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "87",
        "title": "Scramble String",
        "titleSlug": "scramble-string",
        "content": "<p>We can scramble a string s to get a string t using the following algorithm:</p>\n\n<ol>\n\t<li>If the length of the string is 1, stop.</li>\n\t<li>If the length of the string is &gt; 1, do the following:\n\t<ul>\n\t\t<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>\n\t\t<li><strong>Randomly</strong>&nbsp;decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>\n\t\t<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One possible scenario applied on s1 is:\n&quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index.\n&quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order.\n&quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at random index each of them.\n&quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order.\n&quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;.\n&quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is &quot;rgeat&quot; which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;a&quot;, s2 = &quot;a&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>1 &lt;= s1.length &lt;= 30</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3213,
        "dislikes": 1258,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"217.5K\", \"totalSubmission\": \"550.2K\", \"totalAcceptedRaw\": 217512, \"totalSubmissionRaw\": 550176, \"acRate\": \"39.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "merge-sorted-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "88",
        "title": "Merge Sorted Array",
        "titleSlug": "merge-sorted-array",
        "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 13553,
        "dislikes": 1596,
        "similarQuestions": "[{\"title\": \"Merge Two Sorted Lists\", \"titleSlug\": \"merge-two-sorted-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Squares of a Sorted Array\", \"titleSlug\": \"squares-of-a-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Interval List Intersections\", \"titleSlug\": \"interval-list-intersections\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Take K of Each Character From Left and Right\", \"titleSlug\": \"take-k-of-each-character-from-left-and-right\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"2.7M\", \"totalSubmission\": \"5.5M\", \"totalAcceptedRaw\": 2668060, \"totalSubmissionRaw\": 5493276, \"acRate\": \"48.6%\"}",
        "hints": [
          "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
          "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "merge-two-sorted-lists",
          "title": "Merge Two Sorted Lists",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "squares-of-a-sorted-array",
          "title": "Squares of a Sorted Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "interval-list-intersections",
          "title": "Interval List Intersections",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "take-k-of-each-character-from-left-and-right",
          "title": "Take K of Each Character From Left and Right",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
        "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "gray-code": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "89",
        "title": "Gray Code",
        "titleSlug": "gray-code",
        "content": "<p>An <strong>n-bit gray code sequence</strong> is a sequence of <code>2<sup>n</sup></code> integers where:</p>\n\n<ul>\n\t<li>Every integer is in the <strong>inclusive</strong> range <code>[0, 2<sup>n</sup> - 1]</code>,</li>\n\t<li>The first integer is <code>0</code>,</li>\n\t<li>An integer appears <strong>no more than once</strong> in the sequence,</li>\n\t<li>The binary representation of every pair of <strong>adjacent</strong> integers differs by <strong>exactly one bit</strong>, and</li>\n\t<li>The binary representation of the <strong>first</strong> and <strong>last</strong> integers differs by <strong>exactly one bit</strong>.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>any valid <strong>n-bit gray code sequence</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> [0,1,3,2]\n<strong>Explanation:</strong>\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 0<u>0</u> and 0<u>1</u> differ by one bit\n- <u>0</u>1 and <u>1</u>1 differ by one bit\n- 1<u>1</u> and 1<u>0</u> differ by one bit\n- <u>1</u>0 and <u>0</u>0 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- <u>0</u>0 and <u>1</u>0 differ by one bit\n- 1<u>0</u> and 1<u>1</u> differ by one bit\n- <u>1</u>1 and <u>0</u>1 differ by one bit\n- 0<u>1</u> and 0<u>0</u> differ by one bit\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 16</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2138,
        "dislikes": 2652,
        "similarQuestions": "[{\"title\": \"1-bit and 2-bit Characters\", \"titleSlug\": \"1-bit-and-2-bit-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"281.2K\", \"totalSubmission\": \"481.7K\", \"totalAcceptedRaw\": 281209, \"totalSubmissionRaw\": 481704, \"acRate\": \"58.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "1-bit-and-2-bit-characters",
          "title": "1-bit and 2-bit Characters",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "subsets-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "90",
        "title": "Subsets II",
        "titleSlug": "subsets-ii",
        "content": "<p>Given an integer array <code>nums</code> that may contain duplicates, return <em>all possible</em> <span data-keyword=\"subset\"><em>subsets</em></span><em> (the power set)</em>.</p>\n\n<p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,2]\n<strong>Output:</strong> [[],[1],[1,2],[1,2,2],[2],[2,2]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [[],[0]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9310,
        "dislikes": 272,
        "similarQuestions": "[{\"title\": \"Subsets\", \"titleSlug\": \"subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Array Given Subset Sums\", \"titleSlug\": \"find-array-given-subset-sums\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"831.9K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 831904, \"totalSubmissionRaw\": 1464757, \"acRate\": \"56.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "subsets",
          "title": "Subsets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-array-given-subset-sums",
          "title": "Find Array Given Subset Sums",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "decode-ways": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "91",
        "title": "Decode Ways",
        "titleSlug": "decode-ways",
        "content": "<p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p>\n\n<pre>\n&#39;A&#39; -&gt; &quot;1&quot;\n&#39;B&#39; -&gt; &quot;2&quot;\n...\n&#39;Z&#39; -&gt; &quot;26&quot;\n</pre>\n\n<p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>&quot;11106&quot;</code> can be mapped into:</p>\n\n<ul>\n\t<li><code>&quot;AAJF&quot;</code> with the grouping <code>(1 1 10 6)</code></li>\n\t<li><code>&quot;KJF&quot;</code> with the grouping <code>(11 10 6)</code></li>\n</ul>\n\n<p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>&quot;06&quot;</code> cannot be mapped into <code>&#39;F&#39;</code> since <code>&quot;6&quot;</code> is different from <code>&quot;06&quot;</code>.</p>\n\n<p>Given a string <code>s</code> containing only digits, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p>\n\n<p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> &quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;226&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> &quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;06&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> contains only digits and may contain leading zero(s).</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11519,
        "dislikes": 4459,
        "similarQuestions": "[{\"title\": \"Decode Ways II\", \"titleSlug\": \"decode-ways-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Separate Numbers\", \"titleSlug\": \"number-of-ways-to-separate-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Number of Texts\", \"titleSlug\": \"count-number-of-texts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"3.4M\", \"totalAcceptedRaw\": 1184431, \"totalSubmissionRaw\": 3438560, \"acRate\": \"34.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "decode-ways-ii",
          "title": "Decode Ways II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-ways-to-separate-numbers",
          "title": "Number of Ways to Separate Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-number-of-texts",
          "title": "Count Number of Texts",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "reverse-linked-list-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "92",
        "title": "Reverse Linked List II",
        "titleSlug": "reverse-linked-list-ii",
        "content": "<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], left = 2, right = 4\n<strong>Output:</strong> [1,4,3,2,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [5], left = 1, right = 1\n<strong>Output:</strong> [5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>-500 &lt;= Node.val &lt;= 500</code></li>\n\t<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do it in one pass?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11130,
        "dislikes": 542,
        "similarQuestions": "[{\"title\": \"Reverse Linked List\", \"titleSlug\": \"reverse-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Linked List", "slug": "linked-list" }],
        "stats": "{\"totalAccepted\": \"792.4K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 792373, \"totalSubmissionRaw\": 1673860, \"acRate\": \"47.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-linked-list",
          "title": "Reverse Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Linked List", "slug": "linked-list" }]
    }
  },
  "restore-ip-addresses": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "93",
        "title": "Restore IP Addresses",
        "titleSlug": "restore-ip-addresses",
        "content": "<p>A <strong>valid IP address</strong> consists of exactly four integers separated by single dots. Each integer is between <code>0</code> and <code>255</code> (<strong>inclusive</strong>) and cannot have leading zeros.</p>\n\n<ul>\n\t<li>For example, <code>&quot;0.1.2.201&quot;</code> and <code>&quot;192.168.1.1&quot;</code> are <strong>valid</strong> IP addresses, but <code>&quot;0.011.255.245&quot;</code>, <code>&quot;192.168.1.312&quot;</code> and <code>&quot;192.168@1.1&quot;</code> are <strong>invalid</strong> IP addresses.</li>\n</ul>\n\n<p>Given a string <code>s</code> containing only digits, return <em>all possible valid IP addresses that can be formed by inserting dots into </em><code>s</code>. You are <strong>not</strong> allowed to reorder or remove any digits in <code>s</code>. You may return the valid IP addresses in <strong>any</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;25525511135&quot;\n<strong>Output:</strong> [&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0000&quot;\n<strong>Output:</strong> [&quot;0.0.0.0&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;101023&quot;\n<strong>Output:</strong> [&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>s</code> consists of digits only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5047,
        "dislikes": 775,
        "similarQuestions": "[{\"title\": \"IP to CIDR\", \"titleSlug\": \"ip-to-cidr\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"433.6K\", \"totalSubmission\": \"884.9K\", \"totalAcceptedRaw\": 433634, \"totalSubmissionRaw\": 884897, \"acRate\": \"49.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "ip-to-cidr",
          "title": "IP to CIDR",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "binary-tree-inorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "94",
        "title": "Binary Tree Inorder Traversal",
        "titleSlug": "binary-tree-inorder-traversal",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" style=\"width: 125px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 12991,
        "dislikes": 724,
        "similarQuestions": "[{\"title\": \"Validate Binary Search Tree\", \"titleSlug\": \"validate-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Preorder Traversal\", \"titleSlug\": \"binary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Postorder Traversal\", \"titleSlug\": \"binary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Element in a BST\", \"titleSlug\": \"kth-smallest-element-in-a-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Binary Search Tree Value II\", \"titleSlug\": \"closest-binary-search-tree-value-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Inorder Successor in BST\", \"titleSlug\": \"inorder-successor-in-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Convert Binary Search Tree to Sorted Doubly Linked List\", \"titleSlug\": \"convert-binary-search-tree-to-sorted-doubly-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Distance Between BST Nodes\", \"titleSlug\": \"minimum-distance-between-bst-nodes\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"2.3M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 2343980, \"totalSubmissionRaw\": 3102695, \"acRate\": \"75.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "validate-binary-search-tree",
          "title": "Validate Binary Search Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-preorder-traversal",
          "title": "Binary Tree Preorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-postorder-traversal",
          "title": "Binary Tree Postorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-search-tree-iterator",
          "title": "Binary Search Tree Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "kth-smallest-element-in-a-bst",
          "title": "Kth Smallest Element in a BST",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "closest-binary-search-tree-value-ii",
          "title": "Closest Binary Search Tree Value II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "inorder-successor-in-bst",
          "title": "Inorder Successor in BST",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
          "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-distance-between-bst-nodes",
          "title": "Minimum Distance Between BST Nodes",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "unique-binary-search-trees-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "95",
        "title": "Unique Binary Search Trees II",
        "titleSlug": "unique-binary-search-trees-ii",
        "content": "<p>Given an integer <code>n</code>, return <em>all the structurally unique <strong>BST&#39;</strong>s (binary search trees), which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>. Return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7386,
        "dislikes": 499,
        "similarQuestions": "[{\"title\": \"Unique Binary Search Trees\", \"titleSlug\": \"unique-binary-search-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"431.8K\", \"totalSubmission\": \"758.2K\", \"totalAcceptedRaw\": 431839, \"totalSubmissionRaw\": 758238, \"acRate\": \"57.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "unique-binary-search-trees",
          "title": "Unique Binary Search Trees",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "different-ways-to-add-parentheses",
          "title": "Different Ways to Add Parentheses",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "unique-binary-search-trees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "96",
        "title": "Unique Binary Search Trees",
        "titleSlug": "unique-binary-search-trees",
        "content": "<p>Given an integer <code>n</code>, return <em>the number of structurally unique <strong>BST&#39;</strong>s (binary search trees) which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 19</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10108,
        "dislikes": 389,
        "similarQuestions": "[{\"title\": \"Unique Binary Search Trees II\", \"titleSlug\": \"unique-binary-search-trees-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"628.4K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 628366, \"totalSubmissionRaw\": 1036134, \"acRate\": \"60.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "unique-binary-search-trees-ii",
          "title": "Unique Binary Search Trees II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "interleaving-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "97",
        "title": "Interleaving String",
        "titleSlug": "interleaving-string",
        "content": "<p>Given strings <code>s1</code>, <code>s2</code>, and <code>s3</code>, find whether <code>s3</code> is formed by an <strong>interleaving</strong> of <code>s1</code> and <code>s2</code>.</p>\n\n<p>An <strong>interleaving</strong> of two strings <code>s</code> and <code>t</code> is a configuration where <code>s</code> and <code>t</code> are divided into <code>n</code> and <code>m</code> <span data-keyword=\"substring-nonempty\">substrings</span> respectively, such that:</p>\n\n<ul>\n\t<li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li>\n\t<li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li>\n\t<li><code>|n - m| &lt;= 1</code></li>\n\t<li>The <strong>interleaving</strong> is <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> or <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li>\n</ul>\n\n<p><strong>Note:</strong> <code>a + b</code> is the concatenation of strings <code>a</code> and <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg\" style=\"width: 561px; height: 203px;\" />\n<pre>\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbcbcac&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One way to obtain s3 is:\nSplit s1 into s1 = &quot;aa&quot; + &quot;bc&quot; + &quot;c&quot;, and s2 into s2 = &quot;dbbc&quot; + &quot;a&quot;.\nInterleaving the two splits, we get &quot;aa&quot; + &quot;dbbc&quot; + &quot;bc&quot; + &quot;a&quot; + &quot;c&quot; = &quot;aadbbcbcac&quot;.\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbbaccc&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Notice how it is impossible to interleave s2 with any other string to obtain s3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;&quot;, s2 = &quot;&quot;, s3 = &quot;&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= s3.length &lt;= 200</code></li>\n\t<li><code>s1</code>, <code>s2</code>, and <code>s3</code> consist of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it using only <code>O(s2.length)</code> additional memory space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7941,
        "dislikes": 455,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"483.6K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 483560, \"totalSubmissionRaw\": 1223288, \"acRate\": \"39.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "validate-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "98",
        "title": "Validate Binary Search Tree",
        "titleSlug": "validate-binary-search-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>\n\n<p>A <strong>valid BST</strong> is defined as follows:</p>\n\n<ul>\n\t<li>The left <span data-keyword=\"subtree\">subtree</span> of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg\" style=\"width: 302px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg\" style=\"width: 422px; height: 292px;\" />\n<pre>\n<strong>Input:</strong> root = [5,1,4,null,null,3,6]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The root node&#39;s value is 5 but its right child&#39;s value is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16221,
        "dislikes": 1323,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Mode in Binary Search Tree\", \"titleSlug\": \"find-mode-in-binary-search-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"6.7M\", \"totalAcceptedRaw\": 2168670, \"totalSubmissionRaw\": 6659912, \"acRate\": \"32.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-mode-in-binary-search-tree",
          "title": "Find Mode in Binary Search Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "recover-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "99",
        "title": "Recover Binary Search Tree",
        "titleSlug": "recover-binary-search-tree",
        "content": "<p>You are given the <code>root</code> of a binary search tree (BST), where the values of <strong>exactly</strong> two nodes of the tree were swapped by mistake. <em>Recover the tree without changing its structure</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,null,null,2]\n<strong>Output:</strong> [3,1,null,null,2]\n<strong>Explanation:</strong> 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg\" style=\"width: 581px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,null,2]\n<strong>Output:</strong> [2,1,4,null,null,3]\n<strong>Explanation:</strong> 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> A solution using <code>O(n)</code> space is pretty straight-forward. Could you devise a constant <code>O(1)</code> space solution?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7626,
        "dislikes": 245,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"429K\", \"totalSubmission\": \"818.5K\", \"totalAcceptedRaw\": 429037, \"totalSubmissionRaw\": 818475, \"acRate\": \"52.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "same-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "100",
        "title": "Same Tree",
        "titleSlug": "same-tree",
        "content": "<p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p>\n\n<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,3], q = [1,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg\" style=\"width: 382px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2], q = [1,null,2]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg\" style=\"width: 622px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> p = [1,2,1], q = [1,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 10792,
        "dislikes": 217,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"3M\", \"totalAcceptedRaw\": 1839764, \"totalSubmissionRaw\": 3049741, \"acRate\": \"60.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "symmetric-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "101",
        "title": "Symmetric Tree",
        "titleSlug": "symmetric-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e., symmetric around its center).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg\" style=\"width: 354px; height: 291px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,3,4,4,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg\" style=\"width: 308px; height: 258px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,null,3,null,3]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it both recursively and iteratively?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 14725,
        "dislikes": 356,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"3.3M\", \"totalAcceptedRaw\": 1846713, \"totalSubmissionRaw\": 3312113, \"acRate\": \"55.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "binary-tree-level-order-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "102",
        "title": "Binary Tree Level Order Traversal",
        "titleSlug": "binary-tree-level-order-traversal",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes&#39; values</em>. (i.e., from left to right, level by level).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[3],[9,20],[15,7]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 14746,
        "dislikes": 292,
        "similarQuestions": "[{\"title\": \"Binary Tree Zigzag Level Order Traversal\", \"titleSlug\": \"binary-tree-zigzag-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Level Order Traversal II\", \"titleSlug\": \"binary-tree-level-order-traversal-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Depth of Binary Tree\", \"titleSlug\": \"minimum-depth-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Vertical Order Traversal\", \"titleSlug\": \"binary-tree-vertical-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Average of Levels in Binary Tree\", \"titleSlug\": \"average-of-levels-in-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Level Order Traversal\", \"titleSlug\": \"n-ary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cousins in Binary Tree\", \"titleSlug\": \"cousins-in-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Sort a Binary Tree by Level\", \"titleSlug\": \"minimum-number-of-operations-to-sort-a-binary-tree-by-level\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Divide Nodes Into the Maximum Number of Groups\", \"titleSlug\": \"divide-nodes-into-the-maximum-number-of-groups\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"2M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 2048822, \"totalSubmissionRaw\": 3090339, \"acRate\": \"66.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-zigzag-level-order-traversal",
          "title": "Binary Tree Zigzag Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal-ii",
          "title": "Binary Tree Level Order Traversal II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-depth-of-binary-tree",
          "title": "Minimum Depth of Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-vertical-order-traversal",
          "title": "Binary Tree Vertical Order Traversal",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "average-of-levels-in-binary-tree",
          "title": "Average of Levels in Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "n-ary-tree-level-order-traversal",
          "title": "N-ary Tree Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "cousins-in-binary-tree",
          "title": "Cousins in Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
          "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "divide-nodes-into-the-maximum-number-of-groups",
          "title": "Divide Nodes Into the Maximum Number of Groups",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "binary-tree-zigzag-level-order-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "103",
        "title": "Binary Tree Zigzag Level Order Traversal",
        "titleSlug": "binary-tree-zigzag-level-order-traversal",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the zigzag level order traversal of its nodes&#39; values</em>. (i.e., from left to right, then right to left for the next level and alternate between).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[3],[20,9],[15,7]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10371,
        "dislikes": 273,
        "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 1080008, \"totalSubmissionRaw\": 1852935, \"acRate\": \"58.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal",
          "title": "Binary Tree Level Order Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "maximum-depth-of-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "104",
        "title": "Maximum Depth of Binary Tree",
        "titleSlug": "maximum-depth-of-binary-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p>\n\n<p>A binary tree&#39;s <strong>maximum depth</strong>&nbsp;is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 12266,
        "dislikes": 204,
        "similarQuestions": "[{\"title\": \"Balanced Binary Tree\", \"titleSlug\": \"balanced-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Depth of Binary Tree\", \"titleSlug\": \"minimum-depth-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Depth of N-ary Tree\", \"titleSlug\": \"maximum-depth-of-n-ary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Time Needed to Inform All Employees\", \"titleSlug\": \"time-needed-to-inform-all-employees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Amount of Time for Binary Tree to Be Infected\", \"titleSlug\": \"amount-of-time-for-binary-tree-to-be-infected\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Height of Binary Tree After Subtree Removal Queries\", \"titleSlug\": \"height-of-binary-tree-after-subtree-removal-queries\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"2.8M\", \"totalSubmission\": \"3.7M\", \"totalAcceptedRaw\": 2775014, \"totalSubmissionRaw\": 3708442, \"acRate\": \"74.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "balanced-binary-tree",
          "title": "Balanced Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-depth-of-binary-tree",
          "title": "Minimum Depth of Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-depth-of-n-ary-tree",
          "title": "Maximum Depth of N-ary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "time-needed-to-inform-all-employees",
          "title": "Time Needed to Inform All Employees",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "amount-of-time-for-binary-tree-to-be-infected",
          "title": "Amount of Time for Binary Tree to Be Infected",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "height-of-binary-tree-after-subtree-removal-queries",
          "title": "Height of Binary Tree After Subtree Removal Queries",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "construct-binary-tree-from-preorder-and-inorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "105",
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "content": "<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n<strong>Output:</strong> [3,9,20,null,null,15,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> preorder = [-1], inorder = [-1]\n<strong>Output:</strong> [-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>\n\t<li><code>inorder.length == preorder.length</code></li>\n\t<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>\n\t<li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li>\n\t<li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li>\n\t<li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li>\n\t<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 14351,
        "dislikes": 449,
        "similarQuestions": "[{\"title\": \"Construct Binary Tree from Inorder and Postorder Traversal\", \"titleSlug\": \"construct-binary-tree-from-inorder-and-postorder-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1121019, \"totalSubmissionRaw\": 1776034, \"acRate\": \"63.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
          "title": "Construct Binary Tree from Inorder and Postorder Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "construct-binary-tree-from-inorder-and-postorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "106",
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "content": "<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n<strong>Output:</strong> [3,9,20,null,null,15,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> inorder = [-1], postorder = [-1]\n<strong>Output:</strong> [-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= inorder.length &lt;= 3000</code></li>\n\t<li><code>postorder.length == inorder.length</code></li>\n\t<li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li>\n\t<li><code>inorder</code> and <code>postorder</code> consist of <strong>unique</strong> values.</li>\n\t<li>Each value of <code>postorder</code> also appears in <code>inorder</code>.</li>\n\t<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>\n\t<li><code>postorder</code> is <strong>guaranteed</strong> to be the postorder traversal of the tree.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7750,
        "dislikes": 123,
        "similarQuestions": "[{\"title\": \"Construct Binary Tree from Preorder and Inorder Traversal\", \"titleSlug\": \"construct-binary-tree-from-preorder-and-inorder-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"592.4K\", \"totalSubmission\": \"957.4K\", \"totalAcceptedRaw\": 592387, \"totalSubmissionRaw\": 957378, \"acRate\": \"61.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
          "title": "Construct Binary Tree from Preorder and Inorder Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "binary-tree-level-order-traversal-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "107",
        "title": "Binary Tree Level Order Traversal II",
        "titleSlug": "binary-tree-level-order-traversal-ii",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the bottom-up level order traversal of its nodes&#39; values</em>. (i.e., from left to right, level by level from leaf to root).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[15,7],[9,20],[3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4719,
        "dislikes": 318,
        "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Average of Levels in Binary Tree\", \"titleSlug\": \"average-of-levels-in-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"618.2K\", \"totalSubmission\": \"986.8K\", \"totalAcceptedRaw\": 618226, \"totalSubmissionRaw\": 986771, \"acRate\": \"62.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal",
          "title": "Binary Tree Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "average-of-levels-in-binary-tree",
          "title": "Average of Levels in Binary Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "convert-sorted-array-to-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "108",
        "title": "Convert Sorted Array to Binary Search Tree",
        "titleSlug": "convert-sorted-array-to-binary-search-tree",
        "content": "<p>Given an integer array <code>nums</code> where the elements are sorted in <strong>ascending order</strong>, convert <em>it to a </em><span data-keyword=\"height-balanced\"><strong><em>height-balanced</em></strong></span> <em>binary search tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg\" style=\"width: 302px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> nums = [-10,-3,0,5,9]\n<strong>Output:</strong> [0,-3,9,-10,null,5]\n<strong>Explanation:</strong> [0,-10,5,null,-3,null,9] is also accepted:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg\" style=\"width: 302px; height: 222px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree.jpg\" style=\"width: 342px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,3]\n<strong>Output:</strong> [3,1]\n<strong>Explanation:</strong> [1,null,3] and [3,1] are both height-balanced BSTs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in a <strong>strictly increasing</strong> order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 10582,
        "dislikes": 531,
        "similarQuestions": "[{\"title\": \"Convert Sorted List to Binary Search Tree\", \"titleSlug\": \"convert-sorted-list-to-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 1116591, \"totalSubmissionRaw\": 1570892, \"acRate\": \"71.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "convert-sorted-list-to-binary-search-tree",
          "title": "Convert Sorted List to Binary Search Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "convert-sorted-list-to-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "109",
        "title": "Convert Sorted List to Binary Search Tree",
        "titleSlug": "convert-sorted-list-to-binary-search-tree",
        "content": "<p>Given the <code>head</code> of a singly linked list where elements are sorted in <strong>ascending order</strong>, convert <em>it to a </em><span data-keyword=\"height-balanced\"><strong><em>height-balanced</em></strong></span> <em>binary search tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/linked.jpg\" style=\"width: 500px; height: 388px;\" />\n<pre>\n<strong>Input:</strong> head = [-10,-3,0,5,9]\n<strong>Output:</strong> [0,-3,9,-10,null,5]\n<strong>Explanation:</strong> One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in <code>head</code> is in the range <code>[0, 2 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7265,
        "dislikes": 157,
        "similarQuestions": "[{\"title\": \"Convert Sorted Array to Binary Search Tree\", \"titleSlug\": \"convert-sorted-array-to-binary-search-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Create Binary Tree From Descriptions\", \"titleSlug\": \"create-binary-tree-from-descriptions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"504.4K\", \"totalSubmission\": \"822.8K\", \"totalAcceptedRaw\": 504373, \"totalSubmissionRaw\": 822835, \"acRate\": \"61.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "convert-sorted-array-to-binary-search-tree",
          "title": "Convert Sorted Array to Binary Search Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "create-binary-tree-from-descriptions",
          "title": "Create Binary Tree From Descriptions",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "balanced-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "110",
        "title": "Balanced Binary Tree",
        "titleSlug": "balanced-binary-tree",
        "content": "<p>Given a binary tree, determine if it is <span data-keyword=\"height-balanced\"><strong>height-balanced</strong></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg\" style=\"width: 342px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg\" style=\"width: 452px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,3,3,null,null,4,4]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 10235,
        "dislikes": 611,
        "similarQuestions": "[{\"title\": \"Maximum Depth of Binary Tree\", \"titleSlug\": \"maximum-depth-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1331853, \"totalSubmissionRaw\": 2607273, \"acRate\": \"51.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-depth-of-binary-tree",
          "title": "Maximum Depth of Binary Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "minimum-depth-of-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "111",
        "title": "Minimum Depth of Binary Tree",
        "titleSlug": "minimum-depth-of-binary-tree",
        "content": "<p>Given a binary tree, find its minimum depth.</p>\n\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg\" style=\"width: 432px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,null,3,null,4,null,5,null,6]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7067,
        "dislikes": 1273,
        "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Depth of Binary Tree\", \"titleSlug\": \"maximum-depth-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1115973, \"totalSubmissionRaw\": 2369268, \"acRate\": \"47.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal",
          "title": "Binary Tree Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-depth-of-binary-tree",
          "title": "Maximum Depth of Binary Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "path-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "112",
        "title": "Path Sum",
        "titleSlug": "path-sum",
        "content": "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <code>true</code> if the tree has a <strong>root-to-leaf</strong> path such that adding up all the values along the path equals <code>targetSum</code>.</p>\n\n<p>A <strong>leaf</strong> is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg\" style=\"width: 500px; height: 356px;\" />\n<pre>\n<strong>Input:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The root-to-leaf path with the target sum is shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3], targetSum = 5\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There two root-to-leaf paths in the tree:\n(1 --&gt; 2): The sum is 3.\n(1 --&gt; 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [], targetSum = 0\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Since the tree is empty, there are no root-to-leaf paths.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 9302,
        "dislikes": 1053,
        "similarQuestions": "[{\"title\": \"Path Sum II\", \"titleSlug\": \"path-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Maximum Path Sum\", \"titleSlug\": \"binary-tree-maximum-path-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sum Root to Leaf Numbers\", \"titleSlug\": \"sum-root-to-leaf-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum III\", \"titleSlug\": \"path-sum-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum IV\", \"titleSlug\": \"path-sum-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1333205, \"totalSubmissionRaw\": 2688457, \"acRate\": \"49.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-ii",
          "title": "Path Sum II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "binary-tree-maximum-path-sum",
          "title": "Binary Tree Maximum Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-root-to-leaf-numbers",
          "title": "Sum Root to Leaf Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iii",
          "title": "Path Sum III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iv",
          "title": "Path Sum IV",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "path-sum-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "113",
        "title": "Path Sum II",
        "titleSlug": "path-sum-ii",
        "content": "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <em>all <strong>root-to-leaf</strong> paths where the sum of the node values in the path equals </em><code>targetSum</code><em>. Each path should be returned as a list of the node <strong>values</strong>, not node references</em>.</p>\n\n<p>A <strong>root-to-leaf</strong> path is a path starting from the root and ending at any leaf node. A <strong>leaf</strong> is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg\" style=\"width: 500px; height: 356px;\" />\n<pre>\n<strong>Input:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n<strong>Output:</strong> [[5,4,11,2],[5,8,4,5]]\n<strong>Explanation:</strong> There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" style=\"width: 212px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3], targetSum = 5\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2], targetSum = 0\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7683,
        "dislikes": 148,
        "similarQuestions": "[{\"title\": \"Path Sum\", \"titleSlug\": \"path-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Paths\", \"titleSlug\": \"binary-tree-paths\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Path Sum III\", \"titleSlug\": \"path-sum-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum IV\", \"titleSlug\": \"path-sum-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Step-By-Step Directions From a Binary Tree Node to Another\", \"titleSlug\": \"step-by-step-directions-from-a-binary-tree-node-to-another\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"808.4K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 808438, \"totalSubmissionRaw\": 1394879, \"acRate\": \"58.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "path-sum",
          "title": "Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-paths",
          "title": "Binary Tree Paths",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iii",
          "title": "Path Sum III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iv",
          "title": "Path Sum IV",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "step-by-step-directions-from-a-binary-tree-node-to-another",
          "title": "Step-By-Step Directions From a Binary Tree Node to Another",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "flatten-binary-tree-to-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "114",
        "title": "Flatten Binary Tree to Linked List",
        "titleSlug": "flatten-binary-tree-to-linked-list",
        "content": "<p>Given the <code>root</code> of a binary tree, flatten the tree into a &quot;linked list&quot;:</p>\n\n<ul>\n\t<li>The &quot;linked list&quot; should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</li>\n\t<li>The &quot;linked list&quot; should be in the same order as a <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR\" target=\"_blank\"><strong>pre-order</strong><strong> traversal</strong></a> of the binary tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg\" style=\"width: 500px; height: 226px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,5,3,4,null,6]\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Can you flatten the tree in-place (with <code>O(1)</code> extra space)?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11752,
        "dislikes": 544,
        "similarQuestions": "[{\"title\": \"Flatten a Multilevel Doubly Linked List\", \"titleSlug\": \"flatten-a-multilevel-doubly-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Correct a Binary Tree\", \"titleSlug\": \"correct-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"876.6K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 876576, \"totalSubmissionRaw\": 1370968, \"acRate\": \"63.9%\"}",
        "hints": [
          "If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-a-multilevel-doubly-linked-list",
          "title": "Flatten a Multilevel Doubly Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "correct-a-binary-tree",
          "title": "Correct a Binary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal."
      ],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "distinct-subsequences": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "115",
        "title": "Distinct Subsequences",
        "titleSlug": "distinct-subsequences",
        "content": "<p>Given two strings s and t, return <i>the number of distinct</i> <b><i>subsequences</i></b><i> of </i>s<i> which equals </i>t.</p>\n\n<p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;rabbbit&quot;, t = &quot;rabbit&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nAs shown below, there are 3 ways you can generate &quot;rabbit&quot; from s.\n<code><strong><u>rabb</u></strong>b<strong><u>it</u></strong></code>\n<code><strong><u>ra</u></strong>b<strong><u>bbit</u></strong></code>\n<code><strong><u>rab</u></strong>b<strong><u>bit</u></strong></code>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babgbag&quot;, t = &quot;bag&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nAs shown below, there are 5 ways you can generate &quot;bag&quot; from s.\n<code><strong><u>ba</u></strong>b<u><strong>g</strong></u>bag</code>\n<code><strong><u>ba</u></strong>bgba<strong><u>g</u></strong></code>\n<code><u><strong>b</strong></u>abgb<strong><u>ag</u></strong></code>\n<code>ba<u><strong>b</strong></u>gb<u><strong>ag</strong></u></code>\n<code>babg<strong><u>bag</u></strong></code></pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li>\n\t<li><code>s</code> and <code>t</code> consist of English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 6367,
        "dislikes": 279,
        "similarQuestions": "[{\"title\": \"Number of Unique Good Subsequences\", \"titleSlug\": \"number-of-unique-good-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"358.7K\", \"totalSubmission\": \"780.2K\", \"totalAcceptedRaw\": 358680, \"totalSubmissionRaw\": 780237, \"acRate\": \"46.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-unique-good-subsequences",
          "title": "Number of Unique Good Subsequences",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "populating-next-right-pointers-in-each-node": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "116",
        "title": "Populating Next Right Pointers in Each Node",
        "titleSlug": "populating-next-right-pointers-in-each-node",
        "content": "<p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\n\n<pre>\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</pre>\n\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png\" style=\"width: 500px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6,7]\n<strong>Output:</strong> [1,#,2,3,#,4,5,6,7,#]\n<strong>Explanation: </strong>Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2<sup>12</sup> - 1]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong></p>\n\n<ul>\n\t<li>You may only use constant extra space.</li>\n\t<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9400,
        "dislikes": 291,
        "similarQuestions": "[{\"title\": \"Populating Next Right Pointers in Each Node II\", \"titleSlug\": \"populating-next-right-pointers-in-each-node-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Right Side View\", \"titleSlug\": \"binary-tree-right-side-view\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cycle Length Queries in a Tree\", \"titleSlug\": \"cycle-length-queries-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"993.3K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 993260, \"totalSubmissionRaw\": 1603636, \"acRate\": \"61.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "populating-next-right-pointers-in-each-node-ii",
          "title": "Populating Next Right Pointers in Each Node II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-right-side-view",
          "title": "Binary Tree Right Side View",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "cycle-length-queries-in-a-tree",
          "title": "Cycle Length Queries in a Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "populating-next-right-pointers-in-each-node-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "117",
        "title": "Populating Next Right Pointers in Each Node II",
        "titleSlug": "populating-next-right-pointers-in-each-node-ii",
        "content": "<p>Given a binary tree</p>\n\n<pre>\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</pre>\n\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/15/117_sample.png\" style=\"width: 500px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,null,7]\n<strong>Output:</strong> [1,#,2,3,#,4,5,7,#]\n<strong>Explanation: </strong>Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 6000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong></p>\n\n<ul>\n\t<li>You may only use constant extra space.</li>\n\t<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5680,
        "dislikes": 310,
        "similarQuestions": "[{\"title\": \"Populating Next Right Pointers in Each Node\", \"titleSlug\": \"populating-next-right-pointers-in-each-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"594K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 594015, \"totalSubmissionRaw\": 1149285, \"acRate\": \"51.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "populating-next-right-pointers-in-each-node",
          "title": "Populating Next Right Pointers in Each Node",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "pascals-triangle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "118",
        "title": "Pascal's Triangle",
        "titleSlug": "pascals-triangle",
        "content": "<p>Given an integer <code>numRows</code>, return the first numRows of <strong>Pascal&#39;s triangle</strong>.</p>\n\n<p>In <strong>Pascal&#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n<img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> numRows = 5\n<strong>Output:</strong> [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> numRows = 1\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numRows &lt;= 30</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 12265,
        "dislikes": 396,
        "similarQuestions": "[{\"title\": \"Pascal's Triangle II\", \"titleSlug\": \"pascals-triangle-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1520602, \"totalSubmissionRaw\": 2069606, \"acRate\": \"73.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "pascals-triangle-ii",
          "title": "Pascal's Triangle II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "pascals-triangle-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "119",
        "title": "Pascal's Triangle II",
        "titleSlug": "pascals-triangle-ii",
        "content": "<p>Given an integer <code>rowIndex</code>, return the <code>rowIndex<sup>th</sup></code> (<strong>0-indexed</strong>) row of the <strong>Pascal&#39;s triangle</strong>.</p>\n\n<p>In <strong>Pascal&#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n<img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 3\n<strong>Output:</strong> [1,3,3,1]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 0\n<strong>Output:</strong> [1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 1\n<strong>Output:</strong> [1,1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= rowIndex &lt;= 33</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4698,
        "dislikes": 328,
        "similarQuestions": "[{\"title\": \"Pascal's Triangle\", \"titleSlug\": \"pascals-triangle\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Triangular Sum of an Array\", \"titleSlug\": \"find-triangular-sum-of-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"830.7K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 830732, \"totalSubmissionRaw\": 1309170, \"acRate\": \"63.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "pascals-triangle",
          "title": "Pascal's Triangle",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-triangular-sum-of-an-array",
          "title": "Find Triangular Sum of an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "triangle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "120",
        "title": "Triangle",
        "titleSlug": "triangle",
        "content": "<p>Given a <code>triangle</code> array, return <em>the minimum path sum from top to bottom</em>.</p>\n\n<p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The triangle looks like:\n   <u>2</u>\n  <u>3</u> 4\n 6 <u>5</u> 7\n4 <u>1</u> 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[-10]]\n<strong>Output:</strong> -10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= triangle.length &lt;= 200</code></li>\n\t<li><code>triangle[0].length == 1</code></li>\n\t<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you&nbsp;do this using only <code>O(n)</code> extra space, where <code>n</code> is the total number of rows in the triangle?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9158,
        "dislikes": 526,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"689.5K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 689506, \"totalSubmissionRaw\": 1232397, \"acRate\": \"55.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "best-time-to-buy-and-sell-stock": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "121",
        "title": "Best Time to Buy and Sell Stock",
        "titleSlug": "best-time-to-buy-and-sell-stock",
        "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>\n\n<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,1,5,3,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transactions are done and the max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 29500,
        "dislikes": 1030,
        "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock II\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock III\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock IV\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock with Cooldown\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-with-cooldown\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Beauty in the Array\", \"titleSlug\": \"sum-of-beauty-in-the-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Difference Between Increasing Elements\", \"titleSlug\": \"maximum-difference-between-increasing-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Profit From Trading Stocks\", \"titleSlug\": \"maximum-profit-from-trading-stocks\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"4.1M\", \"totalSubmission\": \"7.7M\", \"totalAcceptedRaw\": 4111119, \"totalSubmissionRaw\": 7687963, \"acRate\": \"53.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-subarray",
          "title": "Maximum Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-ii",
          "title": "Best Time to Buy and Sell Stock II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "best-time-to-buy-and-sell-stock-iii",
          "title": "Best Time to Buy and Sell Stock III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "best-time-to-buy-and-sell-stock-iv",
          "title": "Best Time to Buy and Sell Stock IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
          "title": "Best Time to Buy and Sell Stock with Cooldown",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-beauty-in-the-array",
          "title": "Sum of Beauty in the Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-difference-between-increasing-elements",
          "title": "Maximum Difference Between Increasing Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-profit-from-trading-stocks",
          "title": "Maximum Profit From Trading Stocks",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "best-time-to-buy-and-sell-stock-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "122",
        "title": "Best Time to Buy and Sell Stock II",
        "titleSlug": "best-time-to-buy-and-sell-stock-ii",
        "content": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>On each day, you may decide to buy and/or sell the stock. You can only hold <strong>at most one</strong> share of the stock at any time. However, you can buy it then immediately sell it on the <strong>same day</strong>.</p>\n\n<p>Find and return <em>the <strong>maximum</strong> profit you can achieve</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,1,5,3,6,4]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,4,5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12926,
        "dislikes": 2637,
        "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock\", \"titleSlug\": \"best-time-to-buy-and-sell-stock\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock III\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock IV\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock with Cooldown\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-with-cooldown\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock with Transaction Fee\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-with-transaction-fee\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Profit From Trading Stocks\", \"titleSlug\": \"maximum-profit-from-trading-stocks\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1708621, \"totalSubmissionRaw\": 2605404, \"acRate\": \"65.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "best-time-to-buy-and-sell-stock",
          "title": "Best Time to Buy and Sell Stock",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "best-time-to-buy-and-sell-stock-iii",
          "title": "Best Time to Buy and Sell Stock III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "best-time-to-buy-and-sell-stock-iv",
          "title": "Best Time to Buy and Sell Stock IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
          "title": "Best Time to Buy and Sell Stock with Cooldown",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
          "title": "Best Time to Buy and Sell Stock with Transaction Fee",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-profit-from-trading-stocks",
          "title": "Maximum Profit From Trading Stocks",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "best-time-to-buy-and-sell-stock-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "123",
        "title": "Best Time to Buy and Sell Stock III",
        "titleSlug": "best-time-to-buy-and-sell-stock-iii",
        "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>Find the maximum profit you can achieve. You may complete <strong>at most two transactions</strong>.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [3,3,5,0,0,3,1,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,4,5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transaction is done, i.e. max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 9307,
        "dislikes": 173,
        "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock\", \"titleSlug\": \"best-time-to-buy-and-sell-stock\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock II\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock IV\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Sum of 3 Non-Overlapping Subarrays\", \"titleSlug\": \"maximum-sum-of-3-non-overlapping-subarrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Profit From Trading Stocks\", \"titleSlug\": \"maximum-profit-from-trading-stocks\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximize Win From Two Segments\", \"titleSlug\": \"maximize-win-from-two-segments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"555.4K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 555398, \"totalSubmissionRaw\": 1175775, \"acRate\": \"47.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "best-time-to-buy-and-sell-stock",
          "title": "Best Time to Buy and Sell Stock",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-ii",
          "title": "Best Time to Buy and Sell Stock II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "best-time-to-buy-and-sell-stock-iv",
          "title": "Best Time to Buy and Sell Stock IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-sum-of-3-non-overlapping-subarrays",
          "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-profit-from-trading-stocks",
          "title": "Maximum Profit From Trading Stocks",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximize-win-from-two-segments",
          "title": "Maximize Win From Two Segments",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "binary-tree-maximum-path-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "124",
        "title": "Binary Tree Maximum Path Sum",
        "titleSlug": "binary-tree-maximum-path-sum",
        "content": "<p>A <strong>path</strong> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong>. Note that the path does not need to pass through the root.</p>\n\n<p>The <strong>path sum</strong> of a path is the sum of the node&#39;s values in the path.</p>\n\n<p>Given the <code>root</code> of a binary tree, return <em>the maximum <strong>path sum</strong> of any <strong>non-empty</strong> path</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\" style=\"width: 322px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg\" />\n<pre>\n<strong>Input:</strong> root = [-10,9,20,null,null,15,7]\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 3 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 15985,
        "dislikes": 692,
        "similarQuestions": "[{\"title\": \"Path Sum\", \"titleSlug\": \"path-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum Root to Leaf Numbers\", \"titleSlug\": \"sum-root-to-leaf-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum IV\", \"titleSlug\": \"path-sum-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Univalue Path\", \"titleSlug\": \"longest-univalue-path\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Time Needed to Inform All Employees\", \"titleSlug\": \"time-needed-to-inform-all-employees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Difference Between Maximum and Minimum Price Sum\", \"titleSlug\": \"difference-between-maximum-and-minimum-price-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.8M\", \"totalAcceptedRaw\": 1124999, \"totalSubmissionRaw\": 2828920, \"acRate\": \"39.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "path-sum",
          "title": "Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-root-to-leaf-numbers",
          "title": "Sum Root to Leaf Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iv",
          "title": "Path Sum IV",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-univalue-path",
          "title": "Longest Univalue Path",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "time-needed-to-inform-all-employees",
          "title": "Time Needed to Inform All Employees",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "difference-between-maximum-and-minimum-price-sum",
          "title": "Difference Between Maximum and Minimum Price Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "valid-palindrome": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "125",
        "title": "Valid Palindrome",
        "titleSlug": "valid-palindrome",
        "content": "<p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; &quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s is an empty string &quot;&quot; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8676,
        "dislikes": 8131,
        "similarQuestions": "[{\"title\": \"Palindrome Linked List\", \"titleSlug\": \"palindrome-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome II\", \"titleSlug\": \"valid-palindrome-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Product of the Length of Two Palindromic Subsequences\", \"titleSlug\": \"maximum-product-of-the-length-of-two-palindromic-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find First Palindromic String in the Array\", \"titleSlug\": \"find-first-palindromic-string-in-the-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome IV\", \"titleSlug\": \"valid-palindrome-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"2.6M\", \"totalSubmission\": \"5.5M\", \"totalAcceptedRaw\": 2554311, \"totalSubmissionRaw\": 5506699, \"acRate\": \"46.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-linked-list",
          "title": "Palindrome Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "valid-palindrome-ii",
          "title": "Valid Palindrome II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
          "title": "Maximum Product of the Length of Two Palindromic Subsequences",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-first-palindromic-string-in-the-array",
          "title": "Find First Palindromic String in the Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "valid-palindrome-iv",
          "title": "Valid Palindrome IV",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "word-ladder-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "126",
        "title": "Word Ladder II",
        "titleSlug": "word-ladder-ii",
        "content": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>all the <strong>shortest transformation sequences</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words </em><code>[beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> [[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]]\n<strong>Explanation:</strong>&nbsp;There are 2 shortest transformation sequences:\n&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;\n&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;lot&quot; -&gt; &quot;log&quot; -&gt; &quot;cog&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 5</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 500</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n\t<li>The <strong>sum</strong> of all shortest transformation sequences does not exceed <code>10<sup>5</sup></code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5812,
        "dislikes": 716,
        "similarQuestions": "[{\"title\": \"Word Ladder\", \"titleSlug\": \"word-ladder\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Groups of Strings\", \"titleSlug\": \"groups-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"355.7K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 355682, \"totalSubmissionRaw\": 1301958, \"acRate\": \"27.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "word-ladder",
          "title": "Word Ladder",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "groups-of-strings",
          "title": "Groups of Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "word-ladder": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "127",
        "title": "Word Ladder",
        "titleSlug": "word-ladder",
        "content": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 10</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 5000</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 11574,
        "dislikes": 1844,
        "similarQuestions": "[{\"title\": \"Word Ladder II\", \"titleSlug\": \"word-ladder-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Genetic Mutation\", \"titleSlug\": \"minimum-genetic-mutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Words Within Two Edits of Dictionary\", \"titleSlug\": \"words-within-two-edits-of-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"999.4K\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 999403, \"totalSubmissionRaw\": 2600538, \"acRate\": \"38.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "word-ladder-ii",
          "title": "Word Ladder II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-genetic-mutation",
          "title": "Minimum Genetic Mutation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "words-within-two-edits-of-dictionary",
          "title": "Words Within Two Edits of Dictionary",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "longest-consecutive-sequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "128",
        "title": "Longest Consecutive Sequence",
        "titleSlug": "longest-consecutive-sequence",
        "content": "<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [100,4,200,1,3,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Therefore its length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,3,7,2,5,8,4,6,0,1]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 18997,
        "dislikes": 891,
        "similarQuestions": "[{\"title\": \"Binary Tree Longest Consecutive Sequence\", \"titleSlug\": \"binary-tree-longest-consecutive-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Three Consecutive Integers That Sum to a Given Number\", \"titleSlug\": \"find-three-consecutive-integers-that-sum-to-a-given-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Consecutive Floors Without Special Floors\", \"titleSlug\": \"maximum-consecutive-floors-without-special-floors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Length of the Longest Alphabetical Continuous Substring\", \"titleSlug\": \"length-of-the-longest-alphabetical-continuous-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Union Find", "slug": "union-find" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1502910, \"totalSubmissionRaw\": 3172119, \"acRate\": \"47.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-longest-consecutive-sequence",
          "title": "Binary Tree Longest Consecutive Sequence",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-three-consecutive-integers-that-sum-to-a-given-number",
          "title": "Find Three Consecutive Integers That Sum to a Given Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-consecutive-floors-without-special-floors",
          "title": "Maximum Consecutive Floors Without Special Floors",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "length-of-the-longest-alphabetical-continuous-substring",
          "title": "Length of the Longest Alphabetical Continuous Substring",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Union Find", "slug": "union-find" }
      ]
    }
  },
  "sum-root-to-leaf-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "129",
        "title": "Sum Root to Leaf Numbers",
        "titleSlug": "sum-root-to-leaf-numbers",
        "content": "<p>You are given the <code>root</code> of a binary tree containing digits from <code>0</code> to <code>9</code> only.</p>\n\n<p>Each root-to-leaf path in the tree represents a number.</p>\n\n<ul>\n\t<li>For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code> represents the number <code>123</code>.</li>\n</ul>\n\n<p>Return <em>the total sum of all root-to-leaf numbers</em>. Test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>A <strong>leaf</strong> node is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg\" style=\"width: 212px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> 25\n<strong>Explanation:</strong>\nThe root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.\nThe root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.\nTherefore, sum = 12 + 13 = <code>25</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg\" style=\"width: 292px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [4,9,0,5,1]\n<strong>Output:</strong> 1026\n<strong>Explanation:</strong>\nThe root-to-leaf path <code>4-&gt;9-&gt;5</code> represents the number 495.\nThe root-to-leaf path <code>4-&gt;9-&gt;1</code> represents the number 491.\nThe root-to-leaf path <code>4-&gt;0</code> represents the number 40.\nTherefore, sum = 495 + 491 + 40 = <code>1026</code>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>The depth of the tree will not exceed <code>10</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7352,
        "dislikes": 119,
        "similarQuestions": "[{\"title\": \"Path Sum\", \"titleSlug\": \"path-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Maximum Path Sum\", \"titleSlug\": \"binary-tree-maximum-path-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Smallest String Starting From Leaf\", \"titleSlug\": \"smallest-string-starting-from-leaf\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"690.2K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 690243, \"totalSubmissionRaw\": 1101324, \"acRate\": \"62.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "path-sum",
          "title": "Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "binary-tree-maximum-path-sum",
          "title": "Binary Tree Maximum Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-string-starting-from-leaf",
          "title": "Smallest String Starting From Leaf",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "surrounded-regions": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "130",
        "title": "Surrounded Regions",
        "titleSlug": "surrounded-regions",
        "content": "<p>Given an <code>m x n</code> matrix <code>board</code> containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code>, <em>capture all regions that are 4-directionally&nbsp;surrounded by</em> <code>&#39;X&#39;</code>.</p>\n\n<p>A region is <strong>captured</strong> by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg\" style=\"width: 550px; height: 237px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]\n<strong>Output:</strong> [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]\n<strong>Explanation:</strong> Notice that an &#39;O&#39; should not be flipped if:\n- It is on the border, or\n- It is adjacent to an &#39;O&#39; that should not be flipped.\nThe bottom &#39;O&#39; is on the border, so it is not flipped.\nThe other three &#39;O&#39; form a surrounded region, so they are flipped.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = [[&quot;X&quot;]]\n<strong>Output:</strong> [[&quot;X&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>board[i][j]</code> is <code>&#39;X&#39;</code> or <code>&#39;O&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8204,
        "dislikes": 1711,
        "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"633K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 632963, \"totalSubmissionRaw\": 1641444, \"acRate\": \"38.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-islands",
          "title": "Number of Islands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "walls-and-gates",
          "title": "Walls and Gates",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "palindrome-partitioning": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "131",
        "title": "Palindrome Partitioning",
        "titleSlug": "palindrome-partitioning",
        "content": "<p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword=\"substring-nonempty\">substring</span> of the partition is a <span data-keyword=\"palindrome-string\"><strong>palindrome</strong></span>. Return <em>all possible palindrome partitioning of </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aab\"\n<strong>Output:</strong> [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"a\"\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 16</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12037,
        "dislikes": 398,
        "similarQuestions": "[{\"title\": \"Palindrome Partitioning II\", \"titleSlug\": \"palindrome-partitioning-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning IV\", \"titleSlug\": \"palindrome-partitioning-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"739.4K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 739353, \"totalSubmissionRaw\": 1108060, \"acRate\": \"66.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "palindrome-partitioning-ii",
          "title": "Palindrome Partitioning II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "palindrome-partitioning-iv",
          "title": "Palindrome Partitioning IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
          "title": "Maximum Number of Non-overlapping Palindrome Substrings",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "palindrome-partitioning-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "132",
        "title": "Palindrome Partitioning II",
        "titleSlug": "palindrome-partitioning-ii",
        "content": "<p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword=\"substring-nonempty\">substring</span> of the partition is a <span data-keyword=\"palindrome-string\">palindrome</span>.</p>\n\n<p>Return <em>the <strong>minimum</strong> cuts needed for a palindrome partitioning of</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The palindrome partitioning [&quot;aa&quot;,&quot;b&quot;] could be produced using 1 cut.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5270,
        "dislikes": 137,
        "similarQuestions": "[{\"title\": \"Palindrome Partitioning\", \"titleSlug\": \"palindrome-partitioning\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning IV\", \"titleSlug\": \"palindrome-partitioning-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Great Partitions\", \"titleSlug\": \"number-of-great-partitions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"264.6K\", \"totalSubmission\": \"786K\", \"totalAcceptedRaw\": 264561, \"totalSubmissionRaw\": 786022, \"acRate\": \"33.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "palindrome-partitioning",
          "title": "Palindrome Partitioning",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "palindrome-partitioning-iv",
          "title": "Palindrome Partitioning IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
          "title": "Maximum Number of Non-overlapping Palindrome Substrings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-great-partitions",
          "title": "Number of Great Partitions",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "clone-graph": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "133",
        "title": "Clone Graph",
        "titleSlug": "clone-graph",
        "content": "<p>Given a reference of a node in a <strong><a href=\"https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph\" target=\"_blank\">connected</a></strong> undirected graph.</p>\n\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> (clone) of the graph.</p>\n\n<p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p>\n\n<pre>\nclass Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Test case format:</strong></p>\n\n<p>For simplicity, each node&#39;s value is the same as the node&#39;s index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p>\n\n<p><b>An adjacency list</b> is a collection of unordered <b>lists</b> used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p>\n\n<p>The given node will always be the first node with <code>val = 1</code>. You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png\" style=\"width: 454px; height: 500px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]\n<strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]\n<strong>Explanation:</strong> There are 4 nodes in the graph.\n1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/07/graph.png\" style=\"width: 163px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[]]\n<strong>Output:</strong> [[]]\n<strong>Explanation:</strong> Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> adjList = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> This an empty graph, it does not have any nodes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>Node.val</code> is unique for each node.</li>\n\t<li>There are no repeated edges and no self-loops in the graph.</li>\n\t<li>The Graph is connected and all nodes can be visited starting from the given node.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9065,
        "dislikes": 3620,
        "similarQuestions": "[{\"title\": \"Copy List with Random Pointer\", \"titleSlug\": \"copy-list-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone Binary Tree With Random Pointer\", \"titleSlug\": \"clone-binary-tree-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone N-ary Tree\", \"titleSlug\": \"clone-n-ary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1128160, \"totalSubmissionRaw\": 2021685, \"acRate\": \"55.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "copy-list-with-random-pointer",
          "title": "Copy List with Random Pointer",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "clone-binary-tree-with-random-pointer",
          "title": "Clone Binary Tree With Random Pointer",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "clone-n-ary-tree",
          "title": "Clone N-ary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "gas-station": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "134",
        "title": "Gas Station",
        "titleSlug": "gas-station",
        "content": "<p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>i<sup>th</sup></code> station is <code>gas[i]</code>.</p>\n\n<p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>i<sup>th</sup></code> station to its next <code>(i + 1)<sup>th</sup></code> station. You begin the journey with an empty tank at one of the gas stations.</p>\n\n<p>Given two integer arrays <code>gas</code> and <code>cost</code>, return <em>the starting gas station&#39;s index if you can travel around the circuit once in the clockwise direction, otherwise return</em> <code>-1</code>. If there exists a solution, it is <strong>guaranteed</strong> to be <strong>unique</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> gas = [2,3,4], cost = [3,4,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nYou can&#39;t start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet&#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can&#39;t travel around the circuit once no matter where you start.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == gas.length == cost.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= gas[i], cost[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11361,
        "dislikes": 1023,
        "similarQuestions": "[{\"title\": \"Maximize the Topmost Element After K Moves\", \"titleSlug\": \"maximize-the-topmost-element-after-k-moves\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"712.3K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 712289, \"totalSubmissionRaw\": 1559533, \"acRate\": \"45.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximize-the-topmost-element-after-k-moves",
          "title": "Maximize the Topmost Element After K Moves",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "candy": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "135",
        "title": "Candy",
        "titleSlug": "candy",
        "content": "<p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p>\n\n<p>You are giving candies to these children subjected to the following requirements:</p>\n\n<ul>\n\t<li>Each child must have at least one candy.</li>\n\t<li>Children with a higher rating get more candies than their neighbors.</li>\n</ul>\n\n<p>Return <em>the minimum number of candies you need to have to distribute the candies to the children</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ratings = [1,0,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ratings = [1,2,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == ratings.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 7396,
        "dislikes": 576,
        "similarQuestions": "[{\"title\": \"Minimize Maximum Value in a Grid\", \"titleSlug\": \"minimize-maximum-value-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"453.5K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 453462, \"totalSubmissionRaw\": 1048209, \"acRate\": \"43.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimize-maximum-value-in-a-grid",
          "title": "Minimize Maximum Value in a Grid",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "single-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "136",
        "title": "Single Number",
        "titleSlug": "single-number",
        "content": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.</p>\n\n<p>You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,1]\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,1,2,1,2]\n<strong>Output:</strong> 4\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li>Each element in the array appears twice except for one element which appears only once.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 15779,
        "dislikes": 656,
        "similarQuestions": "[{\"title\": \"Single Number II\", \"titleSlug\": \"single-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Single Number III\", \"titleSlug\": \"single-number-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Difference\", \"titleSlug\": \"find-the-difference\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"3.5M\", \"totalAcceptedRaw\": 2523305, \"totalSubmissionRaw\": 3503011, \"acRate\": \"72.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "single-number-ii",
          "title": "Single Number II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "single-number-iii",
          "title": "Single Number III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "missing-number",
          "title": "Missing Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-duplicate-number",
          "title": "Find the Duplicate Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-difference",
          "title": "Find the Difference",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "single-number-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "137",
        "title": "Single Number II",
        "titleSlug": "single-number-ii",
        "content": "<p>Given an integer array <code>nums</code> where&nbsp;every element appears <strong>three times</strong> except for one, which appears <strong>exactly once</strong>. <em>Find the single element and return it</em>.</p>\n\n<p>You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,3,2]\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1,0,1,0,1,99]\n<strong>Output:</strong> 99\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Each element in <code>nums</code> appears exactly <strong>three times</strong> except for one element which appears <strong>once</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7557,
        "dislikes": 657,
        "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Single Number III\", \"titleSlug\": \"single-number-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"538.3K\", \"totalSubmission\": \"869.4K\", \"totalAcceptedRaw\": 538293, \"totalSubmissionRaw\": 869351, \"acRate\": \"61.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "single-number",
          "title": "Single Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "single-number-iii",
          "title": "Single Number III",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "copy-list-with-random-pointer": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "138",
        "title": "Copy List with Random Pointer",
        "titleSlug": "copy-list-with-random-pointer",
        "content": "<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p>\n\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p>\n\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n\n<p>Return <em>the head of the copied linked list</em>.</p>\n\n<p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e1.png\" style=\"width: 700px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e2.png\" style=\"width: 700px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> head = [[1,1],[2,1]]\n<strong>Output:</strong> [[1,1],[2,1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e3.png\" style=\"width: 700px; height: 122px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [[3,null],[3,0],[3,null]]\n<strong>Output:</strong> [[3,null],[3,0],[3,null]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 13298,
        "dislikes": 1375,
        "similarQuestions": "[{\"title\": \"Clone Graph\", \"titleSlug\": \"clone-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone Binary Tree With Random Pointer\", \"titleSlug\": \"clone-binary-tree-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone N-ary Tree\", \"titleSlug\": \"clone-n-ary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1146666, \"totalSubmissionRaw\": 2088690, \"acRate\": \"54.9%\"}",
        "hints": [
          "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, ensure you are not making multiple copies of the same node.",
          "You may want to use extra space to keep old_node ---> new_node mapping to prevent creating multiple copies of the same node.",
          "We can avoid using extra space for old_node ---> new_node mapping by tweaking the original linked list. Simply interweave the nodes of the old and copied list. For example:\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'",
          "The interweaving is done using next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for random</b> pointers."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "clone-graph",
          "title": "Clone Graph",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "clone-binary-tree-with-random-pointer",
          "title": "Clone Binary Tree With Random Pointer",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "clone-n-ary-tree",
          "title": "Clone N-ary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, ensure you are not making multiple copies of the same node.",
        "You may want to use extra space to keep old_node ---> new_node mapping to prevent creating multiple copies of the same node.",
        "We can avoid using extra space for old_node ---> new_node mapping by tweaking the original linked list. Simply interweave the nodes of the old and copied list. For example:\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'",
        "The interweaving is done using next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for random</b> pointers."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" }
      ]
    }
  },
  "word-break": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "139",
        "title": "Word Break",
        "titleSlug": "word-break",
        "content": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;,&quot;code&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.\nNote that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16598,
        "dislikes": 726,
        "similarQuestions": "[{\"title\": \"Word Break II\", \"titleSlug\": \"word-break-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Extra Characters in a String\", \"titleSlug\": \"extra-characters-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.4M\", \"totalAcceptedRaw\": 1561396, \"totalSubmissionRaw\": 3362478, \"acRate\": \"46.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "word-break-ii",
          "title": "Word Break II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "extra-characters-in-a-string",
          "title": "Extra Characters in a String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "word-break-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "140",
        "title": "Word Break II",
        "titleSlug": "word-break-ii",
        "content": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, add spaces in <code>s</code> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in <strong>any order</strong>.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsanddog&quot;, wordDict = [&quot;cat&quot;,&quot;cats&quot;,&quot;and&quot;,&quot;sand&quot;,&quot;dog&quot;]\n<strong>Output:</strong> [&quot;cats and dog&quot;,&quot;cat sand dog&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pineapplepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;,&quot;applepen&quot;,&quot;pine&quot;,&quot;pineapple&quot;]\n<strong>Output:</strong> [&quot;pine apple pen apple&quot;,&quot;pineapple pen apple&quot;,&quot;pine applepen apple&quot;]\n<strong>Explanation:</strong> Note that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n\t<li>Input is generated in a way that the length of the answer doesn&#39;t exceed&nbsp;10<sup>5</sup>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 6599,
        "dislikes": 521,
        "similarQuestions": "[{\"title\": \"Word Break\", \"titleSlug\": \"word-break\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Concatenated Words\", \"titleSlug\": \"concatenated-words\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"552.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 552685, \"totalSubmissionRaw\": 1176080, \"acRate\": \"47.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "word-break",
          "title": "Word Break",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "concatenated-words",
          "title": "Concatenated Words",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "linked-list-cycle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "141",
        "title": "Linked List Cycle",
        "titleSlug": "linked-list-cycle",
        "content": "<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p>\n\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the&nbsp;<code>next</code>&nbsp;pointer. Internally, <code>pos</code>&nbsp;is used to denote the index of the node that&nbsp;tail&#39;s&nbsp;<code>next</code>&nbsp;pointer is connected to.&nbsp;<strong>Note that&nbsp;<code>pos</code>&nbsp;is not passed as a parameter</strong>.</p>\n\n<p>Return&nbsp;<code>true</code><em> if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" />\n<pre>\n<strong>Input:</strong> head = [3,2,0,-4], pos = 1\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2], pos = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" />\n<pre>\n<strong>Input:</strong> head = [1], pos = -1\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no cycle in the linked list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 14589,
        "dislikes": 1223,
        "similarQuestions": "[{\"title\": \"Linked List Cycle II\", \"titleSlug\": \"linked-list-cycle-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Happy Number\", \"titleSlug\": \"happy-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"5.2M\", \"totalAcceptedRaw\": 2546320, \"totalSubmissionRaw\": 5175108, \"acRate\": \"49.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "linked-list-cycle-ii",
          "title": "Linked List Cycle II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "happy-number",
          "title": "Happy Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "linked-list-cycle-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "142",
        "title": "Linked List Cycle II",
        "titleSlug": "linked-list-cycle-ii",
        "content": "<p>Given the <code>head</code> of a linked list, return <em>the node where the cycle begins. If there is no cycle, return </em><code>null</code>.</p>\n\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail&#39;s <code>next</code> pointer is connected to (<strong>0-indexed</strong>). It is <code>-1</code> if there is no cycle. <strong>Note that</strong> <code>pos</code> <strong>is not passed as a parameter</strong>.</p>\n\n<p><strong>Do not modify</strong> the linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 145px; width: 450px;\" />\n<pre>\n<strong>Input:</strong> head = [3,2,0,-4], pos = 1\n<strong>Output:</strong> tail connects to node index 1\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the second node.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 105px; width: 201px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2], pos = 0\n<strong>Output:</strong> tail connects to node index 0\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the first node.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 65px; width: 65px;\" />\n<pre>\n<strong>Input:</strong> head = [1], pos = -1\n<strong>Output:</strong> no cycle\n<strong>Explanation:</strong> There is no cycle in the linked list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 13030,
        "dislikes": 906,
        "similarQuestions": "[{\"title\": \"Linked List Cycle\", \"titleSlug\": \"linked-list-cycle\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1196861, \"totalSubmissionRaw\": 2372502, \"acRate\": \"50.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "linked-list-cycle",
          "title": "Linked List Cycle",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-duplicate-number",
          "title": "Find the Duplicate Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "reorder-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "143",
        "title": "Reorder List",
        "titleSlug": "reorder-list",
        "content": "<p>You are given the head of a singly linked-list. The list can be represented as:</p>\n\n<pre>\nL<sub>0</sub> &rarr; L<sub>1</sub> &rarr; &hellip; &rarr; L<sub>n - 1</sub> &rarr; L<sub>n</sub>\n</pre>\n\n<p><em>Reorder the list to be on the following form:</em></p>\n\n<pre>\nL<sub>0</sub> &rarr; L<sub>n</sub> &rarr; L<sub>1</sub> &rarr; L<sub>n - 1</sub> &rarr; L<sub>2</sub> &rarr; L<sub>n - 2</sub> &rarr; &hellip;\n</pre>\n\n<p>You may not modify the values in the list&#39;s nodes. Only nodes themselves may be changed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg\" style=\"width: 422px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4]\n<strong>Output:</strong> [1,4,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [1,5,2,4,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 5 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10017,
        "dislikes": 344,
        "similarQuestions": "[{\"title\": \"Delete the Middle Node of a Linked List\", \"titleSlug\": \"delete-the-middle-node-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Take K of Each Character From Left and Right\", \"titleSlug\": \"take-k-of-each-character-from-left-and-right\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"797.5K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 797458, \"totalSubmissionRaw\": 1441414, \"acRate\": \"55.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "delete-the-middle-node-of-a-linked-list",
          "title": "Delete the Middle Node of a Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "take-k-of-each-character-from-left-and-right",
          "title": "Take K of Each Character From Left and Right",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "binary-tree-preorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "144",
        "title": "Binary Tree Preorder Traversal",
        "titleSlug": "binary-tree-preorder-traversal",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the preorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" style=\"width: 125px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,3]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7703,
        "dislikes": 196,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Verify Preorder Sequence in Binary Search Tree\", \"titleSlug\": \"verify-preorder-sequence-in-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Preorder Traversal\", \"titleSlug\": \"n-ary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Kth Largest Sum in a Binary Tree\", \"titleSlug\": \"kth-largest-sum-in-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.2M\", \"totalAcceptedRaw\": 1493693, \"totalSubmissionRaw\": 2174346, \"acRate\": \"68.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "verify-preorder-sequence-in-binary-search-tree",
          "title": "Verify Preorder Sequence in Binary Search Tree",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-ary-tree-preorder-traversal",
          "title": "N-ary Tree Preorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "kth-largest-sum-in-a-binary-tree",
          "title": "Kth Largest Sum in a Binary Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "binary-tree-postorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "145",
        "title": "Binary Tree Postorder Traversal",
        "titleSlug": "binary-tree-postorder-traversal",
        "content": "<p>Given the <code>root</code> of a&nbsp;binary tree, return <em>the postorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/pre1.jpg\" style=\"width: 127px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,3]\n<strong>Output:</strong> [3,2,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6641,
        "dislikes": 183,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Postorder Traversal\", \"titleSlug\": \"n-ary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Fuel Cost to Report to the Capital\", \"titleSlug\": \"minimum-fuel-cost-to-report-to-the-capital\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 1097107, \"totalSubmissionRaw\": 1565883, \"acRate\": \"70.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-ary-tree-postorder-traversal",
          "title": "N-ary Tree Postorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-fuel-cost-to-report-to-the-capital",
          "title": "Minimum Fuel Cost to Report to the Capital",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "lru-cache": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "146",
        "title": "LRU Cache",
        "titleSlug": "lru-cache",
        "content": "<p>Design a data structure that follows the constraints of a <strong><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a></strong>.</p>\n\n<p>Implement the <code>LRUCache</code> class:</p>\n\n<ul>\n\t<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>\n\t<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>\n</ul>\n\n<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity &lt;= 3000</code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 19840,
        "dislikes": 923,
        "similarQuestions": "[{\"title\": \"LFU Cache\", \"titleSlug\": \"lfu-cache\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design In-Memory File System\", \"titleSlug\": \"design-in-memory-file-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design Compressed String Iterator\", \"titleSlug\": \"design-compressed-string-iterator\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Design Most Recently Used Queue\", \"titleSlug\": \"design-most-recently-used-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 1506111, \"totalSubmissionRaw\": 3590247, \"acRate\": \"42.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "lfu-cache",
          "title": "LFU Cache",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "design-in-memory-file-system",
          "title": "Design In-Memory File System",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "design-compressed-string-iterator",
          "title": "Design Compressed String Iterator",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "design-most-recently-used-queue",
          "title": "Design Most Recently Used Queue",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
      ]
    }
  },
  "insertion-sort-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "147",
        "title": "Insertion Sort List",
        "titleSlug": "insertion-sort-list",
        "content": "<p>Given the <code>head</code> of a singly linked list, sort the list using <strong>insertion sort</strong>, and return <em>the sorted list&#39;s head</em>.</p>\n\n<p>The steps of the <strong>insertion sort</strong> algorithm:</p>\n\n<ol>\n\t<li>Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.</li>\n\t<li>At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.</li>\n\t<li>It repeats until no input elements remain.</li>\n</ol>\n\n<p>The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.</p>\n<img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\" style=\"height:180px; width:300px\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/04/sort1linked-list.jpg\" style=\"width: 422px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [4,2,1,3]\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/04/sort2linked-list.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [-1,5,3,4,0]\n<strong>Output:</strong> [-1,0,3,4,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 5000]</code>.</li>\n\t<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2987,
        "dislikes": 854,
        "similarQuestions": "[{\"title\": \"Sort List\", \"titleSlug\": \"sort-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Insert into a Sorted Circular Linked List\", \"titleSlug\": \"insert-into-a-sorted-circular-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"350.1K\", \"totalSubmission\": \"665K\", \"totalAcceptedRaw\": 350118, \"totalSubmissionRaw\": 665042, \"acRate\": \"52.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "sort-list",
          "title": "Sort List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "insert-into-a-sorted-circular-linked-list",
          "title": "Insert into a Sorted Circular Linked List",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "sort-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "148",
        "title": "Sort List",
        "titleSlug": "sort-list",
        "content": "<p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg\" style=\"width: 450px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> head = [4,2,1,3]\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg\" style=\"width: 550px; height: 184px;\" />\n<pre>\n<strong>Input:</strong> head = [-1,5,3,4,0]\n<strong>Output:</strong> [-1,0,3,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 5 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant space)?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11065,
        "dislikes": 324,
        "similarQuestions": "[{\"title\": \"Merge Two Sorted Lists\", \"titleSlug\": \"merge-two-sorted-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sort Colors\", \"titleSlug\": \"sort-colors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Insertion Sort List\", \"titleSlug\": \"insertion-sort-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Linked List Already Sorted Using Absolute Values\", \"titleSlug\": \"sort-linked-list-already-sorted-using-absolute-values\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Merge Sort", "slug": "merge-sort" }
        ],
        "stats": "{\"totalAccepted\": \"720.2K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 720215, \"totalSubmissionRaw\": 1265443, \"acRate\": \"56.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "merge-two-sorted-lists",
          "title": "Merge Two Sorted Lists",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-colors",
          "title": "Sort Colors",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "insertion-sort-list",
          "title": "Insertion Sort List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-linked-list-already-sorted-using-absolute-values",
          "title": "Sort Linked List Already Sorted Using Absolute Values",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Merge Sort", "slug": "merge-sort" }
      ]
    }
  },
  "max-points-on-a-line": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "149",
        "title": "Max Points on a Line",
        "titleSlug": "max-points-on-a-line",
        "content": "<p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <em>the maximum number of points that lie on the same straight line</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 300</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the <code>points</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4013,
        "dislikes": 455,
        "similarQuestions": "[{\"title\": \"Line Reflection\", \"titleSlug\": \"line-reflection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Lines to Cover Points\", \"titleSlug\": \"minimum-number-of-lines-to-cover-points\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Lines to Represent a Line Chart\", \"titleSlug\": \"minimum-lines-to-represent-a-line-chart\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"368.8K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 368829, \"totalSubmissionRaw\": 1411461, \"acRate\": \"26.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "line-reflection",
          "title": "Line Reflection",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-number-of-lines-to-cover-points",
          "title": "Minimum Number of Lines to Cover Points",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-lines-to-represent-a-line-chart",
          "title": "Minimum Lines to Represent a Line Chart",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "evaluate-reverse-polish-notation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "150",
        "title": "Evaluate Reverse Polish Notation",
        "titleSlug": "evaluate-reverse-polish-notation",
        "content": "<p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\" target=\"_blank\">Reverse Polish Notation</a>.</p>\n\n<p>Evaluate the expression. Return <em>an integer that represents the value of the expression</em>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>The valid operators are <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, and <code>&#39;/&#39;</code>.</li>\n\t<li>Each operand may be an integer or another expression.</li>\n\t<li>The division between two integers always <strong>truncates toward zero</strong>.</li>\n\t<li>There will not be any division by zero.</li>\n\t<li>The input represents a valid arithmetic expression in a reverse polish notation.</li>\n\t<li>The answer and all the intermediate calculations can be represented in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tokens[i]</code> is either an operator: <code>&quot;+&quot;</code>, <code>&quot;-&quot;</code>, <code>&quot;*&quot;</code>, or <code>&quot;/&quot;</code>, or an integer in the range <code>[-200, 200]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6811,
        "dislikes": 1001,
        "similarQuestions": "[{\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"830.9K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 830906, \"totalSubmissionRaw\": 1713441, \"acRate\": \"48.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator",
          "title": "Basic Calculator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "expression-add-operators",
          "title": "Expression Add Operators",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "reverse-words-in-a-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "151",
        "title": "Reverse Words in a String",
        "titleSlug": "reverse-words-in-a-string",
        "content": "<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p>\n\n<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p>\n\n<p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p>\n\n<p><b>Note</b> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;the sky is blue&quot;\n<strong>Output:</strong> &quot;blue is sky the&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;  hello world  &quot;\n<strong>Output:</strong> &quot;world hello&quot;\n<strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a good   example&quot;\n<strong>Output:</strong> &quot;example good a&quot;\n<strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is <strong>at least one</strong> word in <code>s</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b data-stringify-type=\"bold\">Follow-up:&nbsp;</b>If the string data type is mutable in your language, can&nbsp;you solve it&nbsp;<b data-stringify-type=\"bold\">in-place</b>&nbsp;with&nbsp;<code data-stringify-type=\"code\">O(1)</code>&nbsp;extra space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7791,
        "dislikes": 5000,
        "similarQuestions": "[{\"title\": \"Reverse Words in a String II\", \"titleSlug\": \"reverse-words-in-a-string-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1262020, \"totalSubmissionRaw\": 3228531, \"acRate\": \"39.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-words-in-a-string-ii",
          "title": "Reverse Words in a String II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "maximum-product-subarray": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "152",
        "title": "Maximum Product Subarray",
        "titleSlug": "maximum-product-subarray",
        "content": "<p>Given an integer array <code>nums</code>, find a <span data-keyword=\"subarray-nonempty\">subarray</span> that has the largest product, and return <em>the product</em>.</p>\n\n<p>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [2,3] has the largest product 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,0,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 17807,
        "dislikes": 566,
        "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Product of Array Except Self\", \"titleSlug\": \"product-of-array-except-self\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Product of Three Numbers\", \"titleSlug\": \"maximum-product-of-three-numbers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Subarray Product Less Than K\", \"titleSlug\": \"subarray-product-less-than-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"3.3M\", \"totalAcceptedRaw\": 1162485, \"totalSubmissionRaw\": 3331425, \"acRate\": \"34.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-subarray",
          "title": "Maximum Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "product-of-array-except-self",
          "title": "Product of Array Except Self",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-product-of-three-numbers",
          "title": "Maximum Product of Three Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-product-less-than-k",
          "title": "Subarray Product Less Than K",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "find-minimum-in-rotated-sorted-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "153",
        "title": "Find Minimum in Rotated Sorted Array",
        "titleSlug": "find-minimum-in-rotated-sorted-array",
        "content": "<p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p>\n\n<ul>\n\t<li><code>[4,5,6,7,0,1,2]</code> if it was rotated <code>4</code> times.</li>\n\t<li><code>[0,1,2,4,5,6,7]</code> if it was rotated <code>7</code> times.</li>\n</ul>\n\n<p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p>\n\n<p>Given the sorted rotated array <code>nums</code> of <strong>unique</strong> elements, return <em>the minimum element of this array</em>.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(log n) time.</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,5,1,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The original array was [1,2,3,4,5] rotated 3 times.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,5,6,7,0,1,2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [11,13,15,17]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The original array was [11,13,15,17] and it was rotated 4 times. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12497,
        "dislikes": 549,
        "similarQuestions": "[{\"title\": \"Search in Rotated Sorted Array\", \"titleSlug\": \"search-in-rotated-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Minimum in Rotated Sorted Array II\", \"titleSlug\": \"find-minimum-in-rotated-sorted-array-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1587975, \"totalSubmissionRaw\": 3188118, \"acRate\": \"49.8%\"}",
        "hints": [
          "Array was originally in ascending order. Now that the array is rotated, there would be a point in the array where there is a small deflection from the increasing sequence. eg. The array would be something like [4, 5, 6, 7, 0, 1, 2].",
          "You can divide the search space into two and see which direction to go.\r\nCan you think of an algorithm which has O(logN) search complexity?",
          "<ol>\r\n<li>All the elements to the left of inflection point > first element of the array.</li>\r\n<li>All the elements to the right of inflection point < first element of the array.</li>\r\n<ol>"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "search-in-rotated-sorted-array",
          "title": "Search in Rotated Sorted Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-minimum-in-rotated-sorted-array-ii",
          "title": "Find Minimum in Rotated Sorted Array II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Array was originally in ascending order. Now that the array is rotated, there would be a point in the array where there is a small deflection from the increasing sequence. eg. The array would be something like [4, 5, 6, 7, 0, 1, 2].",
        "You can divide the search space into two and see which direction to go.\r\nCan you think of an algorithm which has O(logN) search complexity?",
        "<ol>\r\n<li>All the elements to the left of inflection point > first element of the array.</li>\r\n<li>All the elements to the right of inflection point < first element of the array.</li>\r\n<ol>"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "find-minimum-in-rotated-sorted-array-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "154",
        "title": "Find Minimum in Rotated Sorted Array II",
        "titleSlug": "find-minimum-in-rotated-sorted-array-ii",
        "content": "<p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,4,4,5,6,7]</code> might become:</p>\n\n<ul>\n\t<li><code>[4,5,6,7,0,1,4]</code> if it was rotated <code>4</code> times.</li>\n\t<li><code>[0,1,4,4,5,6,7]</code> if it was rotated <code>7</code> times.</li>\n</ul>\n\n<p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p>\n\n<p>Given the sorted rotated array <code>nums</code> that may contain <strong>duplicates</strong>, return <em>the minimum element of this array</em>.</p>\n\n<p>You must decrease the overall operation steps as much as possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,5]\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,2,0,1]\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li>\n\t<li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> This problem is similar to&nbsp;<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/\" target=\"_blank\">Find Minimum in Rotated Sorted Array</a>, but&nbsp;<code>nums</code> may contain <strong>duplicates</strong>. Would this affect the runtime complexity? How and why?</p>\n\n<p>&nbsp;</p>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4525,
        "dislikes": 467,
        "similarQuestions": "[{\"title\": \"Find Minimum in Rotated Sorted Array\", \"titleSlug\": \"find-minimum-in-rotated-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"423.8K\", \"totalSubmission\": \"973.1K\", \"totalAcceptedRaw\": 423825, \"totalSubmissionRaw\": 973113, \"acRate\": \"43.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "find-minimum-in-rotated-sorted-array",
          "title": "Find Minimum in Rotated Sorted Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "min-stack": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "155",
        "title": "Min Stack",
        "titleSlug": "min-stack",
        "content": "<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n\n<p>Implement the <code>MinStack</code> class:</p>\n\n<ul>\n\t<li><code>MinStack()</code> initializes the stack object.</li>\n\t<li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li>\n\t<li><code>void pop()</code> removes the element on the top of the stack.</li>\n\t<li><code>int top()</code> gets the top element of the stack.</li>\n\t<li><code>int getMin()</code> retrieves the minimum element in the stack.</li>\n</ul>\n\n<p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]\n[[],[-2],[0],[-3],[],[],[],[]]\n\n<strong>Output</strong>\n[null,null,null,null,-3,null,0,-2]\n\n<strong>Explanation</strong>\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 13461,
        "dislikes": 819,
        "similarQuestions": "[{\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Max Stack\", \"titleSlug\": \"max-stack\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Design", "slug": "design" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.8M\", \"totalAcceptedRaw\": 1503298, \"totalSubmissionRaw\": 2810101, \"acRate\": \"53.5%\"}",
        "hints": [
          "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "sliding-window-maximum",
          "title": "Sliding Window Maximum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "max-stack",
          "title": "Max Stack",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
      ],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Design", "slug": "design" }
      ]
    }
  },
  "binary-tree-upside-down": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "156",
        "title": "Binary Tree Upside Down",
        "titleSlug": "binary-tree-upside-down",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 245,
        "dislikes": 333,
        "similarQuestions": "[{\"title\": \"Reverse Linked List\", \"titleSlug\": \"reverse-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"99.6K\", \"totalSubmission\": \"159.6K\", \"totalAcceptedRaw\": 99628, \"totalSubmissionRaw\": 159567, \"acRate\": \"62.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-linked-list",
          "title": "Reverse Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "read-n-characters-given-read4": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "157",
        "title": "Read N Characters Given Read4",
        "titleSlug": "read-n-characters-given-read4",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 560,
        "dislikes": 3440,
        "similarQuestions": "[{\"title\": \"Read N Characters Given read4 II - Call Multiple Times\", \"titleSlug\": \"read-n-characters-given-read4-ii-call-multiple-times\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Simulation", "slug": "simulation" },
          { "name": "Interactive", "slug": "interactive" }
        ],
        "stats": "{\"totalAccepted\": \"186.3K\", \"totalSubmission\": \"451.1K\", \"totalAcceptedRaw\": 186256, \"totalSubmissionRaw\": 451090, \"acRate\": \"41.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "read-n-characters-given-read4-ii-call-multiple-times",
          "title": "Read N Characters Given read4 II - Call Multiple Times",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Simulation", "slug": "simulation" },
        { "name": "Interactive", "slug": "interactive" }
      ]
    }
  },
  "read-n-characters-given-read4-ii-call-multiple-times": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "158",
        "title": "Read N Characters Given read4 II - Call Multiple Times",
        "titleSlug": "read-n-characters-given-read4-ii-call-multiple-times",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 859,
        "dislikes": 1783,
        "similarQuestions": "[{\"title\": \"Read N Characters Given Read4\", \"titleSlug\": \"read-n-characters-given-read4\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Simulation", "slug": "simulation" },
          { "name": "Interactive", "slug": "interactive" }
        ],
        "stats": "{\"totalAccepted\": \"180K\", \"totalSubmission\": \"428.4K\", \"totalAcceptedRaw\": 180005, \"totalSubmissionRaw\": 428422, \"acRate\": \"42.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "read-n-characters-given-read4",
          "title": "Read N Characters Given Read4",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Simulation", "slug": "simulation" },
        { "name": "Interactive", "slug": "interactive" }
      ]
    }
  },
  "longest-substring-with-at-most-two-distinct-characters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "159",
        "title": "Longest Substring with At Most Two Distinct Characters",
        "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2165,
        "dislikes": 33,
        "similarQuestions": "[{\"title\": \"Longest Substring Without Repeating Characters\", \"titleSlug\": \"longest-substring-without-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Substring with At Most K Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-k-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarrays with K Different Integers\", \"titleSlug\": \"subarrays-with-k-different-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"244.1K\", \"totalSubmission\": \"446.8K\", \"totalAcceptedRaw\": 244060, \"totalSubmissionRaw\": 446788, \"acRate\": \"54.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-without-repeating-characters",
          "title": "Longest Substring Without Repeating Characters",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sliding-window-maximum",
          "title": "Sliding Window Maximum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
          "title": "Longest Substring with At Most K Distinct Characters",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "subarrays-with-k-different-integers",
          "title": "Subarrays with K Different Integers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "intersection-of-two-linked-lists": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "160",
        "title": "Intersection of Two Linked Lists",
        "titleSlug": "intersection-of-two-linked-lists",
        "content": "<p>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return <em>the node at which the two lists intersect</em>. If the two linked lists have no intersection at all, return <code>null</code>.</p>\n\n<p>For example, the following two linked lists begin to intersect at node <code>c1</code>:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_statement.png\" style=\"width: 500px; height: 162px;\" />\n<p>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</p>\n\n<p><strong>Note</strong> that the linked lists must <strong>retain their original structure</strong> after the function returns.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The inputs to the <strong>judge</strong> are given as follows (your program is <strong>not</strong> given these inputs):</p>\n\n<ul>\n\t<li><code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</li>\n\t<li><code>listA</code> - The first linked list.</li>\n\t<li><code>listB</code> - The second linked list.</li>\n\t<li><code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.</li>\n\t<li><code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.</li>\n</ul>\n\n<p>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code> to your program. If you correctly return the intersected node, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png\" style=\"width: 500px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n<strong>Output:</strong> Intersected at &#39;8&#39;\n<strong>Explanation:</strong> The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node&#39;s value is not 1 because the nodes with value 1 in A and B (2<sup>nd</sup> node in A and 3<sup>rd</sup> node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3<sup>rd</sup> node in A and 4<sup>th</sup> node in B) point to the same location in memory.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png\" style=\"width: 500px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>Output:</strong> Intersected at &#39;2&#39;\n<strong>Explanation:</strong> The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png\" style=\"width: 300px; height: 189px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>Output:</strong> No intersection\n<strong>Explanation:</strong> From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes of <code>listA</code> is in the <code>m</code>.</li>\n\t<li>The number of nodes of <code>listB</code> is in the <code>n</code>.</li>\n\t<li><code>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= skipA &lt;&nbsp;m</code></li>\n\t<li><code>0 &lt;= skipB &lt;&nbsp;n</code></li>\n\t<li><code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.</li>\n\t<li><code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you write a solution that runs in <code>O(m + n)</code> time and use only <code>O(1)</code> memory?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 14388,
        "dislikes": 1281,
        "similarQuestions": "[{\"title\": \"Minimum Index Sum of Two Lists\", \"titleSlug\": \"minimum-index-sum-of-two-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1448472, \"totalSubmissionRaw\": 2563804, \"acRate\": \"56.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-index-sum-of-two-lists",
          "title": "Minimum Index Sum of Two Lists",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "one-edit-distance": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "161",
        "title": "One Edit Distance",
        "titleSlug": "one-edit-distance",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1365,
        "dislikes": 185,
        "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"199.3K\", \"totalSubmission\": \"582.1K\", \"totalAcceptedRaw\": 199266, \"totalSubmissionRaw\": 582062, \"acRate\": \"34.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "edit-distance",
          "title": "Edit Distance",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "find-peak-element": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "162",
        "title": "Find Peak Element",
        "titleSlug": "find-peak-element",
        "content": "<p>A peak element is an element that is strictly greater than its neighbors.</p>\n\n<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p>\n\n<p>You may imagine that <code>nums[-1] = nums[n] = -&infin;</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p>\n\n<p>You must write an algorithm that runs in <code>O(log n)</code> time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 is a peak element and your function should return the index number 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,5,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11140,
        "dislikes": 4540,
        "similarQuestions": "[{\"title\": \"Peak Index in a Mountain Array\", \"titleSlug\": \"peak-index-in-a-mountain-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find a Peak Element II\", \"titleSlug\": \"find-a-peak-element-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Pour Water Between Buckets to Make Water Levels Equal\", \"titleSlug\": \"pour-water-between-buckets-to-make-water-levels-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Hills and Valleys in an Array\", \"titleSlug\": \"count-hills-and-valleys-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Peaks\", \"titleSlug\": \"find-the-peaks\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1210496, \"totalSubmissionRaw\": 2641296, \"acRate\": \"45.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "peak-index-in-a-mountain-array",
          "title": "Peak Index in a Mountain Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-a-peak-element-ii",
          "title": "Find a Peak Element II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "pour-water-between-buckets-to-make-water-levels-equal",
          "title": "Pour Water Between Buckets to Make Water Levels Equal",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-hills-and-valleys-in-an-array",
          "title": "Count Hills and Valleys in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-peaks",
          "title": "Find the Peaks",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "missing-ranges": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "163",
        "title": "Missing Ranges",
        "titleSlug": "missing-ranges",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1042,
        "dislikes": 2940,
        "similarQuestions": "[{\"title\": \"Summary Ranges\", \"titleSlug\": \"summary-ranges\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Maximal Uncovered Ranges\", \"titleSlug\": \"find-maximal-uncovered-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"221.2K\", \"totalSubmission\": \"670.1K\", \"totalAcceptedRaw\": 221211, \"totalSubmissionRaw\": 670124, \"acRate\": \"33.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "summary-ranges",
          "title": "Summary Ranges",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-maximal-uncovered-ranges",
          "title": "Find Maximal Uncovered Ranges",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "maximum-gap": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "164",
        "title": "Maximum Gap",
        "titleSlug": "maximum-gap",
        "content": "<p>Given an integer array <code>nums</code>, return <em>the maximum difference between two successive elements in its sorted form</em>. If the array contains less than two elements, return <code>0</code>.</p>\n\n<p>You must write an algorithm that runs in linear time and uses linear extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,6,9,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The array contains less than 2 elements, therefore return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3120,
        "dislikes": 362,
        "similarQuestions": "[{\"title\": \"Maximum Consecutive Floors Without Special Floors\", \"titleSlug\": \"maximum-consecutive-floors-without-special-floors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Bucket Sort", "slug": "bucket-sort" },
          { "name": "Radix Sort", "slug": "radix-sort" }
        ],
        "stats": "{\"totalAccepted\": \"191K\", \"totalSubmission\": \"425.2K\", \"totalAcceptedRaw\": 191013, \"totalSubmissionRaw\": 425230, \"acRate\": \"44.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-consecutive-floors-without-special-floors",
          "title": "Maximum Consecutive Floors Without Special Floors",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Bucket Sort", "slug": "bucket-sort" },
        { "name": "Radix Sort", "slug": "radix-sort" }
      ]
    }
  },
  "compare-version-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "165",
        "title": "Compare Version Numbers",
        "titleSlug": "compare-version-numbers",
        "content": "<p>Given two version numbers,&nbsp;<code>version1</code> and <code>version2</code>, compare them.</p>\n\n<ul>\n</ul>\n\n<p>Version numbers consist of <strong>one or more revisions</strong> joined by a dot&nbsp;<code>&#39;.&#39;</code>. Each revision&nbsp;consists of <strong>digits</strong>&nbsp;and may contain leading <strong>zeros</strong>. Every revision contains <strong>at least one character</strong>. Revisions are <strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example&nbsp;<code>2.5.33</code>&nbsp;and&nbsp;<code>0.1</code>&nbsp;are valid version numbers.</p>\n\n<p>To compare version numbers, compare their revisions in <strong>left-to-right order</strong>. Revisions are compared using their&nbsp;<strong>integer value ignoring any leading zeros</strong>. This means that revisions&nbsp;<code>1</code>&nbsp;and&nbsp;<code>001</code>&nbsp;are considered&nbsp;<strong>equal</strong>. If a version number does not specify a revision at an index, then&nbsp;<strong>treat the revision as&nbsp;<code>0</code></strong>. For example, version&nbsp;<code>1.0</code> is less than version&nbsp;<code>1.1</code>&nbsp;because their revision 0s are the same, but their revision 1s are&nbsp;<code>0</code>&nbsp;and&nbsp;<code>1</code>&nbsp;respectively, and&nbsp;<code>0 &lt; 1</code>.</p>\n\n<p><em>Return the following:</em></p>\n\n<ul>\n\t<li>If <code>version1 &lt; version2</code>, return <code>-1</code>.</li>\n\t<li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li>\n\t<li>Otherwise, return <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> version1 does not specify revision 2, which means it is treated as &quot;0&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> version1&#39;s revision 0 is &quot;0&quot;, while version2&#39;s revision 0 is &quot;1&quot;. 0 &lt; 1, so version1 &lt; version2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;only contain digits and <code>&#39;.&#39;</code>.</li>\n\t<li><code>version1</code> and <code>version2</code>&nbsp;<strong>are valid version numbers</strong>.</li>\n\t<li>All the given revisions in&nbsp;<code>version1</code> and <code>version2</code>&nbsp;can be stored in&nbsp;a&nbsp;<strong>32-bit integer</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2065,
        "dislikes": 2545,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"369.6K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 369561, \"totalSubmissionRaw\": 1012865, \"acRate\": \"36.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "fraction-to-recurring-decimal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "166",
        "title": "Fraction to Recurring Decimal",
        "titleSlug": "fraction-to-recurring-decimal",
        "content": "<p>Given two integers representing the <code>numerator</code> and <code>denominator</code> of a fraction, return <em>the fraction in string format</em>.</p>\n\n<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\n\n<p>If multiple answers are possible, return <strong>any of them</strong>.</p>\n\n<p>It is <strong>guaranteed</strong> that the length of the answer string is less than <code>10<sup>4</sup></code> for all the given inputs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 1, denominator = 2\n<strong>Output:</strong> &quot;0.5&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 2, denominator = 1\n<strong>Output:</strong> &quot;2&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numerator = 4, denominator = 333\n<strong>Output:</strong> &quot;0.(012)&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;=&nbsp;numerator, denominator &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>denominator != 0</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2012,
        "dislikes": 3609,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"217.9K\", \"totalSubmission\": \"882.3K\", \"totalAcceptedRaw\": 217941, \"totalSubmissionRaw\": 882265, \"acRate\": \"24.7%\"}",
        "hints": [
          "No scary math, just apply elementary math knowledge. Still remember how to perform a <i>long division</i>?",
          "Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?",
          "Notice that once the remainder starts repeating, so does the divided result.",
          "Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly."
        ]
      },
      "similar": [],
      "hints": [
        "No scary math, just apply elementary math knowledge. Still remember how to perform a <i>long division</i>?",
        "Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?",
        "Notice that once the remainder starts repeating, so does the divided result.",
        "Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "two-sum-ii-input-array-is-sorted": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "167",
        "title": "Two Sum II - Input Array Is Sorted",
        "titleSlug": "two-sum-ii-input-array-is-sorted",
        "content": "<p>Given a <strong>1-indexed</strong> array of integers <code>numbers</code> that is already <strong><em>sorted in non-decreasing order</em></strong>, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be <code>numbers[index<sub>1</sub>]</code> and <code>numbers[index<sub>2</sub>]</code> where <code>1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length</code>.</p>\n\n<p>Return<em> the indices of the two numbers, </em><code>index<sub>1</sub></code><em> and </em><code>index<sub>2</sub></code><em>, <strong>added by one</strong> as an integer array </em><code>[index<sub>1</sub>, index<sub>2</sub>]</code><em> of length 2.</em></p>\n\n<p>The tests are generated such that there is <strong>exactly one solution</strong>. You <strong>may not</strong> use the same element twice.</p>\n\n<p>Your solution must use only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,<u>7</u>,11,15], target = 9\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore, index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,3,<u>4</u>], target = 6\n<strong>Output:</strong> [1,3]\n<strong>Explanation:</strong> The sum of 2 and 4 is 6. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>-1</u>,<u>0</u>], target = -1\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of -1 and 0 is -1. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n\t<li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n\t<li>The tests are generated such that there is <strong>exactly one solution</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11171,
        "dislikes": 1359,
        "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum IV - Input is a BST\", \"titleSlug\": \"two-sum-iv-input-is-a-bst\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum Less Than K\", \"titleSlug\": \"two-sum-less-than-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"2.9M\", \"totalAcceptedRaw\": 1785872, \"totalSubmissionRaw\": 2943183, \"acRate\": \"60.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum",
          "title": "Two Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-iv-input-is-a-bst",
          "title": "Two Sum IV - Input is a BST",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-less-than-k",
          "title": "Two Sum Less Than K",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "excel-sheet-column-title": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "168",
        "title": "Excel Sheet Column Title",
        "titleSlug": "excel-sheet-column-title",
        "content": "<p>Given an integer <code>columnNumber</code>, return <em>its corresponding column title as it appears in an Excel sheet</em>.</p>\n\n<p>For example:</p>\n\n<pre>\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnNumber = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnNumber = 28\n<strong>Output:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnNumber = 701\n<strong>Output:</strong> &quot;ZY&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= columnNumber &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5377,
        "dislikes": 762,
        "similarQuestions": "[{\"title\": \"Excel Sheet Column Number\", \"titleSlug\": \"excel-sheet-column-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Cells in a Range on an Excel Sheet\", \"titleSlug\": \"cells-in-a-range-on-an-excel-sheet\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"493.2K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 493171, \"totalSubmissionRaw\": 1235620, \"acRate\": \"39.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "excel-sheet-column-number",
          "title": "Excel Sheet Column Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "cells-in-a-range-on-an-excel-sheet",
          "title": "Cells in a Range on an Excel Sheet",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "majority-element": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "169",
        "title": "Majority Element",
        "titleSlug": "majority-element",
        "content": "<p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p>\n\n<p>The majority element is the element that appears more than <code>&lfloor;n / 2&rfloor;</code> times. You may assume that the majority element always exists in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,3]\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,1,1,1,2,2]\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 17800,
        "dislikes": 543,
        "similarQuestions": "[{\"title\": \"Majority Element II\", \"titleSlug\": \"majority-element-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check If a Number Is Majority Element in a Sorted Array\", \"titleSlug\": \"check-if-a-number-is-majority-element-in-a-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Even Element\", \"titleSlug\": \"most-frequent-even-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Index of a Valid Split\", \"titleSlug\": \"minimum-index-of-a-valid-split\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"2.3M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 2299317, \"totalSubmissionRaw\": 3599086, \"acRate\": \"63.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "majority-element-ii",
          "title": "Majority Element II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-a-number-is-majority-element-in-a-sorted-array",
          "title": "Check If a Number Is Majority Element in a Sorted Array",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "most-frequent-even-element",
          "title": "Most Frequent Even Element",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-index-of-a-valid-split",
          "title": "Minimum Index of a Valid Split",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "two-sum-iii-data-structure-design": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "170",
        "title": "Two Sum III - Data structure design",
        "titleSlug": "two-sum-iii-data-structure-design",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 657,
        "dislikes": 441,
        "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Unique Word Abbreviation\", \"titleSlug\": \"unique-word-abbreviation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum IV - Input is a BST\", \"titleSlug\": \"two-sum-iv-input-is-a-bst\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Design", "slug": "design" },
          { "name": "Data Stream", "slug": "data-stream" }
        ],
        "stats": "{\"totalAccepted\": \"149.6K\", \"totalSubmission\": \"395.2K\", \"totalAcceptedRaw\": 149558, \"totalSubmissionRaw\": 395187, \"acRate\": \"37.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum",
          "title": "Two Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "unique-word-abbreviation",
          "title": "Unique Word Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-iv-input-is-a-bst",
          "title": "Two Sum IV - Input is a BST",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Design", "slug": "design" },
        { "name": "Data Stream", "slug": "data-stream" }
      ]
    }
  },
  "excel-sheet-column-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "171",
        "title": "Excel Sheet Column Number",
        "titleSlug": "excel-sheet-column-number",
        "content": "<p>Given a string <code>columnTitle</code> that represents the column title as appears in an Excel sheet, return <em>its corresponding column number</em>.</p>\n\n<p>For example:</p>\n\n<pre>\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;A&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;AB&quot;\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;ZY&quot;\n<strong>Output:</strong> 701\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= columnTitle.length &lt;= 7</code></li>\n\t<li><code>columnTitle</code> consists only of uppercase English letters.</li>\n\t<li><code>columnTitle</code> is in the range <code>[&quot;A&quot;, &quot;FXSHRXW&quot;]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4631,
        "dislikes": 359,
        "similarQuestions": "[{\"title\": \"Excel Sheet Column Title\", \"titleSlug\": \"excel-sheet-column-title\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Cells in a Range on an Excel Sheet\", \"titleSlug\": \"cells-in-a-range-on-an-excel-sheet\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"652.4K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 652440, \"totalSubmissionRaw\": 1032714, \"acRate\": \"63.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "excel-sheet-column-title",
          "title": "Excel Sheet Column Title",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "cells-in-a-range-on-an-excel-sheet",
          "title": "Cells in a Range on an Excel Sheet",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "factorial-trailing-zeroes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "172",
        "title": "Factorial Trailing Zeroes",
        "titleSlug": "factorial-trailing-zeroes",
        "content": "<p>Given an integer <code>n</code>, return <em>the number of trailing zeroes in </em><code>n!</code>.</p>\n\n<p>Note that <code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> 3! = 6, no trailing zero.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 5! = 120, one trailing zero.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you write a solution that works in logarithmic time complexity?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3050,
        "dislikes": 1929,
        "similarQuestions": "[{\"title\": \"Number of Digit One\", \"titleSlug\": \"number-of-digit-one\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Preimage Size of Factorial Zeroes Function\", \"titleSlug\": \"preimage-size-of-factorial-zeroes-function\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Abbreviating the Product of a Range\", \"titleSlug\": \"abbreviating-the-product-of-a-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Trailing Zeros in a Cornered Path\", \"titleSlug\": \"maximum-trailing-zeros-in-a-cornered-path\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"416K\", \"totalSubmission\": \"968K\", \"totalAcceptedRaw\": 416010, \"totalSubmissionRaw\": 967956, \"acRate\": \"43.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-digit-one",
          "title": "Number of Digit One",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "preimage-size-of-factorial-zeroes-function",
          "title": "Preimage Size of Factorial Zeroes Function",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "abbreviating-the-product-of-a-range",
          "title": "Abbreviating the Product of a Range",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-trailing-zeros-in-a-cornered-path",
          "title": "Maximum Trailing Zeros in a Cornered Path",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "binary-search-tree-iterator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "173",
        "title": "Binary Search Tree Iterator",
        "titleSlug": "binary-search-tree-iterator",
        "content": "<p>Implement the <code>BSTIterator</code> class that represents an iterator over the <strong><a href=\"https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)\" target=\"_blank\">in-order traversal</a></strong> of a binary search tree (BST):</p>\n\n<ul>\n\t<li><code>BSTIterator(TreeNode root)</code> Initializes an object of the <code>BSTIterator</code> class. The <code>root</code> of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there exists a number in the traversal to the right of the pointer, otherwise returns <code>false</code>.</li>\n\t<li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li>\n</ul>\n\n<p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p>\n\n<p>You may assume that <code>next()</code> calls will always be valid. That is, there will be at least a next number in the in-order traversal when <code>next()</code> is called.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png\" style=\"width: 189px; height: 178px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\n<strong>Explanation</strong>\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>hasNext</code>, and <code>next</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you implement <code>next()</code> and <code>hasNext()</code> to run in average <code>O(1)</code> time and use&nbsp;<code>O(h)</code> memory, where <code>h</code> is the height of the tree?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8258,
        "dislikes": 479,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Peeking Iterator\", \"titleSlug\": \"peeking-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Inorder Successor in BST\", \"titleSlug\": \"inorder-successor-in-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Search Tree Iterator II\", \"titleSlug\": \"binary-search-tree-iterator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Design", "slug": "design" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" },
          { "name": "Iterator", "slug": "iterator" }
        ],
        "stats": "{\"totalAccepted\": \"736.8K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 736774, \"totalSubmissionRaw\": 1034346, \"acRate\": \"71.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-2d-vector",
          "title": "Flatten 2D Vector",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "zigzag-iterator",
          "title": "Zigzag Iterator",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "peeking-iterator",
          "title": "Peeking Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "inorder-successor-in-bst",
          "title": "Inorder Successor in BST",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-search-tree-iterator-ii",
          "title": "Binary Search Tree Iterator II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Design", "slug": "design" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" },
        { "name": "Iterator", "slug": "iterator" }
      ]
    }
  },
  "dungeon-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "174",
        "title": "Dungeon Game",
        "titleSlug": "dungeon-game",
        "content": "<p>The demons had captured the princess and imprisoned her in <strong>the bottom-right corner</strong> of a <code>dungeon</code>. The <code>dungeon</code> consists of <code>m x n</code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in <strong>the top-left room</strong> and must fight his way through <code>dungeon</code> to rescue the princess.</p>\n\n<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to <code>0</code> or below, he dies immediately.</p>\n\n<p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight&#39;s health (represented by positive integers).</p>\n\n<p>To reach the princess as quickly as possible, the knight decides to move only <strong>rightward</strong> or <strong>downward</strong> in each step.</p>\n\n<p>Return <em>the knight&#39;s minimum initial health so that he can rescue the princess</em>.</p>\n\n<p><strong>Note</strong> that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dungeon = [[0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == dungeon.length</code></li>\n\t<li><code>n == dungeon[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-1000 &lt;= dungeon[i][j] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5637,
        "dislikes": 101,
        "similarQuestions": "[{\"title\": \"Unique Paths\", \"titleSlug\": \"unique-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Sum\", \"titleSlug\": \"minimum-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cherry Pickup\", \"titleSlug\": \"cherry-pickup\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Cost in a Grid\", \"titleSlug\": \"minimum-path-cost-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Health to Beat Game\", \"titleSlug\": \"minimum-health-to-beat-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paths in Matrix Whose Sum Is Divisible by K\", \"titleSlug\": \"paths-in-matrix-whose-sum-is-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if There is a Path With Equal Number of 0's And 1's\", \"titleSlug\": \"check-if-there-is-a-path-with-equal-number-of-0s-and-1s\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"214.4K\", \"totalSubmission\": \"567.3K\", \"totalAcceptedRaw\": 214446, \"totalSubmissionRaw\": 567299, \"acRate\": \"37.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "unique-paths",
          "title": "Unique Paths",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-sum",
          "title": "Minimum Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "cherry-pickup",
          "title": "Cherry Pickup",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-cost-in-a-grid",
          "title": "Minimum Path Cost in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-health-to-beat-game",
          "title": "Minimum Health to Beat Game",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
          "title": "Paths in Matrix Whose Sum Is Divisible by K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
          "title": "Check if There is a Path With Equal Number of 0's And 1's",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "combine-two-tables": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "175",
        "title": "Combine Two Tables",
        "titleSlug": "combine-two-tables",
        "content": "<p>Table: <code>Person</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key (column with unique values) for this table.\nThis table contains information about the ID of some persons and their first and last names.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Address</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key (column with unique values) for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report the first name, last name, city, and state of each person in the <code>Person</code> table. If the address of a <code>personId</code> is not present in the <code>Address</code> table, report <code>null</code> instead.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+\n<strong>Output:</strong> \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+\n<strong>Explanation:</strong> \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3355,
        "dislikes": 221,
        "similarQuestions": "[{\"title\": \"Employee Bonus\", \"titleSlug\": \"employee-bonus\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"925.4K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 925439, \"totalSubmissionRaw\": 1230652, \"acRate\": \"75.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "employee-bonus",
          "title": "Employee Bonus",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "second-highest-salary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "176",
        "title": "Second Highest Salary",
        "titleSlug": "second-highest-salary",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find&nbsp;the second highest salary from the <code>Employee</code> table. If there is no second highest salary,&nbsp;return&nbsp;<code>null (return&nbsp;None in Pandas)</code>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n<strong>Output:</strong> \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\n<strong>Output:</strong> \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3411,
        "dislikes": 929,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"781K\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 781016, \"totalSubmissionRaw\": 1981601, \"acRate\": \"39.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "nth-highest-salary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "177",
        "title": "Nth Highest Salary",
        "titleSlug": "nth-highest-salary",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find the <code>n<sup>th</sup></code> highest salary from the <code>Employee</code> table. If there is no <code>n<sup>th</sup></code> highest salary, return&nbsp;<code>null</code>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2\n<strong>Output:</strong> \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2\n<strong>Output:</strong> \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1887,
        "dislikes": 981,
        "similarQuestions": "[{\"title\": \"The Number of Users That Are Eligible for Discount\", \"titleSlug\": \"the-number-of-users-that-are-eligible-for-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"364.5K\", \"totalSubmission\": \"956.4K\", \"totalAcceptedRaw\": 364492, \"totalSubmissionRaw\": 956436, \"acRate\": \"38.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "the-number-of-users-that-are-eligible-for-discount",
          "title": "The Number of Users That Are Eligible for Discount",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "rank-scores": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "178",
        "title": "Rank Scores",
        "titleSlug": "rank-scores",
        "content": "<p>Table: <code>Scores</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| score       | decimal |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:</p>\n\n<ul>\n\t<li>The scores should be ranked from the highest to the lowest.</li>\n\t<li>If there is a tie between two scores, both should have the same ranking.</li>\n\t<li>After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.</li>\n</ul>\n\n<p>Return the result table ordered by <code>score</code> in descending order.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\n<strong>Output:</strong> \n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2087,
        "dislikes": 267,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"357.1K\", \"totalSubmission\": \"581.1K\", \"totalAcceptedRaw\": 357112, \"totalSubmissionRaw\": 581058, \"acRate\": \"61.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "largest-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "179",
        "title": "Largest Number",
        "titleSlug": "largest-number",
        "content": "<p>Given a list of non-negative integers <code>nums</code>, arrange them such that they form the largest number and return it.</p>\n\n<p>Since the result may be very large, so you need to return a string instead of an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,2]\n<strong>Output:</strong> &quot;210&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,30,34,5,9]\n<strong>Output:</strong> &quot;9534330&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7744,
        "dislikes": 626,
        "similarQuestions": "[{\"title\": \"Smallest Value of the Rearranged Number\", \"titleSlug\": \"smallest-value-of-the-rearranged-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"440.9K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 440913, \"totalSubmissionRaw\": 1239423, \"acRate\": \"35.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-value-of-the-rearranged-number",
          "title": "Smallest Value of the Rearranged Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "consecutive-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "180",
        "title": "Consecutive Numbers",
        "titleSlug": "consecutive-numbers",
        "content": "<p>Table: <code>Logs</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nIn SQL, id is the primary key for this table.\nid is an autoincrement column.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Find all numbers that appear at least three times consecutively.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+\n<strong>Output:</strong> \n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\n<strong>Explanation:</strong> 1 is the only number that appears consecutively for at least three times.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1939,
        "dislikes": 252,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"319.4K\", \"totalSubmission\": \"681.6K\", \"totalAcceptedRaw\": 319423, \"totalSubmissionRaw\": 681631, \"acRate\": \"46.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "employees-earning-more-than-their-managers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "181",
        "title": "Employees Earning More Than Their Managers",
        "titleSlug": "employees-earning-more-than-their-managers",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution&nbsp;to find the employees who earn more than their managers.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+\n<strong>Output:</strong> \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n<strong>Explanation:</strong> Joe is the only employee who earns more than his manager.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2480,
        "dislikes": 240,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"585.6K\", \"totalSubmission\": \"850K\", \"totalAcceptedRaw\": 585636, \"totalSubmissionRaw\": 849964, \"acRate\": \"68.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "duplicate-emails": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "182",
        "title": "Duplicate Emails",
        "titleSlug": "duplicate-emails",
        "content": "<p>Table: <code>Person</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report all the duplicate emails. Note that it&#39;s guaranteed that the email&nbsp;field is not NULL.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nPerson table:\n+----+---------+\n| id | email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n<strong>Output:</strong> \n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n<strong>Explanation:</strong> a@b.com is repeated two times.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1997,
        "dislikes": 65,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"605.6K\", \"totalSubmission\": \"856.6K\", \"totalAcceptedRaw\": 605567, \"totalSubmissionRaw\": 856552, \"acRate\": \"70.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "customers-who-never-order": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "183",
        "title": "Customers Who Never Order",
        "titleSlug": "customers-who-never-order",
        "content": "<p>Table: <code>Customers</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID and name of a customer.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Orders</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| customerId  | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\ncustomerId is a foreign key (reference columns) of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find all customers who never order anything.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCustomers table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n<strong>Output:</strong> \n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2533,
        "dislikes": 129,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"748.5K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 748526, \"totalSubmissionRaw\": 1090238, \"acRate\": \"68.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "department-highest-salary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "184",
        "title": "Department Highest Salary",
        "titleSlug": "department-highest-salary",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference columns) of the ID from the <code>Department </code>table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Department</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table. It is guaranteed that department name is not <code>NULL.</code>\nEach row of this table indicates the ID of a department and its name.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find employees who have the highest salary in each of the departments.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Jim   | 90000  | 1            |\n| 3  | Henry | 80000  | 2            |\n| 4  | Sam   | 60000  | 2            |\n| 5  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\n<strong>Output:</strong> \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Jim      | 90000  |\n| Sales      | Henry    | 80000  |\n| IT         | Max      | 90000  |\n+------------+----------+--------+\n<strong>Explanation:</strong> Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1965,
        "dislikes": 183,
        "similarQuestions": "[{\"title\": \"Highest Grade For Each Student\", \"titleSlug\": \"highest-grade-for-each-student\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"353.5K\", \"totalSubmission\": \"695K\", \"totalAcceptedRaw\": 353495, \"totalSubmissionRaw\": 695045, \"acRate\": \"50.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "highest-grade-for-each-student",
          "title": "Highest Grade For Each Student",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "department-top-three-salaries": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "185",
        "title": "Department Top Three Salaries",
        "titleSlug": "department-top-three-salaries",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference column) of the ID from the <code>Department </code>table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Department</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of a department and its name.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A company&#39;s executives are interested in seeing who earns the most money in each of the company&#39;s departments. A <strong>high earner</strong> in a department is an employee who has a salary in the <strong>top three unique</strong> salaries for that department.</p>\n\n<p>Write a solution to find the employees who are <strong>high earners</strong> in each of the departments.</p>\n\n<p>Return the result table <strong>in any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\n<strong>Output:</strong> \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\n<strong>Explanation:</strong> \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1924,
        "dislikes": 228,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"275.1K\", \"totalSubmission\": \"534.1K\", \"totalAcceptedRaw\": 275123, \"totalSubmissionRaw\": 534093, \"acRate\": \"51.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "reverse-words-in-a-string-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "186",
        "title": "Reverse Words in a String II",
        "titleSlug": "reverse-words-in-a-string-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1051,
        "dislikes": 142,
        "similarQuestions": "[{\"title\": \"Reverse Words in a String\", \"titleSlug\": \"reverse-words-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Rotate Array\", \"titleSlug\": \"rotate-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"155.6K\", \"totalSubmission\": \"288.5K\", \"totalAcceptedRaw\": 155616, \"totalSubmissionRaw\": 288478, \"acRate\": \"53.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-words-in-a-string",
          "title": "Reverse Words in a String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "rotate-array",
          "title": "Rotate Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "repeated-dna-sequences": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "187",
        "title": "Repeated DNA Sequences",
        "titleSlug": "repeated-dna-sequences",
        "content": "<p>The <strong>DNA sequence</strong> is composed of a series of nucleotides abbreviated as <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;T&#39;</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ACGAATTCCG&quot;</code> is a <strong>DNA sequence</strong>.</li>\n</ul>\n\n<p>When studying <strong>DNA</strong>, it is useful to identify repeated sequences within the DNA.</p>\n\n<p>Given a string <code>s</code> that represents a <strong>DNA sequence</strong>, return all the <strong><code>10</code>-letter-long</strong> sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n<strong>Output:</strong> [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"AAAAAAAAAAAAA\"\n<strong>Output:</strong> [\"AAAAAAAAAA\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, or <code>&#39;T&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3199,
        "dislikes": 512,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Rolling Hash", "slug": "rolling-hash" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"355.4K\", \"totalSubmission\": \"737.7K\", \"totalAcceptedRaw\": 355444, \"totalSubmissionRaw\": 737673, \"acRate\": \"48.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Rolling Hash", "slug": "rolling-hash" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "best-time-to-buy-and-sell-stock-iv": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "188",
        "title": "Best Time to Buy and Sell Stock IV",
        "titleSlug": "best-time-to-buy-and-sell-stock-iv",
        "content": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p>\n\n<p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions: i.e. you may buy at most <code>k</code> times and sell at most <code>k</code> times.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [2,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [3,2,6,5,0,3]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= prices.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 7186,
        "dislikes": 204,
        "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock\", \"titleSlug\": \"best-time-to-buy-and-sell-stock\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock II\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock III\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Profit From Trading Stocks\", \"titleSlug\": \"maximum-profit-from-trading-stocks\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"418.5K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 418471, \"totalSubmissionRaw\": 1005021, \"acRate\": \"41.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "best-time-to-buy-and-sell-stock",
          "title": "Best Time to Buy and Sell Stock",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-ii",
          "title": "Best Time to Buy and Sell Stock II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "best-time-to-buy-and-sell-stock-iii",
          "title": "Best Time to Buy and Sell Stock III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-profit-from-trading-stocks",
          "title": "Maximum Profit From Trading Stocks",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "rotate-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "189",
        "title": "Rotate Array",
        "titleSlug": "rotate-array",
        "content": "<p>Given an integer array <code>nums</code>, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 3\n<strong>Output:</strong> [5,6,7,1,2,3,4]\n<strong>Explanation:</strong>\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-100,3,99], k = 2\n<strong>Output:</strong> [3,99,-1,-100]\n<strong>Explanation:</strong> \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Try to come up with as many solutions as you can. There are at least <strong>three</strong> different ways to solve this problem.</li>\n\t<li>Could you do it in-place with <code>O(1)</code> extra space?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16958,
        "dislikes": 1844,
        "similarQuestions": "[{\"title\": \"Rotate List\", \"titleSlug\": \"rotate-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reverse Words in a String II\", \"titleSlug\": \"reverse-words-in-a-string-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Make K-Subarray Sums Equal\", \"titleSlug\": \"make-k-subarray-sums-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"4.7M\", \"totalAcceptedRaw\": 1870378, \"totalSubmissionRaw\": 4664394, \"acRate\": \"40.1%\"}",
        "hints": [
          "The easiest solution would use additional memory and that is perfectly fine.",
          "The actual trick comes when trying to solve this problem without using any additional memory. This means you need to use the original array somehow to move the elements around. Now, we can place each element in its original location and shift all the elements around it to adjust as that would be too costly and most likely will time out on larger input arrays.",
          "One line of thought is based on reversing the array (or parts of it) to obtain the desired result. Think about how reversal might potentially help us out by using an example.",
          "The other line of thought is a tad bit complicated but essentially it builds on the idea of placing each element in its original position while keeping track of the element originally in that position. Basically, at every step, we place an element in its rightful position and keep track of the element already there or the one being overwritten in an additional variable. We can't do this in one linear pass and the idea here is based on <b>cyclic-dependencies</b> between elements."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "rotate-list",
          "title": "Rotate List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-words-in-a-string-ii",
          "title": "Reverse Words in a String II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "make-k-subarray-sums-equal",
          "title": "Make K-Subarray Sums Equal",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The easiest solution would use additional memory and that is perfectly fine.",
        "The actual trick comes when trying to solve this problem without using any additional memory. This means you need to use the original array somehow to move the elements around. Now, we can place each element in its original location and shift all the elements around it to adjust as that would be too costly and most likely will time out on larger input arrays.",
        "One line of thought is based on reversing the array (or parts of it) to obtain the desired result. Think about how reversal might potentially help us out by using an example.",
        "The other line of thought is a tad bit complicated but essentially it builds on the idea of placing each element in its original position while keeping track of the element originally in that position. Basically, at every step, we place an element in its rightful position and keep track of the element already there or the one being overwritten in an additional variable. We can't do this in one linear pass and the idea here is based on <b>cyclic-dependencies</b> between elements."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "reverse-bits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "190",
        "title": "Reverse Bits",
        "titleSlug": "reverse-bits",
        "content": "<p>Reverse bits of a given 32 bits unsigned integer.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer&#39;s internal binary representation is the same, whether it is signed or unsigned.</li>\n\t<li>In Java, the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2&#39;s complement notation</a>. Therefore, in <strong class=\"example\">Example 2</strong> above, the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 00000010100101000001111010011100\n<strong>Output:</strong>    964176192 (00111001011110000010100101000000)\n<strong>Explanation: </strong>The input binary string <strong>00000010100101000001111010011100</strong> represents the unsigned integer 43261596, so return 964176192 which its binary representation is <strong>00111001011110000010100101000000</strong>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11111111111111111111111111111101\n<strong>Output:</strong>   3221225471 (10111111111111111111111111111111)\n<strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is <strong>10111111111111111111111111111111</strong>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input must be a <strong>binary string</strong> of length <code>32</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If this function is called many times, how would you optimize it?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4912,
        "dislikes": 1343,
        "similarQuestions": "[{\"title\": \"Reverse Integer\", \"titleSlug\": \"reverse-integer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"A Number After a Double Reversal\", \"titleSlug\": \"a-number-after-a-double-reversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"727.1K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 727112, \"totalSubmissionRaw\": 1274560, \"acRate\": \"57.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-integer",
          "title": "Reverse Integer",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-1-bits",
          "title": "Number of 1 Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "a-number-after-a-double-reversal",
          "title": "A Number After a Double Reversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "number-of-1-bits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "191",
        "title": "Number of 1 Bits",
        "titleSlug": "number-of-1-bits",
        "content": "<p>Write a function that takes&nbsp;the binary representation of an unsigned integer and returns the number of &#39;1&#39; bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\">Hamming weight</a>).</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer&#39;s internal binary representation is the same, whether it is signed or unsigned.</li>\n\t<li>In Java, the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2&#39;s complement notation</a>. Therefore, in <strong class=\"example\">Example 3</strong>, the input represents the signed integer. <code>-3</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 00000000000000000000000000001011\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three &#39;1&#39; bits.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 00000000000000000000000010000000\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one &#39;1&#39; bit.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11111111111111111111111111111101\n<strong>Output:</strong> 31\n<strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one &#39;1&#39; bits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input must be a <strong>binary string</strong> of length <code>32</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If this function is called many times, how would you optimize it?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6297,
        "dislikes": 1285,
        "similarQuestions": "[{\"title\": \"Reverse Bits\", \"titleSlug\": \"reverse-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Power of Two\", \"titleSlug\": \"power-of-two\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Counting Bits\", \"titleSlug\": \"counting-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Watch\", \"titleSlug\": \"binary-watch\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Hamming Distance\", \"titleSlug\": \"hamming-distance\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Number with Alternating Bits\", \"titleSlug\": \"binary-number-with-alternating-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Prime Number of Set Bits in Binary Representation\", \"titleSlug\": \"prime-number-of-set-bits-in-binary-representation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 1349944, \"totalSubmissionRaw\": 1931809, \"acRate\": \"69.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-bits",
          "title": "Reverse Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "power-of-two",
          "title": "Power of Two",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "counting-bits",
          "title": "Counting Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "binary-watch",
          "title": "Binary Watch",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "hamming-distance",
          "title": "Hamming Distance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "binary-number-with-alternating-bits",
          "title": "Binary Number with Alternating Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "prime-number-of-set-bits-in-binary-representation",
          "title": "Prime Number of Set Bits in Binary Representation",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "word-frequency": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "192",
        "title": "Word Frequency",
        "titleSlug": "word-frequency",
        "content": "<p>Write a bash script to calculate the <span data-keyword=\"frequency-textfile\">frequency</span> of each word in a text file <code>words.txt</code>.</p>\n\n<p>For simplicity sake, you may assume:</p>\n\n<ul>\n\t<li><code>words.txt</code> contains only lowercase characters and space <code>&#39; &#39;</code> characters.</li>\n\t<li>Each word must consist of lowercase characters only.</li>\n\t<li>Words are separated by one or more whitespace characters.</li>\n</ul>\n\n<p><strong class=\"example\">Example:</strong></p>\n\n<p>Assume that <code>words.txt</code> has the following content:</p>\n\n<pre>\nthe day is sunny the the\nthe sunny is is\n</pre>\n\n<p>Your script should output the following, sorted by descending frequency:</p>\n\n<pre>\nthe 4\nis 3\nsunny 2\nday 1\n</pre>\n\n<p><b>Note:</b></p>\n\n<ul>\n\t<li>Don&#39;t worry about handling ties, it is guaranteed that each word&#39;s frequency count is unique.</li>\n\t<li>Could you write it in one-line using <a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html\">Unix pipes</a>?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 526,
        "dislikes": 304,
        "similarQuestions": "[{\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Shell", "slug": "shell" }],
        "stats": "{\"totalAccepted\": \"47.5K\", \"totalSubmission\": \"186.4K\", \"totalAcceptedRaw\": 47478, \"totalSubmissionRaw\": 186387, \"acRate\": \"25.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "top-k-frequent-elements",
          "title": "Top K Frequent Elements",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Shell", "slug": "shell" }]
    }
  },
  "valid-phone-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "193",
        "title": "Valid Phone Numbers",
        "titleSlug": "valid-phone-numbers",
        "content": "<p>Given a text file <code>file.txt</code> that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.</p>\n\n<p>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</p>\n\n<p>You may also assume each line in the text file must not contain leading or trailing white spaces.</p>\n\n<p><strong class=\"example\">Example:</strong></p>\n\n<p>Assume that <code>file.txt</code> has the following content:</p>\n\n<pre>\n987-123-4567\n123 456 7890\n(123) 456-7890\n</pre>\n\n<p>Your script should output the following valid phone numbers:</p>\n\n<pre>\n987-123-4567\n(123) 456-7890\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 396,
        "dislikes": 950,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Shell", "slug": "shell" }],
        "stats": "{\"totalAccepted\": \"76.7K\", \"totalSubmission\": \"298.9K\", \"totalAcceptedRaw\": 76726, \"totalSubmissionRaw\": 298891, \"acRate\": \"25.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Shell", "slug": "shell" }]
    }
  },
  "transpose-file": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "194",
        "title": "Transpose File",
        "titleSlug": "transpose-file",
        "content": "<p>Given a text file <code>file.txt</code>, transpose its content.</p>\n\n<p>You may assume that each row has the same number of columns, and each field is separated by the <code>&#39; &#39;</code> character.</p>\n\n<p><strong class=\"example\">Example:</strong></p>\n\n<p>If <code>file.txt</code> has the following content:</p>\n\n<pre>\nname age\nalice 21\nryan 30\n</pre>\n\n<p>Output the following:</p>\n\n<pre>\nname alice ryan\nage 21 30\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 143,
        "dislikes": 283,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Shell", "slug": "shell" }],
        "stats": "{\"totalAccepted\": \"23.7K\", \"totalSubmission\": \"92.2K\", \"totalAcceptedRaw\": 23681, \"totalSubmissionRaw\": 92212, \"acRate\": \"25.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Shell", "slug": "shell" }]
    }
  },
  "tenth-line": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "195",
        "title": "Tenth Line",
        "titleSlug": "tenth-line",
        "content": "<p>Given a text file&nbsp;<code>file.txt</code>, print&nbsp;just the 10th line of the&nbsp;file.</p>\r\n\r\n<p><strong class=\"example\">Example:</strong></p>\r\n\r\n<p>Assume that <code>file.txt</code> has the following content:</p>\r\n\r\n<pre>\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nLine 5\r\nLine 6\r\nLine 7\r\nLine 8\r\nLine 9\r\nLine 10\r\n</pre>\r\n\r\n<p>Your script should output the tenth line, which is:</p>\r\n\r\n<pre>\r\nLine 10\r\n</pre>\r\n\r\n<div class=\"spoilers\"><b>Note:</b><br />\r\n1. If the file contains less than 10 lines, what should you output?<br />\r\n2. There&#39;s at least three different solutions. Try to explore all possibilities.</div>\r\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 371,
        "dislikes": 463,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Shell", "slug": "shell" }],
        "stats": "{\"totalAccepted\": \"98.8K\", \"totalSubmission\": \"298.9K\", \"totalAcceptedRaw\": 98755, \"totalSubmissionRaw\": 298890, \"acRate\": \"33.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Shell", "slug": "shell" }]
    }
  },
  "delete-duplicate-emails": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "196",
        "title": "Delete Duplicate Emails",
        "titleSlug": "delete-duplicate-emails",
        "content": "<p>Table: <code>Person</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to<strong> delete</strong> all duplicate emails, keeping only one unique email with the smallest <code>id</code>.</p>\n\n<p>For SQL users, please note that you are supposed to write a <code>DELETE</code> statement and not a <code>SELECT</code> one.</p>\n\n<p>For Pandas users, please note that you are supposed to modify <code>Person</code> in place.</p>\n\n<p>After running your script, the answer shown is the <code>Person</code> table. The driver will first compile and run your piece of code and then show the <code>Person</code> table. The final order of the <code>Person</code> table <strong>does not matter</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nPerson table:\n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\n<strong>Output:</strong> \n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n<strong>Explanation:</strong> john@example.com is repeated two times. We keep the row with the smallest Id = 1.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1487,
        "dislikes": 298,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"470.3K\", \"totalSubmission\": \"768.9K\", \"totalAcceptedRaw\": 470297, \"totalSubmissionRaw\": 768948, \"acRate\": \"61.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "rising-temperature": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "197",
        "title": "Rising Temperature",
        "titleSlug": "rising-temperature",
        "content": "<p>Table: <code>Weather</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nThis table contains information about the temperature on a certain day.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find all dates&#39; <code>Id</code> with higher temperatures compared to its previous dates (yesterday).</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+\n<strong>Output:</strong> \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+\n<strong>Explanation:</strong> \nIn 2015-01-02, the temperature was higher than the previous day (10 -&gt; 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -&gt; 30).\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2533,
        "dislikes": 566,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"499.3K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 499260, \"totalSubmissionRaw\": 1080441, \"acRate\": \"46.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "house-robber": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "198",
        "title": "House Robber",
        "titleSlug": "house-robber",
        "content": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <b>without alerting the police</b></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,9,3,1]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 400</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 19827,
        "dislikes": 379,
        "similarQuestions": "[{\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber II\", \"titleSlug\": \"house-robber-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House\", \"titleSlug\": \"paint-house\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint Fence\", \"titleSlug\": \"paint-fence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber III\", \"titleSlug\": \"house-robber-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Coin Path\", \"titleSlug\": \"coin-path\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Delete and Earn\", \"titleSlug\": \"delete-and-earn\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Solving Questions With Brainpower\", \"titleSlug\": \"solving-questions-with-brainpower\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Ways to Place Houses\", \"titleSlug\": \"count-number-of-ways-to-place-houses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber IV\", \"titleSlug\": \"house-robber-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Mice and Cheese\", \"titleSlug\": \"mice-and-cheese\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Largest Element in an Array after Merge Operations\", \"titleSlug\": \"largest-element-in-an-array-after-merge-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"3.8M\", \"totalAcceptedRaw\": 1907472, \"totalSubmissionRaw\": 3800042, \"acRate\": \"50.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-subarray",
          "title": "Maximum Product Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-ii",
          "title": "House Robber II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-house",
          "title": "Paint House",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-fence",
          "title": "Paint Fence",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-iii",
          "title": "House Robber III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "non-negative-integers-without-consecutive-ones",
          "title": "Non-negative Integers without Consecutive Ones",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "coin-path",
          "title": "Coin Path",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "delete-and-earn",
          "title": "Delete and Earn",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "solving-questions-with-brainpower",
          "title": "Solving Questions With Brainpower",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-number-of-ways-to-place-houses",
          "title": "Count Number of Ways to Place Houses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-iv",
          "title": "House Robber IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "mice-and-cheese",
          "title": "Mice and Cheese",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "largest-element-in-an-array-after-merge-operations",
          "title": "Largest Element in an Array after Merge Operations",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "binary-tree-right-side-view": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "199",
        "title": "Binary Tree Right Side View",
        "titleSlug": "binary-tree-right-side-view",
        "content": "<p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg\" style=\"width: 401px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,5,null,4]\n<strong>Output:</strong> [1,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3]\n<strong>Output:</strong> [1,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11443,
        "dislikes": 804,
        "similarQuestions": "[{\"title\": \"Populating Next Right Pointers in Each Node\", \"titleSlug\": \"populating-next-right-pointers-in-each-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Boundary of Binary Tree\", \"titleSlug\": \"boundary-of-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1150327, \"totalSubmissionRaw\": 1838429, \"acRate\": \"62.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "populating-next-right-pointers-in-each-node",
          "title": "Populating Next Right Pointers in Each Node",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "boundary-of-binary-tree",
          "title": "Boundary of Binary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "number-of-islands": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "200",
        "title": "Number of Islands",
        "titleSlug": "number-of-islands",
        "content": "<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 21726,
        "dislikes": 473,
        "similarQuestions": "[{\"title\": \"Surrounded Regions\", \"titleSlug\": \"surrounded-regions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Islands II\", \"titleSlug\": \"number-of-islands-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Connected Components in an Undirected Graph\", \"titleSlug\": \"number-of-connected-components-in-an-undirected-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Distinct Islands\", \"titleSlug\": \"number-of-distinct-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Max Area of Island\", \"titleSlug\": \"max-area-of-island\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Sub Islands\", \"titleSlug\": \"count-sub-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All Groups of Farmland\", \"titleSlug\": \"find-all-groups-of-farmland\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Unreachable Pairs of Nodes in an Undirected Graph\", \"titleSlug\": \"count-unreachable-pairs-of-nodes-in-an-undirected-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Fish in a Grid\", \"titleSlug\": \"maximum-number-of-fish-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"2.4M\", \"totalSubmission\": \"4.2M\", \"totalAcceptedRaw\": 2424884, \"totalSubmissionRaw\": 4164965, \"acRate\": \"58.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "surrounded-regions",
          "title": "Surrounded Regions",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "walls-and-gates",
          "title": "Walls and Gates",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-islands-ii",
          "title": "Number of Islands II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-connected-components-in-an-undirected-graph",
          "title": "Number of Connected Components in an Undirected Graph",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-distinct-islands",
          "title": "Number of Distinct Islands",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "max-area-of-island",
          "title": "Max Area of Island",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-sub-islands",
          "title": "Count Sub Islands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-all-groups-of-farmland",
          "title": "Find All Groups of Farmland",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
          "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-fish-in-a-grid",
          "title": "Maximum Number of Fish in a Grid",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "bitwise-and-of-numbers-range": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "201",
        "title": "Bitwise AND of Numbers Range",
        "titleSlug": "bitwise-and-of-numbers-range",
        "content": "<p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return <em>the bitwise AND of all numbers in this range, inclusive</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 5, right = 7\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 0, right = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 1, right = 2147483647\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3172,
        "dislikes": 221,
        "similarQuestions": "[{\"title\": \"Longest Nice Subarray\", \"titleSlug\": \"longest-nice-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"265K\", \"totalSubmission\": \"617.9K\", \"totalAcceptedRaw\": 265046, \"totalSubmissionRaw\": 617851, \"acRate\": \"42.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-nice-subarray",
          "title": "Longest Nice Subarray",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "happy-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "202",
        "title": "Happy Number",
        "titleSlug": "happy-number",
        "content": "<p>Write an algorithm to determine if a number <code>n</code> is happy.</p>\n\n<p>A <strong>happy number</strong> is a number defined by the following process:</p>\n\n<ul>\n\t<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>\n\t<li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li>\n\t<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 19\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\n1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 9845,
        "dislikes": 1325,
        "similarQuestions": "[{\"title\": \"Linked List Cycle\", \"titleSlug\": \"linked-list-cycle\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add Digits\", \"titleSlug\": \"add-digits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Ugly Number\", \"titleSlug\": \"ugly-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Digits of String After Convert\", \"titleSlug\": \"sum-of-digits-of-string-after-convert\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Addition to Make Integer Beautiful\", \"titleSlug\": \"minimum-addition-to-make-integer-beautiful\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Value After Replacing With Sum of Prime Factors\", \"titleSlug\": \"smallest-value-after-replacing-with-sum-of-prime-factors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count the Digits That Divide a Number\", \"titleSlug\": \"count-the-digits-that-divide-a-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1330301, \"totalSubmissionRaw\": 2390738, \"acRate\": \"55.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "linked-list-cycle",
          "title": "Linked List Cycle",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-digits",
          "title": "Add Digits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "ugly-number",
          "title": "Ugly Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sum-of-digits-of-string-after-convert",
          "title": "Sum of Digits of String After Convert",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-addition-to-make-integer-beautiful",
          "title": "Minimum Addition to Make Integer Beautiful",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors",
          "title": "Smallest Value After Replacing With Sum of Prime Factors",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-the-digits-that-divide-a-number",
          "title": "Count the Digits That Divide a Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "remove-linked-list-elements": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "203",
        "title": "Remove Linked List Elements",
        "titleSlug": "remove-linked-list-elements",
        "content": "<p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return <em>the new head</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,6,3,4,5,6], val = 6\n<strong>Output:</strong> [1,2,3,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [], val = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [7,7,7,7], val = 7\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 50</code></li>\n\t<li><code>0 &lt;= val &lt;= 50</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8004,
        "dislikes": 225,
        "similarQuestions": "[{\"title\": \"Remove Element\", \"titleSlug\": \"remove-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Delete Node in a Linked List\", \"titleSlug\": \"delete-node-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Delete the Middle Node of a Linked List\", \"titleSlug\": \"delete-the-middle-node-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.2M\", \"totalAcceptedRaw\": 1050224, \"totalSubmissionRaw\": 2194413, \"acRate\": \"47.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "remove-element",
          "title": "Remove Element",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "delete-node-in-a-linked-list",
          "title": "Delete Node in a Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "delete-the-middle-node-of-a-linked-list",
          "title": "Delete the Middle Node of a Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "count-primes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "204",
        "title": "Count Primes",
        "titleSlug": "count-primes",
        "content": "<p>Given an integer <code>n</code>, return <em>the number of prime numbers that are strictly less than</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 5 * 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7613,
        "dislikes": 1388,
        "similarQuestions": "[{\"title\": \"Ugly Number\", \"titleSlug\": \"ugly-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Ugly Number II\", \"titleSlug\": \"ugly-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Perfect Squares\", \"titleSlug\": \"perfect-squares\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Common Factors\", \"titleSlug\": \"number-of-common-factors\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Prime Pairs With Target Sum\", \"titleSlug\": \"prime-pairs-with-target-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Enumeration", "slug": "enumeration" },
          { "name": "Number Theory", "slug": "number-theory" }
        ],
        "stats": "{\"totalAccepted\": \"809.5K\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 809473, \"totalSubmissionRaw\": 2423564, \"acRate\": \"33.4%\"}",
        "hints": [
          "Checking all the integers in the range [1, n - 1] is not efficient. Think about a better approach.",
          "Since most of the numbers are not primes, we need a fast approach to exclude the non-prime integers.",
          "Use Sieve of Eratosthenes."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "ugly-number",
          "title": "Ugly Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ugly-number-ii",
          "title": "Ugly Number II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "perfect-squares",
          "title": "Perfect Squares",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-common-factors",
          "title": "Number of Common Factors",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "prime-pairs-with-target-sum",
          "title": "Prime Pairs With Target Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Checking all the integers in the range [1, n - 1] is not efficient. Think about a better approach.",
        "Since most of the numbers are not primes, we need a fast approach to exclude the non-prime integers.",
        "Use Sieve of Eratosthenes."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Enumeration", "slug": "enumeration" },
        { "name": "Number Theory", "slug": "number-theory" }
      ]
    }
  },
  "isomorphic-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "205",
        "title": "Isomorphic Strings",
        "titleSlug": "isomorphic-strings",
        "content": "<p>Given two strings <code>s</code> and <code>t</code>, <em>determine if they are isomorphic</em>.</p>\n\n<p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p>\n\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"egg\", t = \"add\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"foo\", t = \"bar\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"paper\", t = \"title\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>t.length == s.length</code></li>\n\t<li><code>s</code> and <code>t</code> consist of any valid ascii character.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7963,
        "dislikes": 1858,
        "similarQuestions": "[{\"title\": \"Word Pattern\", \"titleSlug\": \"word-pattern\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1066170, \"totalSubmissionRaw\": 2455023, \"acRate\": \"43.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "word-pattern",
          "title": "Word Pattern",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "reverse-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "206",
        "title": "Reverse Linked List",
        "titleSlug": "reverse-linked-list",
        "content": "<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [5,4,3,2,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" style=\"width: 182px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> [2,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>\n\t<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 20340,
        "dislikes": 381,
        "similarQuestions": "[{\"title\": \"Reverse Linked List II\", \"titleSlug\": \"reverse-linked-list-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Upside Down\", \"titleSlug\": \"binary-tree-upside-down\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Linked List\", \"titleSlug\": \"palindrome-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Reverse Nodes in Even Length Groups\", \"titleSlug\": \"reverse-nodes-in-even-length-groups\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Twin Sum of a Linked List\", \"titleSlug\": \"maximum-twin-sum-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Nodes From Linked List\", \"titleSlug\": \"remove-nodes-from-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Insert Greatest Common Divisors in Linked List\", \"titleSlug\": \"insert-greatest-common-divisors-in-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"3.6M\", \"totalSubmission\": \"4.8M\", \"totalAcceptedRaw\": 3641029, \"totalSubmissionRaw\": 4836514, \"acRate\": \"75.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-linked-list-ii",
          "title": "Reverse Linked List II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-upside-down",
          "title": "Binary Tree Upside Down",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-linked-list",
          "title": "Palindrome Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-nodes-in-even-length-groups",
          "title": "Reverse Nodes in Even Length Groups",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-twin-sum-of-a-linked-list",
          "title": "Maximum Twin Sum of a Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-nodes-from-linked-list",
          "title": "Remove Nodes From Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "insert-greatest-common-divisors-in-linked-list",
          "title": "Insert Greatest Common Divisors in Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "course-schedule": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "207",
        "title": "Course Schedule",
        "titleSlug": "course-schedule",
        "content": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>\n</ul>\n\n<p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numCourses &lt;= 2000</code></li>\n\t<li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li>\n\t<li>All the pairs prerequisites[i] are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 15598,
        "dislikes": 636,
        "similarQuestions": "[{\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Graph Valid Tree\", \"titleSlug\": \"graph-valid-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule III\", \"titleSlug\": \"course-schedule-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Build a Matrix With Conditions\", \"titleSlug\": \"build-a-matrix-with-conditions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" }
        ],
        "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 1419212, \"totalSubmissionRaw\": 3058405, \"acRate\": \"46.4%\"}",
        "hints": [
          "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
          "<a href=\"https://www.cs.princeton.edu/~wayne/kleinberg-tardos/pdf/03Graphs.pdf\" target=\"_blank\">Topological Sort via DFS</a> - A great tutorial explaining the basic concepts of Topological Sort.",
          "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule-ii",
          "title": "Course Schedule II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "graph-valid-tree",
          "title": "Graph Valid Tree",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-height-trees",
          "title": "Minimum Height Trees",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "course-schedule-iii",
          "title": "Course Schedule III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "build-a-matrix-with-conditions",
          "title": "Build a Matrix With Conditions",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
        "<a href=\"https://www.cs.princeton.edu/~wayne/kleinberg-tardos/pdf/03Graphs.pdf\" target=\"_blank\">Topological Sort via DFS</a> - A great tutorial explaining the basic concepts of Topological Sort.",
        "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
      ],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" }
      ]
    }
  },
  "implement-trie-prefix-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "208",
        "title": "Implement Trie (Prefix Tree)",
        "titleSlug": "implement-trie-prefix-tree",
        "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as &quot;try&quot;) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]\n[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // return True\ntrie.search(&quot;app&quot;);     // return False\ntrie.startsWith(&quot;app&quot;); // return True\ntrie.insert(&quot;app&quot;);\ntrie.search(&quot;app&quot;);     // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11129,
        "dislikes": 126,
        "similarQuestions": "[{\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Search Autocomplete System\", \"titleSlug\": \"design-search-autocomplete-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Replace Words\", \"titleSlug\": \"replace-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Implement Magic Dictionary\", \"titleSlug\": \"implement-magic-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Encrypt and Decrypt Strings\", \"titleSlug\": \"encrypt-and-decrypt-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Implement Trie II (Prefix Tree)\", \"titleSlug\": \"implement-trie-ii-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"945.3K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 945338, \"totalSubmissionRaw\": 1468999, \"acRate\": \"64.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "design-add-and-search-words-data-structure",
          "title": "Design Add and Search Words Data Structure",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "design-search-autocomplete-system",
          "title": "Design Search Autocomplete System",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "replace-words",
          "title": "Replace Words",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "implement-magic-dictionary",
          "title": "Implement Magic Dictionary",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "encrypt-and-decrypt-strings",
          "title": "Encrypt and Decrypt Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "implement-trie-ii-prefix-tree",
          "title": "Implement Trie II (Prefix Tree)",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "minimum-size-subarray-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "209",
        "title": "Minimum Size Subarray Sum",
        "titleSlug": "minimum-size-subarray-sum",
        "content": "<p>Given an array of positive integers <code>nums</code> and a positive integer <code>target</code>, return <em>the <strong>minimal length</strong> of a </em><span data-keyword=\"subarray-nonempty\"><em>subarray</em></span><em> whose sum is greater than or equal to</em> <code>target</code>. If there is no such subarray, return <code>0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 7, nums = [2,3,1,2,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The subarray [4,3] has the minimal length under the problem constraint.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 4, nums = [1,4,4]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 11, nums = [1,1,1,1,1,1,1,1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution of which the time complexity is <code>O(n log(n))</code>.",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12068,
        "dislikes": 381,
        "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Length of Repeated Subarray\", \"titleSlug\": \"maximum-length-of-repeated-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Reduce X to Zero\", \"titleSlug\": \"minimum-operations-to-reduce-x-to-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Product After K Increments\", \"titleSlug\": \"maximum-product-after-k-increments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"920.6K\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 920578, \"totalSubmissionRaw\": 1972697, \"acRate\": \"46.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-substring",
          "title": "Minimum Window Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-size-subarray-sum-equals-k",
          "title": "Maximum Size Subarray Sum Equals k",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-length-of-repeated-subarray",
          "title": "Maximum Length of Repeated Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-operations-to-reduce-x-to-zero",
          "title": "Minimum Operations to Reduce X to Zero",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-radius-subarray-averages",
          "title": "K Radius Subarray Averages",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-after-k-increments",
          "title": "Maximum Product After K Increments",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "course-schedule-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "210",
        "title": "Course Schedule II",
        "titleSlug": "course-schedule-ii",
        "content": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>\n</ul>\n\n<p>Return <em>the ordering of courses you should take to finish all courses</em>. If there are many valid answers, return <strong>any</strong> of them. If it is impossible to finish all courses, return <strong>an empty array</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n<strong>Output:</strong> [0,2,1,3]\n<strong>Explanation:</strong> There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 1, prerequisites = []\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numCourses &lt;= 2000</code></li>\n\t<li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are <strong>distinct</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10332,
        "dislikes": 328,
        "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Alien Dictionary\", \"titleSlug\": \"alien-dictionary\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Height Trees\", \"titleSlug\": \"minimum-height-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sequence Reconstruction\", \"titleSlug\": \"sequence-reconstruction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule III\", \"titleSlug\": \"course-schedule-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Parallel Courses\", \"titleSlug\": \"parallel-courses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All Possible Recipes from Given Supplies\", \"titleSlug\": \"find-all-possible-recipes-from-given-supplies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Build a Matrix With Conditions\", \"titleSlug\": \"build-a-matrix-with-conditions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sort Array by Moving Items to Empty Space\", \"titleSlug\": \"sort-array-by-moving-items-to-empty-space\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" }
        ],
        "stats": "{\"totalAccepted\": \"941.2K\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 941245, \"totalSubmissionRaw\": 1892084, \"acRate\": \"49.7%\"}",
        "hints": [
          "This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
          "<a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
          "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule",
          "title": "Course Schedule",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "alien-dictionary",
          "title": "Alien Dictionary",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-height-trees",
          "title": "Minimum Height Trees",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sequence-reconstruction",
          "title": "Sequence Reconstruction",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "course-schedule-iii",
          "title": "Course Schedule III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "parallel-courses",
          "title": "Parallel Courses",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-all-possible-recipes-from-given-supplies",
          "title": "Find All Possible Recipes from Given Supplies",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "build-a-matrix-with-conditions",
          "title": "Build a Matrix With Conditions",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sort-array-by-moving-items-to-empty-space",
          "title": "Sort Array by Moving Items to Empty Space",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
        "<a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
        "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
      ],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" }
      ]
    }
  },
  "design-add-and-search-words-data-structure": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "211",
        "title": "Design Add and Search Words Data Structure",
        "titleSlug": "design-add-and-search-words-data-structure",
        "content": "<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p>\n\n<p>Implement the <code>WordDictionary</code> class:</p>\n\n<ul>\n\t<li><code>WordDictionary()</code>&nbsp;Initializes the object.</li>\n\t<li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li>\n\t<li><code>bool search(word)</code>&nbsp;Returns <code>true</code> if there is any string in the data structure that matches <code>word</code>&nbsp;or <code>false</code> otherwise. <code>word</code> may contain dots <code>&#39;.&#39;</code> where dots can be matched with any letter.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordDictionary&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;]\n[[],[&quot;bad&quot;],[&quot;dad&quot;],[&quot;mad&quot;],[&quot;pad&quot;],[&quot;bad&quot;],[&quot;.ad&quot;],[&quot;b..&quot;]]\n<strong>Output</strong>\n[null,null,null,null,false,true,true,true]\n\n<strong>Explanation</strong>\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(&quot;bad&quot;);\nwordDictionary.addWord(&quot;dad&quot;);\nwordDictionary.addWord(&quot;mad&quot;);\nwordDictionary.search(&quot;pad&quot;); // return False\nwordDictionary.search(&quot;bad&quot;); // return True\nwordDictionary.search(&quot;.ad&quot;); // return True\nwordDictionary.search(&quot;b..&quot;); // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 25</code></li>\n\t<li><code>word</code> in <code>addWord</code> consists of lowercase English letters.</li>\n\t<li><code>word</code> in <code>search</code> consist of <code>&#39;.&#39;</code> or lowercase English letters.</li>\n\t<li>There will be at most <code>2</code> dots in <code>word</code> for <code>search</code> queries.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>addWord</code> and <code>search</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7354,
        "dislikes": 426,
        "similarQuestions": "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Prefix and Suffix Search\", \"titleSlug\": \"prefix-and-suffix-search\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Match Substring After Replacement\", \"titleSlug\": \"match-substring-after-replacement\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sum of Prefix Scores of Strings\", \"titleSlug\": \"sum-of-prefix-scores-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"590.5K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 590482, \"totalSubmissionRaw\": 1320908, \"acRate\": \"44.7%\"}",
        "hints": [
          "You should be familiar with how a Trie works. If not, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "implement-trie-prefix-tree",
          "title": "Implement Trie (Prefix Tree)",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "prefix-and-suffix-search",
          "title": "Prefix and Suffix Search",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "match-substring-after-replacement",
          "title": "Match Substring After Replacement",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sum-of-prefix-scores-of-strings",
          "title": "Sum of Prefix Scores of Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "You should be familiar with how a Trie works. If not, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "word-search-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "212",
        "title": "Word Search II",
        "titleSlug": "word-search-ii",
        "content": "<p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>\n\n<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" style=\"width: 322px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]\n<strong>Output:</strong> [&quot;eat&quot;,&quot;oath&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>board[i][j]</code> is a lowercase English letter.</li>\n\t<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are unique.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 9098,
        "dislikes": 428,
        "similarQuestions": "[{\"title\": \"Word Search\", \"titleSlug\": \"word-search\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Unique Paths III\", \"titleSlug\": \"unique-paths-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Encrypt and Decrypt Strings\", \"titleSlug\": \"encrypt-and-decrypt-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"612.6K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 612580, \"totalSubmissionRaw\": 1693314, \"acRate\": \"36.2%\"}",
        "hints": [
          "You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?",
          "If the current candidate does not exist in all words&#39; prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "word-search",
          "title": "Word Search",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "unique-paths-iii",
          "title": "Unique Paths III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "encrypt-and-decrypt-strings",
          "title": "Encrypt and Decrypt Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?",
        "If the current candidate does not exist in all words&#39; prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "house-robber-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "213",
        "title": "House Robber II",
        "titleSlug": "house-robber-ii",
        "content": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and&nbsp;<b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\n\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9390,
        "dislikes": 136,
        "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House\", \"titleSlug\": \"paint-house\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint Fence\", \"titleSlug\": \"paint-fence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber III\", \"titleSlug\": \"house-robber-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Coin Path\", \"titleSlug\": \"coin-path\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"683.4K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 683419, \"totalSubmissionRaw\": 1639352, \"acRate\": \"41.7%\"}",
        "hints": [
          "Since House[1] and House[n] are adjacent, they cannot be robbed together. Therefore, the problem becomes to rob either House[1]-House[n-1] or House[2]-House[n], depending on which choice offers more money. Now the problem has degenerated to the <a href =\"https://leetcode.com/problems/house-robber/description/\">House Robber</a>, which is already been solved."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-house",
          "title": "Paint House",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-fence",
          "title": "Paint Fence",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-iii",
          "title": "House Robber III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "non-negative-integers-without-consecutive-ones",
          "title": "Non-negative Integers without Consecutive Ones",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "coin-path",
          "title": "Coin Path",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Since House[1] and House[n] are adjacent, they cannot be robbed together. Therefore, the problem becomes to rob either House[1]-House[n-1] or House[2]-House[n], depending on which choice offers more money. Now the problem has degenerated to the <a href =\"https://leetcode.com/problems/house-robber/description/\">House Robber</a>, which is already been solved."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "shortest-palindrome": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "214",
        "title": "Shortest Palindrome",
        "titleSlug": "shortest-palindrome",
        "content": "<p>You are given a string <code>s</code>. You can convert <code>s</code> to a <span data-keyword=\"palindrome-string\">palindrome</span> by adding characters in front of it.</p>\n\n<p>Return <em>the shortest palindrome you can find by performing this transformation</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aacecaaa\"\n<strong>Output:</strong> \"aaacecaaa\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> \"dcbabcd\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3465,
        "dislikes": 232,
        "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Index of the First Occurrence in a String\", \"titleSlug\": \"find-the-index-of-the-first-occurrence-in-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Palindrome Pairs\", \"titleSlug\": \"palindrome-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Deletions on a String\", \"titleSlug\": \"maximum-deletions-on-a-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Rolling Hash", "slug": "rolling-hash" },
          { "name": "String Matching", "slug": "string-matching" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"169.9K\", \"totalSubmission\": \"516.3K\", \"totalAcceptedRaw\": 169945, \"totalSubmissionRaw\": 516264, \"acRate\": \"32.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-substring",
          "title": "Longest Palindromic Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
          "title": "Find the Index of the First Occurrence in a String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "palindrome-pairs",
          "title": "Palindrome Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-deletions-on-a-string",
          "title": "Maximum Deletions on a String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Rolling Hash", "slug": "rolling-hash" },
        { "name": "String Matching", "slug": "string-matching" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "kth-largest-element-in-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "215",
        "title": "Kth Largest Element in an Array",
        "titleSlug": "kth-largest-element-in-an-array",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>largest element in the array</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p>\n\n<p>Can you solve it without sorting?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,1,5,6,4], k = 2\n<strong>Output:</strong> 5\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,3,1,2,4,5,5,6], k = 4\n<strong>Output:</strong> 4\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16444,
        "dislikes": 816,
        "similarQuestions": "[{\"title\": \"Wiggle Sort II\", \"titleSlug\": \"wiggle-sort-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Third Maximum Number\", \"titleSlug\": \"third-maximum-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Kth Largest Element in a Stream\", \"titleSlug\": \"kth-largest-element-in-a-stream\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Kth Largest Integer in the Array\", \"titleSlug\": \"find-the-kth-largest-integer-in-the-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Subsequence of Length K With the Largest Sum\", \"titleSlug\": \"find-subsequence-of-length-k-with-the-largest-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"K Highest Ranked Items Within a Price Range\", \"titleSlug\": \"k-highest-ranked-items-within-a-price-range\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Quickselect", "slug": "quickselect" }
        ],
        "stats": "{\"totalAccepted\": \"2.1M\", \"totalSubmission\": \"3.1M\", \"totalAcceptedRaw\": 2096765, \"totalSubmissionRaw\": 3134683, \"acRate\": \"66.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "wiggle-sort-ii",
          "title": "Wiggle Sort II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "top-k-frequent-elements",
          "title": "Top K Frequent Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "third-maximum-number",
          "title": "Third Maximum Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "kth-largest-element-in-a-stream",
          "title": "Kth Largest Element in a Stream",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-closest-points-to-origin",
          "title": "K Closest Points to Origin",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-kth-largest-integer-in-the-array",
          "title": "Find the Kth Largest Integer in the Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-subsequence-of-length-k-with-the-largest-sum",
          "title": "Find Subsequence of Length K With the Largest Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-highest-ranked-items-within-a-price-range",
          "title": "K Highest Ranked Items Within a Price Range",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Quickselect", "slug": "quickselect" }
      ]
    }
  },
  "combination-sum-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "216",
        "title": "Combination Sum III",
        "titleSlug": "combination-sum-iii",
        "content": "<p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p>\n\n<ul>\n\t<li>Only numbers <code>1</code> through <code>9</code> are used.</li>\n\t<li>Each number is used <strong>at most once</strong>.</li>\n</ul>\n\n<p>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 7\n<strong>Output:</strong> [[1,2,4]]\n<strong>Explanation:</strong>\n1 + 2 + 4 = 7\nThere are no other valid combinations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 9\n<strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]]\n<strong>Explanation:</strong>\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 4, n = 1\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= k &lt;= 9</code></li>\n\t<li><code>1 &lt;= n &lt;= 60</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5677,
        "dislikes": 102,
        "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"464.5K\", \"totalSubmission\": \"673.5K\", \"totalAcceptedRaw\": 464516, \"totalSubmissionRaw\": 673543, \"acRate\": \"69.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum",
          "title": "Combination Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "contains-duplicate": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "217",
        "title": "Contains Duplicate",
        "titleSlug": "contains-duplicate",
        "content": "<p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears <strong>at least twice</strong> in the array, and return <code>false</code> if every element is distinct.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1,3,3,4,3,2,4,2]\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 11330,
        "dislikes": 1263,
        "similarQuestions": "[{\"title\": \"Contains Duplicate II\", \"titleSlug\": \"contains-duplicate-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Contains Duplicate III\", \"titleSlug\": \"contains-duplicate-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Make Array Zero by Subtracting Equal Amounts\", \"titleSlug\": \"make-array-zero-by-subtracting-equal-amounts\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"3.5M\", \"totalSubmission\": \"5.7M\", \"totalAcceptedRaw\": 3516978, \"totalSubmissionRaw\": 5746018, \"acRate\": \"61.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "contains-duplicate-ii",
          "title": "Contains Duplicate II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "contains-duplicate-iii",
          "title": "Contains Duplicate III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "make-array-zero-by-subtracting-equal-amounts",
          "title": "Make Array Zero by Subtracting Equal Amounts",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "the-skyline-problem": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "218",
        "title": "The Skyline Problem",
        "titleSlug": "the-skyline-problem",
        "content": "<p>A city&#39;s <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.</p>\n\n<p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li>\n</ul>\n\n<p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p>\n\n<p>The <strong>skyline</strong> should be represented as a list of &quot;key points&quot; <strong>sorted by their x-coordinate</strong> in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.</p>\n\n<p><b>Note:</b> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" style=\"width: 800px; height: 331px;\" />\n<pre>\n<strong>Input:</strong> buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>Output:</strong> [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>Explanation:</strong>\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]\n<strong>Output:</strong> [[0,3],[5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in&nbsp;non-decreasing order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5754,
        "dislikes": 257,
        "similarQuestions": "[{\"title\": \"Falling Squares\", \"titleSlug\": \"falling-squares\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Shifting Letters II\", \"titleSlug\": \"shifting-letters-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Line Sweep", "slug": "line-sweep" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"279.1K\", \"totalSubmission\": \"658.1K\", \"totalAcceptedRaw\": 279078, \"totalSubmissionRaw\": 658067, \"acRate\": \"42.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "falling-squares",
          "title": "Falling Squares",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shifting-letters-ii",
          "title": "Shifting Letters II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Line Sweep", "slug": "line-sweep" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "contains-duplicate-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "219",
        "title": "Contains Duplicate II",
        "titleSlug": "contains-duplicate-ii",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if there are two <strong>distinct indices</strong> </em><code>i</code><em> and </em><code>j</code><em> in the array such that </em><code>nums[i] == nums[j]</code><em> and </em><code>abs(i - j) &lt;= k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1], k = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,1], k = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1,2,3], k = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5802,
        "dislikes": 2964,
        "similarQuestions": "[{\"title\": \"Contains Duplicate\", \"titleSlug\": \"contains-duplicate\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Contains Duplicate III\", \"titleSlug\": \"contains-duplicate-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"824.5K\", \"totalSubmission\": \"1.9M\", \"totalAcceptedRaw\": 824534, \"totalSubmissionRaw\": 1866821, \"acRate\": \"44.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "contains-duplicate",
          "title": "Contains Duplicate",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "contains-duplicate-iii",
          "title": "Contains Duplicate III",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "contains-duplicate-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "220",
        "title": "Contains Duplicate III",
        "titleSlug": "contains-duplicate-iii",
        "content": "<p>You are given an integer array <code>nums</code> and two integers <code>indexDiff</code> and <code>valueDiff</code>.</p>\n\n<p>Find a pair of indices <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>i != j</code>,</li>\n\t<li><code>abs(i - j) &lt;= indexDiff</code>.</li>\n\t<li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and</li>\n</ul>\n\n<p>Return <code>true</code><em> if such pair exists or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --&gt; 0 != 3\nabs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3\nabs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= indexDiff &lt;= nums.length</code></li>\n\t<li><code>0 &lt;= valueDiff &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 881,
        "dislikes": 57,
        "similarQuestions": "[{\"title\": \"Contains Duplicate\", \"titleSlug\": \"contains-duplicate\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Contains Duplicate II\", \"titleSlug\": \"contains-duplicate-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Bucket Sort", "slug": "bucket-sort" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"243.5K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 243496, \"totalSubmissionRaw\": 1079382, \"acRate\": \"22.6%\"}",
        "hints": [
          "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
          "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "contains-duplicate",
          "title": "Contains Duplicate",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "contains-duplicate-ii",
          "title": "Contains Duplicate II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
        "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Bucket Sort", "slug": "bucket-sort" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "maximal-square": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "221",
        "title": "Maximal Square",
        "titleSlug": "maximal-square",
        "content": "<p>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, <em>find the largest square containing only</em> <code>1</code>&#39;s <em>and return its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\" style=\"width: 400px; height: 319px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\" style=\"width: 165px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9779,
        "dislikes": 211,
        "similarQuestions": "[{\"title\": \"Maximal Rectangle\", \"titleSlug\": \"maximal-rectangle\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Largest Plus Sign\", \"titleSlug\": \"largest-plus-sign\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Artifacts That Can Be Extracted\", \"titleSlug\": \"count-artifacts-that-can-be-extracted\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stamping the Grid\", \"titleSlug\": \"stamping-the-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximize Area of Square Hole in Grid\", \"titleSlug\": \"maximize-area-of-square-hole-in-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"642K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 642014, \"totalSubmissionRaw\": 1394579, \"acRate\": \"46.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximal-rectangle",
          "title": "Maximal Rectangle",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "largest-plus-sign",
          "title": "Largest Plus Sign",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-artifacts-that-can-be-extracted",
          "title": "Count Artifacts That Can Be Extracted",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "stamping-the-grid",
          "title": "Stamping the Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximize-area-of-square-hole-in-grid",
          "title": "Maximize Area of Square Hole in Grid",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "count-complete-tree-nodes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "222",
        "title": "Count Complete Tree Nodes",
        "titleSlug": "count-complete-tree-nodes",
        "content": "<p>Given the <code>root</code> of a <strong>complete</strong> binary tree, return the number of the nodes in the tree.</p>\n\n<p>According to <strong><a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">Wikipedia</a></strong>, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2<sup>h</sup></code> nodes inclusive at the last level <code>h</code>.</p>\n\n<p>Design an algorithm that runs in less than&nbsp;<code data-stringify-type=\"code\">O(n)</code>&nbsp;time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/14/complete.jpg\" style=\"width: 372px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6]\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 5 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li>The tree is guaranteed to be <strong>complete</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8311,
        "dislikes": 470,
        "similarQuestions": "[{\"title\": \"Closest Binary Search Tree Value\", \"titleSlug\": \"closest-binary-search-tree-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"647.3K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 647337, \"totalSubmissionRaw\": 1016701, \"acRate\": \"63.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "closest-binary-search-tree-value",
          "title": "Closest Binary Search Tree Value",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "rectangle-area": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "223",
        "title": "Rectangle Area",
        "titleSlug": "rectangle-area",
        "content": "<p>Given the coordinates of two <strong>rectilinear</strong> rectangles in a 2D plane, return <em>the total area covered by the two rectangles</em>.</p>\n\n<p>The first rectangle is defined by its <strong>bottom-left</strong> corner <code>(ax1, ay1)</code> and its <strong>top-right</strong> corner <code>(ax2, ay2)</code>.</p>\n\n<p>The second rectangle is defined by its <strong>bottom-left</strong> corner <code>(bx1, by1)</code> and its <strong>top-right</strong> corner <code>(bx2, by2)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"Rectangle Area\" src=\"https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png\" style=\"width: 700px; height: 365px;\" />\n<pre>\n<strong>Input:</strong> ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\n<strong>Output:</strong> 45\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\n<strong>Output:</strong> 16\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>4</sup> &lt;= ax1 &lt;= ax2 &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= ay1 &lt;= ay2 &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= bx1 &lt;= bx2 &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= by1 &lt;= by2 &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1929,
        "dislikes": 1626,
        "similarQuestions": "[{\"title\": \"Rectangle Overlap\", \"titleSlug\": \"rectangle-overlap\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"212.8K\", \"totalSubmission\": \"465.1K\", \"totalAcceptedRaw\": 212811, \"totalSubmissionRaw\": 465102, \"acRate\": \"45.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "rectangle-overlap",
          "title": "Rectangle Overlap",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "basic-calculator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "224",
        "title": "Basic Calculator",
        "titleSlug": "basic-calculator",
        "content": "<p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p>\n\n<p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1 + 1&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; 2-1 + 2 &quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> represents a valid expression.</li>\n\t<li><code>&#39;+&#39;</code> is <strong>not</strong> used as a unary operation (i.e., <code>&quot;+1&quot;</code> and <code>&quot;+(2 + 3)&quot;</code> is invalid).</li>\n\t<li><code>&#39;-&#39;</code> could be used as a unary operation (i.e., <code>&quot;-1&quot;</code> and <code>&quot;-(2 + 3)&quot;</code> is valid).</li>\n\t<li>There will be no two consecutive operators in the input.</li>\n\t<li>Every number and running calculation will fit in a signed 32-bit integer.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 6029,
        "dislikes": 444,
        "similarQuestions": "[{\"title\": \"Evaluate Reverse Polish Notation\", \"titleSlug\": \"evaluate-reverse-polish-notation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator II\", \"titleSlug\": \"basic-calculator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator III\", \"titleSlug\": \"basic-calculator-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"The Score of Students Solving Math Expression\", \"titleSlug\": \"the-score-of-students-solving-math-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize Result by Adding Parentheses to Expression\", \"titleSlug\": \"minimize-result-by-adding-parentheses-to-expression\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"426.5K\", \"totalSubmission\": \"993.4K\", \"totalAcceptedRaw\": 426543, \"totalSubmissionRaw\": 993410, \"acRate\": \"42.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "evaluate-reverse-polish-notation",
          "title": "Evaluate Reverse Polish Notation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "basic-calculator-ii",
          "title": "Basic Calculator II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "different-ways-to-add-parentheses",
          "title": "Different Ways to Add Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "expression-add-operators",
          "title": "Expression Add Operators",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator-iii",
          "title": "Basic Calculator III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "the-score-of-students-solving-math-expression",
          "title": "The Score of Students Solving Math Expression",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimize-result-by-adding-parentheses-to-expression",
          "title": "Minimize Result by Adding Parentheses to Expression",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "implement-stack-using-queues": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "225",
        "title": "Implement Stack using Queues",
        "titleSlug": "implement-stack-using-queues",
        "content": "<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p>\n\n<p>Implement the <code>MyStack</code> class:</p>\n\n<ul>\n\t<li><code>void push(int x)</code> Pushes element x to the top of the stack.</li>\n\t<li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li>\n\t<li><code>int top()</code> Returns the element on the top of the stack.</li>\n\t<li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li>\n</ul>\n\n<p><b>Notes:</b></p>\n\n<ul>\n\t<li>You must use <strong>only</strong> standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue&#39;s standard operations.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n<strong>Output</strong>\n[null, null, null, 2, 2, false]\n\n<strong>Explanation</strong>\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li>\n\t<li>All the calls to <code>pop</code> and <code>top</code> are valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you implement the stack using only one queue?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5767,
        "dislikes": 1181,
        "similarQuestions": "[{\"title\": \"Implement Queue using Stacks\", \"titleSlug\": \"implement-queue-using-stacks\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" }
        ],
        "stats": "{\"totalAccepted\": \"606.1K\", \"totalSubmission\": \"965.6K\", \"totalAcceptedRaw\": 606147, \"totalSubmissionRaw\": 965635, \"acRate\": \"62.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "implement-queue-using-stacks",
          "title": "Implement Queue using Stacks",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" }
      ]
    }
  },
  "invert-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "226",
        "title": "Invert Binary Tree",
        "titleSlug": "invert-binary-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg\" style=\"width: 500px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3,6,9]\n<strong>Output:</strong> [4,7,2,9,6,3,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg\" style=\"width: 500px; height: 120px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,3,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 13481,
        "dislikes": 197,
        "similarQuestions": "[{\"title\": \"Reverse Odd Levels of Binary Tree\", \"titleSlug\": \"reverse-odd-levels-of-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1859345, \"totalSubmissionRaw\": 2437953, \"acRate\": \"76.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "reverse-odd-levels-of-binary-tree",
          "title": "Reverse Odd Levels of Binary Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "basic-calculator-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "227",
        "title": "Basic Calculator II",
        "titleSlug": "basic-calculator-ii",
        "content": "<p>Given a string <code>s</code> which represents an expression, <em>evaluate this expression and return its value</em>.&nbsp;</p>\n\n<p>The integer division should truncate toward zero.</p>\n\n<p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p>\n\n<p><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"3+2*2\"\n<strong>Output:</strong> 7\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \" 3/2 \"\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \" 3+5 / 2 \"\n<strong>Output:</strong> 5\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of integers and operators <code>(&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;)</code> separated by some number of spaces.</li>\n\t<li><code>s</code> represents <strong>a valid expression</strong>.</li>\n\t<li>All the integers in the expression are non-negative integers in the range <code>[0, 2<sup>31</sup> - 1]</code>.</li>\n\t<li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit integer</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5950,
        "dislikes": 788,
        "similarQuestions": "[{\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator III\", \"titleSlug\": \"basic-calculator-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"573.2K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 573216, \"totalSubmissionRaw\": 1331640, \"acRate\": \"43.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator",
          "title": "Basic Calculator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "expression-add-operators",
          "title": "Expression Add Operators",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator-iii",
          "title": "Basic Calculator III",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "summary-ranges": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "228",
        "title": "Summary Ranges",
        "titleSlug": "summary-ranges",
        "content": "<p>You are given a <strong>sorted unique</strong> integer array <code>nums</code>.</p>\n\n<p>A <strong>range</strong> <code>[a,b]</code> is the set of all integers from <code>a</code> to <code>b</code> (inclusive).</p>\n\n<p>Return <em>the <strong>smallest sorted</strong> list of ranges that <strong>cover all the numbers in the array exactly</strong></em>. That is, each element of <code>nums</code> is covered by exactly one of the ranges, and there is no integer <code>x</code> such that <code>x</code> is in one of the ranges but not in <code>nums</code>.</p>\n\n<p>Each range <code>[a,b]</code> in the list should be output as:</p>\n\n<ul>\n\t<li><code>&quot;a-&gt;b&quot;</code> if <code>a != b</code></li>\n\t<li><code>&quot;a&quot;</code> if <code>a == b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,4,5,7]\n<strong>Output:</strong> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,2] --&gt; &quot;0-&gt;2&quot;\n[4,5] --&gt; &quot;4-&gt;5&quot;\n[7,7] --&gt; &quot;7&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,2,3,4,6,8,9]\n<strong>Output:</strong> [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\n<strong>Explanation:</strong> The ranges are:\n[0,0] --&gt; &quot;0&quot;\n[2,4] --&gt; &quot;2-&gt;4&quot;\n[6,6] --&gt; &quot;6&quot;\n[8,9] --&gt; &quot;8-&gt;9&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted in ascending order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3772,
        "dislikes": 2043,
        "similarQuestions": "[{\"title\": \"Missing Ranges\", \"titleSlug\": \"missing-ranges\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Data Stream as Disjoint Intervals\", \"titleSlug\": \"data-stream-as-disjoint-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Maximal Uncovered Ranges\", \"titleSlug\": \"find-maximal-uncovered-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"495.2K\", \"totalSubmission\": \"991.3K\", \"totalAcceptedRaw\": 495187, \"totalSubmissionRaw\": 991280, \"acRate\": \"50.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "missing-ranges",
          "title": "Missing Ranges",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "data-stream-as-disjoint-intervals",
          "title": "Data Stream as Disjoint Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-maximal-uncovered-ranges",
          "title": "Find Maximal Uncovered Ranges",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "majority-element-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "229",
        "title": "Majority Element II",
        "titleSlug": "majority-element-ii",
        "content": "<p>Given an integer array of size <code>n</code>, find all elements that appear more than <code>&lfloor; n/3 &rfloor;</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,3]\n<strong>Output:</strong> [3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9234,
        "dislikes": 399,
        "similarQuestions": "[{\"title\": \"Majority Element\", \"titleSlug\": \"majority-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check If a Number Is Majority Element in a Sorted Array\", \"titleSlug\": \"check-if-a-number-is-majority-element-in-a-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Even Element\", \"titleSlug\": \"most-frequent-even-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"607.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 607715, \"totalSubmissionRaw\": 1199107, \"acRate\": \"50.7%\"}",
        "hints": [
          "How many majority elements could it possibly have?\r\n<br/>\r\nDo you have a better hint? <a href=\"mailto:admin@leetcode.com?subject=Hints for Majority Element II\" target=\"_blank\">Suggest it</a>!"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "majority-element",
          "title": "Majority Element",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-a-number-is-majority-element-in-a-sorted-array",
          "title": "Check If a Number Is Majority Element in a Sorted Array",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "most-frequent-even-element",
          "title": "Most Frequent Even Element",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "How many majority elements could it possibly have?\r\n<br/>\r\nDo you have a better hint? <a href=\"mailto:admin@leetcode.com?subject=Hints for Majority Element II\" target=\"_blank\">Suggest it</a>!"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "kth-smallest-element-in-a-bst": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "230",
        "title": "Kth Smallest Element in a BST",
        "titleSlug": "kth-smallest-element-in-a-bst",
        "content": "<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest value (<strong>1-indexed</strong>) of all the values of the nodes in the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg\" style=\"width: 212px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,2], k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg\" style=\"width: 382px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10978,
        "dislikes": 212,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Second Minimum Node In a Binary Tree\", \"titleSlug\": \"second-minimum-node-in-a-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1288821, \"totalSubmissionRaw\": 1795481, \"acRate\": \"71.8%\"}",
        "hints": [
          "Try to utilize the property of a BST.",
          "Try in-order traversal. (Credits to @chan13)",
          "What if you could modify the BST node's structure?",
          "The optimal runtime complexity is O(height of BST)."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "second-minimum-node-in-a-binary-tree",
          "title": "Second Minimum Node In a Binary Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Try to utilize the property of a BST.",
        "Try in-order traversal. (Credits to @chan13)",
        "What if you could modify the BST node's structure?",
        "The optimal runtime complexity is O(height of BST)."
      ],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "power-of-two": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "231",
        "title": "Power of Two",
        "titleSlug": "power-of-two",
        "content": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of two. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of two, if there exists an integer <code>x</code> such that <code>n == 2<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n<strong>Explanation: </strong>2<sup>0</sup> = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 16\n<strong>Output:</strong> true\n<strong>Explanation: </strong>2<sup>4</sup> = 16\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6157,
        "dislikes": 393,
        "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Power of Three\", \"titleSlug\": \"power-of-three\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Power of Four\", \"titleSlug\": \"power-of-four\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 1058830, \"totalSubmissionRaw\": 2276183, \"acRate\": \"46.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-1-bits",
          "title": "Number of 1 Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "power-of-three",
          "title": "Power of Three",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "power-of-four",
          "title": "Power of Four",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "implement-queue-using-stacks": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "232",
        "title": "Implement Queue using Stacks",
        "titleSlug": "implement-queue-using-stacks",
        "content": "<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p>\n\n<p>Implement the <code>MyQueue</code> class:</p>\n\n<ul>\n\t<li><code>void push(int x)</code> Pushes element x to the back of the queue.</li>\n\t<li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li>\n\t<li><code>int peek()</code> Returns the element at the front of the queue.</li>\n\t<li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li>\n</ul>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>You must use <strong>only</strong> standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n\t<li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack&#39;s standard operations.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]\n[[], [1], [2], [], [], []]\n<strong>Output</strong>\n[null, null, null, 1, 1, false]\n\n<strong>Explanation</strong>\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 9</code></li>\n\t<li>At most <code>100</code>&nbsp;calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li>\n\t<li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you implement the queue such that each operation is <strong><a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\">amortized</a></strong> <code>O(1)</code> time complexity? In other words, performing <code>n</code> operations will take overall <code>O(n)</code> time even if one of those operations may take longer.</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6897,
        "dislikes": 392,
        "similarQuestions": "[{\"title\": \"Implement Stack using Queues\", \"titleSlug\": \"implement-stack-using-queues\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" }
        ],
        "stats": "{\"totalAccepted\": \"770.9K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 770928, \"totalSubmissionRaw\": 1198673, \"acRate\": \"64.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "implement-stack-using-queues",
          "title": "Implement Stack using Queues",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" }
      ]
    }
  },
  "number-of-digit-one": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "233",
        "title": "Number of Digit One",
        "titleSlug": "number-of-digit-one",
        "content": "<p>Given an integer <code>n</code>, count <em>the total number of digit </em><code>1</code><em> appearing in all non-negative integers less than or equal to</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1446,
        "dislikes": 1431,
        "similarQuestions": "[{\"title\": \"Factorial Trailing Zeroes\", \"titleSlug\": \"factorial-trailing-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Digit Count in Range\", \"titleSlug\": \"digit-count-in-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"86.3K\", \"totalSubmission\": \"251.9K\", \"totalAcceptedRaw\": 86332, \"totalSubmissionRaw\": 251885, \"acRate\": \"34.3%\"}",
        "hints": ["Beware of overflow."]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "factorial-trailing-zeroes",
          "title": "Factorial Trailing Zeroes",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "digit-count-in-range",
          "title": "Digit Count in Range",
          "isPaidOnly": true
        }
      ],
      "hints": ["Beware of overflow."],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "palindrome-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "234",
        "title": "Palindrome Linked List",
        "titleSlug": "palindrome-linked-list",
        "content": "<p>Given the <code>head</code> of a singly linked list, return <code>true</code><em> if it is a </em><span data-keyword=\"palindrome-sequence\"><em>palindrome</em></span><em> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg\" style=\"width: 422px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,2,1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg\" style=\"width: 182px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do it in <code>O(n)</code> time and <code>O(1)</code> space?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 15613,
        "dislikes": 839,
        "similarQuestions": "[{\"title\": \"Palindrome Number\", \"titleSlug\": \"palindrome-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome\", \"titleSlug\": \"valid-palindrome\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Reverse Linked List\", \"titleSlug\": \"reverse-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Twin Sum of a Linked List\", \"titleSlug\": \"maximum-twin-sum-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1668823, \"totalSubmissionRaw\": 3246401, \"acRate\": \"51.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-number",
          "title": "Palindrome Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "valid-palindrome",
          "title": "Valid Palindrome",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-linked-list",
          "title": "Reverse Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-twin-sum-of-a-linked-list",
          "title": "Maximum Twin Sum of a Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "lowest-common-ancestor-of-a-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "235",
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
        "content": "<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1], p = 2, q = 1\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the BST.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10610,
        "dislikes": 295,
        "similarQuestions": "[{\"title\": \"Lowest Common Ancestor of a Binary Tree\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Common Region\", \"titleSlug\": \"smallest-common-region\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Lowest Common Ancestor of a Binary Tree II\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Lowest Common Ancestor of a Binary Tree III\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Lowest Common Ancestor of a Binary Tree IV\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1367646, \"totalSubmissionRaw\": 2145280, \"acRate\": \"63.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
          "title": "Lowest Common Ancestor of a Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-common-region",
          "title": "Smallest Common Region",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-tree-ii",
          "title": "Lowest Common Ancestor of a Binary Tree II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iii",
          "title": "Lowest Common Ancestor of a Binary Tree III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iv",
          "title": "Lowest Common Ancestor of a Binary Tree IV",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "lowest-common-ancestor-of-a-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "236",
        "title": "Lowest Common Ancestor of a Binary Tree",
        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
        "content": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2], p = 1, q = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the tree.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 15733,
        "dislikes": 374,
        "similarQuestions": "[{\"title\": \"Lowest Common Ancestor of a Binary Search Tree\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Common Region\", \"titleSlug\": \"smallest-common-region\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Players With Zero or One Losses\", \"titleSlug\": \"find-players-with-zero-or-one-losses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Lowest Common Ancestor of a Binary Tree II\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Lowest Common Ancestor of a Binary Tree III\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Lowest Common Ancestor of a Binary Tree IV\", \"titleSlug\": \"lowest-common-ancestor-of-a-binary-tree-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Step-By-Step Directions From a Binary Tree Node to Another\", \"titleSlug\": \"step-by-step-directions-from-a-binary-tree-node-to-another\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cycle Length Queries in a Tree\", \"titleSlug\": \"cycle-length-queries-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.4M\", \"totalAcceptedRaw\": 1481158, \"totalSubmissionRaw\": 2429360, \"acRate\": \"61.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
          "title": "Lowest Common Ancestor of a Binary Search Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-common-region",
          "title": "Smallest Common Region",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-players-with-zero-or-one-losses",
          "title": "Find Players With Zero or One Losses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-tree-ii",
          "title": "Lowest Common Ancestor of a Binary Tree II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iii",
          "title": "Lowest Common Ancestor of a Binary Tree III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iv",
          "title": "Lowest Common Ancestor of a Binary Tree IV",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "step-by-step-directions-from-a-binary-tree-node-to-another",
          "title": "Step-By-Step Directions From a Binary Tree Node to Another",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "cycle-length-queries-in-a-tree",
          "title": "Cycle Length Queries in a Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "delete-node-in-a-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "237",
        "title": "Delete Node in a Linked List",
        "titleSlug": "delete-node-in-a-linked-list",
        "content": "<p>There is a singly-linked list <code>head</code> and we want to delete a node <code>node</code> in it.</p>\n\n<p>You are given the node to be deleted <code>node</code>. You will <strong>not be given access</strong> to the first node of <code>head</code>.</p>\n\n<p>All the values of the linked list are <strong>unique</strong>, and it is guaranteed that the given node <code>node</code> is not the last node in the linked list.</p>\n\n<p>Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:</p>\n\n<ul>\n\t<li>The value of the given node should not exist in the linked list.</li>\n\t<li>The number of nodes in the linked list should decrease by one.</li>\n\t<li>All the values before <code>node</code> should be in the same order.</li>\n\t<li>All the values after <code>node</code> should be in the same order.</li>\n</ul>\n\n<p><strong>Custom testing:</strong></p>\n\n<ul>\n\t<li>For the input, you should provide the entire linked list <code>head</code> and the node to be given <code>node</code>. <code>node</code> should not be the last node of the list and should be an actual node in the list.</li>\n\t<li>We will build the linked list and pass the node to your function.</li>\n\t<li>The output will be the entire list after calling your function.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/node1.jpg\" style=\"width: 400px; height: 286px;\" />\n<pre>\n<strong>Input:</strong> head = [4,5,1,9], node = 5\n<strong>Output:</strong> [4,1,9]\n<strong>Explanation: </strong>You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/node2.jpg\" style=\"width: 400px; height: 315px;\" />\n<pre>\n<strong>Input:</strong> head = [4,5,1,9], node = 1\n<strong>Output:</strong> [4,5,9]\n<strong>Explanation: </strong>You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the given list is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>The value of each node in the list is <strong>unique</strong>.</li>\n\t<li>The <code>node</code> to be deleted is <strong>in the list</strong> and is <strong>not a tail</strong> node.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4148,
        "dislikes": 1200,
        "similarQuestions": "[{\"title\": \"Remove Linked List Elements\", \"titleSlug\": \"remove-linked-list-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Remove Nodes From Linked List\", \"titleSlug\": \"remove-nodes-from-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Linked List", "slug": "linked-list" }],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 1191246, \"totalSubmissionRaw\": 1532919, \"acRate\": \"77.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "remove-linked-list-elements",
          "title": "Remove Linked List Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-nodes-from-linked-list",
          "title": "Remove Nodes From Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Linked List", "slug": "linked-list" }]
    }
  },
  "product-of-array-except-self": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "238",
        "title": "Product of Array Except Self",
        "titleSlug": "product-of-array-except-self",
        "content": "<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 20988,
        "dislikes": 1221,
        "similarQuestions": "[{\"title\": \"Trapping Rain Water\", \"titleSlug\": \"trapping-rain-water\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House II\", \"titleSlug\": \"paint-house-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Difference in Sums After Removal of Elements\", \"titleSlug\": \"minimum-difference-in-sums-after-removal-of-elements\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Construct Product Matrix\", \"titleSlug\": \"construct-product-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"2.1M\", \"totalSubmission\": \"3.3M\", \"totalAcceptedRaw\": 2129923, \"totalSubmissionRaw\": 3269061, \"acRate\": \"65.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "trapping-rain-water",
          "title": "Trapping Rain Water",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-subarray",
          "title": "Maximum Product Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paint-house-ii",
          "title": "Paint House II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-difference-in-sums-after-removal-of-elements",
          "title": "Minimum Difference in Sums After Removal of Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "construct-product-matrix",
          "title": "Construct Product Matrix",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "sliding-window-maximum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "239",
        "title": "Sliding Window Maximum",
        "titleSlug": "sliding-window-maximum",
        "content": "<p>You are given an array of integers&nbsp;<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>\n\n<p>Return <em>the max sliding window</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3\n<strong>Output:</strong> [3,3,5,5,6,7]\n<strong>Explanation:</strong> \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 17529,
        "dislikes": 620,
        "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Min Stack\", \"titleSlug\": \"min-stack\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Substring with At Most Two Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-two-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House II\", \"titleSlug\": \"paint-house-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Jump Game VI\", \"titleSlug\": \"jump-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Robots Within Budget\", \"titleSlug\": \"maximum-number-of-robots-within-budget\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Tastiness of Candy Basket\", \"titleSlug\": \"maximum-tastiness-of-candy-basket\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximal Score After Applying K Operations\", \"titleSlug\": \"maximal-score-after-applying-k-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Queue", "slug": "queue" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Monotonic Queue", "slug": "monotonic-queue" }
        ],
        "stats": "{\"totalAccepted\": \"947.4K\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 947374, \"totalSubmissionRaw\": 2035579, \"acRate\": \"46.5%\"}",
        "hints": [
          "How about using a data structure such as deque (double-ended queue)?",
          "The queue size need not be the same as the window\u2019s size.",
          "Remove redundant elements and the queue should store only elements that need to be considered."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-substring",
          "title": "Minimum Window Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "min-stack",
          "title": "Min Stack",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
          "title": "Longest Substring with At Most Two Distinct Characters",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paint-house-ii",
          "title": "Paint House II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "jump-game-vi",
          "title": "Jump Game VI",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-robots-within-budget",
          "title": "Maximum Number of Robots Within Budget",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-tastiness-of-candy-basket",
          "title": "Maximum Tastiness of Candy Basket",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximal-score-after-applying-k-operations",
          "title": "Maximal Score After Applying K Operations",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "How about using a data structure such as deque (double-ended queue)?",
        "The queue size need not be the same as the window\u2019s size.",
        "Remove redundant elements and the queue should store only elements that need to be considered."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Queue", "slug": "queue" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Monotonic Queue", "slug": "monotonic-queue" }
      ]
    }
  },
  "search-a-2d-matrix-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "240",
        "title": "Search a 2D Matrix II",
        "titleSlug": "search-a-2d-matrix-ii",
        "content": "<p>Write an efficient algorithm that searches for a value <code>target</code> in an <code>m x n</code> integer matrix <code>matrix</code>. This matrix has the following properties:</p>\n\n<ul>\n\t<li>Integers in each row are sorted in ascending from left to right.</li>\n\t<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the integers in each row are <strong>sorted</strong> in ascending order.</li>\n\t<li>All the integers in each column are <strong>sorted</strong> in ascending order.</li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11488,
        "dislikes": 190,
        "similarQuestions": "[{\"title\": \"Search a 2D Matrix\", \"titleSlug\": \"search-a-2d-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"873.1K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 873104, \"totalSubmissionRaw\": 1677622, \"acRate\": \"52.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "search-a-2d-matrix",
          "title": "Search a 2D Matrix",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "different-ways-to-add-parentheses": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "241",
        "title": "Different Ways to Add Parentheses",
        "titleSlug": "different-ways-to-add-parentheses",
        "content": "<p>Given a string <code>expression</code> of numbers and operators, return <em>all possible results from computing all the different possible ways to group numbers and operators</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed <code>10<sup>4</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;2-1-1&quot;\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong>\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;2*3-4*5&quot;\n<strong>Output:</strong> [-34,-14,-10,-10,10]\n<strong>Explanation:</strong>\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 20</code></li>\n\t<li><code>expression</code> consists of digits and the operator <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;*&#39;</code>.</li>\n\t<li>All the integer values in the input expression are in the range <code>[0, 99]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5207,
        "dislikes": 255,
        "similarQuestions": "[{\"title\": \"Unique Binary Search Trees II\", \"titleSlug\": \"unique-binary-search-trees-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"The Score of Students Solving Math Expression\", \"titleSlug\": \"the-score-of-students-solving-math-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize Result by Adding Parentheses to Expression\", \"titleSlug\": \"minimize-result-by-adding-parentheses-to-expression\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Recursion", "slug": "recursion" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"210.7K\", \"totalSubmission\": \"324.2K\", \"totalAcceptedRaw\": 210653, \"totalSubmissionRaw\": 324235, \"acRate\": \"65.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "unique-binary-search-trees-ii",
          "title": "Unique Binary Search Trees II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator",
          "title": "Basic Calculator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "expression-add-operators",
          "title": "Expression Add Operators",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "the-score-of-students-solving-math-expression",
          "title": "The Score of Students Solving Math Expression",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimize-result-by-adding-parentheses-to-expression",
          "title": "Minimize Result by Adding Parentheses to Expression",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Recursion", "slug": "recursion" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "valid-anagram": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "242",
        "title": "Valid Anagram",
        "titleSlug": "valid-anagram",
        "content": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"anagram\", t = \"nagaram\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"rat\", t = \"car\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 11490,
        "dislikes": 364,
        "similarQuestions": "[{\"title\": \"Group Anagrams\", \"titleSlug\": \"group-anagrams\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation\", \"titleSlug\": \"palindrome-permutation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find All Anagrams in a String\", \"titleSlug\": \"find-all-anagrams-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Resultant Array After Removing Anagrams\", \"titleSlug\": \"find-resultant-array-after-removing-anagrams\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"3M\", \"totalSubmission\": \"4.7M\", \"totalAcceptedRaw\": 3022549, \"totalSubmissionRaw\": 4724112, \"acRate\": \"64.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "group-anagrams",
          "title": "Group Anagrams",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-permutation",
          "title": "Palindrome Permutation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-all-anagrams-in-a-string",
          "title": "Find All Anagrams in a String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-resultant-array-after-removing-anagrams",
          "title": "Find Resultant Array After Removing Anagrams",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "shortest-word-distance": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "243",
        "title": "Shortest Word Distance",
        "titleSlug": "shortest-word-distance",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1248,
        "dislikes": 110,
        "similarQuestions": "[{\"title\": \"Shortest Word Distance II\", \"titleSlug\": \"shortest-word-distance-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Word Distance III\", \"titleSlug\": \"shortest-word-distance-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find All K-Distant Indices in an Array\", \"titleSlug\": \"find-all-k-distant-indices-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"208.5K\", \"totalSubmission\": \"319.9K\", \"totalAcceptedRaw\": 208540, \"totalSubmissionRaw\": 319906, \"acRate\": \"65.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-word-distance-ii",
          "title": "Shortest Word Distance II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-word-distance-iii",
          "title": "Shortest Word Distance III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-all-k-distant-indices-in-an-array",
          "title": "Find All K-Distant Indices in an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "shortest-word-distance-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "244",
        "title": "Shortest Word Distance II",
        "titleSlug": "shortest-word-distance-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1036,
        "dislikes": 323,
        "similarQuestions": "[{\"title\": \"Merge Two Sorted Lists\", \"titleSlug\": \"merge-two-sorted-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Shortest Word Distance\", \"titleSlug\": \"shortest-word-distance\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Shortest Word Distance III\", \"titleSlug\": \"shortest-word-distance-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" }
        ],
        "stats": "{\"totalAccepted\": \"150.4K\", \"totalSubmission\": \"246.3K\", \"totalAcceptedRaw\": 150444, \"totalSubmissionRaw\": 246335, \"acRate\": \"61.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "merge-two-sorted-lists",
          "title": "Merge Two Sorted Lists",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "shortest-word-distance",
          "title": "Shortest Word Distance",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-word-distance-iii",
          "title": "Shortest Word Distance III",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" }
      ]
    }
  },
  "shortest-word-distance-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "245",
        "title": "Shortest Word Distance III",
        "titleSlug": "shortest-word-distance-iii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 494,
        "dislikes": 99,
        "similarQuestions": "[{\"title\": \"Shortest Word Distance\", \"titleSlug\": \"shortest-word-distance\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Shortest Word Distance II\", \"titleSlug\": \"shortest-word-distance-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"80.6K\", \"totalSubmission\": \"138.3K\", \"totalAcceptedRaw\": 80607, \"totalSubmissionRaw\": 138289, \"acRate\": \"58.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "shortest-word-distance",
          "title": "Shortest Word Distance",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-word-distance-ii",
          "title": "Shortest Word Distance II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "strobogrammatic-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "246",
        "title": "Strobogrammatic Number",
        "titleSlug": "strobogrammatic-number",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 577,
        "dislikes": 1000,
        "similarQuestions": "[{\"title\": \"Strobogrammatic Number II\", \"titleSlug\": \"strobogrammatic-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strobogrammatic Number III\", \"titleSlug\": \"strobogrammatic-number-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Confusing Number\", \"titleSlug\": \"confusing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"167.1K\", \"totalSubmission\": \"350.6K\", \"totalAcceptedRaw\": 167128, \"totalSubmissionRaw\": 350556, \"acRate\": \"47.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "strobogrammatic-number-ii",
          "title": "Strobogrammatic Number II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "strobogrammatic-number-iii",
          "title": "Strobogrammatic Number III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "confusing-number",
          "title": "Confusing Number",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "strobogrammatic-number-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "247",
        "title": "Strobogrammatic Number II",
        "titleSlug": "strobogrammatic-number-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 891,
        "dislikes": 235,
        "similarQuestions": "[{\"title\": \"Strobogrammatic Number\", \"titleSlug\": \"strobogrammatic-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Strobogrammatic Number III\", \"titleSlug\": \"strobogrammatic-number-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sum of k-Mirror Numbers\", \"titleSlug\": \"sum-of-k-mirror-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"133.9K\", \"totalSubmission\": \"258K\", \"totalAcceptedRaw\": 133932, \"totalSubmissionRaw\": 258002, \"acRate\": \"51.9%\"}",
        "hints": [
          "Try to use recursion and notice that it should recurse with <i>n</i> - 2 instead of <i>n</i> - 1."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "strobogrammatic-number",
          "title": "Strobogrammatic Number",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "strobogrammatic-number-iii",
          "title": "Strobogrammatic Number III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sum-of-k-mirror-numbers",
          "title": "Sum of k-Mirror Numbers",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Try to use recursion and notice that it should recurse with <i>n</i> - 2 instead of <i>n</i> - 1."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "strobogrammatic-number-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "248",
        "title": "Strobogrammatic Number III",
        "titleSlug": "strobogrammatic-number-iii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 297,
        "dislikes": 186,
        "similarQuestions": "[{\"title\": \"Strobogrammatic Number\", \"titleSlug\": \"strobogrammatic-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Strobogrammatic Number II\", \"titleSlug\": \"strobogrammatic-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"36.1K\", \"totalSubmission\": \"85.8K\", \"totalAcceptedRaw\": 36088, \"totalSubmissionRaw\": 85808, \"acRate\": \"42.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "strobogrammatic-number",
          "title": "Strobogrammatic Number",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "strobogrammatic-number-ii",
          "title": "Strobogrammatic Number II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "group-shifted-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "249",
        "title": "Group Shifted Strings",
        "titleSlug": "group-shifted-strings",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1611,
        "dislikes": 339,
        "similarQuestions": "[{\"title\": \"Group Anagrams\", \"titleSlug\": \"group-anagrams\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Maximum Number of String Pairs\", \"titleSlug\": \"find-maximum-number-of-string-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"214.4K\", \"totalSubmission\": \"330K\", \"totalAcceptedRaw\": 214362, \"totalSubmissionRaw\": 330047, \"acRate\": \"64.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "group-anagrams",
          "title": "Group Anagrams",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-maximum-number-of-string-pairs",
          "title": "Find Maximum Number of String Pairs",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "count-univalue-subtrees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "250",
        "title": "Count Univalue Subtrees",
        "titleSlug": "count-univalue-subtrees",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1175,
        "dislikes": 407,
        "similarQuestions": "[{\"title\": \"Subtree of Another Tree\", \"titleSlug\": \"subtree-of-another-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Univalue Path\", \"titleSlug\": \"longest-univalue-path\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"148.2K\", \"totalSubmission\": \"263.8K\", \"totalAcceptedRaw\": 148162, \"totalSubmissionRaw\": 263765, \"acRate\": \"56.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "subtree-of-another-tree",
          "title": "Subtree of Another Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-univalue-path",
          "title": "Longest Univalue Path",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "flatten-2d-vector": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "251",
        "title": "Flatten 2D Vector",
        "titleSlug": "flatten-2d-vector",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 704,
        "dislikes": 402,
        "similarQuestions": "[{\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Peeking Iterator\", \"titleSlug\": \"peeking-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten Nested List Iterator\", \"titleSlug\": \"flatten-nested-list-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Design", "slug": "design" },
          { "name": "Iterator", "slug": "iterator" }
        ],
        "stats": "{\"totalAccepted\": \"123.6K\", \"totalSubmission\": \"250.4K\", \"totalAcceptedRaw\": 123593, \"totalSubmissionRaw\": 250394, \"acRate\": \"49.4%\"}",
        "hints": [
          "How many variables do you need to keep track?",
          "Two variables is all you need. Try with <code>x</code> and <code>y</code>.",
          "Beware of empty rows. It could be the first few rows.",
          "To write correct code, think about the <a href=\"https://en.wikipedia.org/wiki/Invariant_(computer_science)\" target=\"_blank\">invariant</a> to maintain. What is it?",
          "The invariant is <code>x</code> and <code>y</code> must always point to a valid point in the 2d vector. Should you maintain your invariant <i>ahead of time</i> or <i>right when you need it</i>?",
          "Not sure? Think about how you would implement <code>hasNext()</code>. Which is more complex?",
          "Common logic in two different places should be refactored into a common method."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-search-tree-iterator",
          "title": "Binary Search Tree Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "zigzag-iterator",
          "title": "Zigzag Iterator",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "peeking-iterator",
          "title": "Peeking Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-nested-list-iterator",
          "title": "Flatten Nested List Iterator",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "How many variables do you need to keep track?",
        "Two variables is all you need. Try with <code>x</code> and <code>y</code>.",
        "Beware of empty rows. It could be the first few rows.",
        "To write correct code, think about the <a href=\"https://en.wikipedia.org/wiki/Invariant_(computer_science)\" target=\"_blank\">invariant</a> to maintain. What is it?",
        "The invariant is <code>x</code> and <code>y</code> must always point to a valid point in the 2d vector. Should you maintain your invariant <i>ahead of time</i> or <i>right when you need it</i>?",
        "Not sure? Think about how you would implement <code>hasNext()</code>. Which is more complex?",
        "Common logic in two different places should be refactored into a common method."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Design", "slug": "design" },
        { "name": "Iterator", "slug": "iterator" }
      ]
    }
  },
  "meeting-rooms": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "252",
        "title": "Meeting Rooms",
        "titleSlug": "meeting-rooms",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1979,
        "dislikes": 98,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms II\", \"titleSlug\": \"meeting-rooms-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms III\", \"titleSlug\": \"meeting-rooms-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Points That Intersect With Cars\", \"titleSlug\": \"points-that-intersect-with-cars\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"375K\", \"totalSubmission\": \"649.3K\", \"totalAcceptedRaw\": 374966, \"totalSubmissionRaw\": 649261, \"acRate\": \"57.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "meeting-rooms-ii",
          "title": "Meeting Rooms II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "meeting-rooms-iii",
          "title": "Meeting Rooms III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "points-that-intersect-with-cars",
          "title": "Points That Intersect With Cars",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "meeting-rooms-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "253",
        "title": "Meeting Rooms II",
        "titleSlug": "meeting-rooms-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 6792,
        "dislikes": 149,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms\", \"titleSlug\": \"meeting-rooms\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Arrows to Burst Balloons\", \"titleSlug\": \"minimum-number-of-arrows-to-burst-balloons\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Car Pooling\", \"titleSlug\": \"car-pooling\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Flowers in Full Bloom\", \"titleSlug\": \"number-of-flowers-in-full-bloom\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms III\", \"titleSlug\": \"meeting-rooms-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Total Cost to Hire K Workers\", \"titleSlug\": \"total-cost-to-hire-k-workers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Points That Intersect With Cars\", \"titleSlug\": \"points-that-intersect-with-cars\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"841.1K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 841057, \"totalSubmissionRaw\": 1651547, \"acRate\": \"50.9%\"}",
        "hints": [
          "Think about how we would approach this problem in a very simplistic way. We will allocate rooms to meetings that occur earlier in the day v/s the ones that occur later on, right?",
          "If you've figured out that we have to <b>sort</b> the meetings by their start time, the next thing to think about is how do we do the allocation? <br>There are two scenarios possible here for any meeting. Either there is no meeting room available and a new one has to be allocated, or a meeting room has freed up and this meeting can take place there.",
          "An important thing to note is that we don't really care <b>which</b> room gets freed up while allocating a room for the current meeting. As long as a room is free, our job is done. <br><br>We already know the rooms we have allocated till now and we also know when are they due to get free because of the end times of the meetings going on in those rooms. We can simply check the room which is due to get vacated the earliest amongst all the allocated rooms.",
          "Following up on the previous hint, we can make use of a min-heap to store the end times of the meetings in various rooms. <br><br>So, every time we want to check if any room is free or not, simply check the topmost element of the min heap as that would be the room that would get free the earliest out of all the other rooms currently occupied.\r\n\r\n<br><br>If the room we extracted from the top of the min heap isn't free, then no other room is. So, we can save time here and simply allocate a new room."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "meeting-rooms",
          "title": "Meeting Rooms",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
          "title": "Minimum Number of Arrows to Burst Balloons",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "car-pooling",
          "title": "Car Pooling",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-flowers-in-full-bloom",
          "title": "Number of Flowers in Full Bloom",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "meeting-rooms-iii",
          "title": "Meeting Rooms III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "total-cost-to-hire-k-workers",
          "title": "Total Cost to Hire K Workers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "points-that-intersect-with-cars",
          "title": "Points That Intersect With Cars",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Think about how we would approach this problem in a very simplistic way. We will allocate rooms to meetings that occur earlier in the day v/s the ones that occur later on, right?",
        "If you've figured out that we have to <b>sort</b> the meetings by their start time, the next thing to think about is how do we do the allocation? <br>There are two scenarios possible here for any meeting. Either there is no meeting room available and a new one has to be allocated, or a meeting room has freed up and this meeting can take place there.",
        "An important thing to note is that we don't really care <b>which</b> room gets freed up while allocating a room for the current meeting. As long as a room is free, our job is done. <br><br>We already know the rooms we have allocated till now and we also know when are they due to get free because of the end times of the meetings going on in those rooms. We can simply check the room which is due to get vacated the earliest amongst all the allocated rooms.",
        "Following up on the previous hint, we can make use of a min-heap to store the end times of the meetings in various rooms. <br><br>So, every time we want to check if any room is free or not, simply check the topmost element of the min heap as that would be the room that would get free the earliest out of all the other rooms currently occupied.\r\n\r\n<br><br>If the room we extracted from the top of the min heap isn't free, then no other room is. So, we can save time here and simply allocate a new room."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "factor-combinations": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "254",
        "title": "Factor Combinations",
        "titleSlug": "factor-combinations",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1110,
        "dislikes": 67,
        "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"124.7K\", \"totalSubmission\": \"252.7K\", \"totalAcceptedRaw\": 124664, \"totalSubmissionRaw\": 252745, \"acRate\": \"49.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum",
          "title": "Combination Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "verify-preorder-sequence-in-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "255",
        "title": "Verify Preorder Sequence in Binary Search Tree",
        "titleSlug": "verify-preorder-sequence-in-binary-search-tree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1127,
        "dislikes": 83,
        "similarQuestions": "[{\"title\": \"Binary Tree Preorder Traversal\", \"titleSlug\": \"binary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Recursion", "slug": "recursion" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"73.7K\", \"totalSubmission\": \"151.3K\", \"totalAcceptedRaw\": 73742, \"totalSubmissionRaw\": 151342, \"acRate\": \"48.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-preorder-traversal",
          "title": "Binary Tree Preorder Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Recursion", "slug": "recursion" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "paint-house": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "256",
        "title": "Paint House",
        "titleSlug": "paint-house",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2239,
        "dislikes": 129,
        "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber II\", \"titleSlug\": \"house-robber-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House II\", \"titleSlug\": \"paint-house-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Paint Fence\", \"titleSlug\": \"paint-fence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Cost in a Grid\", \"titleSlug\": \"minimum-path-cost-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"196.9K\", \"totalSubmission\": \"318.3K\", \"totalAcceptedRaw\": 196940, \"totalSubmissionRaw\": 318312, \"acRate\": \"61.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-ii",
          "title": "House Robber II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paint-house-ii",
          "title": "Paint House II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-fence",
          "title": "Paint Fence",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-cost-in-a-grid",
          "title": "Minimum Path Cost in a Grid",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "binary-tree-paths": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "257",
        "title": "Binary Tree Paths",
        "titleSlug": "binary-tree-paths",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>all root-to-leaf paths in <strong>any order</strong></em>.</p>\n\n<p>A <strong>leaf</strong> is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg\" style=\"width: 207px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,5]\n<strong>Output:</strong> [&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [&quot;1&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6331,
        "dislikes": 275,
        "similarQuestions": "[{\"title\": \"Path Sum II\", \"titleSlug\": \"path-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest String Starting From Leaf\", \"titleSlug\": \"smallest-string-starting-from-leaf\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Step-By-Step Directions From a Binary Tree Node to Another\", \"titleSlug\": \"step-by-step-directions-from-a-binary-tree-node-to-another\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"680.9K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 680923, \"totalSubmissionRaw\": 1082004, \"acRate\": \"62.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-ii",
          "title": "Path Sum II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-string-starting-from-leaf",
          "title": "Smallest String Starting From Leaf",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "step-by-step-directions-from-a-binary-tree-node-to-another",
          "title": "Step-By-Step Directions From a Binary Tree Node to Another",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "add-digits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "258",
        "title": "Add Digits",
        "titleSlug": "add-digits",
        "content": "<p>Given an integer <code>num</code>, repeatedly add all its digits until the result has only one digit, and return it.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 38\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it without any loop/recursion in <code>O(1)</code> runtime?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4642,
        "dislikes": 1922,
        "similarQuestions": "[{\"title\": \"Happy Number\", \"titleSlug\": \"happy-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Digits in the Minimum Number\", \"titleSlug\": \"sum-of-digits-in-the-minimum-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Digits of String After Convert\", \"titleSlug\": \"sum-of-digits-of-string-after-convert\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Sum of Four Digit Number After Splitting Digits\", \"titleSlug\": \"minimum-sum-of-four-digit-number-after-splitting-digits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Calculate Digit Sum of a String\", \"titleSlug\": \"calculate-digit-sum-of-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Difference Between Element Sum and Digit Sum of an Array\", \"titleSlug\": \"difference-between-element-sum-and-digit-sum-of-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Alternating Digit Sum\", \"titleSlug\": \"alternating-digit-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Simulation", "slug": "simulation" },
          { "name": "Number Theory", "slug": "number-theory" }
        ],
        "stats": "{\"totalAccepted\": \"729.3K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 729268, \"totalSubmissionRaw\": 1101885, \"acRate\": \"66.2%\"}",
        "hints": [
          "A naive implementation of the above process is trivial. Could you come up with other methods?",
          "What are all the possible results?",
          "How do they occur, periodically or randomly?",
          "You may find this <a href=\"https://en.wikipedia.org/wiki/Digital_root\" target=\"_blank\">Wikipedia article</a> useful."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "happy-number",
          "title": "Happy Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sum-of-digits-in-the-minimum-number",
          "title": "Sum of Digits in the Minimum Number",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sum-of-digits-of-string-after-convert",
          "title": "Sum of Digits of String After Convert",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-sum-of-four-digit-number-after-splitting-digits",
          "title": "Minimum Sum of Four Digit Number After Splitting Digits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "calculate-digit-sum-of-a-string",
          "title": "Calculate Digit Sum of a String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "difference-between-element-sum-and-digit-sum-of-an-array",
          "title": "Difference Between Element Sum and Digit Sum of an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "alternating-digit-sum",
          "title": "Alternating Digit Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "A naive implementation of the above process is trivial. Could you come up with other methods?",
        "What are all the possible results?",
        "How do they occur, periodically or randomly?",
        "You may find this <a href=\"https://en.wikipedia.org/wiki/Digital_root\" target=\"_blank\">Wikipedia article</a> useful."
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Simulation", "slug": "simulation" },
        { "name": "Number Theory", "slug": "number-theory" }
      ]
    }
  },
  "3sum-smaller": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "259",
        "title": "3Sum Smaller",
        "titleSlug": "3sum-smaller",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1507,
        "dislikes": 150,
        "similarQuestions": "[{\"title\": \"3Sum\", \"titleSlug\": \"3sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"3Sum Closest\", \"titleSlug\": \"3sum-closest\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Triangle Number\", \"titleSlug\": \"valid-triangle-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum Less Than K\", \"titleSlug\": \"two-sum-less-than-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximize Greatness of an Array\", \"titleSlug\": \"maximize-greatness-of-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Polygon With the Largest Perimeter\", \"titleSlug\": \"find-polygon-with-the-largest-perimeter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"142.7K\", \"totalSubmission\": \"282.3K\", \"totalAcceptedRaw\": 142694, \"totalSubmissionRaw\": 282281, \"acRate\": \"50.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "3sum",
          "title": "3Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "3sum-closest",
          "title": "3Sum Closest",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "valid-triangle-number",
          "title": "Valid Triangle Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-less-than-k",
          "title": "Two Sum Less Than K",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximize-greatness-of-an-array",
          "title": "Maximize Greatness of an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-polygon-with-the-largest-perimeter",
          "title": "Find Polygon With the Largest Perimeter",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "single-number-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "260",
        "title": "Single Number III",
        "titleSlug": "single-number-iii",
        "content": "<p>Given an integer array <code>nums</code>, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in <strong>any order</strong>.</p>\n\n<p>You must write an&nbsp;algorithm that runs in linear runtime complexity and uses&nbsp;only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,2,5]\n<strong>Output:</strong> [3,5]\n<strong>Explanation: </strong> [5, 3] is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0]\n<strong>Output:</strong> [-1,0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Each integer in <code>nums</code> will appear twice, only two integers will appear once.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5545,
        "dislikes": 225,
        "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Single Number II\", \"titleSlug\": \"single-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find The Original Array of Prefix Xor\", \"titleSlug\": \"find-the-original-array-of-prefix-xor\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"330K\", \"totalSubmission\": \"484.6K\", \"totalAcceptedRaw\": 330005, \"totalSubmissionRaw\": 484573, \"acRate\": \"68.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "single-number",
          "title": "Single Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "single-number-ii",
          "title": "Single Number II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-original-array-of-prefix-xor",
          "title": "Find The Original Array of Prefix Xor",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "graph-valid-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "261",
        "title": "Graph Valid Tree",
        "titleSlug": "graph-valid-tree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 3195,
        "dislikes": 97,
        "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Connected Components in an Undirected Graph\", \"titleSlug\": \"number-of-connected-components-in-an-undirected-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Keys and Rooms\", \"titleSlug\": \"keys-and-rooms\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"374.3K\", \"totalSubmission\": \"784.5K\", \"totalAcceptedRaw\": 374313, \"totalSubmissionRaw\": 784527, \"acRate\": \"47.7%\"}",
        "hints": [
          "Given <code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [3, 4]]</code>, what should your return? Is this case a valid tree?",
          "According to the <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\">definition of tree on Wikipedia</a>: \u201ca tree is an undirected graph in which any two vertices are connected by <i>exactly</i> one path. In other words, any connected graph without simple cycles is a tree.\u201d"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule",
          "title": "Course Schedule",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-connected-components-in-an-undirected-graph",
          "title": "Number of Connected Components in an Undirected Graph",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "keys-and-rooms",
          "title": "Keys and Rooms",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Given <code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [3, 4]]</code>, what should your return? Is this case a valid tree?",
        "According to the <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\">definition of tree on Wikipedia</a>: \u201ca tree is an undirected graph in which any two vertices are connected by <i>exactly</i> one path. In other words, any connected graph without simple cycles is a tree.\u201d"
      ],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "trips-and-users": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "262",
        "title": "Trips and Users",
        "titleSlug": "trips-and-users",
        "content": "<p>Table: <code>Trips</code></p>\n\n<pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| client_id   | int      |\n| driver_id   | int      |\n| city_id     | int      |\n| status      | enum     |\n| request_at  | date     |     \n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\nStatus is an ENUM (category) type of (&#39;completed&#39;, &#39;cancelled_by_driver&#39;, &#39;cancelled_by_client&#39;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Users</code></p>\n\n<pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| users_id    | int      |\n| banned      | enum     |\n| role        | enum     |\n+-------------+----------+\nusers_id is the primary key (column with unique values) for this table.\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of (&#39;client&#39;, &#39;driver&#39;, &#39;partner&#39;).\nbanned is an ENUM (category) type of (&#39;Yes&#39;, &#39;No&#39;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p>The <strong>cancellation rate</strong> is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.</p>\n\n<p>Write a solution to find the <strong>cancellation rate</strong> of requests with unbanned users (<strong>both client and driver must not be banned</strong>) each day between <code>&quot;2013-10-01&quot;</code> and <code>&quot;2013-10-03&quot;</code>. Round <code>Cancellation Rate</code> to <strong>two decimal</strong> points.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status              | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+\n<strong>Output:</strong> \n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+\n<strong>Explanation:</strong> \nOn 2013-10-01:\n  - There were 4 requests in total, 2 of which were canceled.\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n  - The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n  - There were 3 requests in total, 0 of which were canceled.\n  - The request with Id=6 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n  - The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n  - There were 3 requests in total, 1 of which was canceled.\n  - The request with Id=8 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\n  - The Cancellation Rate is (1 / 2) = 0.50\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1189,
        "dislikes": 657,
        "similarQuestions": "[{\"title\": \"Hopper Company Queries I\", \"titleSlug\": \"hopper-company-queries-i\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Hopper Company Queries II\", \"titleSlug\": \"hopper-company-queries-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Hopper Company Queries III\", \"titleSlug\": \"hopper-company-queries-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"167.4K\", \"totalSubmission\": \"462.5K\", \"totalAcceptedRaw\": 167446, \"totalSubmissionRaw\": 462460, \"acRate\": \"36.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "hopper-company-queries-i",
          "title": "Hopper Company Queries I",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "hopper-company-queries-ii",
          "title": "Hopper Company Queries II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "hopper-company-queries-iii",
          "title": "Hopper Company Queries III",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "ugly-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "263",
        "title": "Ugly Number",
        "titleSlug": "ugly-number",
        "content": "<p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p>\n\n<p>Given an integer <code>n</code>, return <code>true</code> <em>if</em> <code>n</code> <em>is an <strong>ugly number</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 6 = 2 &times; 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 14\n<strong>Output:</strong> false\n<strong>Explanation:</strong> 14 is not ugly since it includes the prime factor 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3187,
        "dislikes": 1657,
        "similarQuestions": "[{\"title\": \"Happy Number\", \"titleSlug\": \"happy-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Primes\", \"titleSlug\": \"count-primes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ugly Number II\", \"titleSlug\": \"ugly-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"476.4K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 476435, \"totalSubmissionRaw\": 1135359, \"acRate\": \"42.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "happy-number",
          "title": "Happy Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-primes",
          "title": "Count Primes",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ugly-number-ii",
          "title": "Ugly Number II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "ugly-number-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "264",
        "title": "Ugly Number II",
        "titleSlug": "ugly-number-ii",
        "content": "<p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p>\n\n<p>Given an integer <code>n</code>, return <em>the</em> <code>n<sup>th</sup></code> <em><strong>ugly number</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1690</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5800,
        "dislikes": 293,
        "similarQuestions": "[{\"title\": \"Merge k Sorted Lists\", \"titleSlug\": \"merge-k-sorted-lists\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Primes\", \"titleSlug\": \"count-primes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ugly Number\", \"titleSlug\": \"ugly-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Perfect Squares\", \"titleSlug\": \"perfect-squares\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Super Ugly Number\", \"titleSlug\": \"super-ugly-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ugly Number III\", \"titleSlug\": \"ugly-number-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"327.8K\", \"totalSubmission\": \"710K\", \"totalAcceptedRaw\": 327760, \"totalSubmissionRaw\": 710020, \"acRate\": \"46.2%\"}",
        "hints": [
          "The naive approach is to call <code>isUgly</code> for every number until you reach the n<sup>th</sup> one. Most numbers are <i>not</i> ugly. Try to focus your effort on generating only the ugly ones.",
          "An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly number.",
          "The key is how to maintain the order of the ugly numbers. Try a similar approach of merging from three sorted lists: L<sub>1</sub>, L<sub>2</sub>, and L<sub>3</sub>.",
          "Assume you have U<sub>k</sub>, the k<sup>th</sup> ugly number. Then U<sub>k+1</sub> must be Min(L<sub>1</sub> * 2, L<sub>2</sub> * 3, L<sub>3</sub> * 5)."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "merge-k-sorted-lists",
          "title": "Merge k Sorted Lists",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-primes",
          "title": "Count Primes",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "ugly-number",
          "title": "Ugly Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "perfect-squares",
          "title": "Perfect Squares",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "super-ugly-number",
          "title": "Super Ugly Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ugly-number-iii",
          "title": "Ugly Number III",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The naive approach is to call <code>isUgly</code> for every number until you reach the n<sup>th</sup> one. Most numbers are <i>not</i> ugly. Try to focus your effort on generating only the ugly ones.",
        "An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly number.",
        "The key is how to maintain the order of the ugly numbers. Try a similar approach of merging from three sorted lists: L<sub>1</sub>, L<sub>2</sub>, and L<sub>3</sub>.",
        "Assume you have U<sub>k</sub>, the k<sup>th</sup> ugly number. Then U<sub>k+1</sub> must be Min(L<sub>1</sub> * 2, L<sub>2</sub> * 3, L<sub>3</sub> * 5)."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "paint-house-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "265",
        "title": "Paint House II",
        "titleSlug": "paint-house-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1271,
        "dislikes": 36,
        "similarQuestions": "[{\"title\": \"Product of Array Except Self\", \"titleSlug\": \"product-of-array-except-self\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Paint House\", \"titleSlug\": \"paint-house\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint Fence\", \"titleSlug\": \"paint-fence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"118.9K\", \"totalSubmission\": \"219.1K\", \"totalAcceptedRaw\": 118895, \"totalSubmissionRaw\": 219149, \"acRate\": \"54.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "product-of-array-except-self",
          "title": "Product of Array Except Self",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sliding-window-maximum",
          "title": "Sliding Window Maximum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-house",
          "title": "Paint House",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-fence",
          "title": "Paint Fence",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "palindrome-permutation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "266",
        "title": "Palindrome Permutation",
        "titleSlug": "palindrome-permutation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1029,
        "dislikes": 68,
        "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Anagram\", \"titleSlug\": \"valid-anagram\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation II\", \"titleSlug\": \"palindrome-permutation-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Palindrome\", \"titleSlug\": \"longest-palindrome\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"192.1K\", \"totalSubmission\": \"288.2K\", \"totalAcceptedRaw\": 192134, \"totalSubmissionRaw\": 288216, \"acRate\": \"66.7%\"}",
        "hints": [
          "Consider the palindromes of odd vs even length. What difference do you notice?",
          "Count the frequency of each character.",
          "If each character occurs even number of times, then it must be a palindrome. How about character which occurs odd number of times?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-substring",
          "title": "Longest Palindromic Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "valid-anagram",
          "title": "Valid Anagram",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "palindrome-permutation-ii",
          "title": "Palindrome Permutation II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "longest-palindrome",
          "title": "Longest Palindrome",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Consider the palindromes of odd vs even length. What difference do you notice?",
        "Count the frequency of each character.",
        "If each character occurs even number of times, then it must be a palindrome. How about character which occurs odd number of times?"
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "palindrome-permutation-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "267",
        "title": "Palindrome Permutation II",
        "titleSlug": "palindrome-permutation-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 861,
        "dislikes": 94,
        "similarQuestions": "[{\"title\": \"Next Permutation\", \"titleSlug\": \"next-permutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations II\", \"titleSlug\": \"permutations-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation\", \"titleSlug\": \"palindrome-permutation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"64.5K\", \"totalSubmission\": \"157.4K\", \"totalAcceptedRaw\": 64494, \"totalSubmissionRaw\": 157369, \"acRate\": \"41.0%\"}",
        "hints": [
          "If a palindromic permutation exists, we just need to generate the first half of the string.",
          "To generate all distinct permutations of a (half of) string, use a similar approach from: <a href=\"/problems/permutations-ii\">Permutations II</a> or <a href=\"/problems/next-permutation\">Next Permutation</a>."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "next-permutation",
          "title": "Next Permutation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutations-ii",
          "title": "Permutations II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-permutation",
          "title": "Palindrome Permutation",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "If a palindromic permutation exists, we just need to generate the first half of the string.",
        "To generate all distinct permutations of a (half of) string, use a similar approach from: <a href=\"/problems/permutations-ii\">Permutations II</a> or <a href=\"/problems/next-permutation\">Next Permutation</a>."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "missing-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "268",
        "title": "Missing Number",
        "titleSlug": "missing-number",
        "content": "<p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return <em>the only number in the range that is missing from the array.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,6,4,2,3,5,7,0,1]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= n</code></li>\n\t<li>All the numbers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 11133,
        "dislikes": 3262,
        "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Couples Holding Hands\", \"titleSlug\": \"couples-holding-hands\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Unique Binary String\", \"titleSlug\": \"find-unique-binary-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"2.8M\", \"totalAcceptedRaw\": 1823995, \"totalSubmissionRaw\": 2821549, \"acRate\": \"64.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "first-missing-positive",
          "title": "First Missing Positive",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "single-number",
          "title": "Single Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-duplicate-number",
          "title": "Find the Duplicate Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "couples-holding-hands",
          "title": "Couples Holding Hands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-unique-binary-string",
          "title": "Find Unique Binary String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "alien-dictionary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "269",
        "title": "Alien Dictionary",
        "titleSlug": "alien-dictionary",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 4318,
        "dislikes": 961,
        "similarQuestions": "[{\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" }
        ],
        "stats": "{\"totalAccepted\": \"362.6K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 362616, \"totalSubmissionRaw\": 1019362, \"acRate\": \"35.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule-ii",
          "title": "Course Schedule II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" }
      ]
    }
  },
  "closest-binary-search-tree-value": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "270",
        "title": "Closest Binary Search Tree Value",
        "titleSlug": "closest-binary-search-tree-value",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1743,
        "dislikes": 120,
        "similarQuestions": "[{\"title\": \"Count Complete Tree Nodes\", \"titleSlug\": \"count-complete-tree-nodes\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Closest Binary Search Tree Value II\", \"titleSlug\": \"closest-binary-search-tree-value-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Search in a Binary Search Tree\", \"titleSlug\": \"search-in-a-binary-search-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Closest Nodes Queries in a Binary Search Tree\", \"titleSlug\": \"closest-nodes-queries-in-a-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"311K\", \"totalSubmission\": \"590.6K\", \"totalAcceptedRaw\": 310961, \"totalSubmissionRaw\": 590649, \"acRate\": \"52.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "count-complete-tree-nodes",
          "title": "Count Complete Tree Nodes",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "closest-binary-search-tree-value-ii",
          "title": "Closest Binary Search Tree Value II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "search-in-a-binary-search-tree",
          "title": "Search in a Binary Search Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
          "title": "Closest Nodes Queries in a Binary Search Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "encode-and-decode-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "271",
        "title": "Encode and Decode Strings",
        "titleSlug": "encode-and-decode-strings",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1398,
        "dislikes": 377,
        "similarQuestions": "[{\"title\": \"Count and Say\", \"titleSlug\": \"count-and-say\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize Binary Tree\", \"titleSlug\": \"serialize-and-deserialize-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"String Compression\", \"titleSlug\": \"string-compression\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Binary Substrings\", \"titleSlug\": \"count-binary-substrings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" }
        ],
        "stats": "{\"totalAccepted\": \"178.2K\", \"totalSubmission\": \"392K\", \"totalAcceptedRaw\": 178172, \"totalSubmissionRaw\": 392020, \"acRate\": \"45.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "count-and-say",
          "title": "Count and Say",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "serialize-and-deserialize-binary-tree",
          "title": "Serialize and Deserialize Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "string-compression",
          "title": "String Compression",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-binary-substrings",
          "title": "Count Binary Substrings",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" }
      ]
    }
  },
  "closest-binary-search-tree-value-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "272",
        "title": "Closest Binary Search Tree Value II",
        "titleSlug": "closest-binary-search-tree-value-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1267,
        "dislikes": 42,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Closest Binary Search Tree Value\", \"titleSlug\": \"closest-binary-search-tree-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Closest Nodes Queries in a Binary Search Tree\", \"titleSlug\": \"closest-nodes-queries-in-a-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"114.5K\", \"totalSubmission\": \"194.9K\", \"totalAcceptedRaw\": 114501, \"totalSubmissionRaw\": 194867, \"acRate\": \"58.8%\"}",
        "hints": [
          "Consider implement these two helper functions:\r\n<ol type=\"i\"><li><code>getPredecessor(N)</code>, which returns the next smaller node to N.</li>\r\n<li><code>getSuccessor(N)</code>, which returns the next larger node to N.</li>\r\n</ol>",
          "Try to assume that each node has a parent pointer, it makes the problem much easier.",
          "Without parent pointer we just need to keep track of the path from the root to the current node using a stack.",
          "You would need two stacks to track the path in finding predecessor and successor node separately."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "closest-binary-search-tree-value",
          "title": "Closest Binary Search Tree Value",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
          "title": "Closest Nodes Queries in a Binary Search Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Consider implement these two helper functions:\r\n<ol type=\"i\"><li><code>getPredecessor(N)</code>, which returns the next smaller node to N.</li>\r\n<li><code>getSuccessor(N)</code>, which returns the next larger node to N.</li>\r\n</ol>",
        "Try to assume that each node has a parent pointer, it makes the problem much easier.",
        "Without parent pointer we just need to keep track of the path from the root to the current node using a stack.",
        "You would need two stacks to track the path in finding predecessor and successor node separately."
      ],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "integer-to-english-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "273",
        "title": "Integer to English Words",
        "titleSlug": "integer-to-english-words",
        "content": "<p>Convert a non-negative integer <code>num</code> to its English words representation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 123\n<strong>Output:</strong> &quot;One Hundred Twenty Three&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 12345\n<strong>Output:</strong> &quot;Twelve Thousand Three Hundred Forty Five&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1234567\n<strong>Output:</strong> &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2910,
        "dislikes": 6113,
        "similarQuestions": "[{\"title\": \"Integer to Roman\", \"titleSlug\": \"integer-to-roman\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"363.2K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 363180, \"totalSubmissionRaw\": 1196735, \"acRate\": \"30.3%\"}",
        "hints": [
          "Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.",
          "Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.",
          "There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "integer-to-roman",
          "title": "Integer to Roman",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.",
        "Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.",
        "There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "h-index": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "274",
        "title": "H-Index",
        "titleSlug": "h-index",
        "content": "<p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i<sup>th</sup></code> paper, return <em>the researcher&#39;s h-index</em>.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> citations = [3,0,6,1,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> citations = [1,3,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == citations.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>0 &lt;= citations[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 952,
        "dislikes": 378,
        "similarQuestions": "[{\"title\": \"H-Index II\", \"titleSlug\": \"h-index-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Counting Sort", "slug": "counting-sort" }
        ],
        "stats": "{\"totalAccepted\": \"376.6K\", \"totalSubmission\": \"974.7K\", \"totalAcceptedRaw\": 376632, \"totalSubmissionRaw\": 974707, \"acRate\": \"38.6%\"}",
        "hints": [
          "An easy approach is to sort the array first.",
          "What are the possible values of h-index?",
          "A faster approach is to use extra space."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "h-index-ii",
          "title": "H-Index II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "An easy approach is to sort the array first.",
        "What are the possible values of h-index?",
        "A faster approach is to use extra space."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Counting Sort", "slug": "counting-sort" }
      ]
    }
  },
  "h-index-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "275",
        "title": "H-Index II",
        "titleSlug": "h-index-ii",
        "content": "<p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i<sup>th</sup></code> paper and <code>citations</code> is sorted in <strong>ascending order</strong>, return <em>the researcher&#39;s h-index</em>.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p>\n\n<p>You must write an algorithm that runs in logarithmic time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> citations = [0,1,3,5,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> citations = [1,2,100]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == citations.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= citations[i] &lt;= 1000</code></li>\n\t<li><code>citations</code> is sorted in <strong>ascending order</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 260,
        "dislikes": 54,
        "similarQuestions": "[{\"title\": \"H-Index\", \"titleSlug\": \"h-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"193.5K\", \"totalSubmission\": \"510.2K\", \"totalAcceptedRaw\": 193501, \"totalSubmissionRaw\": 510244, \"acRate\": \"37.9%\"}",
        "hints": [
          "Expected runtime complexity is in <i>O</i>(log <i>n</i>) and the input is sorted."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "h-index",
          "title": "H-Index",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Expected runtime complexity is in <i>O</i>(log <i>n</i>) and the input is sorted."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "paint-fence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "276",
        "title": "Paint Fence",
        "titleSlug": "paint-fence",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1483,
        "dislikes": 380,
        "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber II\", \"titleSlug\": \"house-robber-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House\", \"titleSlug\": \"paint-house\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House II\", \"titleSlug\": \"paint-house-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"104.4K\", \"totalSubmission\": \"229.6K\", \"totalAcceptedRaw\": 104434, \"totalSubmissionRaw\": 229611, \"acRate\": \"45.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-ii",
          "title": "House Robber II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paint-house",
          "title": "Paint House",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paint-house-ii",
          "title": "Paint House II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "find-the-celebrity": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "277",
        "title": "Find the Celebrity",
        "titleSlug": "find-the-celebrity",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2761,
        "dislikes": 264,
        "similarQuestions": "[{\"title\": \"Find the Town Judge\", \"titleSlug\": \"find-the-town-judge\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Interactive", "slug": "interactive" }
        ],
        "stats": "{\"totalAccepted\": \"257.7K\", \"totalSubmission\": \"549.1K\", \"totalAcceptedRaw\": 257714, \"totalSubmissionRaw\": 549086, \"acRate\": \"46.9%\"}",
        "hints": [
          "The best hint for this problem can be provided by the following figure:\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_find_celebrity.png\" width=\"700\"/>",
          "Well, if you understood the gist of the above idea, you can extend it to find a candidate that can possibly be a celebrity. Why do we say a \"candidate\"? That is for you to think. This is clearly a greedy approach to find the answer. However, there is some information that would still remain to be verified without which we can't obtain an answer with certainty. To get that stake in the ground, we would need some more calls to the knows API."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-town-judge",
          "title": "Find the Town Judge",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The best hint for this problem can be provided by the following figure:\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_find_celebrity.png\" width=\"700\"/>",
        "Well, if you understood the gist of the above idea, you can extend it to find a candidate that can possibly be a celebrity. Why do we say a \"candidate\"? That is for you to think. This is clearly a greedy approach to find the answer. However, there is some information that would still remain to be verified without which we can't obtain an answer with certainty. To get that stake in the ground, we would need some more calls to the knows API."
      ],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Interactive", "slug": "interactive" }
      ]
    }
  },
  "first-bad-version": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "278",
        "title": "First Bad Version",
        "titleSlug": "first-bad-version",
        "content": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n\n<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n\n<p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, bad = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)&nbsp;-&gt; true\ncall isBadVersion(4)&nbsp;-&gt; true\nThen 4 is the first bad version.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, bad = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8162,
        "dislikes": 3230,
        "similarQuestions": "[{\"title\": \"Find First and Last Position of Element in Sorted Array\", \"titleSlug\": \"find-first-and-last-position-of-element-in-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Search Insert Position\", \"titleSlug\": \"search-insert-position\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower\", \"titleSlug\": \"guess-number-higher-or-lower\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Interactive", "slug": "interactive" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.6M\", \"totalAcceptedRaw\": 1603227, \"totalSubmissionRaw\": 3643509, \"acRate\": \"44.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
          "title": "Find First and Last Position of Element in Sorted Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "search-insert-position",
          "title": "Search Insert Position",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "guess-number-higher-or-lower",
          "title": "Guess Number Higher or Lower",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Interactive", "slug": "interactive" }
      ]
    }
  },
  "perfect-squares": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "279",
        "title": "Perfect Squares",
        "titleSlug": "perfect-squares",
        "content": "<p>Given an integer <code>n</code>, return <em>the least number of perfect square numbers that sum to</em> <code>n</code>.</p>\n\n<p>A <strong>perfect square</strong> is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, <code>1</code>, <code>4</code>, <code>9</code>, and <code>16</code> are perfect squares while <code>3</code> and <code>11</code> are not.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 12\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 12 = 4 + 4 + 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 13 = 4 + 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10265,
        "dislikes": 426,
        "similarQuestions": "[{\"title\": \"Count Primes\", \"titleSlug\": \"count-primes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ugly Number II\", \"titleSlug\": \"ugly-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ways to Express an Integer as Sum of Powers\", \"titleSlug\": \"ways-to-express-an-integer-as-sum-of-powers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"718K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 718019, \"totalSubmissionRaw\": 1352281, \"acRate\": \"53.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "count-primes",
          "title": "Count Primes",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ugly-number-ii",
          "title": "Ugly Number II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
          "title": "Ways to Express an Integer as Sum of Powers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "wiggle-sort": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "280",
        "title": "Wiggle Sort",
        "titleSlug": "wiggle-sort",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1183,
        "dislikes": 102,
        "similarQuestions": "[{\"title\": \"Sort Colors\", \"titleSlug\": \"sort-colors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Wiggle Sort II\", \"titleSlug\": \"wiggle-sort-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array With Elements Not Equal to Average of Neighbors\", \"titleSlug\": \"array-with-elements-not-equal-to-average-of-neighbors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"137.8K\", \"totalSubmission\": \"204.1K\", \"totalAcceptedRaw\": 137783, \"totalSubmissionRaw\": 204101, \"acRate\": \"67.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "sort-colors",
          "title": "Sort Colors",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "wiggle-sort-ii",
          "title": "Wiggle Sort II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "array-with-elements-not-equal-to-average-of-neighbors",
          "title": "Array With Elements Not Equal to Average of Neighbors",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "zigzag-iterator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "281",
        "title": "Zigzag Iterator",
        "titleSlug": "zigzag-iterator",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 658,
        "dislikes": 36,
        "similarQuestions": "[{\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Peeking Iterator\", \"titleSlug\": \"peeking-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten Nested List Iterator\", \"titleSlug\": \"flatten-nested-list-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Merge Strings Alternately\", \"titleSlug\": \"merge-strings-alternately\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" },
          { "name": "Iterator", "slug": "iterator" }
        ],
        "stats": "{\"totalAccepted\": \"90.6K\", \"totalSubmission\": \"142.7K\", \"totalAcceptedRaw\": 90591, \"totalSubmissionRaw\": 142731, \"acRate\": \"63.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-search-tree-iterator",
          "title": "Binary Search Tree Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-2d-vector",
          "title": "Flatten 2D Vector",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "peeking-iterator",
          "title": "Peeking Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-nested-list-iterator",
          "title": "Flatten Nested List Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "merge-strings-alternately",
          "title": "Merge Strings Alternately",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" },
        { "name": "Iterator", "slug": "iterator" }
      ]
    }
  },
  "expression-add-operators": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "282",
        "title": "Expression Add Operators",
        "titleSlug": "expression-add-operators",
        "content": "<p>Given a string <code>num</code> that contains only digits and an integer <code>target</code>, return <em><strong>all possibilities</strong> to insert the binary operators </em><code>&#39;+&#39;</code><em>, </em><code>&#39;-&#39;</code><em>, and/or </em><code>&#39;*&#39;</code><em> between the digits of </em><code>num</code><em> so that the resultant expression evaluates to the </em><code>target</code><em> value</em>.</p>\n\n<p>Note that operands in the returned expressions <strong>should not</strong> contain leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;123&quot;, target = 6\n<strong>Output:</strong> [&quot;1*2*3&quot;,&quot;1+2+3&quot;]\n<strong>Explanation:</strong> Both &quot;1*2*3&quot; and &quot;1+2+3&quot; evaluate to 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;232&quot;, target = 8\n<strong>Output:</strong> [&quot;2*3+2&quot;,&quot;2+3*2&quot;]\n<strong>Explanation:</strong> Both &quot;2*3+2&quot; and &quot;2+3*2&quot; evaluate to 8.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;3456237490&quot;, target = 9191\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no expressions that can be created from &quot;3456237490&quot; to evaluate to 9191.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10</code></li>\n\t<li><code>num</code> consists of only digits.</li>\n\t<li><code>-2<sup>31</sup> &lt;= target &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3247,
        "dislikes": 584,
        "similarQuestions": "[{\"title\": \"Evaluate Reverse Polish Notation\", \"titleSlug\": \"evaluate-reverse-polish-notation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator II\", \"titleSlug\": \"basic-calculator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Target Sum\", \"titleSlug\": \"target-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"213K\", \"totalSubmission\": \"538.6K\", \"totalAcceptedRaw\": 213003, \"totalSubmissionRaw\": 538604, \"acRate\": \"39.5%\"}",
        "hints": [
          "Note that a number can contain multiple digits.",
          "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
          "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
          "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
          "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "evaluate-reverse-polish-notation",
          "title": "Evaluate Reverse Polish Notation",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator",
          "title": "Basic Calculator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "basic-calculator-ii",
          "title": "Basic Calculator II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "different-ways-to-add-parentheses",
          "title": "Different Ways to Add Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "target-sum",
          "title": "Target Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Note that a number can contain multiple digits.",
        "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
        "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
        "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
        "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "move-zeroes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "283",
        "title": "Move Zeroes",
        "titleSlug": "move-zeroes",
        "content": "<p>Given an integer array <code>nums</code>, move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\n\n<p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1,0,3,12]\n<strong>Output:</strong> [1,3,12,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you minimize the total number of operations done?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 15894,
        "dislikes": 411,
        "similarQuestions": "[{\"title\": \"Remove Element\", \"titleSlug\": \"remove-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Apply Operations to an Array\", \"titleSlug\": \"apply-operations-to-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"2.7M\", \"totalSubmission\": \"4.3M\", \"totalAcceptedRaw\": 2658324, \"totalSubmissionRaw\": 4322839, \"acRate\": \"61.5%\"}",
        "hints": [
          "<b>In-place</b> means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.",
          "A <b>two-pointer</b> approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "remove-element",
          "title": "Remove Element",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "apply-operations-to-an-array",
          "title": "Apply Operations to an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "<b>In-place</b> means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.",
        "A <b>two-pointer</b> approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "peeking-iterator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "284",
        "title": "Peeking Iterator",
        "titleSlug": "peeking-iterator",
        "content": "<p>Design an iterator that supports the <code>peek</code> operation on an existing iterator in addition to the <code>hasNext</code> and the <code>next</code> operations.</p>\n\n<p>Implement the <code>PeekingIterator</code> class:</p>\n\n<ul>\n\t<li><code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the object with the given integer iterator <code>iterator</code>.</li>\n\t<li><code>int next()</code> Returns the next element in the array and moves the pointer to the next element.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still elements in the array.</li>\n\t<li><code>int peek()</code> Returns the next element in the array <strong>without</strong> moving the pointer.</li>\n</ul>\n\n<p><strong>Note:</strong> Each language may have a different implementation of the constructor and <code>Iterator</code>, but they all support the <code>int next()</code> and <code>boolean hasNext()</code> functions.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;PeekingIterator&quot;, &quot;next&quot;, &quot;peek&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[[1, 2, 3]], [], [], [], [], []]\n<strong>Output</strong>\n[null, 1, 2, 2, 3, false]\n\n<strong>Explanation</strong>\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [<u><strong>1</strong></u>,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,<u><strong>2</strong></u>,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,<u><strong>2</strong></u>,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,<u><strong>3</strong></u>]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>All the calls to <code>next</code> and <code>peek</code> are valid.</li>\n\t<li>At most <code>1000</code> calls will be made to <code>next</code>, <code>hasNext</code>, and <code>peek</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> How would you extend your design to be generic and work with all types, not just integer?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1814,
        "dislikes": 1029,
        "similarQuestions": "[{\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Iterator", "slug": "iterator" }
        ],
        "stats": "{\"totalAccepted\": \"214.4K\", \"totalSubmission\": \"362.4K\", \"totalAcceptedRaw\": 214361, \"totalSubmissionRaw\": 362360, \"acRate\": \"59.2%\"}",
        "hints": [
          "Think of \"looking ahead\". You want to cache the next element.",
          "Is one variable sufficient? Why or why not?",
          "Test your design with call order of <code>peek()</code> before <code>next()</code> vs <code>next()</code> before <code>peek()</code>.",
          "For a clean implementation, check out <a href=\"https://github.com/google/guava/blob/703ef758b8621cfbab16814f01ddcc5324bdea33/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java#L1125\" target=\"_blank\">Google's guava library source code</a>."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-search-tree-iterator",
          "title": "Binary Search Tree Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-2d-vector",
          "title": "Flatten 2D Vector",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "zigzag-iterator",
          "title": "Zigzag Iterator",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Think of \"looking ahead\". You want to cache the next element.",
        "Is one variable sufficient? Why or why not?",
        "Test your design with call order of <code>peek()</code> before <code>next()</code> vs <code>next()</code> before <code>peek()</code>.",
        "For a clean implementation, check out <a href=\"https://github.com/google/guava/blob/703ef758b8621cfbab16814f01ddcc5324bdea33/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java#L1125\" target=\"_blank\">Google's guava library source code</a>."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Iterator", "slug": "iterator" }
      ]
    }
  },
  "inorder-successor-in-bst": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "285",
        "title": "Inorder Successor in BST",
        "titleSlug": "inorder-successor-in-bst",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2509,
        "dislikes": 89,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Inorder Successor in BST II\", \"titleSlug\": \"inorder-successor-in-bst-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"316.5K\", \"totalSubmission\": \"642K\", \"totalAcceptedRaw\": 316503, \"totalSubmissionRaw\": 641974, \"acRate\": \"49.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-search-tree-iterator",
          "title": "Binary Search Tree Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "inorder-successor-in-bst-ii",
          "title": "Inorder Successor in BST II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "walls-and-gates": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "286",
        "title": "Walls and Gates",
        "titleSlug": "walls-and-gates",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 3028,
        "dislikes": 54,
        "similarQuestions": "[{\"title\": \"Surrounded Regions\", \"titleSlug\": \"surrounded-regions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Distance from All Buildings\", \"titleSlug\": \"shortest-distance-from-all-buildings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Robot Room Cleaner\", \"titleSlug\": \"robot-room-cleaner\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Rotting Oranges\", \"titleSlug\": \"rotting-oranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"294.2K\", \"totalSubmission\": \"482.4K\", \"totalAcceptedRaw\": 294222, \"totalSubmissionRaw\": 482384, \"acRate\": \"61.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "surrounded-regions",
          "title": "Surrounded Regions",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-islands",
          "title": "Number of Islands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "shortest-distance-from-all-buildings",
          "title": "Shortest Distance from All Buildings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "robot-room-cleaner",
          "title": "Robot Room Cleaner",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "rotting-oranges",
          "title": "Rotting Oranges",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "find-the-duplicate-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "287",
        "title": "Find the Duplicate Number",
        "titleSlug": "find-the-duplicate-number",
        "content": "<p>Given an array of integers <code>nums</code> containing&nbsp;<code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p>\n\n<p>There is only <strong>one repeated number</strong> in <code>nums</code>, return <em>this&nbsp;repeated&nbsp;number</em>.</p>\n\n<p>You must solve the problem <strong>without</strong> modifying the array <code>nums</code>&nbsp;and uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,4,2,2]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,3,4,2]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums.length == n + 1</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n\t<li>All the integers in <code>nums</code> appear only <strong>once</strong> except for <strong>precisely one integer</strong> which appears <strong>two or more</strong> times.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b></p>\n\n<ul>\n\t<li>How can we prove that at least one duplicate number must exist in <code>nums</code>?</li>\n\t<li>Can you solve the problem in linear runtime complexity?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 22054,
        "dislikes": 3925,
        "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Linked List Cycle II\", \"titleSlug\": \"linked-list-cycle-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Set Mismatch\", \"titleSlug\": \"set-mismatch\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1472624, \"totalSubmissionRaw\": 2480224, \"acRate\": \"59.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "first-missing-positive",
          "title": "First Missing Positive",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "single-number",
          "title": "Single Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "linked-list-cycle-ii",
          "title": "Linked List Cycle II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "missing-number",
          "title": "Missing Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "set-mismatch",
          "title": "Set Mismatch",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "unique-word-abbreviation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "288",
        "title": "Unique Word Abbreviation",
        "titleSlug": "unique-word-abbreviation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 198,
        "dislikes": 1802,
        "similarQuestions": "[{\"title\": \"Two Sum III - Data structure design\", \"titleSlug\": \"two-sum-iii-data-structure-design\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Generalized Abbreviation\", \"titleSlug\": \"generalized-abbreviation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" }
        ],
        "stats": "{\"totalAccepted\": \"71.7K\", \"totalSubmission\": \"275.7K\", \"totalAcceptedRaw\": 71655, \"totalSubmissionRaw\": 275695, \"acRate\": \"26.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-iii-data-structure-design",
          "title": "Two Sum III - Data structure design",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "generalized-abbreviation",
          "title": "Generalized Abbreviation",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" }
      ]
    }
  },
  "game-of-life": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "289",
        "title": "Game of Life",
        "titleSlug": "game-of-life",
        "content": "<p>According to&nbsp;<a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia&#39;s article</a>: &quot;The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>\n\n<p>The board is made up of an <code>m x n</code> grid of cells, where each cell has an initial state: <b>live</b> (represented by a <code>1</code>) or <b>dead</b> (represented by a <code>0</code>). Each cell interacts with its <a href=\"https://en.wikipedia.org/wiki/Moore_neighborhood\" target=\"_blank\">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>\n\n<ol>\n\t<li>Any live cell with fewer than two live neighbors dies as if caused by under-population.</li>\n\t<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n\t<li>Any live cell with more than three live neighbors dies, as if by over-population.</li>\n\t<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\n</ol>\n\n<p><span>The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the <code>m x n</code> grid <code>board</code>, return <em>the next state</em>.</span></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg\" style=\"width: 562px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n<strong>Output:</strong> [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg\" style=\"width: 402px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,1],[1,0]]\n<strong>Output:</strong> [[1,1],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 25</code></li>\n\t<li><code>board[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.</li>\n\t<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6152,
        "dislikes": 522,
        "similarQuestions": "[{\"title\": \"Set Matrix Zeroes\", \"titleSlug\": \"set-matrix-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"436.8K\", \"totalSubmission\": \"637.7K\", \"totalAcceptedRaw\": 436843, \"totalSubmissionRaw\": 637668, \"acRate\": \"68.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "set-matrix-zeroes",
          "title": "Set Matrix Zeroes",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "word-pattern": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "290",
        "title": "Word Pattern",
        "titleSlug": "word-pattern",
        "content": "<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6959,
        "dislikes": 911,
        "similarQuestions": "[{\"title\": \"Isomorphic Strings\", \"titleSlug\": \"isomorphic-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Word Pattern II\", \"titleSlug\": \"word-pattern-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"630.1K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 630105, \"totalSubmissionRaw\": 1507484, \"acRate\": \"41.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "isomorphic-strings",
          "title": "Isomorphic Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "word-pattern-ii",
          "title": "Word Pattern II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "word-pattern-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "291",
        "title": "Word Pattern II",
        "titleSlug": "word-pattern-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 870,
        "dislikes": 67,
        "similarQuestions": "[{\"title\": \"Word Pattern\", \"titleSlug\": \"word-pattern\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"70.5K\", \"totalSubmission\": \"148.6K\", \"totalAcceptedRaw\": 70454, \"totalSubmissionRaw\": 148623, \"acRate\": \"47.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "word-pattern",
          "title": "Word Pattern",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "nim-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "292",
        "title": "Nim Game",
        "titleSlug": "nim-game",
        "content": "<p>You are playing the following Nim Game with your friend:</p>\n\n<ul>\n\t<li>Initially, there is a heap of stones on the table.</li>\n\t<li>You and your friend will alternate taking turns, and <strong>you go first</strong>.</li>\n\t<li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li>\n\t<li>The one who removes the last stone is the winner.</li>\n</ul>\n\n<p>Given <code>n</code>, the number of stones in the heap, return <code>true</code><em> if you can win the game assuming both you and your friend play optimally, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> false\n<strong>Explanation:</strong> These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1625,
        "dislikes": 2659,
        "similarQuestions": "[{\"title\": \"Flip Game II\", \"titleSlug\": \"flip-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Brainteaser", "slug": "brainteaser" },
          { "name": "Game Theory", "slug": "game-theory" }
        ],
        "stats": "{\"totalAccepted\": \"353.9K\", \"totalSubmission\": \"626.3K\", \"totalAcceptedRaw\": 353910, \"totalSubmissionRaw\": 626305, \"acRate\": \"56.5%\"}",
        "hints": [
          "If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flip-game-ii",
          "title": "Flip Game II",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Brainteaser", "slug": "brainteaser" },
        { "name": "Game Theory", "slug": "game-theory" }
      ]
    }
  },
  "flip-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "293",
        "title": "Flip Game",
        "titleSlug": "flip-game",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 205,
        "dislikes": 433,
        "similarQuestions": "[{\"title\": \"Flip Game II\", \"titleSlug\": \"flip-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"66.2K\", \"totalSubmission\": \"104K\", \"totalAcceptedRaw\": 66152, \"totalSubmissionRaw\": 104011, \"acRate\": \"63.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flip-game-ii",
          "title": "Flip Game II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "flip-game-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "294",
        "title": "Flip Game II",
        "titleSlug": "flip-game-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 608,
        "dislikes": 62,
        "similarQuestions": "[{\"title\": \"Nim Game\", \"titleSlug\": \"nim-game\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Flip Game\", \"titleSlug\": \"flip-game\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Memoization", "slug": "memoization" },
          { "name": "Game Theory", "slug": "game-theory" }
        ],
        "stats": "{\"totalAccepted\": \"69.6K\", \"totalSubmission\": \"133.7K\", \"totalAcceptedRaw\": 69611, \"totalSubmissionRaw\": 133718, \"acRate\": \"52.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "nim-game",
          "title": "Nim Game",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "flip-game",
          "title": "Flip Game",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "guess-number-higher-or-lower-ii",
          "title": "Guess Number Higher or Lower II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "can-i-win",
          "title": "Can I Win",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Memoization", "slug": "memoization" },
        { "name": "Game Theory", "slug": "game-theory" }
      ]
    }
  },
  "find-median-from-data-stream": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "295",
        "title": "Find Median from Data Stream",
        "titleSlug": "find-median-from-data-stream",
        "content": "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li>\n\t<li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li>\n</ul>\n\n<p>Implement the MedianFinder class:</p>\n\n<ul>\n\t<li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li>\n\t<li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li>\n\t<li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;]\n[[], [1], [2], [], [3], []]\n<strong>Output</strong>\n[null, null, null, 1.5, null, 2.0]\n\n<strong>Explanation</strong>\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n\t<li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 11430,
        "dislikes": 226,
        "similarQuestions": "[{\"title\": \"Sliding Window Median\", \"titleSlug\": \"sliding-window-median\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Finding MK Average\", \"titleSlug\": \"finding-mk-average\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sequentially Ordinal Rank Tracker\", \"titleSlug\": \"sequentially-ordinal-rank-tracker\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Design", "slug": "design" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Data Stream", "slug": "data-stream" }
        ],
        "stats": "{\"totalAccepted\": \"721.7K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 721679, \"totalSubmissionRaw\": 1396134, \"acRate\": \"51.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "sliding-window-median",
          "title": "Sliding Window Median",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "finding-mk-average",
          "title": "Finding MK Average",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sequentially-ordinal-rank-tracker",
          "title": "Sequentially Ordinal Rank Tracker",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Design", "slug": "design" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Data Stream", "slug": "data-stream" }
      ]
    }
  },
  "best-meeting-point": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "296",
        "title": "Best Meeting Point",
        "titleSlug": "best-meeting-point",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1150,
        "dislikes": 100,
        "similarQuestions": "[{\"title\": \"Shortest Distance from All Buildings\", \"titleSlug\": \"shortest-distance-from-all-buildings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Moves to Equal Array Elements II\", \"titleSlug\": \"minimum-moves-to-equal-array-elements-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"77.4K\", \"totalSubmission\": \"127.3K\", \"totalAcceptedRaw\": 77352, \"totalSubmissionRaw\": 127334, \"acRate\": \"60.7%\"}",
        "hints": [
          "Try to solve it in one dimension first. How can this solution apply to the two dimension case?"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "shortest-distance-from-all-buildings",
          "title": "Shortest Distance from All Buildings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-moves-to-equal-array-elements-ii",
          "title": "Minimum Moves to Equal Array Elements II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Try to solve it in one dimension first. How can this solution apply to the two dimension case?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "serialize-and-deserialize-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "297",
        "title": "Serialize and Deserialize Binary Tree",
        "titleSlug": "serialize-and-deserialize-binary-tree",
        "content": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-\" target=\"_blank\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 9770,
        "dislikes": 360,
        "similarQuestions": "[{\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize BST\", \"titleSlug\": \"serialize-and-deserialize-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize N-ary Tree\", \"titleSlug\": \"serialize-and-deserialize-n-ary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"815.9K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 815923, \"totalSubmissionRaw\": 1450644, \"acRate\": \"56.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "encode-and-decode-strings",
          "title": "Encode and Decode Strings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "serialize-and-deserialize-bst",
          "title": "Serialize and Deserialize BST",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-duplicate-subtrees",
          "title": "Find Duplicate Subtrees",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "serialize-and-deserialize-n-ary-tree",
          "title": "Serialize and Deserialize N-ary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "binary-tree-longest-consecutive-sequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "298",
        "title": "Binary Tree Longest Consecutive Sequence",
        "titleSlug": "binary-tree-longest-consecutive-sequence",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1111,
        "dislikes": 235,
        "similarQuestions": "[{\"title\": \"Longest Consecutive Sequence\", \"titleSlug\": \"longest-consecutive-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Longest Consecutive Sequence II\", \"titleSlug\": \"binary-tree-longest-consecutive-sequence-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if an Array Is Consecutive\", \"titleSlug\": \"check-if-an-array-is-consecutive\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"144.1K\", \"totalSubmission\": \"270.4K\", \"totalAcceptedRaw\": 144088, \"totalSubmissionRaw\": 270405, \"acRate\": \"53.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-consecutive-sequence",
          "title": "Longest Consecutive Sequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-longest-consecutive-sequence-ii",
          "title": "Binary Tree Longest Consecutive Sequence II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-an-array-is-consecutive",
          "title": "Check if an Array Is Consecutive",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "bulls-and-cows": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "299",
        "title": "Bulls and Cows",
        "titleSlug": "bulls-and-cows",
        "content": "<p>You are playing the <strong><a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\">Bulls and Cows</a></strong> game with your friend.</p>\n\n<p>You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:</p>\n\n<ul>\n\t<li>The number of &quot;bulls&quot;, which are digits in the guess that are in the correct position.</li>\n\t<li>The number of &quot;cows&quot;, which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</li>\n</ul>\n\n<p>Given the secret number <code>secret</code> and your friend&#39;s guess <code>guess</code>, return <em>the hint for your friend&#39;s guess</em>.</p>\n\n<p>The hint should be formatted as <code>&quot;xAyB&quot;</code>, where <code>x</code> is the number of bulls and <code>y</code> is the number of cows. Note that both <code>secret</code> and <code>guess</code> may contain duplicate digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;1807&quot;, guess = &quot;7810&quot;\n<strong>Output:</strong> &quot;1A3B&quot;\n<strong>Explanation:</strong> Bulls are connected with a &#39;|&#39; and cows are underlined:\n&quot;1807&quot;\n  |\n&quot;<u>7</u>8<u>10</u>&quot;</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;1123&quot;, guess = &quot;0111&quot;\n<strong>Output:</strong> &quot;1A1B&quot;\n<strong>Explanation:</strong> Bulls are connected with a &#39;|&#39; and cows are underlined:\n&quot;1123&quot;        &quot;1123&quot;\n  |      or     |\n&quot;01<u>1</u>1&quot;        &quot;011<u>1</u>&quot;\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= secret.length, guess.length &lt;= 1000</code></li>\n\t<li><code>secret.length == guess.length</code></li>\n\t<li><code>secret</code> and <code>guess</code> consist of digits only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2333,
        "dislikes": 1762,
        "similarQuestions": "[{\"title\": \"Make Number of Distinct Characters Equal\", \"titleSlug\": \"make-number-of-distinct-characters-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"361.5K\", \"totalSubmission\": \"723.6K\", \"totalAcceptedRaw\": 361532, \"totalSubmissionRaw\": 723609, \"acRate\": \"50.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "make-number-of-distinct-characters-equal",
          "title": "Make Number of Distinct Characters Equal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "longest-increasing-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "300",
        "title": "Longest Increasing Subsequence",
        "titleSlug": "longest-increasing-subsequence",
        "content": "<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword=\"subsequence-array\"><em><strong>subsequence</strong></em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 19334,
        "dislikes": 366,
        "similarQuestions": "[{\"title\": \"Increasing Triplet Subsequence\", \"titleSlug\": \"increasing-triplet-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Russian Doll Envelopes\", \"titleSlug\": \"russian-doll-envelopes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Length of Pair Chain\", \"titleSlug\": \"maximum-length-of-pair-chain\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Longest Increasing Subsequence\", \"titleSlug\": \"number-of-longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum ASCII Delete Sum for Two Strings\", \"titleSlug\": \"minimum-ascii-delete-sum-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find the Longest Valid Obstacle Course at Each Position\", \"titleSlug\": \"find-the-longest-valid-obstacle-course-at-each-position\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make the Array K-Increasing\", \"titleSlug\": \"minimum-operations-to-make-the-array-k-increasing\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Ideal Subsequence\", \"titleSlug\": \"longest-ideal-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Books You Can Take\", \"titleSlug\": \"maximum-number-of-books-you-can-take\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence II\", \"titleSlug\": \"longest-increasing-subsequence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"1.4M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1435394, \"totalSubmissionRaw\": 2668828, \"acRate\": \"53.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "increasing-triplet-subsequence",
          "title": "Increasing Triplet Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "russian-doll-envelopes",
          "title": "Russian Doll Envelopes",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-length-of-pair-chain",
          "title": "Maximum Length of Pair Chain",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-longest-increasing-subsequence",
          "title": "Number of Longest Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
          "title": "Minimum ASCII Delete Sum for Two Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
          "title": "Minimum Number of Removals to Make Mountain Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-the-longest-valid-obstacle-course-at-each-position",
          "title": "Find the Longest Valid Obstacle Course at Each Position",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-operations-to-make-the-array-k-increasing",
          "title": "Minimum Operations to Make the Array K-Increasing",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-ideal-subsequence",
          "title": "Longest Ideal Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-books-you-can-take",
          "title": "Maximum Number of Books You Can Take",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-increasing-subsequence-ii",
          "title": "Longest Increasing Subsequence II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "remove-invalid-parentheses": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "301",
        "title": "Remove Invalid Parentheses",
        "titleSlug": "remove-invalid-parentheses",
        "content": "<p>Given a string <code>s</code> that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.</p>\n\n<p>Return <em>a list of <strong>unique strings</strong> that are valid with the minimum number of removals</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()())()&quot;\n<strong>Output:</strong> [&quot;(())()&quot;,&quot;()()()&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(a)())()&quot;\n<strong>Output:</strong> [&quot;(a())()&quot;,&quot;(a)()()&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)(&quot;\n<strong>Output:</strong> [&quot;&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 25</code></li>\n\t<li><code>s</code> consists of lowercase English letters and parentheses <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</li>\n\t<li>There will be at most <code>20</code> parentheses in <code>s</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5730,
        "dislikes": 274,
        "similarQuestions": "[{\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Swaps to Make the String Balanced\", \"titleSlug\": \"minimum-number-of-swaps-to-make-the-string-balanced\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"408K\", \"totalSubmission\": \"855K\", \"totalAcceptedRaw\": 407998, \"totalSubmissionRaw\": 854958, \"acRate\": \"47.7%\"}",
        "hints": [
          "Since we do not know which brackets can be removed, we try all the options! We can use recursion.",
          "In the recursion, for each bracket, we can either use it or remove it.",
          "Recursion will generate all the valid parentheses strings but we want the ones with the least number of parentheses deleted.",
          "We can count the number of invalid brackets to be deleted and only generate the valid strings in the recusrion."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-parentheses",
          "title": "Valid Parentheses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-number-of-swaps-to-make-the-string-balanced",
          "title": "Minimum Number of Swaps to Make the String Balanced",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Since we do not know which brackets can be removed, we try all the options! We can use recursion.",
        "In the recursion, for each bracket, we can either use it or remove it.",
        "Recursion will generate all the valid parentheses strings but we want the ones with the least number of parentheses deleted.",
        "We can count the number of invalid brackets to be deleted and only generate the valid strings in the recusrion."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "smallest-rectangle-enclosing-black-pixels": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "302",
        "title": "Smallest Rectangle Enclosing Black Pixels",
        "titleSlug": "smallest-rectangle-enclosing-black-pixels",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 520,
        "dislikes": 99,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"49.1K\", \"totalSubmission\": \"83.5K\", \"totalAcceptedRaw\": 49060, \"totalSubmissionRaw\": 83472, \"acRate\": \"58.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "range-sum-query-immutable": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "303",
        "title": "Range Sum Query - Immutable",
        "titleSlug": "range-sum-query-immutable",
        "content": "<p>Given an integer array <code>nums</code>, handle multiple queries of the following type:</p>\n\n<ol>\n\t<li>Calculate the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> where <code>left &lt;= right</code>.</li>\n</ol>\n\n<p>Implement the <code>NumArray</code> class:</p>\n\n<ul>\n\t<li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li>\n\t<li><code>int sumRange(int left, int right)</code> Returns the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n<strong>Output</strong>\n[null, 1, -1, -3]\n\n<strong>Explanation</strong>\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRange</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3069,
        "dislikes": 1879,
        "similarQuestions": "[{\"title\": \"Range Sum Query 2D - Immutable\", \"titleSlug\": \"range-sum-query-2d-immutable\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Sum Query - Mutable\", \"titleSlug\": \"range-sum-query-mutable\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"492.7K\", \"totalSubmission\": \"793.8K\", \"totalAcceptedRaw\": 492747, \"totalSubmissionRaw\": 793776, \"acRate\": \"62.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "range-sum-query-2d-immutable",
          "title": "Range Sum Query 2D - Immutable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "range-sum-query-mutable",
          "title": "Range Sum Query - Mutable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-size-subarray-sum-equals-k",
          "title": "Maximum Size Subarray Sum Equals k",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "range-sum-query-2d-immutable": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "304",
        "title": "Range Sum Query 2D - Immutable",
        "titleSlug": "range-sum-query-2d-immutable",
        "content": "<p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following type:</p>\n\n<ul>\n\t<li>Calculate the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ul>\n\n<p>Implement the <code>NumMatrix</code> class:</p>\n\n<ul>\n\t<li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li>\n\t<li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ul>\n\n<p>You must design an algorithm where <code>sumRegion</code> works on <code>O(1)</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg\" style=\"width: 415px; height: 415px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;NumMatrix&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n<strong>Output</strong>\n[null, 8, 11, 12]\n\n<strong>Explanation</strong>\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li>\n\t<li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRegion</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4803,
        "dislikes": 335,
        "similarQuestions": "[{\"title\": \"Range Sum Query - Immutable\", \"titleSlug\": \"range-sum-query-immutable\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Range Sum Query 2D - Mutable\", \"titleSlug\": \"range-sum-query-2d-mutable\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"347.2K\", \"totalSubmission\": \"644K\", \"totalAcceptedRaw\": 347240, \"totalSubmissionRaw\": 643982, \"acRate\": \"53.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "range-sum-query-immutable",
          "title": "Range Sum Query - Immutable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "range-sum-query-2d-mutable",
          "title": "Range Sum Query 2D - Mutable",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "number-of-islands-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "305",
        "title": "Number of Islands II",
        "titleSlug": "number-of-islands-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1795,
        "dislikes": 63,
        "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Process Restricted Friend Requests\", \"titleSlug\": \"process-restricted-friend-requests\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Union Find", "slug": "union-find" }
        ],
        "stats": "{\"totalAccepted\": \"136.7K\", \"totalSubmission\": \"345.5K\", \"totalAcceptedRaw\": 136720, \"totalSubmissionRaw\": 345475, \"acRate\": \"39.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-islands",
          "title": "Number of Islands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "process-restricted-friend-requests",
          "title": "Process Restricted Friend Requests",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Union Find", "slug": "union-find" }
      ]
    }
  },
  "additive-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "306",
        "title": "Additive Number",
        "titleSlug": "additive-number",
        "content": "<p>An <strong>additive number</strong> is a string whose digits can form an <strong>additive sequence</strong>.</p>\n\n<p>A valid <strong>additive sequence</strong> should contain <strong>at least</strong> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p>\n\n<p>Given a string containing only digits, return <code>true</code> if it is an <strong>additive number</strong> or <code>false</code> otherwise.</p>\n\n<p><strong>Note:</strong> Numbers in the additive sequence <strong>cannot</strong> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> &quot;112358&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> &quot;199100199&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nThe additive sequence is: 1, 99, 100, 199.&nbsp;\n1 + 99 = 100, 99 + 100 = 199\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 35</code></li>\n\t<li><code>num</code> consists only of digits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> How would you handle overflow for very large input integers?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1110,
        "dislikes": 782,
        "similarQuestions": "[{\"title\": \"Split Array into Fibonacci Sequence\", \"titleSlug\": \"split-array-into-fibonacci-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"85.5K\", \"totalSubmission\": \"272.7K\", \"totalAcceptedRaw\": 85455, \"totalSubmissionRaw\": 272737, \"acRate\": \"31.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "split-array-into-fibonacci-sequence",
          "title": "Split Array into Fibonacci Sequence",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "range-sum-query-mutable": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "307",
        "title": "Range Sum Query - Mutable",
        "titleSlug": "range-sum-query-mutable",
        "content": "<p>Given an integer array <code>nums</code>, handle multiple queries of the following types:</p>\n\n<ol>\n\t<li><strong>Update</strong> the value of an element in <code>nums</code>.</li>\n\t<li>Calculate the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> where <code>left &lt;= right</code>.</li>\n</ol>\n\n<p>Implement the <code>NumArray</code> class:</p>\n\n<ul>\n\t<li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li>\n\t<li><code>void update(int index, int val)</code> <strong>Updates</strong> the value of <code>nums[index]</code> to be <code>val</code>.</li>\n\t<li><code>int sumRange(int left, int right)</code> Returns the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;update&quot;, &quot;sumRange&quot;]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n<strong>Output</strong>\n[null, 9, null, 8]\n\n<strong>Explanation</strong>\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= index &lt; nums.length</code></li>\n\t<li><code>-100 &lt;= val &lt;= 100</code></li>\n\t<li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>update</code> and <code>sumRange</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4614,
        "dislikes": 244,
        "similarQuestions": "[{\"title\": \"Range Sum Query - Immutable\", \"titleSlug\": \"range-sum-query-immutable\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Range Sum Query 2D - Mutable\", \"titleSlug\": \"range-sum-query-2d-mutable\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Shifting Letters II\", \"titleSlug\": \"shifting-letters-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" }
        ],
        "stats": "{\"totalAccepted\": \"260.8K\", \"totalSubmission\": \"639K\", \"totalAcceptedRaw\": 260768, \"totalSubmissionRaw\": 638951, \"acRate\": \"40.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "range-sum-query-immutable",
          "title": "Range Sum Query - Immutable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "range-sum-query-2d-mutable",
          "title": "Range Sum Query 2D - Mutable",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shifting-letters-ii",
          "title": "Shifting Letters II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" }
      ]
    }
  },
  "range-sum-query-2d-mutable": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "308",
        "title": "Range Sum Query 2D - Mutable",
        "titleSlug": "range-sum-query-2d-mutable",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 792,
        "dislikes": 92,
        "similarQuestions": "[{\"title\": \"Range Sum Query 2D - Immutable\", \"titleSlug\": \"range-sum-query-2d-immutable\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Sum Query - Mutable\", \"titleSlug\": \"range-sum-query-mutable\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Increment Submatrices by One\", \"titleSlug\": \"increment-submatrices-by-one\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Matrix After Queries\", \"titleSlug\": \"sum-of-matrix-after-queries\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"76.2K\", \"totalSubmission\": \"173.9K\", \"totalAcceptedRaw\": 76160, \"totalSubmissionRaw\": 173868, \"acRate\": \"43.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "range-sum-query-2d-immutable",
          "title": "Range Sum Query 2D - Immutable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "range-sum-query-mutable",
          "title": "Range Sum Query - Mutable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "increment-submatrices-by-one",
          "title": "Increment Submatrices by One",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-matrix-after-queries",
          "title": "Sum of Matrix After Queries",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "best-time-to-buy-and-sell-stock-with-cooldown": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "309",
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
        "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n\n<ul>\n\t<li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li>\n</ul>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,0,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy, sell]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9103,
        "dislikes": 304,
        "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock\", \"titleSlug\": \"best-time-to-buy-and-sell-stock\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Best Time to Buy and Sell Stock II\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"469.7K\", \"totalSubmission\": \"815.2K\", \"totalAcceptedRaw\": 469688, \"totalSubmissionRaw\": 815237, \"acRate\": \"57.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "best-time-to-buy-and-sell-stock",
          "title": "Best Time to Buy and Sell Stock",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-ii",
          "title": "Best Time to Buy and Sell Stock II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "minimum-height-trees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "310",
        "title": "Minimum Height Trees",
        "titleSlug": "minimum-height-trees",
        "content": "<p>A tree is an undirected graph in which any two vertices are connected by&nbsp;<i>exactly</i>&nbsp;one path. In other words, any connected graph without simple cycles is a tree.</p>\n\n<p>Given a tree of <code>n</code> nodes&nbsp;labelled from <code>0</code> to <code>n - 1</code>, and an array of&nbsp;<code>n - 1</code>&nbsp;<code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an undirected edge between the two nodes&nbsp;<code>a<sub>i</sub></code> and&nbsp;<code>b<sub>i</sub></code> in the tree,&nbsp;you can choose any node of the tree as the root. When you select a node <code>x</code> as the root, the result tree has height <code>h</code>. Among all possible rooted trees, those with minimum height (i.e. <code>min(h)</code>)&nbsp; are called <strong>minimum height trees</strong> (MHTs).</p>\n\n<p>Return <em>a list of all <strong>MHTs&#39;</strong> root labels</em>.&nbsp;You can return the answer in <strong>any order</strong>.</p>\n\n<p>The <strong>height</strong> of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e1.jpg\" style=\"width: 800px; height: 213px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,0],[1,2],[1,3]]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e2.jpg\" style=\"width: 800px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n<strong>Output:</strong> [3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>(a<sub>i</sub>, b<sub>i</sub>)</code> are distinct.</li>\n\t<li>The given input is <strong>guaranteed</strong> to be a tree and there will be <strong>no repeated</strong> edges.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7321,
        "dislikes": 309,
        "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Collect Coins in a Tree\", \"titleSlug\": \"collect-coins-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" }
        ],
        "stats": "{\"totalAccepted\": \"275.8K\", \"totalSubmission\": \"711.3K\", \"totalAcceptedRaw\": 275814, \"totalSubmissionRaw\": 711339, \"acRate\": \"38.8%\"}",
        "hints": ["How many MHTs can a graph have at most?"]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule",
          "title": "Course Schedule",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule-ii",
          "title": "Course Schedule II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "collect-coins-in-a-tree",
          "title": "Collect Coins in a Tree",
          "isPaidOnly": false
        }
      ],
      "hints": ["How many MHTs can a graph have at most?"],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" }
      ]
    }
  },
  "sparse-matrix-multiplication": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "311",
        "title": "Sparse Matrix Multiplication",
        "titleSlug": "sparse-matrix-multiplication",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1030,
        "dislikes": 351,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"184.5K\", \"totalSubmission\": \"271.8K\", \"totalAcceptedRaw\": 184542, \"totalSubmissionRaw\": 271814, \"acRate\": \"67.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "burst-balloons": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "312",
        "title": "Burst Balloons",
        "titleSlug": "burst-balloons",
        "content": "<p>You are given <code>n</code> balloons, indexed from <code>0</code> to <code>n - 1</code>. Each balloon is painted with a number on it represented by an array <code>nums</code>. You are asked to burst all the balloons.</p>\n\n<p>If you burst the <code>i<sup>th</sup></code> balloon, you will get <code>nums[i - 1] * nums[i] * nums[i + 1]</code> coins. If <code>i - 1</code> or <code>i + 1</code> goes out of bounds of the array, then treat it as if there is a balloon with a <code>1</code> painted on it.</p>\n\n<p>Return <em>the maximum coins you can collect by bursting the balloons wisely</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,5,8]\n<strong>Output:</strong> 167\n<strong>Explanation:</strong>\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5]\n<strong>Output:</strong> 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 8683,
        "dislikes": 224,
        "similarQuestions": "[{\"title\": \"Minimum Cost to Merge Stones\", \"titleSlug\": \"minimum-cost-to-merge-stones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"263K\", \"totalSubmission\": \"451K\", \"totalAcceptedRaw\": 263031, \"totalSubmissionRaw\": 450997, \"acRate\": \"58.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-cost-to-merge-stones",
          "title": "Minimum Cost to Merge Stones",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "super-ugly-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "313",
        "title": "Super Ugly Number",
        "titleSlug": "super-ugly-number",
        "content": "<p>A <strong>super ugly number</strong> is a positive integer whose prime factors are in the array <code>primes</code>.</p>\n\n<p>Given an integer <code>n</code> and an array of integers <code>primes</code>, return <em>the</em> <code>n<sup>th</sup></code> <em><strong>super ugly number</strong></em>.</p>\n\n<p>The <code>n<sup>th</sup></code> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 12, primes = [2,7,13,19]\n<strong>Output:</strong> 32\n<strong>Explanation:</strong> [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, primes = [2,3,5]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= primes.length &lt;= 100</code></li>\n\t<li><code>2 &lt;= primes[i] &lt;= 1000</code></li>\n\t<li><code>primes[i]</code> is <strong>guaranteed</strong> to be a prime number.</li>\n\t<li>All the values of <code>primes</code> are <strong>unique</strong> and sorted in <strong>ascending order</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2079,
        "dislikes": 375,
        "similarQuestions": "[{\"title\": \"Ugly Number II\", \"titleSlug\": \"ugly-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"123.9K\", \"totalSubmission\": \"273.8K\", \"totalAcceptedRaw\": 123936, \"totalSubmissionRaw\": 273780, \"acRate\": \"45.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "ugly-number-ii",
          "title": "Ugly Number II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "binary-tree-vertical-order-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "314",
        "title": "Binary Tree Vertical Order Traversal",
        "titleSlug": "binary-tree-vertical-order-traversal",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 3101,
        "dislikes": 306,
        "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"357.5K\", \"totalSubmission\": \"670.9K\", \"totalAcceptedRaw\": 357515, \"totalSubmissionRaw\": 670879, \"acRate\": \"53.3%\"}",
        "hints": [
          "Do BFS from the root. Let the root be at column 0. In the BFS, keep in the queue the node and its column.",
          "When you traverse a node, store its value in the column index. For example, the root's value should be stored at index 0.",
          "If the node has a left node, it column should be col - 1. Similarly, if the node has a right node, its column should be col + 1.",
          "At the end, check the minimum and maximum col and output their values."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal",
          "title": "Binary Tree Level Order Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Do BFS from the root. Let the root be at column 0. In the BFS, keep in the queue the node and its column.",
        "When you traverse a node, store its value in the column index. For example, the root's value should be stored at index 0.",
        "If the node has a left node, it column should be col - 1. Similarly, if the node has a right node, its column should be col + 1.",
        "At the end, check the minimum and maximum col and output their values."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "count-of-smaller-numbers-after-self": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "315",
        "title": "Count of Smaller Numbers After Self",
        "titleSlug": "count-of-smaller-numbers-after-self",
        "content": "<p>Given an integer array <code>nums</code>, return<em> an integer array </em><code>counts</code><em> where </em><code>counts[i]</code><em> is the number of smaller elements to the right of </em><code>nums[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,6,1]\n<strong>Output:</strong> [2,1,1,0]\n<strong>Explanation:</strong>\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\nTo the right of 2 there is only <b>1</b> smaller element (1).\nTo the right of 6 there is <b>1</b> smaller element (1).\nTo the right of 1 there is <b>0</b> smaller element.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-1]\n<strong>Output:</strong> [0,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 8631,
        "dislikes": 233,
        "similarQuestions": "[{\"title\": \"Count of Range Sum\", \"titleSlug\": \"count-of-range-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Queue Reconstruction by Height\", \"titleSlug\": \"queue-reconstruction-by-height\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reverse Pairs\", \"titleSlug\": \"reverse-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"How Many Numbers Are Smaller Than the Current Number\", \"titleSlug\": \"how-many-numbers-are-smaller-than-the-current-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count the Number of K-Big Indices\", \"titleSlug\": \"count-the-number-of-k-big-indices\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Merge Sort", "slug": "merge-sort" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"308.4K\", \"totalSubmission\": \"727.3K\", \"totalAcceptedRaw\": 308396, \"totalSubmissionRaw\": 727257, \"acRate\": \"42.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-of-range-sum",
          "title": "Count of Range Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "queue-reconstruction-by-height",
          "title": "Queue Reconstruction by Height",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "reverse-pairs",
          "title": "Reverse Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
          "title": "How Many Numbers Are Smaller Than the Current Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-good-triplets-in-an-array",
          "title": "Count Good Triplets in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-the-number-of-k-big-indices",
          "title": "Count the Number of K-Big Indices",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Merge Sort", "slug": "merge-sort" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "remove-duplicate-letters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "316",
        "title": "Remove Duplicate Letters",
        "titleSlug": "remove-duplicate-letters",
        "content": "<p>Given a string <code>s</code>, remove duplicate letters so that every letter appears once and only once. You must make sure your result is <span data-keyword=\"lexicographically-smaller-string\"><strong>the smallest in lexicographical order</strong></span> among all possible results.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcabc&quot;\n<strong>Output:</strong> &quot;abc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbacdcbc&quot;\n<strong>Output:</strong> &quot;acdb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1081: <a href=\"https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\" target=\"_blank\">https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8378,
        "dislikes": 593,
        "similarQuestions": "[{\"title\": \"Smallest K-Length Subsequence With Occurrences of a Letter\", \"titleSlug\": \"smallest-k-length-subsequence-with-occurrences-of-a-letter\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"313.3K\", \"totalSubmission\": \"637.9K\", \"totalAcceptedRaw\": 313273, \"totalSubmissionRaw\": 637872, \"acRate\": \"49.1%\"}",
        "hints": [
          "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
          "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "shortest-distance-from-all-buildings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "317",
        "title": "Shortest Distance from All Buildings",
        "titleSlug": "shortest-distance-from-all-buildings",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1823,
        "dislikes": 267,
        "similarQuestions": "[{\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Best Meeting Point\", \"titleSlug\": \"best-meeting-point\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"As Far from Land as Possible\", \"titleSlug\": \"as-far-from-land-as-possible\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"163.4K\", \"totalSubmission\": \"381.6K\", \"totalAcceptedRaw\": 163427, \"totalSubmissionRaw\": 381609, \"acRate\": \"42.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "walls-and-gates",
          "title": "Walls and Gates",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "best-meeting-point",
          "title": "Best Meeting Point",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "as-far-from-land-as-possible",
          "title": "As Far from Land as Possible",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "maximum-product-of-word-lengths": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "318",
        "title": "Maximum Product of Word Lengths",
        "titleSlug": "maximum-product-of-word-lengths",
        "content": "<p>Given a string array <code>words</code>, return <em>the maximum value of</em> <code>length(word[i]) * length(word[j])</code> <em>where the two words do not share common letters</em>. If no such two words exist, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The two words can be &quot;abcw&quot;, &quot;xtfn&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The two words can be &quot;ab&quot;, &quot;cd&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No such pair of words.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3438,
        "dislikes": 138,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"210.7K\", \"totalSubmission\": \"352.2K\", \"totalAcceptedRaw\": 210747, \"totalSubmissionRaw\": 352153, \"acRate\": \"59.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "bulb-switcher": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "319",
        "title": "Bulb Switcher",
        "titleSlug": "bulb-switcher",
        "content": "<p>There are <code>n</code> bulbs that are initially off. You first turn on all the bulbs, then&nbsp;you turn off every second bulb.</p>\n\n<p>On the third round, you toggle every third bulb (turning on if it&#39;s off or turning off if it&#39;s on). For the <code>i<sup>th</sup></code> round, you toggle every <code>i</code> bulb. For the <code>n<sup>th</sup></code> round, you only toggle the last bulb.</p>\n\n<p>Return <em>the number of bulbs that are on after <code>n</code> rounds</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg\" style=\"width: 421px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2541,
        "dislikes": 3053,
        "similarQuestions": "[{\"title\": \"Bulb Switcher II\", \"titleSlug\": \"bulb-switcher-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of K Consecutive Bit Flips\", \"titleSlug\": \"minimum-number-of-k-consecutive-bit-flips\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Times Binary String Is Prefix-Aligned\", \"titleSlug\": \"number-of-times-binary-string-is-prefix-aligned\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Pivot Integer\", \"titleSlug\": \"find-the-pivot-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Brainteaser", "slug": "brainteaser" }
        ],
        "stats": "{\"totalAccepted\": \"208.2K\", \"totalSubmission\": \"396.1K\", \"totalAcceptedRaw\": 208160, \"totalSubmissionRaw\": 396079, \"acRate\": \"52.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "bulb-switcher-ii",
          "title": "Bulb Switcher II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-k-consecutive-bit-flips",
          "title": "Minimum Number of K Consecutive Bit Flips",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-times-binary-string-is-prefix-aligned",
          "title": "Number of Times Binary String Is Prefix-Aligned",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-pivot-integer",
          "title": "Find the Pivot Integer",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Brainteaser", "slug": "brainteaser" }
      ]
    }
  },
  "generalized-abbreviation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "320",
        "title": "Generalized Abbreviation",
        "titleSlug": "generalized-abbreviation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 675,
        "dislikes": 225,
        "similarQuestions": "[{\"title\": \"Subsets\", \"titleSlug\": \"subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Unique Word Abbreviation\", \"titleSlug\": \"unique-word-abbreviation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Unique Word Abbreviation\", \"titleSlug\": \"minimum-unique-word-abbreviation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"67.1K\", \"totalSubmission\": \"115.4K\", \"totalAcceptedRaw\": 67108, \"totalSubmissionRaw\": 115409, \"acRate\": \"58.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "subsets",
          "title": "Subsets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "unique-word-abbreviation",
          "title": "Unique Word Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-unique-word-abbreviation",
          "title": "Minimum Unique Word Abbreviation",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "create-maximum-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "321",
        "title": "Create Maximum Number",
        "titleSlug": "create-maximum-number",
        "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>m</code> and <code>n</code> respectively. <code>nums1</code> and <code>nums2</code> represent the digits of two numbers. You are also given an integer <code>k</code>.</p>\n\n<p>Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two numbers. The relative order of the digits from the same array must be preserved.</p>\n\n<p>Return an array of the <code>k</code> digits representing the answer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\n<strong>Output:</strong> [9,8,6,5,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [6,7], nums2 = [6,0,4], k = 5\n<strong>Output:</strong> [6,7,6,0,4]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,9], nums2 = [8,9], k = 3\n<strong>Output:</strong> [9,8,9]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == nums1.length</code></li>\n\t<li><code>n == nums2.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 9</code></li>\n\t<li><code>1 &lt;= k &lt;= m + n</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1845,
        "dislikes": 342,
        "similarQuestions": "[{\"title\": \"Remove K Digits\", \"titleSlug\": \"remove-k-digits\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Swap\", \"titleSlug\": \"maximum-swap\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"58K\", \"totalSubmission\": \"195.6K\", \"totalAcceptedRaw\": 57963, \"totalSubmissionRaw\": 195568, \"acRate\": \"29.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "remove-k-digits",
          "title": "Remove K Digits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-swap",
          "title": "Maximum Swap",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "coin-change": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "322",
        "title": "Coin Change",
        "titleSlug": "coin-change",
        "content": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>\n\n<p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>\n\n<p>You may assume that you have an infinite number of each kind of coin.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1,2,5], amount = 11\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 11 = 5 + 5 + 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [2], amount = 3\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> coins = [1], amount = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 18179,
        "dislikes": 424,
        "similarQuestions": "[{\"title\": \"Minimum Cost For Tickets\", \"titleSlug\": \"minimum-cost-for-tickets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Value of K Coins From Piles\", \"titleSlug\": \"maximum-value-of-k-coins-from-piles\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Convert Time\", \"titleSlug\": \"minimum-number-of-operations-to-convert-time\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count of Sub-Multisets With Bounded Sum\", \"titleSlug\": \"count-of-sub-multisets-with-bounded-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Length of the Longest Subsequence That Sums to Target\", \"titleSlug\": \"length-of-the-longest-subsequence-that-sums-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Coins to be Added\", \"titleSlug\": \"minimum-number-of-coins-to-be-added\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Expensive Item That Can Not Be Bought\", \"titleSlug\": \"most-expensive-item-that-can-not-be-bought\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.8M\", \"totalAcceptedRaw\": 1626145, \"totalSubmissionRaw\": 3754162, \"acRate\": \"43.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-for-tickets",
          "title": "Minimum Cost For Tickets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-value-of-k-coins-from-piles",
          "title": "Maximum Value of K Coins From Piles",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-number-of-operations-to-convert-time",
          "title": "Minimum Number of Operations to Convert Time",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-cost-to-split-an-array",
          "title": "Minimum Cost to Split an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-of-sub-multisets-with-bounded-sum",
          "title": "Count of Sub-Multisets With Bounded Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "length-of-the-longest-subsequence-that-sums-to-target",
          "title": "Length of the Longest Subsequence That Sums to Target",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-number-of-coins-to-be-added",
          "title": "Minimum Number of Coins to be Added",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "most-expensive-item-that-can-not-be-bought",
          "title": "Most Expensive Item That Can Not Be Bought",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "number-of-connected-components-in-an-undirected-graph": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "323",
        "title": "Number of Connected Components in an Undirected Graph",
        "titleSlug": "number-of-connected-components-in-an-undirected-graph",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2612,
        "dislikes": 99,
        "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Graph Valid Tree\", \"titleSlug\": \"graph-valid-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Provinces\", \"titleSlug\": \"number-of-provinces\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paths in Maze That Lead to Same Room\", \"titleSlug\": \"paths-in-maze-that-lead-to-same-room\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Complete Components\", \"titleSlug\": \"count-the-number-of-complete-components\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"373.1K\", \"totalSubmission\": \"596.2K\", \"totalAcceptedRaw\": 373053, \"totalSubmissionRaw\": 596203, \"acRate\": \"62.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-islands",
          "title": "Number of Islands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "graph-valid-tree",
          "title": "Graph Valid Tree",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-provinces",
          "title": "Number of Provinces",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paths-in-maze-that-lead-to-same-room",
          "title": "Paths in Maze That Lead to Same Room",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-the-number-of-complete-components",
          "title": "Count the Number of Complete Components",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "wiggle-sort-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "324",
        "title": "Wiggle Sort II",
        "titleSlug": "wiggle-sort-ii",
        "content": "<p>Given an integer array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.</p>\n\n<p>You may assume the input array always has a valid answer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,1,1,6,4]\n<strong>Output:</strong> [1,6,1,5,1,4]\n<strong>Explanation:</strong> [1,4,1,5,1,6] is also accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,2,3,1]\n<strong>Output:</strong> [2,3,1,3,1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 5000</code></li>\n\t<li>It is guaranteed that there will be an answer for the given input <code>nums</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow Up:</strong> Can you do it in <code>O(n)</code> time and/or <strong>in-place</strong> with <code>O(1)</code> extra space?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2978,
        "dislikes": 949,
        "similarQuestions": "[{\"title\": \"Sort Colors\", \"titleSlug\": \"sort-colors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Largest Element in an Array\", \"titleSlug\": \"kth-largest-element-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Wiggle Sort\", \"titleSlug\": \"wiggle-sort\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array With Elements Not Equal to Average of Neighbors\", \"titleSlug\": \"array-with-elements-not-equal-to-average-of-neighbors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Quickselect", "slug": "quickselect" }
        ],
        "stats": "{\"totalAccepted\": \"152.3K\", \"totalSubmission\": \"448.5K\", \"totalAcceptedRaw\": 152252, \"totalSubmissionRaw\": 448479, \"acRate\": \"33.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "sort-colors",
          "title": "Sort Colors",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "kth-largest-element-in-an-array",
          "title": "Kth Largest Element in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "wiggle-sort",
          "title": "Wiggle Sort",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "array-with-elements-not-equal-to-average-of-neighbors",
          "title": "Array With Elements Not Equal to Average of Neighbors",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Quickselect", "slug": "quickselect" }
      ]
    }
  },
  "maximum-size-subarray-sum-equals-k": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "325",
        "title": "Maximum Size Subarray Sum Equals k",
        "titleSlug": "maximum-size-subarray-sum-equals-k",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2002,
        "dislikes": 62,
        "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Sum Query - Immutable\", \"titleSlug\": \"range-sum-query-immutable\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Contiguous Array\", \"titleSlug\": \"contiguous-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Product Less Than K\", \"titleSlug\": \"subarray-product-less-than-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Beauty of an Array After Applying Operation\", \"titleSlug\": \"maximum-beauty-of-an-array-after-applying-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"179.5K\", \"totalSubmission\": \"363.3K\", \"totalAcceptedRaw\": 179463, \"totalSubmissionRaw\": 363276, \"acRate\": \"49.4%\"}",
        "hints": [
          "Compute the prefix sum array where psum[i] is the sum of all the elements from <i>0</i> to <i>i</i>.",
          "At each index <i>i</i>, the sum of the prefix is psum[i], so we are searching for the index x where psum[x] = psum[i] - k.\r\nThe subarray [x + 1, i] will be of sum k.",
          "Use a hashmap to get the index x efficiently or to determine that it does not exist."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-size-subarray-sum",
          "title": "Minimum Size Subarray Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "range-sum-query-immutable",
          "title": "Range Sum Query - Immutable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "contiguous-array",
          "title": "Contiguous Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-product-less-than-k",
          "title": "Subarray Product Less Than K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-beauty-of-an-array-after-applying-operation",
          "title": "Maximum Beauty of an Array After Applying Operation",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Compute the prefix sum array where psum[i] is the sum of all the elements from <i>0</i> to <i>i</i>.",
        "At each index <i>i</i>, the sum of the prefix is psum[i], so we are searching for the index x where psum[x] = psum[i] - k.\r\nThe subarray [x + 1, i] will be of sum k.",
        "Use a hashmap to get the index x efficiently or to determine that it does not exist."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "power-of-three": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "326",
        "title": "Power of Three",
        "titleSlug": "power-of-three",
        "content": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of three. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 27\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 27 = 3<sup>3</sup>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no x where 3<sup>x</sup> = 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = -1\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no x where 3<sup>x</sup> = (-1).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2970,
        "dislikes": 272,
        "similarQuestions": "[{\"title\": \"Power of Two\", \"titleSlug\": \"power-of-two\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Power of Four\", \"titleSlug\": \"power-of-four\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check if Number is a Sum of Powers of Three\", \"titleSlug\": \"check-if-number-is-a-sum-of-powers-of-three\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"773.1K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 773075, \"totalSubmissionRaw\": 1675541, \"acRate\": \"46.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "power-of-two",
          "title": "Power of Two",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "power-of-four",
          "title": "Power of Four",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "check-if-number-is-a-sum-of-powers-of-three",
          "title": "Check if Number is a Sum of Powers of Three",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "count-of-range-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "327",
        "title": "Count of Range Sum",
        "titleSlug": "count-of-range-sum",
        "content": "<p>Given an integer array <code>nums</code> and two integers <code>lower</code> and <code>upper</code>, return <em>the number of range sums that lie in</em> <code>[lower, upper]</code> <em>inclusive</em>.</p>\n\n<p>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> inclusive, where <code>i &lt;= j</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,5,-1], lower = -2, upper = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0], lower = 0, upper = 0\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup></code></li>\n\t<li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2225,
        "dislikes": 227,
        "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Reverse Pairs\", \"titleSlug\": \"reverse-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Fair Pairs\", \"titleSlug\": \"count-the-number-of-fair-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Merge Sort", "slug": "merge-sort" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"73.3K\", \"totalSubmission\": \"205.2K\", \"totalAcceptedRaw\": 73274, \"totalSubmissionRaw\": 205180, \"acRate\": \"35.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-of-smaller-numbers-after-self",
          "title": "Count of Smaller Numbers After Self",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "reverse-pairs",
          "title": "Reverse Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-the-number-of-fair-pairs",
          "title": "Count the Number of Fair Pairs",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Merge Sort", "slug": "merge-sort" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "odd-even-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "328",
        "title": "Odd Even Linked List",
        "titleSlug": "odd-even-linked-list",
        "content": "<p>Given the <code>head</code> of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return <em>the reordered list</em>.</p>\n\n<p>The <strong>first</strong> node is considered <strong>odd</strong>, and the <strong>second</strong> node is <strong>even</strong>, and so on.</p>\n\n<p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p>\n\n<p>You must solve the problem&nbsp;in <code>O(1)</code>&nbsp;extra space complexity and <code>O(n)</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg\" style=\"width: 300px; height: 123px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [1,3,5,2,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg\" style=\"width: 500px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [2,1,3,5,6,4,7]\n<strong>Output:</strong> [2,3,6,7,1,5,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the linked list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>6</sup> &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9443,
        "dislikes": 496,
        "similarQuestions": "[{\"title\": \"Split Linked List in Parts\", \"titleSlug\": \"split-linked-list-in-parts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Linked List", "slug": "linked-list" }],
        "stats": "{\"totalAccepted\": \"832.4K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 832383, \"totalSubmissionRaw\": 1356320, \"acRate\": \"61.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "split-linked-list-in-parts",
          "title": "Split Linked List in Parts",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Linked List", "slug": "linked-list" }]
    }
  },
  "longest-increasing-path-in-a-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "329",
        "title": "Longest Increasing Path in a Matrix",
        "titleSlug": "longest-increasing-path-in-a-matrix",
        "content": "<p>Given an <code>m x n</code> integers <code>matrix</code>, return <em>the length of the longest increasing path in </em><code>matrix</code>.</p>\n\n<p>From each cell, you can either move in four directions: left, right, up, or down. You <strong>may not</strong> move <strong>diagonally</strong> or move <strong>outside the boundary</strong> (i.e., wrap-around is not allowed).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[9,9,4],[6,6,8],[2,1,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,4,5],[3,2,6],[2,2,1]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 8710,
        "dislikes": 128,
        "similarQuestions": "[{\"title\": \"Number of Increasing Paths in a Grid\", \"titleSlug\": \"number-of-increasing-paths-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" },
          { "name": "Memoization", "slug": "memoization" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"491.5K\", \"totalSubmission\": \"924.5K\", \"totalAcceptedRaw\": 491532, \"totalSubmissionRaw\": 924504, \"acRate\": \"53.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-increasing-paths-in-a-grid",
          "title": "Number of Increasing Paths in a Grid",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" },
        { "name": "Memoization", "slug": "memoization" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "patching-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "330",
        "title": "Patching Array",
        "titleSlug": "patching-array",
        "content": "<p>Given a sorted integer array <code>nums</code> and an integer <code>n</code>, add/patch elements to the array such that any number in the range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array.</p>\n\n<p>Return <em>the minimum number of patches required</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3], n = 6\n<strong>Output:</strong> 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,10], n = 20\n<strong>Output:</strong> 2\nExplanation: The two patches can be [2, 4].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2], n = 5\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1516,
        "dislikes": 130,
        "similarQuestions": "[{\"title\": \"Maximum Number of Consecutive Values You Can Make\", \"titleSlug\": \"maximum-number-of-consecutive-values-you-can-make\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"67.4K\", \"totalSubmission\": \"163.6K\", \"totalAcceptedRaw\": 67383, \"totalSubmissionRaw\": 163561, \"acRate\": \"41.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-consecutive-values-you-can-make",
          "title": "Maximum Number of Consecutive Values You Can Make",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "verify-preorder-serialization-of-a-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "331",
        "title": "Verify Preorder Serialization of a Binary Tree",
        "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
        "content": "<p>One way to serialize a binary tree is to use <strong>preorder traversal</strong>. When we encounter a non-null node, we record the node&#39;s value. If it is a null node, we record using a sentinel value such as <code>&#39;#&#39;</code>.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg\" style=\"width: 362px; height: 293px;\" />\n<p>For example, the above binary tree can be serialized to the string <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>, where <code>&#39;#&#39;</code> represents a null node.</p>\n\n<p>Given a string of comma-separated values <code>preorder</code>, return <code>true</code> if it is a correct preorder traversal serialization of a binary tree.</p>\n\n<p>It is <strong>guaranteed</strong> that each comma-separated value in the string must be either an integer or a character <code>&#39;#&#39;</code> representing null pointer.</p>\n\n<p>You may assume that the input format is always valid.</p>\n\n<ul>\n\t<li>For example, it could never contain two consecutive commas, such as <code>&quot;1,,3&quot;</code>.</li>\n</ul>\n\n<p><strong>Note:&nbsp;</strong>You are not allowed to reconstruct the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> preorder = \"1,#\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> preorder = \"9,#,#,1\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>preorder</code> consist of integers in the range <code>[0, 100]</code> and <code>&#39;#&#39;</code> separated by commas <code>&#39;,&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2243,
        "dislikes": 116,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"135.8K\", \"totalSubmission\": \"302.1K\", \"totalAcceptedRaw\": 135824, \"totalSubmissionRaw\": 302108, \"acRate\": \"45.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "reconstruct-itinerary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "332",
        "title": "Reconstruct Itinerary",
        "titleSlug": "reconstruct-itinerary",
        "content": "<p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p>\n\n<p>All of the tickets belong to a man who departs from <code>&quot;JFK&quot;</code>, thus, the itinerary must begin with <code>&quot;JFK&quot;</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p>\n\n<ul>\n\t<li>For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.</li>\n</ul>\n\n<p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg\" style=\"width: 382px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> tickets = [[&quot;MUC&quot;,&quot;LHR&quot;],[&quot;JFK&quot;,&quot;MUC&quot;],[&quot;SFO&quot;,&quot;SJC&quot;],[&quot;LHR&quot;,&quot;SFO&quot;]]\n<strong>Output:</strong> [&quot;JFK&quot;,&quot;MUC&quot;,&quot;LHR&quot;,&quot;SFO&quot;,&quot;SJC&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg\" style=\"width: 222px; height: 230px;\" />\n<pre>\n<strong>Input:</strong> tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]\n<strong>Output:</strong> [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]\n<strong>Explanation:</strong> Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;] but it is larger in lexical order.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tickets.length &lt;= 300</code></li>\n\t<li><code>tickets[i].length == 2</code></li>\n\t<li><code>from<sub>i</sub>.length == 3</code></li>\n\t<li><code>to<sub>i</sub>.length == 3</code></li>\n\t<li><code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> consist of uppercase English letters.</li>\n\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5713,
        "dislikes": 1836,
        "similarQuestions": "[{\"title\": \"Longest Common Subpath\", \"titleSlug\": \"longest-common-subpath\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Valid Arrangement of Pairs\", \"titleSlug\": \"valid-arrangement-of-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Eulerian Circuit", "slug": "eulerian-circuit" }
        ],
        "stats": "{\"totalAccepted\": \"407.2K\", \"totalSubmission\": \"939.4K\", \"totalAcceptedRaw\": 407200, \"totalSubmissionRaw\": 939377, \"acRate\": \"43.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "longest-common-subpath",
          "title": "Longest Common Subpath",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "valid-arrangement-of-pairs",
          "title": "Valid Arrangement of Pairs",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Eulerian Circuit", "slug": "eulerian-circuit" }
      ]
    }
  },
  "largest-bst-subtree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "333",
        "title": "Largest BST Subtree",
        "titleSlug": "largest-bst-subtree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1449,
        "dislikes": 119,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"102.6K\", \"totalSubmission\": \"236.3K\", \"totalAcceptedRaw\": 102640, \"totalSubmissionRaw\": 236349, \"acRate\": \"43.4%\"}",
        "hints": [
          "You can recursively use algorithm similar to <a href=\"https://leetcode.com/problems/validate-binary-search-tree/\">98. Validate Binary Search Tree</a> at each node of the tree, which will result in O(nlogn) time complexity."
        ]
      },
      "similar": [],
      "hints": [
        "You can recursively use algorithm similar to <a href=\"https://leetcode.com/problems/validate-binary-search-tree/\">98. Validate Binary Search Tree</a> at each node of the tree, which will result in O(nlogn) time complexity."
      ],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "increasing-triplet-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "334",
        "title": "Increasing Triplet Subsequence",
        "titleSlug": "increasing-triplet-subsequence",
        "content": "<p>Given an integer array <code>nums</code>, return <code>true</code><em> if there exists a triple of indices </em><code>(i, j, k)</code><em> such that </em><code>i &lt; j &lt; k</code><em> and </em><code>nums[i] &lt; nums[j] &lt; nums[k]</code>. If no such indices exists, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Any triplet where i &lt; j &lt; k is valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,3,2,1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No triplet exists.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,0,4,6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The triplet (3, 4, 5) is valid because nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you implement a solution that runs in <code>O(n)</code> time complexity and <code>O(1)</code> space complexity?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7677,
        "dislikes": 428,
        "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Special Quadruplets\", \"titleSlug\": \"count-special-quadruplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Increasing Quadruplets\", \"titleSlug\": \"count-increasing-quadruplets\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"491.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 491712, \"totalSubmissionRaw\": 1210511, \"acRate\": \"40.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-increasing-subsequence",
          "title": "Longest Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-special-quadruplets",
          "title": "Count Special Quadruplets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-good-triplets-in-an-array",
          "title": "Count Good Triplets in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-increasing-quadruplets",
          "title": "Count Increasing Quadruplets",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "self-crossing": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "335",
        "title": "Self Crossing",
        "titleSlug": "self-crossing",
        "content": "<p>You are given an array of integers <code>distance</code>.</p>\n\n<p>You start at the point <code>(0, 0)</code> on an <strong>X-Y plane,</strong> and you move <code>distance[0]</code> meters to the north, then <code>distance[1]</code> meters to the west, <code>distance[2]</code> meters to the south, <code>distance[3]</code> meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.</p>\n\n<p>Return <code>true</code> <em>if your path crosses itself or </em><code>false</code><em> if it does not</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/21/11.jpg\" style=\"width: 400px; height: 413px;\" />\n<pre>\n<strong>Input:</strong> distance = [2,1,1,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The path crosses itself at the point (0, 1).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/21/22.jpg\" style=\"width: 400px; height: 413px;\" />\n<pre>\n<strong>Input:</strong> distance = [1,2,3,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The path does not cross itself at any point.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/21/33.jpg\" style=\"width: 400px; height: 413px;\" />\n<pre>\n<strong>Input:</strong> distance = [1,1,1,2,1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The path crosses itself at the point (0, 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;distance.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;=&nbsp;distance[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 367,
        "dislikes": 500,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"32.3K\", \"totalSubmission\": \"108.3K\", \"totalAcceptedRaw\": 32313, \"totalSubmissionRaw\": 108300, \"acRate\": \"29.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "palindrome-pairs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "336",
        "title": "Palindrome Pairs",
        "titleSlug": "palindrome-pairs",
        "content": "<p>You are given a <strong>0-indexed</strong> array of <strong>unique</strong> strings <code>words</code>.</p>\n\n<p>A <strong>palindrome pair</strong> is a pair of integers <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j &lt; words.length</code>,</li>\n\t<li><code>i != j</code>, and</li>\n\t<li><code>words[i] + words[j]</code> (the concatenation of the two strings) is a <span data-keyword=\"palindrome-string\">palindrome</span>.</li>\n</ul>\n\n<p>Return <em>an array of all the <strong>palindrome pairs</strong> of </em><code>words</code>.</p>\n\n<p>You must write an algorithm with&nbsp;<code>O(sum of words[i].length)</code>&nbsp;runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]\n<strong>Output:</strong> [[0,1],[1,0],[3,2],[2,4]]\n<strong>Explanation:</strong> The palindromes are [&quot;abcddcba&quot;,&quot;dcbaabcd&quot;,&quot;slls&quot;,&quot;llssssll&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n<strong>Explanation:</strong> The palindromes are [&quot;battab&quot;,&quot;tabbat&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n<strong>Explanation:</strong> The palindromes are [&quot;a&quot;,&quot;a&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= words[i].length &lt;= 300</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4399,
        "dislikes": 452,
        "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Palindrome\", \"titleSlug\": \"shortest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Palindrome by Concatenating Two Letter Words\", \"titleSlug\": \"longest-palindrome-by-concatenating-two-letter-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Maximum Number of String Pairs\", \"titleSlug\": \"find-maximum-number-of-string-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"199.8K\", \"totalSubmission\": \"569.4K\", \"totalAcceptedRaw\": 199780, \"totalSubmissionRaw\": 569388, \"acRate\": \"35.1%\"}",
        "hints": [
          "Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.",
          "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?",
          "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-substring",
          "title": "Longest Palindromic Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "shortest-palindrome",
          "title": "Shortest Palindrome",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindrome-by-concatenating-two-letter-words",
          "title": "Longest Palindrome by Concatenating Two Letter Words",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-maximum-number-of-string-pairs",
          "title": "Find Maximum Number of String Pairs",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.",
        "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?",
        "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "house-robber-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "337",
        "title": "House Robber III",
        "titleSlug": "house-robber-iii",
        "content": "<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called <code>root</code>.</p>\n\n<p>Besides the <code>root</code>, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if <strong>two directly-linked houses were broken into on the same night</strong>.</p>\n\n<p>Given the <code>root</code> of the binary tree, return <em>the maximum amount of money the thief can rob <strong>without alerting the police</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg\" style=\"width: 277px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [3,2,3,null,3,null,1]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg\" style=\"width: 357px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [3,4,5,1,3,null,1]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Maximum amount of money the thief can rob = 4 + 5 = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8289,
        "dislikes": 136,
        "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber II\", \"titleSlug\": \"house-robber-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"363.3K\", \"totalSubmission\": \"671.4K\", \"totalAcceptedRaw\": 363310, \"totalSubmissionRaw\": 671379, \"acRate\": \"54.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-ii",
          "title": "House Robber II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "counting-bits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "338",
        "title": "Counting Bits",
        "titleSlug": "counting-bits",
        "content": "<p>Given an integer <code>n</code>, return <em>an array </em><code>ans</code><em> of length </em><code>n + 1</code><em> such that for each </em><code>i</code><em> </em>(<code>0 &lt;= i &lt;= n</code>)<em>, </em><code>ans[i]</code><em> is the <strong>number of </strong></em><code>1</code><em><strong>&#39;s</strong> in the binary representation of </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> [0,1,1]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> [0,1,1,2,1,2]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li>\n\t<li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 10740,
        "dislikes": 496,
        "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Values at Indices With K Set Bits\", \"titleSlug\": \"sum-of-values-at-indices-with-k-set-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the K-or of an Array\", \"titleSlug\": \"find-the-k-or-of-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"1M\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 1006183, \"totalSubmissionRaw\": 1293300, \"acRate\": \"77.8%\"}",
        "hints": [
          "You should make use of what you have produced already.",
          "Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.",
          "Or does the odd/even status of the number help you in calculating the number of 1s?"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-1-bits",
          "title": "Number of 1 Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sum-of-values-at-indices-with-k-set-bits",
          "title": "Sum of Values at Indices With K Set Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-k-or-of-an-array",
          "title": "Find the K-or of an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "You should make use of what you have produced already.",
        "Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.",
        "Or does the odd/even status of the number help you in calculating the number of 1s?"
      ],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "nested-list-weight-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "339",
        "title": "Nested List Weight Sum",
        "titleSlug": "nested-list-weight-sum",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1655,
        "dislikes": 382,
        "similarQuestions": "[{\"title\": \"Nested List Weight Sum II\", \"titleSlug\": \"nested-list-weight-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Nesting\", \"titleSlug\": \"array-nesting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Employee Importance\", \"titleSlug\": \"employee-importance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"245K\", \"totalSubmission\": \"295.8K\", \"totalAcceptedRaw\": 245009, \"totalSubmissionRaw\": 295802, \"acRate\": \"82.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "nested-list-weight-sum-ii",
          "title": "Nested List Weight Sum II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "array-nesting",
          "title": "Array Nesting",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "employee-importance",
          "title": "Employee Importance",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "longest-substring-with-at-most-k-distinct-characters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "340",
        "title": "Longest Substring with At Most K Distinct Characters",
        "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2771,
        "dislikes": 80,
        "similarQuestions": "[{\"title\": \"Longest Substring Without Repeating Characters\", \"titleSlug\": \"longest-substring-without-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Substring with At Most Two Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-two-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Repeating Character Replacement\", \"titleSlug\": \"longest-repeating-character-replacement\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarrays with K Different Integers\", \"titleSlug\": \"subarrays-with-k-different-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Max Consecutive Ones III\", \"titleSlug\": \"max-consecutive-ones-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximize the Confusion of an Exam\", \"titleSlug\": \"maximize-the-confusion-of-an-exam\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"330.3K\", \"totalSubmission\": \"681.4K\", \"totalAcceptedRaw\": 330269, \"totalSubmissionRaw\": 681395, \"acRate\": \"48.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-without-repeating-characters",
          "title": "Longest Substring Without Repeating Characters",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
          "title": "Longest Substring with At Most Two Distinct Characters",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-repeating-character-replacement",
          "title": "Longest Repeating Character Replacement",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "subarrays-with-k-different-integers",
          "title": "Subarrays with K Different Integers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "max-consecutive-ones-iii",
          "title": "Max Consecutive Ones III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximize-the-confusion-of-an-exam",
          "title": "Maximize the Confusion of an Exam",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "flatten-nested-list-iterator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "341",
        "title": "Flatten Nested List Iterator",
        "titleSlug": "flatten-nested-list-iterator",
        "content": "<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.</p>\n\n<p>Implement the <code>NestedIterator</code> class:</p>\n\n<ul>\n\t<li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> Initializes the iterator with the nested list <code>nestedList</code>.</li>\n\t<li><code>int next()</code> Returns the next integer in the nested list.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still some integers in the nested list and <code>false</code> otherwise.</li>\n</ul>\n\n<p>Your code will be tested with the following pseudocode:</p>\n\n<pre>\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n</pre>\n\n<p>If <code>res</code> matches the expected flattened list, then your code will be judged as correct.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [[1,1],2,[1,1]]\n<strong>Output:</strong> [1,1,2,1,1]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [1,[4,[6]]]\n<strong>Output:</strong> [1,4,6]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nestedList.length &lt;= 500</code></li>\n\t<li>The values of the integers in the nested list is in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4802,
        "dislikes": 1716,
        "similarQuestions": "[{\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Mini Parser\", \"titleSlug\": \"mini-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Nesting\", \"titleSlug\": \"array-nesting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" },
          { "name": "Iterator", "slug": "iterator" }
        ],
        "stats": "{\"totalAccepted\": \"432.2K\", \"totalSubmission\": \"672.9K\", \"totalAcceptedRaw\": 432216, \"totalSubmissionRaw\": 672940, \"acRate\": \"64.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-2d-vector",
          "title": "Flatten 2D Vector",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "zigzag-iterator",
          "title": "Zigzag Iterator",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "mini-parser",
          "title": "Mini Parser",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "array-nesting",
          "title": "Array Nesting",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" },
        { "name": "Iterator", "slug": "iterator" }
      ]
    }
  },
  "power-of-four": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "342",
        "title": "Power of Four",
        "titleSlug": "power-of-four",
        "content": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of four. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 16\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 5\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3787,
        "dislikes": 382,
        "similarQuestions": "[{\"title\": \"Power of Two\", \"titleSlug\": \"power-of-two\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Power of Three\", \"titleSlug\": \"power-of-three\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"613.5K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 613523, \"totalSubmissionRaw\": 1287646, \"acRate\": \"47.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "power-of-two",
          "title": "Power of Two",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "power-of-three",
          "title": "Power of Three",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "integer-break": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "343",
        "title": "Integer Break",
        "titleSlug": "integer-break",
        "content": "<p>Given an integer <code>n</code>, break it into the sum of <code>k</code> <strong>positive integers</strong>, where <code>k &gt;= 2</code>, and maximize the product of those integers.</p>\n\n<p>Return <em>the maximum product you can get</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 2 = 1 + 1, 1 &times; 1 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 36\n<strong>Explanation:</strong> 10 = 3 + 3 + 4, 3 &times; 3 &times; 4 = 36.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 58</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4973,
        "dislikes": 431,
        "similarQuestions": "[{\"title\": \"Maximize Number of Nice Divisors\", \"titleSlug\": \"maximize-number-of-nice-divisors\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"340.1K\", \"totalSubmission\": \"566.2K\", \"totalAcceptedRaw\": 340128, \"totalSubmissionRaw\": 566242, \"acRate\": \"60.1%\"}",
        "hints": [
          "There is a simple O(n) solution to this problem.",
          "You may check the breaking results of <i>n</i> ranging from 7 to 10 to discover the regularities."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximize-number-of-nice-divisors",
          "title": "Maximize Number of Nice Divisors",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "There is a simple O(n) solution to this problem.",
        "You may check the breaking results of <i>n</i> ranging from 7 to 10 to discover the regularities."
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "reverse-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "344",
        "title": "Reverse String",
        "titleSlug": "reverse-string",
        "content": "<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p>\n\n<p>You must do this by modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a> with <code>O(1)</code> extra memory.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n<strong>Output:</strong> [\"o\",\"l\",\"l\",\"e\",\"h\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n<strong>Output:</strong> [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is a <a href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\" target=\"_blank\">printable ascii character</a>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8119,
        "dislikes": 1142,
        "similarQuestions": "[{\"title\": \"Reverse Vowels of a String\", \"titleSlug\": \"reverse-vowels-of-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Reverse String II\", \"titleSlug\": \"reverse-string-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"2.3M\", \"totalSubmission\": \"3M\", \"totalAcceptedRaw\": 2346937, \"totalSubmissionRaw\": 3031070, \"acRate\": \"77.4%\"}",
        "hints": [
          "The entire logic for reversing a string is based on using the opposite directional two-pointer approach!"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-vowels-of-a-string",
          "title": "Reverse Vowels of a String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-string-ii",
          "title": "Reverse String II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The entire logic for reversing a string is based on using the opposite directional two-pointer approach!"
      ],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "reverse-vowels-of-a-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "345",
        "title": "Reverse Vowels of a String",
        "titleSlug": "reverse-vowels-of-a-string",
        "content": "<p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p>\n\n<p>The vowels are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>, and they can appear in both lower and upper cases, more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"hello\"\n<strong>Output:</strong> \"holle\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"leetcode\"\n<strong>Output:</strong> \"leotcede\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist of <strong>printable ASCII</strong> characters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4258,
        "dislikes": 2723,
        "similarQuestions": "[{\"title\": \"Reverse String\", \"titleSlug\": \"reverse-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Remove Vowels from a String\", \"titleSlug\": \"remove-vowels-from-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Faulty Keyboard\", \"titleSlug\": \"faulty-keyboard\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sort Vowels in a String\", \"titleSlug\": \"sort-vowels-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"703.9K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 703869, \"totalSubmissionRaw\": 1352340, \"acRate\": \"52.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-string",
          "title": "Reverse String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "remove-vowels-from-a-string",
          "title": "Remove Vowels from a String",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "faulty-keyboard",
          "title": "Faulty Keyboard",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-vowels-in-a-string",
          "title": "Sort Vowels in a String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "moving-average-from-data-stream": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "346",
        "title": "Moving Average from Data Stream",
        "titleSlug": "moving-average-from-data-stream",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1601,
        "dislikes": 159,
        "similarQuestions": "[{\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" },
          { "name": "Data Stream", "slug": "data-stream" }
        ],
        "stats": "{\"totalAccepted\": \"343.4K\", \"totalSubmission\": \"441.8K\", \"totalAcceptedRaw\": 343355, \"totalSubmissionRaw\": 441801, \"acRate\": \"77.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "k-radius-subarray-averages",
          "title": "K Radius Subarray Averages",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" },
        { "name": "Data Stream", "slug": "data-stream" }
      ]
    }
  },
  "top-k-frequent-elements": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "347",
        "title": "Top K Frequent Elements",
        "titleSlug": "top-k-frequent-elements",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2\n<strong>Output:</strong> [1,2]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Your algorithm&#39;s time complexity must be better than <code>O(n log n)</code>, where n is the array&#39;s size.</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 16518,
        "dislikes": 610,
        "similarQuestions": "[{\"title\": \"Word Frequency\", \"titleSlug\": \"word-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Largest Element in an Array\", \"titleSlug\": \"kth-largest-element-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Characters By Frequency\", \"titleSlug\": \"sort-characters-by-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Array into Consecutive Subsequences\", \"titleSlug\": \"split-array-into-consecutive-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Top K Frequent Words\", \"titleSlug\": \"top-k-frequent-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Features by Popularity\", \"titleSlug\": \"sort-features-by-popularity\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sender With Largest Word Count\", \"titleSlug\": \"sender-with-largest-word-count\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Even Element\", \"titleSlug\": \"most-frequent-even-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Bucket Sort", "slug": "bucket-sort" },
          { "name": "Counting", "slug": "counting" },
          { "name": "Quickselect", "slug": "quickselect" }
        ],
        "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"3M\", \"totalAcceptedRaw\": 1854033, \"totalSubmissionRaw\": 2953536, \"acRate\": \"62.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "word-frequency",
          "title": "Word Frequency",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "kth-largest-element-in-an-array",
          "title": "Kth Largest Element in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-characters-by-frequency",
          "title": "Sort Characters By Frequency",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "split-array-into-consecutive-subsequences",
          "title": "Split Array into Consecutive Subsequences",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "top-k-frequent-words",
          "title": "Top K Frequent Words",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-closest-points-to-origin",
          "title": "K Closest Points to Origin",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-features-by-popularity",
          "title": "Sort Features by Popularity",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sender-with-largest-word-count",
          "title": "Sender With Largest Word Count",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "most-frequent-even-element",
          "title": "Most Frequent Even Element",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Bucket Sort", "slug": "bucket-sort" },
        { "name": "Counting", "slug": "counting" },
        { "name": "Quickselect", "slug": "quickselect" }
      ]
    }
  },
  "design-tic-tac-toe": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "348",
        "title": "Design Tic-Tac-Toe",
        "titleSlug": "design-tic-tac-toe",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2018,
        "dislikes": 115,
        "similarQuestions": "[{\"title\": \"Valid Tic-Tac-Toe State\", \"titleSlug\": \"valid-tic-tac-toe-state\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Design", "slug": "design" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"227.2K\", \"totalSubmission\": \"393.3K\", \"totalAcceptedRaw\": 227207, \"totalSubmissionRaw\": 393305, \"acRate\": \"57.8%\"}",
        "hints": [
          "Could you trade extra space such that <code>move()</code> operation can be done in O(1)?",
          "You need two arrays: int rows[n], int cols[n], plus two variables: diagonal, anti_diagonal."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "valid-tic-tac-toe-state",
          "title": "Valid Tic-Tac-Toe State",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Could you trade extra space such that <code>move()</code> operation can be done in O(1)?",
        "You need two arrays: int rows[n], int cols[n], plus two variables: diagonal, anti_diagonal."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Design", "slug": "design" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "intersection-of-two-arrays": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "349",
        "title": "Intersection of Two Arrays",
        "titleSlug": "intersection-of-two-arrays",
        "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must be <strong>unique</strong> and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [9,4]\n<strong>Explanation:</strong> [4,9] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5440,
        "dislikes": 2220,
        "similarQuestions": "[{\"title\": \"Intersection of Two Arrays II\", \"titleSlug\": \"intersection-of-two-arrays-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Intersection of Three Sorted Arrays\", \"titleSlug\": \"intersection-of-three-sorted-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Difference of Two Arrays\", \"titleSlug\": \"find-the-difference-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Common Words With One Occurrence\", \"titleSlug\": \"count-common-words-with-one-occurrence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Choose Numbers From Two Arrays in Range\", \"titleSlug\": \"choose-numbers-from-two-arrays-in-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Intersection of Multiple Arrays\", \"titleSlug\": \"intersection-of-multiple-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Common Value\", \"titleSlug\": \"minimum-common-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"972.6K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 972560, \"totalSubmissionRaw\": 1350104, \"acRate\": \"72.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "intersection-of-two-arrays-ii",
          "title": "Intersection of Two Arrays II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "intersection-of-three-sorted-arrays",
          "title": "Intersection of Three Sorted Arrays",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-difference-of-two-arrays",
          "title": "Find the Difference of Two Arrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-common-words-with-one-occurrence",
          "title": "Count Common Words With One Occurrence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "choose-numbers-from-two-arrays-in-range",
          "title": "Choose Numbers From Two Arrays in Range",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "intersection-of-multiple-arrays",
          "title": "Intersection of Multiple Arrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-common-value",
          "title": "Minimum Common Value",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "intersection-of-two-arrays-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "350",
        "title": "Intersection of Two Arrays II",
        "titleSlug": "intersection-of-two-arrays-ii",
        "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must appear as many times as it shows in both arrays and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [4,9]\n<strong>Explanation:</strong> [9,4] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n\t<li>What if <code>nums1</code>&#39;s size is small compared to <code>nums2</code>&#39;s size? Which algorithm is better?</li>\n\t<li>What if elements of <code>nums2</code> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6992,
        "dislikes": 919,
        "similarQuestions": "[{\"title\": \"Intersection of Two Arrays\", \"titleSlug\": \"intersection-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Common Characters\", \"titleSlug\": \"find-common-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Difference of Two Arrays\", \"titleSlug\": \"find-the-difference-of-two-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Choose Numbers From Two Arrays in Range\", \"titleSlug\": \"choose-numbers-from-two-arrays-in-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Intersection of Multiple Arrays\", \"titleSlug\": \"intersection-of-multiple-arrays\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Common Value\", \"titleSlug\": \"minimum-common-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1147648, \"totalSubmissionRaw\": 2039160, \"acRate\": \"56.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "intersection-of-two-arrays",
          "title": "Intersection of Two Arrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-common-characters",
          "title": "Find Common Characters",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-difference-of-two-arrays",
          "title": "Find the Difference of Two Arrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "choose-numbers-from-two-arrays-in-range",
          "title": "Choose Numbers From Two Arrays in Range",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "intersection-of-multiple-arrays",
          "title": "Intersection of Multiple Arrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-common-value",
          "title": "Minimum Common Value",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "android-unlock-patterns": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "351",
        "title": "Android Unlock Patterns",
        "titleSlug": "android-unlock-patterns",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 152,
        "dislikes": 179,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"71.1K\", \"totalSubmission\": \"137.4K\", \"totalAcceptedRaw\": 71116, \"totalSubmissionRaw\": 137414, \"acRate\": \"51.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "data-stream-as-disjoint-intervals": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "352",
        "title": "Data Stream as Disjoint Intervals",
        "titleSlug": "data-stream-as-disjoint-intervals",
        "content": "<p>Given a data stream input of non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code>, summarize the numbers seen so far as a list of disjoint intervals.</p>\n\n<p>Implement the <code>SummaryRanges</code> class:</p>\n\n<ul>\n\t<li><code>SummaryRanges()</code> Initializes the object with an empty stream.</li>\n\t<li><code>void addNum(int value)</code> Adds the integer <code>value</code> to the stream.</li>\n\t<li><code>int[][] getIntervals()</code> Returns a summary of the integers in the stream currently as a list of disjoint intervals <code>[start<sub>i</sub>, end<sub>i</sub>]</code>. The answer should be sorted by <code>start<sub>i</sub></code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SummaryRanges&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\n<strong>Output</strong>\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\n<strong>Explanation</strong>\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= value &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>getIntervals</code>.</li>\n\t<li>At most <code>10<sup>2</sup></code>&nbsp;calls will be made to&nbsp;<code>getIntervals</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1697,
        "dislikes": 356,
        "similarQuestions": "[{\"title\": \"Summary Ranges\", \"titleSlug\": \"summary-ranges\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Right Interval\", \"titleSlug\": \"find-right-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Integers in Intervals\", \"titleSlug\": \"count-integers-in-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"104.1K\", \"totalSubmission\": \"173.8K\", \"totalAcceptedRaw\": 104061, \"totalSubmissionRaw\": 173807, \"acRate\": \"59.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "summary-ranges",
          "title": "Summary Ranges",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-right-interval",
          "title": "Find Right Interval",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "range-module",
          "title": "Range Module",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-integers-in-intervals",
          "title": "Count Integers in Intervals",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "design-snake-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "353",
        "title": "Design Snake Game",
        "titleSlug": "design-snake-game",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 914,
        "dislikes": 330,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"80.4K\", \"totalSubmission\": \"207.9K\", \"totalAcceptedRaw\": 80436, \"totalSubmissionRaw\": 207904, \"acRate\": \"38.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "russian-doll-envelopes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "354",
        "title": "Russian Doll Envelopes",
        "titleSlug": "russian-doll-envelopes",
        "content": "<p>You are given a 2D array of integers <code>envelopes</code> where <code>envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]</code> represents the width and the height of an envelope.</p>\n\n<p>One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope&#39;s width and height.</p>\n\n<p>Return <em>the maximum number of envelopes you can Russian doll (i.e., put one inside the other)</em>.</p>\n\n<p><strong>Note:</strong> You cannot rotate an envelope.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> envelopes = [[5,4],[6,4],[6,7],[2,3]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> envelopes = [[1,1],[1,1],[1,1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= envelopes.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>envelopes[i].length == 2</code></li>\n\t<li><code>1 &lt;= w<sub>i</sub>, h<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5733,
        "dislikes": 140,
        "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"The Number of Weak Characters in the Game\", \"titleSlug\": \"the-number-of-weak-characters-in-the-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Non-decreasing Subarray From Two Arrays\", \"titleSlug\": \"longest-non-decreasing-subarray-from-two-arrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"206.1K\", \"totalSubmission\": \"553.8K\", \"totalAcceptedRaw\": 206060, \"totalSubmissionRaw\": 553761, \"acRate\": \"37.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-increasing-subsequence",
          "title": "Longest Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "the-number-of-weak-characters-in-the-game",
          "title": "The Number of Weak Characters in the Game",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-non-decreasing-subarray-from-two-arrays",
          "title": "Longest Non-decreasing Subarray From Two Arrays",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "design-twitter": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "355",
        "title": "Design Twitter",
        "titleSlug": "design-twitter",
        "content": "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the <code>10</code> most recent tweets in the user&#39;s news feed.</p>\n\n<p>Implement the <code>Twitter</code> class:</p>\n\n<ul>\n\t<li><code>Twitter()</code> Initializes your twitter object.</li>\n\t<li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li>\n\t<li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user&#39;s news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be <strong>ordered from most recent to least recent</strong>.</li>\n\t<li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li>\n\t<li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Twitter&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;follow&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;unfollow&quot;, &quot;getNewsFeed&quot;]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\n<strong>Output</strong>\n[null, null, [5], null, null, [6, 5], null, [5]]\n\n<strong>Explanation</strong>\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li>\n\t<li><code>0 &lt;= tweetId &lt;= 10<sup>4</sup></code></li>\n\t<li>All the tweets have <strong>unique</strong> IDs.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3630,
        "dislikes": 471,
        "similarQuestions": "[{\"title\": \"Design a File Sharing System\", \"titleSlug\": \"design-a-file-sharing-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"155.9K\", \"totalSubmission\": \"401.8K\", \"totalAcceptedRaw\": 155857, \"totalSubmissionRaw\": 401783, \"acRate\": \"38.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "design-a-file-sharing-system",
          "title": "Design a File Sharing System",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "line-reflection": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "356",
        "title": "Line Reflection",
        "titleSlug": "line-reflection",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 287,
        "dislikes": 590,
        "similarQuestions": "[{\"title\": \"Max Points on a Line\", \"titleSlug\": \"max-points-on-a-line\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Boomerangs\", \"titleSlug\": \"number-of-boomerangs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"38.7K\", \"totalSubmission\": \"109.9K\", \"totalAcceptedRaw\": 38719, \"totalSubmissionRaw\": 109863, \"acRate\": \"35.2%\"}",
        "hints": [
          "Find the smallest and largest x-value for all points.",
          "If there is a line then it should be at y = (minX + maxX) / 2.",
          "For each point, make sure that it has a reflected point in the opposite side."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "max-points-on-a-line",
          "title": "Max Points on a Line",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-boomerangs",
          "title": "Number of Boomerangs",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Find the smallest and largest x-value for all points.",
        "If there is a line then it should be at y = (minX + maxX) / 2.",
        "For each point, make sure that it has a reflected point in the opposite side."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "count-numbers-with-unique-digits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "357",
        "title": "Count Numbers with Unique Digits",
        "titleSlug": "count-numbers-with-unique-digits",
        "content": "<p>Given an integer <code>n</code>, return the count of all numbers with unique digits, <code>x</code>, where <code>0 &lt;= x &lt; 10<sup>n</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 91\n<strong>Explanation:</strong> The answer should be the total numbers in the range of 0 &le; x &lt; 100, excluding 11,22,33,44,55,66,77,88,99\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 8</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1448,
        "dislikes": 1474,
        "similarQuestions": "[{\"title\": \"Count Special Integers\", \"titleSlug\": \"count-special-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"130K\", \"totalSubmission\": \"247.5K\", \"totalAcceptedRaw\": 130049, \"totalSubmissionRaw\": 247548, \"acRate\": \"52.5%\"}",
        "hints": [
          "A direct way is to use the backtracking approach.",
          "Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10<sup>n</sup>.",
          "This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.",
          "Let f(k) = count of numbers with unique digits with length equals k.",
          "f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0]."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-special-integers",
          "title": "Count Special Integers",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "A direct way is to use the backtracking approach.",
        "Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10<sup>n</sup>.",
        "This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.",
        "Let f(k) = count of numbers with unique digits with length equals k.",
        "f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0]."
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "rearrange-string-k-distance-apart": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "358",
        "title": "Rearrange String k Distance Apart",
        "titleSlug": "rearrange-string-k-distance-apart",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 940,
        "dislikes": 37,
        "similarQuestions": "[{\"title\": \"Task Scheduler\", \"titleSlug\": \"task-scheduler\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reorganize String\", \"titleSlug\": \"reorganize-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Construct String With Repeat Limit\", \"titleSlug\": \"construct-string-with-repeat-limit\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"62.3K\", \"totalSubmission\": \"161.7K\", \"totalAcceptedRaw\": 62270, \"totalSubmissionRaw\": 161722, \"acRate\": \"38.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "task-scheduler",
          "title": "Task Scheduler",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "reorganize-string",
          "title": "Reorganize String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "construct-string-with-repeat-limit",
          "title": "Construct String With Repeat Limit",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "logger-rate-limiter": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "359",
        "title": "Logger Rate Limiter",
        "titleSlug": "logger-rate-limiter",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1679,
        "dislikes": 189,
        "similarQuestions": "[{\"title\": \"Design Hit Counter\", \"titleSlug\": \"design-hit-counter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Design", "slug": "design" },
          { "name": "Data Stream", "slug": "data-stream" }
        ],
        "stats": "{\"totalAccepted\": \"298.6K\", \"totalSubmission\": \"394.4K\", \"totalAcceptedRaw\": 298602, \"totalSubmissionRaw\": 394352, \"acRate\": \"75.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "design-hit-counter",
          "title": "Design Hit Counter",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Design", "slug": "design" },
        { "name": "Data Stream", "slug": "data-stream" }
      ]
    }
  },
  "sort-transformed-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "360",
        "title": "Sort Transformed Array",
        "titleSlug": "sort-transformed-array",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 660,
        "dislikes": 207,
        "similarQuestions": "[{\"title\": \"Squares of a Sorted Array\", \"titleSlug\": \"squares-of-a-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Repair Cars\", \"titleSlug\": \"minimum-time-to-repair-cars\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"63.8K\", \"totalSubmission\": \"115.1K\", \"totalAcceptedRaw\": 63799, \"totalSubmissionRaw\": 115087, \"acRate\": \"55.4%\"}",
        "hints": [
          "x^2 + x  will form a parabola.",
          "Parameter A in:  A * x^2 + B * x + C dictates the shape of the parabola.</br>\r\nPositive A means the parabola remains concave (high-low-high), but negative A inverts the parabola to be convex (low-high-low)."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "squares-of-a-sorted-array",
          "title": "Squares of a Sorted Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-time-to-repair-cars",
          "title": "Minimum Time to Repair Cars",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "x^2 + x  will form a parabola.",
        "Parameter A in:  A * x^2 + B * x + C dictates the shape of the parabola.</br>\r\nPositive A means the parabola remains concave (high-low-high), but negative A inverts the parabola to be convex (low-high-low)."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "bomb-enemy": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "361",
        "title": "Bomb Enemy",
        "titleSlug": "bomb-enemy",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 941,
        "dislikes": 116,
        "similarQuestions": "[{\"title\": \"Minimum Cost Homecoming of a Robot in a Grid\", \"titleSlug\": \"minimum-cost-homecoming-of-a-robot-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stamping the Grid\", \"titleSlug\": \"stamping-the-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Unguarded Cells in the Grid\", \"titleSlug\": \"count-unguarded-cells-in-the-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Trailing Zeros in a Cornered Path\", \"titleSlug\": \"maximum-trailing-zeros-in-a-cornered-path\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"76.7K\", \"totalSubmission\": \"148.6K\", \"totalAcceptedRaw\": 76723, \"totalSubmissionRaw\": 148628, \"acRate\": \"51.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
          "title": "Minimum Cost Homecoming of a Robot in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "stamping-the-grid",
          "title": "Stamping the Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-unguarded-cells-in-the-grid",
          "title": "Count Unguarded Cells in the Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-trailing-zeros-in-a-cornered-path",
          "title": "Maximum Trailing Zeros in a Cornered Path",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "design-hit-counter": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "362",
        "title": "Design Hit Counter",
        "titleSlug": "design-hit-counter",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1972,
        "dislikes": 221,
        "similarQuestions": "[{\"title\": \"Logger Rate Limiter\", \"titleSlug\": \"logger-rate-limiter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" }
        ],
        "stats": "{\"totalAccepted\": \"226.9K\", \"totalSubmission\": \"330.9K\", \"totalAcceptedRaw\": 226855, \"totalSubmissionRaw\": 330928, \"acRate\": \"68.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "logger-rate-limiter",
          "title": "Logger Rate Limiter",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" }
      ]
    }
  },
  "max-sum-of-rectangle-no-larger-than-k": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "363",
        "title": "Max Sum of Rectangle No Larger Than K",
        "titleSlug": "max-sum-of-rectangle-no-larger-than-k",
        "content": "<p>Given an <code>m x n</code> matrix <code>matrix</code> and an integer <code>k</code>, return <em>the max sum of a rectangle in the matrix such that its sum is no larger than</em> <code>k</code>.</p>\n\n<p>It is <strong>guaranteed</strong> that there will be a rectangle with a sum no larger than <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg\" style=\"width: 255px; height: 176px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[2,2,-1]], k = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if the number of rows is much larger than the number of columns?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3399,
        "dislikes": 170,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Prefix Sum", "slug": "prefix-sum" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"122.5K\", \"totalSubmission\": \"278.4K\", \"totalAcceptedRaw\": 122514, \"totalSubmissionRaw\": 278354, \"acRate\": \"44.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Prefix Sum", "slug": "prefix-sum" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "nested-list-weight-sum-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "364",
        "title": "Nested List Weight Sum II",
        "titleSlug": "nested-list-weight-sum-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1103,
        "dislikes": 427,
        "similarQuestions": "[{\"title\": \"Nested List Weight Sum\", \"titleSlug\": \"nested-list-weight-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Nesting\", \"titleSlug\": \"array-nesting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"132.2K\", \"totalSubmission\": \"200.8K\", \"totalAcceptedRaw\": 132158, \"totalSubmissionRaw\": 200811, \"acRate\": \"65.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "nested-list-weight-sum",
          "title": "Nested List Weight Sum",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "array-nesting",
          "title": "Array Nesting",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "water-and-jug-problem": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "365",
        "title": "Water and Jug Problem",
        "titleSlug": "water-and-jug-problem",
        "content": "<p>You are given two jugs with capacities <code>jug1Capacity</code> and <code>jug2Capacity</code> liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly <code>targetCapacity</code> liters using these two jugs.</p>\n\n<p>If <code>targetCapacity</code> liters of water are measurable, you must have <code>targetCapacity</code> liters of water contained <strong>within one or both buckets</strong> by the end.</p>\n\n<p>Operations allowed:</p>\n\n<ul>\n\t<li>Fill any of the jugs with water.</li>\n\t<li>Empty any of the jugs.</li>\n\t<li>Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg&amp;ab_channel=notnek01\" target=\"_blank\">Die Hard</a> example \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= jug1Capacity, jug2Capacity, targetCapacity &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1365,
        "dislikes": 1433,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"92.3K\", \"totalSubmission\": \"234K\", \"totalAcceptedRaw\": 92267, \"totalSubmissionRaw\": 234033, \"acRate\": \"39.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "find-leaves-of-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "366",
        "title": "Find Leaves of Binary Tree",
        "titleSlug": "find-leaves-of-binary-tree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 3168,
        "dislikes": 54,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"248.8K\", \"totalSubmission\": \"309.3K\", \"totalAcceptedRaw\": 248798, \"totalSubmissionRaw\": 309297, \"acRate\": \"80.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "valid-perfect-square": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "367",
        "title": "Valid Perfect Square",
        "titleSlug": "valid-perfect-square",
        "content": "<p>Given a positive integer num, return <code>true</code> <em>if</em> <code>num</code> <em>is a perfect square or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>A <strong>perfect square</strong> is an integer that is the square of an integer. In other words, it is the product of some integer with itself.</p>\n\n<p>You must not use any built-in library function, such as <code>sqrt</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 16\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We return true because 4 * 4 = 16 and 4 is an integer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 14\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4063,
        "dislikes": 294,
        "similarQuestions": "[{\"title\": \"Sqrt(x)\", \"titleSlug\": \"sqrtx\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Square Numbers\", \"titleSlug\": \"sum-of-square-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"556.6K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 556567, \"totalSubmissionRaw\": 1279417, \"acRate\": \"43.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "sqrtx",
          "title": "Sqrt(x)",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-square-numbers",
          "title": "Sum of Square Numbers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "largest-divisible-subset": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "368",
        "title": "Largest Divisible Subset",
        "titleSlug": "largest-divisible-subset",
        "content": "<p>Given a set of <strong>distinct</strong> positive integers <code>nums</code>, return the largest subset <code>answer</code> such that every pair <code>(answer[i], answer[j])</code> of elements in this subset satisfies:</p>\n\n<ul>\n\t<li><code>answer[i] % answer[j] == 0</code>, or</li>\n\t<li><code>answer[j] % answer[i] == 0</code></li>\n</ul>\n\n<p>If there are multiple solutions, return any of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> [1,3] is also accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,8]\n<strong>Output:</strong> [1,2,4,8]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5022,
        "dislikes": 193,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"200.6K\", \"totalSubmission\": \"474.3K\", \"totalAcceptedRaw\": 200568, \"totalSubmissionRaw\": 474251, \"acRate\": \"42.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "plus-one-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "369",
        "title": "Plus One Linked List",
        "titleSlug": "plus-one-linked-list",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 921,
        "dislikes": 42,
        "similarQuestions": "[{\"title\": \"Plus One\", \"titleSlug\": \"plus-one\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Double a Number Represented as a Linked List\", \"titleSlug\": \"double-a-number-represented-as-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"77.9K\", \"totalSubmission\": \"127.7K\", \"totalAcceptedRaw\": 77895, \"totalSubmissionRaw\": 127729, \"acRate\": \"61.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "plus-one",
          "title": "Plus One",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "double-a-number-represented-as-a-linked-list",
          "title": "Double a Number Represented as a Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "range-addition": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "370",
        "title": "Range Addition",
        "titleSlug": "range-addition",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1609,
        "dislikes": 84,
        "similarQuestions": "[{\"title\": \"Range Addition II\", \"titleSlug\": \"range-addition-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Positions on Street With Required Brightness\", \"titleSlug\": \"count-positions-on-street-with-required-brightness\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shifting Letters II\", \"titleSlug\": \"shifting-letters-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"91.4K\", \"totalSubmission\": \"128K\", \"totalAcceptedRaw\": 91408, \"totalSubmissionRaw\": 127994, \"acRate\": \"71.4%\"}",
        "hints": [
          "Thinking of using advanced data structures? You are thinking it too complicated.",
          "For each update operation, do you really need to update all elements between i and j?",
          "Update only the first and end element is sufficient.",
          "The optimal time complexity is O(<b><i>k</i></b> + <b><i>n</i></b>) and uses O(1) extra space."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "range-addition-ii",
          "title": "Range Addition II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-positions-on-street-with-required-brightness",
          "title": "Count Positions on Street With Required Brightness",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shifting-letters-ii",
          "title": "Shifting Letters II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Thinking of using advanced data structures? You are thinking it too complicated.",
        "For each update operation, do you really need to update all elements between i and j?",
        "Update only the first and end element is sufficient.",
        "The optimal time complexity is O(<b><i>k</i></b> + <b><i>n</i></b>) and uses O(1) extra space."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "sum-of-two-integers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "371",
        "title": "Sum of Two Integers",
        "titleSlug": "sum-of-two-integers",
        "content": "<p>Given two integers <code>a</code> and <code>b</code>, return <em>the sum of the two integers without using the operators</em> <code>+</code> <em>and</em> <code>-</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = 1, b = 2\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = 2, b = 3\n<strong>Output:</strong> 5\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-1000 &lt;= a, b &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3975,
        "dislikes": 5355,
        "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"441.5K\", \"totalSubmission\": \"859.6K\", \"totalAcceptedRaw\": 441522, \"totalSubmissionRaw\": 859560, \"acRate\": \"51.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-numbers",
          "title": "Add Two Numbers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "super-pow": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "372",
        "title": "Super Pow",
        "titleSlug": "super-pow",
        "content": "<p>Your task is to calculate <code>a<sup>b</sup></code> mod <code>1337</code> where <code>a</code> is a positive integer and <code>b</code> is an extremely large positive integer given in the form of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 2, b = [3]\n<strong>Output:</strong> 8\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 2, b = [1,0]\n<strong>Output:</strong> 1024\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 1, b = [4,3,3,8,5,2]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= b.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= b[i] &lt;= 9</code></li>\n\t<li><code>b</code> does not contain leading zeros.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 871,
        "dislikes": 1412,
        "similarQuestions": "[{\"title\": \"Pow(x, n)\", \"titleSlug\": \"powx-n\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" }
        ],
        "stats": "{\"totalAccepted\": \"66.6K\", \"totalSubmission\": \"188.1K\", \"totalAcceptedRaw\": 66643, \"totalSubmissionRaw\": 188081, \"acRate\": \"35.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "powx-n",
          "title": "Pow(x, n)",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" }
      ]
    }
  },
  "find-k-pairs-with-smallest-sums": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "373",
        "title": "Find K Pairs with Smallest Sums",
        "titleSlug": "find-k-pairs-with-smallest-sums",
        "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> sorted in <strong>non-decreasing&nbsp;order</strong> and an integer <code>k</code>.</p>\n\n<p>Define a pair <code>(u, v)</code> which consists of one element from the first array and one element from the second array.</p>\n\n<p>Return <em>the</em> <code>k</code> <em>pairs</em> <code>(u<sub>1</sub>, v<sub>1</sub>), (u<sub>2</sub>, v<sub>2</sub>), ..., (u<sub>k</sub>, v<sub>k</sub>)</code> <em>with the smallest sums</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>Output:</strong> [[1,2],[1,4],[1,6]]\n<strong>Explanation:</strong> The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>Output:</strong> [[1,1],[1,1]]\n<strong>Explanation:</strong> The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3], k = 3\n<strong>Output:</strong> [[1,3],[2,3]]\n<strong>Explanation:</strong> All possible pairs are returned from the sequence: [1,3],[2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums1</code> and <code>nums2</code> both are sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>k &lt;=&nbsp;nums1.length *&nbsp;nums2.length</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5971,
        "dislikes": 425,
        "similarQuestions": "[{\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Product of Two Sorted Arrays\", \"titleSlug\": \"kth-smallest-product-of-two-sorted-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"273.2K\", \"totalSubmission\": \"683.6K\", \"totalAcceptedRaw\": 273176, \"totalSubmissionRaw\": 683644, \"acRate\": \"40.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
          "title": "Kth Smallest Element in a Sorted Matrix",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-k-th-smallest-pair-distance",
          "title": "Find K-th Smallest Pair Distance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "kth-smallest-product-of-two-sorted-arrays",
          "title": "Kth Smallest Product of Two Sorted Arrays",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "guess-number-higher-or-lower": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "374",
        "title": "Guess Number Higher or Lower",
        "titleSlug": "guess-number-higher-or-lower",
        "content": "<p>We are playing the Guess Game. The game is as follows:</p>\n\n<p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p>\n\n<p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p>\n\n<p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p>\n\n<ul>\n\t<li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li>\n\t<li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li>\n\t<li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li>\n</ul>\n\n<p>Return <em>the number that I picked</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, pick = 6\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, pick = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= pick &lt;= n</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3505,
        "dislikes": 462,
        "similarQuestions": "[{\"title\": \"First Bad Version\", \"titleSlug\": \"first-bad-version\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Interactive", "slug": "interactive" }
        ],
        "stats": "{\"totalAccepted\": \"582.9K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 582948, \"totalSubmissionRaw\": 1102309, \"acRate\": \"52.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "first-bad-version",
          "title": "First Bad Version",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "guess-number-higher-or-lower-ii",
          "title": "Guess Number Higher or Lower II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-k-closest-elements",
          "title": "Find K Closest Elements",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Interactive", "slug": "interactive" }
      ]
    }
  },
  "guess-number-higher-or-lower-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "375",
        "title": "Guess Number Higher or Lower II",
        "titleSlug": "guess-number-higher-or-lower-ii",
        "content": "<p>We are playing the Guessing Game. The game will work as follows:</p>\n\n<ol>\n\t<li>I pick a number between&nbsp;<code>1</code>&nbsp;and&nbsp;<code>n</code>.</li>\n\t<li>You guess a number.</li>\n\t<li>If you guess the right number, <strong>you win the game</strong>.</li>\n\t<li>If you guess the wrong number, then I will tell you whether the number I picked is <strong>higher or lower</strong>, and you will continue guessing.</li>\n\t<li>Every time you guess a wrong number&nbsp;<code>x</code>, you will pay&nbsp;<code>x</code>&nbsp;dollars. If you run out of money, <strong>you lose the game</strong>.</li>\n</ol>\n\n<p>Given a particular&nbsp;<code>n</code>, return&nbsp;<em>the minimum amount of money you need to&nbsp;<strong>guarantee a win regardless of what number I pick</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/graph.png\" style=\"width: 505px; height: 388px;\" />\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n&nbsp;   - If this is my number, your total is $0. Otherwise, you pay $7.\n&nbsp;   - If my number is higher, the range is [8,10]. Guess 9.\n&nbsp;       - If this is my number, your total is $7. Otherwise, you pay $9.\n&nbsp;       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n&nbsp;       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n&nbsp;   - If my number is lower, the range is [1,6]. Guess 3.\n&nbsp;       - If this is my number, your total is $7. Otherwise, you pay $3.\n&nbsp;       - If my number is higher, the range is [4,6]. Guess 5.\n&nbsp;           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n&nbsp;           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n&nbsp;           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n&nbsp;       - If my number is lower, the range is [1,2]. Guess 1.\n&nbsp;           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n&nbsp;           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;There is only one possible number, so you can guess 1 and not have to pay anything.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;There are two possible numbers, 1 and 2.\n- Guess 1.\n&nbsp;   - If this is my number, your total is $0. Otherwise, you pay $1.\n&nbsp;   - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2059,
        "dislikes": 2068,
        "similarQuestions": "[{\"title\": \"Flip Game II\", \"titleSlug\": \"flip-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower\", \"titleSlug\": \"guess-number-higher-or-lower\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Game Theory", "slug": "game-theory" }
        ],
        "stats": "{\"totalAccepted\": \"116.4K\", \"totalSubmission\": \"241.2K\", \"totalAcceptedRaw\": 116360, \"totalSubmissionRaw\": 241164, \"acRate\": \"48.2%\"}",
        "hints": [
          "The best strategy to play the game is to minimize the maximum loss you could possibly face. Another strategy is to minimize the expected loss. Here, we are interested in the <b>first</b> scenario.",
          "Take a small example (n = 3). What do you end up paying in the worst case?",
          "Check out <a href=\"https://en.wikipedia.org/wiki/Minimax\">this article</a> if you're still stuck.",
          "The purely recursive implementation of minimax would be worthless for even a small n. You MUST use dynamic programming.",
          "As a follow-up, how would you modify your code to solve the problem of minimizing the expected loss, instead of the worst-case loss?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flip-game-ii",
          "title": "Flip Game II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "guess-number-higher-or-lower",
          "title": "Guess Number Higher or Lower",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "can-i-win",
          "title": "Can I Win",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-k-closest-elements",
          "title": "Find K Closest Elements",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The best strategy to play the game is to minimize the maximum loss you could possibly face. Another strategy is to minimize the expected loss. Here, we are interested in the <b>first</b> scenario.",
        "Take a small example (n = 3). What do you end up paying in the worst case?",
        "Check out <a href=\"https://en.wikipedia.org/wiki/Minimax\">this article</a> if you're still stuck.",
        "The purely recursive implementation of minimax would be worthless for even a small n. You MUST use dynamic programming.",
        "As a follow-up, how would you modify your code to solve the problem of minimizing the expected loss, instead of the worst-case loss?"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Game Theory", "slug": "game-theory" }
      ]
    }
  },
  "wiggle-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "376",
        "title": "Wiggle Subsequence",
        "titleSlug": "wiggle-subsequence",
        "content": "<p>A <strong>wiggle sequence</strong> is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.</p>\n\n<ul>\n\t<li>For example, <code>[1, 7, 4, 9, 2, 5]</code> is a <strong>wiggle sequence</strong> because the differences <code>(6, -3, 5, -7, 3)</code> alternate between positive and negative.</li>\n\t<li>In contrast, <code>[1, 4, 7, 2, 5]</code> and <code>[1, 7, 4, 5, 5]</code> are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.</li>\n</ul>\n\n<p>A <strong>subsequence</strong> is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.</p>\n\n<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>wiggle subsequence</strong> of </em><code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,7,4,9,2,5]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,17,5,10,13,15,10,5,16,8]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6,7,8,9]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve this in <code>O(n)</code> time?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4989,
        "dislikes": 157,
        "similarQuestions": "[{\"title\": \"Rearrange Array Elements by Sign\", \"titleSlug\": \"rearrange-array-elements-by-sign\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"235.5K\", \"totalSubmission\": \"486.6K\", \"totalAcceptedRaw\": 235455, \"totalSubmissionRaw\": 486600, \"acRate\": \"48.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "rearrange-array-elements-by-sign",
          "title": "Rearrange Array Elements by Sign",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "combination-sum-iv": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "377",
        "title": "Combination Sum IV",
        "titleSlug": "combination-sum-iv",
        "content": "<p>Given an array of <strong>distinct</strong> integers <code>nums</code> and a target integer <code>target</code>, return <em>the number of possible combinations that add up to</em>&nbsp;<code>target</code>.</p>\n\n<p>The test cases are generated so that the answer can fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], target = 4\n<strong>Output:</strong> 7\n<strong>Explanation:</strong>\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9], target = 3\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>All the elements of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7218,
        "dislikes": 644,
        "similarQuestions": "[{\"title\": \"Combination Sum\", \"titleSlug\": \"combination-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ways to Express an Integer as Sum of Powers\", \"titleSlug\": \"ways-to-express-an-integer-as-sum-of-powers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"460K\", \"totalSubmission\": \"851.6K\", \"totalAcceptedRaw\": 459963, \"totalSubmissionRaw\": 851577, \"acRate\": \"54.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "combination-sum",
          "title": "Combination Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
          "title": "Ways to Express an Integer as Sum of Powers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "kth-smallest-element-in-a-sorted-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "378",
        "title": "Kth Smallest Element in a Sorted Matrix",
        "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
        "content": "<p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns is sorted in ascending order, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest element in the matrix</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> smallest element <strong>in the sorted order</strong>, not the <code>k<sup>th</sup></code> <strong>distinct</strong> element.</p>\n\n<p>You must find a solution with a memory complexity better than <code>O(n<sup>2</sup>)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The elements in the matrix are [1,5,9,10,11,12,13,<u><strong>13</strong></u>,15], and the 8<sup>th</sup> smallest number is 13\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[-5]], k = 1\n<strong>Output:</strong> -5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the rows and columns of <code>matrix</code> are <strong>guaranteed</strong> to be sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= n<sup>2</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you solve the problem with a constant memory (i.e., <code>O(1)</code> memory complexity)?</li>\n\t<li>Could you solve the problem in <code>O(n)</code> time complexity? The solution may be too advanced for an interview but you may find reading <a href=\"http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf\" target=\"_blank\">this paper</a> fun.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9638,
        "dislikes": 334,
        "similarQuestions": "[{\"title\": \"Find K Pairs with Smallest Sums\", \"titleSlug\": \"find-k-pairs-with-smallest-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest Prime Fraction\", \"titleSlug\": \"k-th-smallest-prime-fraction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"580.7K\", \"totalSubmission\": \"934K\", \"totalAcceptedRaw\": 580713, \"totalSubmissionRaw\": 934033, \"acRate\": \"62.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "find-k-pairs-with-smallest-sums",
          "title": "Find K Pairs with Smallest Sums",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "kth-smallest-number-in-multiplication-table",
          "title": "Kth Smallest Number in Multiplication Table",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-k-th-smallest-pair-distance",
          "title": "Find K-th Smallest Pair Distance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-th-smallest-prime-fraction",
          "title": "K-th Smallest Prime Fraction",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "design-phone-directory": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "379",
        "title": "Design Phone Directory",
        "titleSlug": "design-phone-directory",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 343,
        "dislikes": 461,
        "similarQuestions": "[{\"title\": \"Seat Reservation Manager\", \"titleSlug\": \"seat-reservation-manager\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" }
        ],
        "stats": "{\"totalAccepted\": \"64.3K\", \"totalSubmission\": \"125K\", \"totalAcceptedRaw\": 64318, \"totalSubmissionRaw\": 124955, \"acRate\": \"51.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "seat-reservation-manager",
          "title": "Seat Reservation Manager",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" }
      ]
    }
  },
  "insert-delete-getrandom-o1": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "380",
        "title": "Insert Delete GetRandom O(1)",
        "titleSlug": "insert-delete-getrandom-o1",
        "content": "<p>Implement the <code>RandomizedSet</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current set of elements (it&#39;s guaranteed that at least one element exists when this method is called). Each element must have the <b>same probability</b> of being returned.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works in&nbsp;<strong>average</strong>&nbsp;<code>O(1)</code>&nbsp;time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, false, 2]\n\n<strong>Explanation</strong>\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 *&nbsp;</code><code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8305,
        "dislikes": 487,
        "similarQuestions": "[{\"title\": \"Insert Delete GetRandom O(1) - Duplicates allowed\", \"titleSlug\": \"insert-delete-getrandom-o1-duplicates-allowed\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Design", "slug": "design" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"729.1K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 729060, \"totalSubmissionRaw\": 1379023, \"acRate\": \"52.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
          "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Design", "slug": "design" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "insert-delete-getrandom-o1-duplicates-allowed": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "381",
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
        "content": "<p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.</p>\n\n<p>Implement the <code>RandomizedCollection</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is <strong>linearly related</strong> to the number of the same values the multiset contains.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works on <strong>average</strong> <code>O(1)</code> time complexity.</p>\n\n<p><strong>Note:</strong> The test cases are generated such that <code>getRandom</code> will only be called if there is <strong>at least one</strong> item in the <code>RandomizedCollection</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]\n[[], [1], [1], [2], [], [1], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, 1]\n\n<strong>Explanation</strong>\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2204,
        "dislikes": 145,
        "similarQuestions": "[{\"title\": \"Insert Delete GetRandom O(1)\", \"titleSlug\": \"insert-delete-getrandom-o1\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Design", "slug": "design" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"134.1K\", \"totalSubmission\": \"378.7K\", \"totalAcceptedRaw\": 134077, \"totalSubmissionRaw\": 378698, \"acRate\": \"35.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "insert-delete-getrandom-o1",
          "title": "Insert Delete GetRandom O(1)",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Design", "slug": "design" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "linked-list-random-node": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "382",
        "title": "Linked List Random Node",
        "titleSlug": "linked-list-random-node",
        "content": "<p>Given a singly linked list, return a random node&#39;s value from the linked list. Each node must have the <strong>same probability</strong> of being chosen.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(ListNode head)</code> Initializes the object with the head of the singly-linked list <code>head</code>.</li>\n\t<li><code>int getRandom()</code> Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg\" style=\"width: 302px; height: 62px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;]\n[[[1, 2, 3]], [], [], [], [], []]\n<strong>Output</strong>\n[null, 1, 3, 2, 2, 3]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the linked list will be in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>getRandom</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the linked list is extremely large and its length is unknown to you?</li>\n\t<li>Could you solve this efficiently without using extra space?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3018,
        "dislikes": 696,
        "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Math", "slug": "math" },
          { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"234.9K\", \"totalSubmission\": \"373K\", \"totalAcceptedRaw\": 234867, \"totalSubmissionRaw\": 372989, \"acRate\": \"63.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "random-pick-index",
          "title": "Random Pick Index",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Math", "slug": "math" },
        { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "ransom-note": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "383",
        "title": "Ransom Note",
        "titleSlug": "ransom-note",
        "content": "<p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code><em> if </em><code>ransomNote</code><em> can be constructed by using the letters from </em><code>magazine</code><em> and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"a\", magazine = \"b\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"ab\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"aab\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>ransomNote</code> and <code>magazine</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4717,
        "dislikes": 482,
        "similarQuestions": "[{\"title\": \"Stickers to Spell Word\", \"titleSlug\": \"stickers-to-spell-word\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"989.9K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 989872, \"totalSubmissionRaw\": 1642968, \"acRate\": \"60.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "stickers-to-spell-word",
          "title": "Stickers to Spell Word",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "shuffle-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "384",
        "title": "Shuffle an Array",
        "titleSlug": "shuffle-an-array",
        "content": "<p>Given an integer array <code>nums</code>, design an algorithm to randomly shuffle the array. All permutations of the array should be <strong>equally likely</strong> as a result of the shuffling.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li>\n\t<li><code>int[] reset()</code> Resets the array to its original configuration and returns it.</li>\n\t<li><code>int[] shuffle()</code> Returns a random shuffling of the array.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;shuffle&quot;, &quot;reset&quot;, &quot;shuffle&quot;]\n[[[1, 2, 3]], [], [], []]\n<strong>Output</strong>\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All the elements of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>reset</code> and <code>shuffle</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1312,
        "dislikes": 902,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"323.4K\", \"totalSubmission\": \"556.9K\", \"totalAcceptedRaw\": 323411, \"totalSubmissionRaw\": 556911, \"acRate\": \"58.1%\"}",
        "hints": [
          "The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)"
        ]
      },
      "similar": [],
      "hints": [
        "The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "mini-parser": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "385",
        "title": "Mini Parser",
        "titleSlug": "mini-parser",
        "content": "<p>Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return <em>the deserialized</em> <code>NestedInteger</code>.</p>\n\n<p>Each element is either an integer or a list whose elements may also be integers or other lists.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;324&quot;\n<strong>Output:</strong> 324\n<strong>Explanation:</strong> You should return a NestedInteger object which contains a single integer 324.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;[123,[456,[789]]]&quot;\n<strong>Output:</strong> [123,[456,[789]]]\n<strong>Explanation:</strong> Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of digits, square brackets <code>&quot;[]&quot;</code>, negative sign <code>&#39;-&#39;</code>, and commas <code>&#39;,&#39;</code>.</li>\n\t<li><code>s</code> is the serialization of valid <code>NestedInteger</code>.</li>\n\t<li>All the values in the input are in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 444,
        "dislikes": 1339,
        "similarQuestions": "[{\"title\": \"Flatten Nested List Iterator\", \"titleSlug\": \"flatten-nested-list-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ternary Expression Parser\", \"titleSlug\": \"ternary-expression-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Comments\", \"titleSlug\": \"remove-comments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Depth-First Search", "slug": "depth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"54.9K\", \"totalSubmission\": \"145.9K\", \"totalAcceptedRaw\": 54850, \"totalSubmissionRaw\": 145904, \"acRate\": \"37.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-nested-list-iterator",
          "title": "Flatten Nested List Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ternary-expression-parser",
          "title": "Ternary Expression Parser",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-comments",
          "title": "Remove Comments",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Depth-First Search", "slug": "depth-first-search" }
      ]
    }
  },
  "lexicographical-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "386",
        "title": "Lexicographical Numbers",
        "titleSlug": "lexicographical-numbers",
        "content": "<p>Given an integer <code>n</code>, return all the numbers in the range <code>[1, n]</code> sorted in lexicographical order.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and uses <code>O(1)</code> extra space.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 13\n<strong>Output:</strong> [1,10,11,12,13,2,3,4,5,6,7,8,9]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 2\n<strong>Output:</strong> [1,2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1876,
        "dislikes": 138,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"113.2K\", \"totalSubmission\": \"179.7K\", \"totalAcceptedRaw\": 113221, \"totalSubmissionRaw\": 179687, \"acRate\": \"63.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "first-unique-character-in-a-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "387",
        "title": "First Unique Character in a String",
        "titleSlug": "first-unique-character-in-a-string",
        "content": "<p>Given a string <code>s</code>, <em>find the first non-repeating character in it and return its index</em>. If it does not exist, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"leetcode\"\n<strong>Output:</strong> 0\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"loveleetcode\"\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"aabb\"\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8388,
        "dislikes": 271,
        "similarQuestions": "[{\"title\": \"Sort Characters By Frequency\", \"titleSlug\": \"sort-characters-by-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"First Letter to Appear Twice\", \"titleSlug\": \"first-letter-to-appear-twice\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Queue", "slug": "queue" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1507726, \"totalSubmissionRaw\": 2494899, \"acRate\": \"60.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "sort-characters-by-frequency",
          "title": "Sort Characters By Frequency",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "first-letter-to-appear-twice",
          "title": "First Letter to Appear Twice",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Queue", "slug": "queue" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "longest-absolute-file-path": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "388",
        "title": "Longest Absolute File Path",
        "titleSlug": "longest-absolute-file-path",
        "content": "<p>Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg\" style=\"width: 681px; height: 322px;\" /></p>\n\n<p>Here, we have <code>dir</code> as the only directory in the root. <code>dir</code> contains two subdirectories, <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and subdirectory <code>subsubdir1</code>. <code>subdir2</code> contains a subdirectory <code>subsubdir2</code>, which contains a file <code>file2.ext</code>.</p>\n\n<p>In text form, it looks like this (with \u27f6 representing the tab character):</p>\n\n<pre>\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n</pre>\n\n<p>If we were to write this representation in code, it will look like this: <code>&quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</code>. Note that the <code>&#39;\\n&#39;</code> and <code>&#39;\\t&#39;</code> are the new-line and tab characters.</p>\n\n<p>Every file and directory has a unique <strong>absolute path</strong> in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by <code>&#39;/&#39;s</code>. Using the above example, the <strong>absolute path</strong> to <code>file2.ext</code> is <code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form <code>name.extension</code>, where <code>name</code> and <code>extension</code> consist of letters, digits, and/or spaces.</p>\n\n<p>Given a string <code>input</code> representing the file system in the explained format, return <em>the length of the <strong>longest absolute path</strong> to a <strong>file</strong> in the abstracted file system</em>. If there is no file in the system, return <code>0</code>.</p>\n\n<p><strong>Note</strong> that the testcases are generated such that the file system is valid and no file or directory name has length 0.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg\" style=\"width: 401px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> input = &quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot;\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> We have only one file, and the absolute path is &quot;dir/subdir2/file.ext&quot; of length 20.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg\" style=\"width: 641px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> input = &quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;\n<strong>Output:</strong> 32\n<strong>Explanation:</strong> We have two files:\n&quot;dir/subdir1/file1.ext&quot; of length 21\n&quot;dir/subdir2/subsubdir2/file2.ext&quot; of length 32.\nWe return 32 since it is the longest absolute path to a file.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> input = &quot;a&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We do not have any files, just a single directory named &quot;a&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= input.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>input</code> may contain lowercase or uppercase English letters, a new line character <code>&#39;\\n&#39;</code>, a tab character <code>&#39;\\t&#39;</code>, a dot <code>&#39;.&#39;</code>, a space <code>&#39; &#39;</code>, and digits.</li>\n\t<li>All file and directory names have <strong>positive</strong> length.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1223,
        "dislikes": 2440,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Depth-First Search", "slug": "depth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"148.5K\", \"totalSubmission\": \"316.1K\", \"totalAcceptedRaw\": 148505, \"totalSubmissionRaw\": 316146, \"acRate\": \"47.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Depth-First Search", "slug": "depth-first-search" }
      ]
    }
  },
  "find-the-difference": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "389",
        "title": "Find the Difference",
        "titleSlug": "find-the-difference",
        "content": "<p>You are given two strings <code>s</code> and <code>t</code>.</p>\n\n<p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p>\n\n<p>Return the letter that was added to <code>t</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;abcde&quot;\n<strong>Output:</strong> &quot;e&quot;\n<strong>Explanation:</strong> &#39;e&#39; is the letter that was added.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;, t = &quot;y&quot;\n<strong>Output:</strong> &quot;y&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>t.length == s.length + 1</code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4833,
        "dislikes": 464,
        "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"674.5K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 674549, \"totalSubmissionRaw\": 1122214, \"acRate\": \"60.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "single-number",
          "title": "Single Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "elimination-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "390",
        "title": "Elimination Game",
        "titleSlug": "elimination-game",
        "content": "<p>You have a list <code>arr</code> of all integers in the range <code>[1, n]</code> sorted in a strictly increasing order. Apply the following algorithm on <code>arr</code>:</p>\n\n<ul>\n\t<li>Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</li>\n\t<li>Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.</li>\n\t<li>Keep repeating the steps again, alternating left to right and right to left, until a single number remains.</li>\n</ul>\n\n<p>Given the integer <code>n</code>, return <em>the last number that remains in</em> <code>arr</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 9\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\narr = [<u>1</u>, 2, <u>3</u>, 4, <u>5</u>, 6, <u>7</u>, 8, <u>9</u>]\narr = [2, <u>4</u>, 6, <u>8</u>]\narr = [<u>2</u>, 6]\narr = [6]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1461,
        "dislikes": 678,
        "similarQuestions": "[{\"title\": \"Min Max Game\", \"titleSlug\": \"min-max-game\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"66K\", \"totalSubmission\": \"144K\", \"totalAcceptedRaw\": 65991, \"totalSubmissionRaw\": 144046, \"acRate\": \"45.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "min-max-game",
          "title": "Min Max Game",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "perfect-rectangle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "391",
        "title": "Perfect Rectangle",
        "titleSlug": "perfect-rectangle",
        "content": "<p>Given an array <code>rectangles</code> where <code>rectangles[i] = [x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub>]</code> represents an axis-aligned rectangle. The bottom-left point of the rectangle is <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and the top-right point of it is <code>(a<sub>i</sub>, b<sub>i</sub>)</code>.</p>\n\n<p>Return <code>true</code> <em>if all the rectangles together form an exact cover of a rectangular region</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> All 5 rectangles together form an exact cover of a rectangular region.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Because there is a gap between the two rectangular regions.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Because two of the rectangles overlap with each other.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>rectangles[i].length == 4</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 848,
        "dislikes": 114,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Line Sweep", "slug": "line-sweep" }
        ],
        "stats": "{\"totalAccepted\": \"42.1K\", \"totalSubmission\": \"126.3K\", \"totalAcceptedRaw\": 42061, \"totalSubmissionRaw\": 126307, \"acRate\": \"33.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Line Sweep", "slug": "line-sweep" }
      ]
    }
  },
  "is-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "392",
        "title": "Is Subsequence",
        "titleSlug": "is-subsequence",
        "content": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>subsequence</strong> of </em><code>t</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abc\", t = \"ahbgdc\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"axc\", t = \"ahbgdc\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Suppose there are lots of incoming <code>s</code>, say <code>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></code> where <code>k &gt;= 10<sup>9</sup></code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 9176,
        "dislikes": 489,
        "similarQuestions": "[{\"title\": \"Number of Matching Subsequences\", \"titleSlug\": \"number-of-matching-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Way to Form String\", \"titleSlug\": \"shortest-way-to-form-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Append Characters to String to Make Subsequence\", \"titleSlug\": \"append-characters-to-string-to-make-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Make String a Subsequence Using Cyclic Increments\", \"titleSlug\": \"make-string-a-subsequence-using-cyclic-increments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"1.2M\", \"totalSubmission\": \"2.5M\", \"totalAcceptedRaw\": 1212404, \"totalSubmissionRaw\": 2528012, \"acRate\": \"48.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-matching-subsequences",
          "title": "Number of Matching Subsequences",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-way-to-form-string",
          "title": "Shortest Way to Form String",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "append-characters-to-string-to-make-subsequence",
          "title": "Append Characters to String to Make Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "make-string-a-subsequence-using-cyclic-increments",
          "title": "Make String a Subsequence Using Cyclic Increments",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "utf-8-validation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "393",
        "title": "UTF-8 Validation",
        "titleSlug": "utf-8-validation",
        "content": "<p>Given an integer array <code>data</code> representing the data, return whether it is a valid <strong>UTF-8</strong> encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).</p>\n\n<p>A character in <strong>UTF8</strong> can be from <strong>1 to 4 bytes</strong> long, subjected to the following rules:</p>\n\n<ol>\n\t<li>For a <strong>1-byte</strong> character, the first bit is a <code>0</code>, followed by its Unicode code.</li>\n\t<li>For an <strong>n-bytes</strong> character, the first <code>n</code> bits are all one&#39;s, the <code>n + 1</code> bit is <code>0</code>, followed by <code>n - 1</code> bytes with the most significant <code>2</code> bits being <code>10</code>.</li>\n</ol>\n\n<p>This is how the UTF-8 encoding would work:</p>\n\n<pre>\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</pre>\n\n<p><code>x</code> denotes a bit in the binary form of a byte that may be either <code>0</code> or <code>1</code>.</p>\n\n<p><strong>Note: </strong>The input is an array of integers. Only the <strong>least significant 8 bits</strong> of each integer is used to store the data. This means each integer represents only 1 byte of data.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> data = [197,130,1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> data = [235,140,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one&#39;s and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that&#39;s correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= data.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= data[i] &lt;= 255</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 887,
        "dislikes": 2851,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"120.3K\", \"totalSubmission\": \"267.2K\", \"totalAcceptedRaw\": 120293, \"totalSubmissionRaw\": 267193, \"acRate\": \"45.0%\"}",
        "hints": [
          "Read the data integer by integer. When you read it, process the least significant 8 bits of it.",
          "Assume the next encoding is 1-byte data. If it is not 1-byte data, read the next integer and assume it is 2-bytes data.",
          "Similarly, if it is not 2-bytes data, try 3-bytes then 4-bytes. If you read four integers and it still does not match any pattern, return false."
        ]
      },
      "similar": [],
      "hints": [
        "Read the data integer by integer. When you read it, process the least significant 8 bits of it.",
        "Assume the next encoding is 1-byte data. If it is not 1-byte data, read the next integer and assume it is 2-bytes data.",
        "Similarly, if it is not 2-bytes data, try 3-bytes then 4-bytes. If you read four integers and it still does not match any pattern, return false."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "decode-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "394",
        "title": "Decode String",
        "titleSlug": "decode-string",
        "content": "<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a]2[bc]&quot;\n<strong>Output:</strong> &quot;aaabcbc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a2[c]]&quot;\n<strong>Output:</strong> &quot;accaccacc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2[abc]3[cd]ef&quot;\n<strong>Output:</strong> &quot;abcabccdcdcdef&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12167,
        "dislikes": 561,
        "similarQuestions": "[{\"title\": \"Encode String with Shortest Length\", \"titleSlug\": \"encode-string-with-shortest-length\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Atoms\", \"titleSlug\": \"number-of-atoms\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Brace Expansion\", \"titleSlug\": \"brace-expansion\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"738.8K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 738835, \"totalSubmissionRaw\": 1257609, \"acRate\": \"58.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "encode-string-with-shortest-length",
          "title": "Encode String with Shortest Length",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-atoms",
          "title": "Number of Atoms",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "brace-expansion",
          "title": "Brace Expansion",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "longest-substring-with-at-least-k-repeating-characters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "395",
        "title": "Longest Substring with At Least K Repeating Characters",
        "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
        "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.</p>\n\n<p data-pm-slice=\"1 1 []\">if no such substring exists, return 0.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabb&quot;, k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest substring is &quot;aaa&quot;, as &#39;a&#39; is repeated 3 times.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababbc&quot;, k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest substring is &quot;ababb&quot;, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5961,
        "dislikes": 480,
        "similarQuestions": "[{\"title\": \"Longest Subsequence Repeated k Times\", \"titleSlug\": \"longest-subsequence-repeated-k-times\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Equal Count Substrings\", \"titleSlug\": \"number-of-equal-count-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Optimal Partition of String\", \"titleSlug\": \"optimal-partition-of-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Length of Longest Subarray With at Most K Frequency\", \"titleSlug\": \"length-of-longest-subarray-with-at-most-k-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Longest Special Substring That Occurs Thrice II\", \"titleSlug\": \"find-longest-special-substring-that-occurs-thrice-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Longest Special Substring That Occurs Thrice I\", \"titleSlug\": \"find-longest-special-substring-that-occurs-thrice-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"210.1K\", \"totalSubmission\": \"468K\", \"totalAcceptedRaw\": 210119, \"totalSubmissionRaw\": 468009, \"acRate\": \"44.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "longest-subsequence-repeated-k-times",
          "title": "Longest Subsequence Repeated k Times",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-equal-count-substrings",
          "title": "Number of Equal Count Substrings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "optimal-partition-of-string",
          "title": "Optimal Partition of String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "length-of-longest-subarray-with-at-most-k-frequency",
          "title": "Length of Longest Subarray With at Most K Frequency",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-longest-special-substring-that-occurs-thrice-ii",
          "title": "Find Longest Special Substring That Occurs Thrice II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-longest-special-substring-that-occurs-thrice-i",
          "title": "Find Longest Special Substring That Occurs Thrice I",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "rotate-function": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "396",
        "title": "Rotate Function",
        "titleSlug": "rotate-function",
        "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code>.</p>\n\n<p>Assume <code>arr<sub>k</sub></code> to be an array obtained by rotating <code>nums</code> by <code>k</code> positions clock-wise. We define the <strong>rotation function</strong> <code>F</code> on <code>nums</code> as follow:</p>\n\n<ul>\n\t<li><code>F(k) = 0 * arr<sub>k</sub>[0] + 1 * arr<sub>k</sub>[1] + ... + (n - 1) * arr<sub>k</sub>[n - 1].</code></li>\n</ul>\n\n<p>Return <em>the maximum value of</em> <code>F(0), F(1), ..., F(n-1)</code>.</p>\n\n<p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,2,6]\n<strong>Output:</strong> 26\n<strong>Explanation:</strong>\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [100]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1490,
        "dislikes": 261,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"80.6K\", \"totalSubmission\": \"192K\", \"totalAcceptedRaw\": 80644, \"totalSubmissionRaw\": 191953, \"acRate\": \"42.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "integer-replacement": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "397",
        "title": "Integer Replacement",
        "titleSlug": "integer-replacement",
        "content": "<p>Given a positive integer <code>n</code>,&nbsp;you can apply one of the following&nbsp;operations:</p>\n\n<ol>\n\t<li>If <code>n</code> is even, replace <code>n</code> with <code>n / 2</code>.</li>\n\t<li>If <code>n</code> is odd, replace <code>n</code> with either <code>n + 1</code> or <code>n - 1</code>.</li>\n</ol>\n\n<p>Return <em>the minimum number of operations needed for</em> <code>n</code> <em>to become</em> <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1275,
        "dislikes": 477,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"110.9K\", \"totalSubmission\": \"311.9K\", \"totalAcceptedRaw\": 110898, \"totalSubmissionRaw\": 311914, \"acRate\": \"35.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "random-pick-index": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "398",
        "title": "Random Pick Index",
        "titleSlug": "random-pick-index",
        "content": "<p>Given an integer array <code>nums</code> with possible <strong>duplicates</strong>, randomly output the index of a given <code>target</code> number. You can assume that the given target number must exist in the array.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[] nums)</code> Initializes the object with the array <code>nums</code>.</li>\n\t<li><code>int pick(int target)</code> Picks a random index <code>i</code> from <code>nums</code> where <code>nums[i] == target</code>. If there are multiple valid i&#39;s, then each index should have an equal probability of returning.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\n<strong>Output</strong>\n[null, 4, 0, 2]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>target</code> is an integer from <code>nums</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1223,
        "dislikes": 1257,
        "similarQuestions": "[{\"title\": \"Linked List Random Node\", \"titleSlug\": \"linked-list-random-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Blacklist\", \"titleSlug\": \"random-pick-with-blacklist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Weight\", \"titleSlug\": \"random-pick-with-weight\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"204.3K\", \"totalSubmission\": \"325.6K\", \"totalAcceptedRaw\": 204328, \"totalSubmissionRaw\": 325627, \"acRate\": \"62.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "linked-list-random-node",
          "title": "Linked List Random Node",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "random-pick-with-blacklist",
          "title": "Random Pick with Blacklist",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "random-pick-with-weight",
          "title": "Random Pick with Weight",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "evaluate-division": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "399",
        "title": "Evaluate Division",
        "titleSlug": "evaluate-division",
        "content": "<p>You are given an array of variable pairs <code>equations</code> and an array of real numbers <code>values</code>, where <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> and <code>values[i]</code> represent the equation <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code>. Each <code>A<sub>i</sub></code> or <code>B<sub>i</sub></code> is a string that represents a single variable.</p>\n\n<p>You are also given some <code>queries</code>, where <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> represents the <code>j<sup>th</sup></code> query where you must find the answer for <code>C<sub>j</sub> / D<sub>j</sub> = ?</code>.</p>\n\n<p>Return <em>the answers to all queries</em>. If a single answer cannot be determined, return <code>-1.0</code>.</p>\n\n<p><strong>Note:</strong> The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p>\n\n<p><strong>Note:&nbsp;</strong>The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]\n<strong>Output:</strong> [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n<strong>Explanation:</strong> \nGiven: <em>a / b = 2.0</em>, <em>b / c = 3.0</em>\nqueries are: <em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ? </em>\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined =&gt; -1.0</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;],[&quot;bc&quot;,&quot;cd&quot;]], values = [1.5,2.5,5.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;bc&quot;,&quot;cd&quot;],[&quot;cd&quot;,&quot;bc&quot;]]\n<strong>Output:</strong> [3.75000,0.40000,5.00000,0.20000]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [[&quot;a&quot;,&quot;b&quot;]], values = [0.5], queries = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;c&quot;],[&quot;x&quot;,&quot;y&quot;]]\n<strong>Output:</strong> [0.50000,2.00000,-1.00000,-1.00000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= equations.length &lt;= 20</code></li>\n\t<li><code>equations[i].length == 2</code></li>\n\t<li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li>\n\t<li><code>values.length == equations.length</code></li>\n\t<li><code>0.0 &lt; values[i] &lt;= 20.0</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 20</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li>\n\t<li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> consist of lower case English letters and digits.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8888,
        "dislikes": 839,
        "similarQuestions": "[{\"title\": \"Check for Contradictions in Equations\", \"titleSlug\": \"check-for-contradictions-in-equations\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Shortest Path", "slug": "shortest-path" }
        ],
        "stats": "{\"totalAccepted\": \"428.9K\", \"totalSubmission\": \"697.7K\", \"totalAcceptedRaw\": 428884, \"totalSubmissionRaw\": 697733, \"acRate\": \"61.5%\"}",
        "hints": ["Do you recognize this as a graph problem?"]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "check-for-contradictions-in-equations",
          "title": "Check for Contradictions in Equations",
          "isPaidOnly": true
        }
      ],
      "hints": ["Do you recognize this as a graph problem?"],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Shortest Path", "slug": "shortest-path" }
      ]
    }
  },
  "nth-digit": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "400",
        "title": "Nth Digit",
        "titleSlug": "nth-digit",
        "content": "<p>Given an integer <code>n</code>, return the <code>n<sup>th</sup></code> digit of the infinite integer sequence <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The 11<sup>th</sup> digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1020,
        "dislikes": 1987,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"91.6K\", \"totalSubmission\": \"265.9K\", \"totalAcceptedRaw\": 91556, \"totalSubmissionRaw\": 265860, \"acRate\": \"34.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "binary-watch": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "401",
        "title": "Binary Watch",
        "titleSlug": "binary-watch",
        "content": "<p>A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent&nbsp;the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.</p>\n\n<ul>\n\t<li>For example, the below binary watch reads <code>&quot;4:51&quot;</code>.</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg\" style=\"width: 500px; height: 500px;\" /></p>\n\n<p>Given an integer <code>turnedOn</code> which represents the number of LEDs that are currently on (ignoring the PM), return <em>all possible times the watch could represent</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>The hour must not contain a leading zero.</p>\n\n<ul>\n\t<li>For example, <code>&quot;01:00&quot;</code> is not valid. It should be <code>&quot;1:00&quot;</code>.</li>\n</ul>\n\n<p>The minute must&nbsp;consist of two digits and may contain a leading zero.</p>\n\n<ul>\n\t<li>For example, <code>&quot;10:2&quot;</code> is not valid. It should be <code>&quot;10:02&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> turnedOn = 1\n<strong>Output:</strong> [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> turnedOn = 9\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= turnedOn &lt;= 10</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1309,
        "dislikes": 2431,
        "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"135.2K\", \"totalSubmission\": \"252.7K\", \"totalAcceptedRaw\": 135176, \"totalSubmissionRaw\": 252665, \"acRate\": \"53.5%\"}",
        "hints": [
          "Simplify by seeking for solutions that involve comparing bit counts.",
          "Consider calculating all possible times for comparison purposes."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "letter-combinations-of-a-phone-number",
          "title": "Letter Combinations of a Phone Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-1-bits",
          "title": "Number of 1 Bits",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Simplify by seeking for solutions that involve comparing bit counts.",
        "Consider calculating all possible times for comparison purposes."
      ],
      "relatedTopics": [
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "remove-k-digits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "402",
        "title": "Remove K Digits",
        "titleSlug": "remove-k-digits",
        "content": "<p>Given string num representing a non-negative integer <code>num</code>, and an integer <code>k</code>, return <em>the smallest possible integer after removing</em> <code>k</code> <em>digits from</em> <code>num</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;1432219&quot;, k = 3\n<strong>Output:</strong> &quot;1219&quot;\n<strong>Explanation:</strong> Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;10200&quot;, k = 1\n<strong>Output:</strong> &quot;200&quot;\n<strong>Explanation:</strong> Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;10&quot;, k = 2\n<strong>Output:</strong> &quot;0&quot;\n<strong>Explanation:</strong> Remove all the digits from the number and it is left with nothing which is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= num.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>num</code> consists of only digits.</li>\n\t<li><code>num</code> does not have any leading zeros except for the zero itself.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8386,
        "dislikes": 372,
        "similarQuestions": "[{\"title\": \"Create Maximum Number\", \"titleSlug\": \"create-maximum-number\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Monotone Increasing Digits\", \"titleSlug\": \"monotone-increasing-digits\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Most Competitive Subsequence\", \"titleSlug\": \"find-the-most-competitive-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Append K Integers With Minimal Sum\", \"titleSlug\": \"append-k-integers-with-minimal-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Digit From Number to Maximize Result\", \"titleSlug\": \"remove-digit-from-number-to-maximize-result\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make a Special Number\", \"titleSlug\": \"minimum-operations-to-make-a-special-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"346.4K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 346428, \"totalSubmissionRaw\": 1121938, \"acRate\": \"30.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "create-maximum-number",
          "title": "Create Maximum Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "monotone-increasing-digits",
          "title": "Monotone Increasing Digits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-most-competitive-subsequence",
          "title": "Find the Most Competitive Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "append-k-integers-with-minimal-sum",
          "title": "Append K Integers With Minimal Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "remove-digit-from-number-to-maximize-result",
          "title": "Remove Digit From Number to Maximize Result",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-operations-to-make-a-special-number",
          "title": "Minimum Operations to Make a Special Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "frog-jump": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "403",
        "title": "Frog Jump",
        "titleSlug": "frog-jump",
        "content": "<p>A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>\n\n<p>Given a list of <code>stones</code>&nbsp;positions (in units) in sorted <strong>ascending order</strong>, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be <code>1</code> unit.</p>\n\n<p>If the frog&#39;s last jump was <code>k</code> units, its next jump must be either <code>k - 1</code>, <code>k</code>, or <code>k + 1</code> units. The frog can only jump in the forward direction.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [0,1,3,5,6,8,12,17]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [0,1,2,3,4,8,9,11]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= stones.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>stones[0] == 0</code></li>\n\t<li><code>stones</code>&nbsp;is sorted in a strictly increasing order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5413,
        "dislikes": 244,
        "similarQuestions": "[{\"title\": \"Minimum Sideway Jumps\", \"titleSlug\": \"minimum-sideway-jumps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Solving Questions With Brainpower\", \"titleSlug\": \"solving-questions-with-brainpower\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Jumps to Reach the Last Index\", \"titleSlug\": \"maximum-number-of-jumps-to-reach-the-last-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"252.4K\", \"totalSubmission\": \"549.8K\", \"totalAcceptedRaw\": 252415, \"totalSubmissionRaw\": 549847, \"acRate\": \"45.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-sideway-jumps",
          "title": "Minimum Sideway Jumps",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "solving-questions-with-brainpower",
          "title": "Solving Questions With Brainpower",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
          "title": "Maximum Number of Jumps to Reach the Last Index",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "sum-of-left-leaves": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "404",
        "title": "Sum of Left Leaves",
        "titleSlug": "sum-of-left-leaves",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the sum of all left leaves.</em></p>\n\n<p>A <strong>leaf</strong> is a node with no children. A <strong>left leaf</strong> is a leaf that is the left child of another node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> There are two left leaves in the binary tree, with values 9 and 15 respectively.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4912,
        "dislikes": 284,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"480.4K\", \"totalSubmission\": \"835.8K\", \"totalAcceptedRaw\": 480403, \"totalSubmissionRaw\": 835787, \"acRate\": \"57.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "convert-a-number-to-hexadecimal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "405",
        "title": "Convert a Number to Hexadecimal",
        "titleSlug": "convert-a-number-to-hexadecimal",
        "content": "<p>Given an integer <code>num</code>, return <em>a string representing its hexadecimal representation</em>. For negative integers, <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">two&rsquo;s complement</a> method is used.</p>\n\n<p>All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.</p>\n\n<p><strong>Note:&nbsp;</strong>You are not allowed to use any built-in library method to directly solve this problem.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 26\n<strong>Output:</strong> \"1a\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> num = -1\n<strong>Output:</strong> \"ffffffff\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1280,
        "dislikes": 207,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"135.6K\", \"totalSubmission\": \"283.8K\", \"totalAcceptedRaw\": 135644, \"totalSubmissionRaw\": 283756, \"acRate\": \"47.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "queue-reconstruction-by-height": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "406",
        "title": "Queue Reconstruction by Height",
        "titleSlug": "queue-reconstruction-by-height",
        "content": "<p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> person of height <code>h<sub>i</sub></code> with <strong>exactly</strong> <code>k<sub>i</sub></code> other people in front who have a height greater than or equal to <code>h<sub>i</sub></code>.</p>\n\n<p>Reconstruct and return <em>the queue that is represented by the input array </em><code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> is the attributes of the <code>j<sup>th</sup></code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n<strong>Output:</strong> [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n<strong>Explanation:</strong>\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n<strong>Output:</strong> [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= people.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= k<sub>i</sub> &lt; people.length</code></li>\n\t<li>It is guaranteed that the queue can be reconstructed.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6964,
        "dislikes": 702,
        "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Reward Top K Students\", \"titleSlug\": \"reward-top-k-students\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"293.9K\", \"totalSubmission\": \"401.1K\", \"totalAcceptedRaw\": 293883, \"totalSubmissionRaw\": 401079, \"acRate\": \"73.3%\"}",
        "hints": [
          "What can you say about the position of the shortest person? </br>\r\nIf the position of the shortest person is <i>i</i>, how many people would be in front of the shortest person?",
          "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-of-smaller-numbers-after-self",
          "title": "Count of Smaller Numbers After Self",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "reward-top-k-students",
          "title": "Reward Top K Students",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "What can you say about the position of the shortest person? </br>\r\nIf the position of the shortest person is <i>i</i>, how many people would be in front of the shortest person?",
        "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "trapping-rain-water-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "407",
        "title": "Trapping Rain Water II",
        "titleSlug": "trapping-rain-water-ii",
        "content": "<p>Given an <code>m x n</code> integer matrix <code>heightMap</code> representing the height of each unit cell in a 2D elevation map, return <em>the volume of water it can trap after raining</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg\" style=\"width: 361px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg\" style=\"width: 401px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n<strong>Output:</strong> 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == heightMap.length</code></li>\n\t<li><code>n == heightMap[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3656,
        "dislikes": 89,
        "similarQuestions": "[{\"title\": \"Trapping Rain Water\", \"titleSlug\": \"trapping-rain-water\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Points From Grid Queries\", \"titleSlug\": \"maximum-number-of-points-from-grid-queries\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"84.4K\", \"totalSubmission\": \"176.8K\", \"totalAcceptedRaw\": 84402, \"totalSubmissionRaw\": 176835, \"acRate\": \"47.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "trapping-rain-water",
          "title": "Trapping Rain Water",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-points-from-grid-queries",
          "title": "Maximum Number of Points From Grid Queries",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "valid-word-abbreviation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "408",
        "title": "Valid Word Abbreviation",
        "titleSlug": "valid-word-abbreviation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 649,
        "dislikes": 2078,
        "similarQuestions": "[{\"title\": \"Minimum Unique Word Abbreviation\", \"titleSlug\": \"minimum-unique-word-abbreviation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Word Abbreviation\", \"titleSlug\": \"word-abbreviation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if an Original String Exists Given Two Encoded Strings\", \"titleSlug\": \"check-if-an-original-string-exists-given-two-encoded-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"145.4K\", \"totalSubmission\": \"412.1K\", \"totalAcceptedRaw\": 145409, \"totalSubmissionRaw\": 412148, \"acRate\": \"35.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-unique-word-abbreviation",
          "title": "Minimum Unique Word Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "word-abbreviation",
          "title": "Word Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "check-if-an-original-string-exists-given-two-encoded-strings",
          "title": "Check if an Original String Exists Given Two Encoded Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "longest-palindrome": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "409",
        "title": "Longest Palindrome",
        "titleSlug": "longest-palindrome",
        "content": "<p>Given a string <code>s</code> which consists of lowercase or uppercase letters, return <em>the length of the <strong>longest palindrome</strong></em>&nbsp;that can be built with those letters.</p>\n\n<p>Letters are <strong>case sensitive</strong>, for example,&nbsp;<code>&quot;Aa&quot;</code> is not considered a palindrome here.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abccccdd&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The longest palindrome that can be built is &quot;a&quot;, whose length is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase <strong>and/or</strong> uppercase English&nbsp;letters only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5180,
        "dislikes": 344,
        "similarQuestions": "[{\"title\": \"Palindrome Permutation\", \"titleSlug\": \"palindrome-permutation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Palindrome by Concatenating Two Letter Words\", \"titleSlug\": \"longest-palindrome-by-concatenating-two-letter-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Largest Palindromic Number\", \"titleSlug\": \"largest-palindromic-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"587K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 587024, \"totalSubmissionRaw\": 1088849, \"acRate\": \"53.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "palindrome-permutation",
          "title": "Palindrome Permutation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindrome-by-concatenating-two-letter-words",
          "title": "Longest Palindrome by Concatenating Two Letter Words",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "largest-palindromic-number",
          "title": "Largest Palindromic Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "split-array-largest-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "410",
        "title": "Split Array Largest Sum",
        "titleSlug": "split-array-largest-sum",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is <strong>minimized</strong>.</p>\n\n<p>Return <em>the minimized largest sum of the split</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous part of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,2,5,10,8], k = 2\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], k = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 9322,
        "dislikes": 197,
        "similarQuestions": "[{\"title\": \"Capacity To Ship Packages Within D Days\", \"titleSlug\": \"capacity-to-ship-packages-within-d-days\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Divide Chocolate\", \"titleSlug\": \"divide-chocolate\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subsequence of Size K With the Largest Even Sum\", \"titleSlug\": \"subsequence-of-size-k-with-the-largest-even-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Total Beauty of the Gardens\", \"titleSlug\": \"maximum-total-beauty-of-the-gardens\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Split Array\", \"titleSlug\": \"number-of-ways-to-split-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"310K\", \"totalSubmission\": \"566.7K\", \"totalAcceptedRaw\": 309969, \"totalSubmissionRaw\": 566673, \"acRate\": \"54.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "capacity-to-ship-packages-within-d-days",
          "title": "Capacity To Ship Packages Within D Days",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "divide-chocolate",
          "title": "Divide Chocolate",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "fair-distribution-of-cookies",
          "title": "Fair Distribution of Cookies",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "subsequence-of-size-k-with-the-largest-even-sum",
          "title": "Subsequence of Size K With the Largest Even Sum",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-total-beauty-of-the-gardens",
          "title": "Maximum Total Beauty of the Gardens",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-split-array",
          "title": "Number of Ways to Split Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-cost-to-split-an-array",
          "title": "Minimum Cost to Split an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "minimum-unique-word-abbreviation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "411",
        "title": "Minimum Unique Word Abbreviation",
        "titleSlug": "minimum-unique-word-abbreviation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 179,
        "dislikes": 145,
        "similarQuestions": "[{\"title\": \"Generalized Abbreviation\", \"titleSlug\": \"generalized-abbreviation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Word Abbreviation\", \"titleSlug\": \"valid-word-abbreviation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Word Abbreviation\", \"titleSlug\": \"word-abbreviation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"14.5K\", \"totalSubmission\": \"36.6K\", \"totalAcceptedRaw\": 14515, \"totalSubmissionRaw\": 36618, \"acRate\": \"39.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "generalized-abbreviation",
          "title": "Generalized Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "valid-word-abbreviation",
          "title": "Valid Word Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "word-abbreviation",
          "title": "Word Abbreviation",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "fizz-buzz": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "412",
        "title": "Fizz Buzz",
        "titleSlug": "fizz-buzz",
        "content": "<p>Given an integer <code>n</code>, return <em>a string array </em><code>answer</code><em> (<strong>1-indexed</strong>) where</em>:</p>\n\n<ul>\n\t<li><code>answer[i] == &quot;FizzBuzz&quot;</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>.</li>\n\t<li><code>answer[i] == &quot;Fizz&quot;</code> if <code>i</code> is divisible by <code>3</code>.</li>\n\t<li><code>answer[i] == &quot;Buzz&quot;</code> if <code>i</code> is divisible by <code>5</code>.</li>\n\t<li><code>answer[i] == i</code> (as a string) if none of the above conditions are true.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"1\",\"2\",\"Fizz\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 5\n<strong>Output:</strong> [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 15\n<strong>Output:</strong> [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2547,
        "dislikes": 335,
        "similarQuestions": "[{\"title\": \"Fizz Buzz Multithreaded\", \"titleSlug\": \"fizz-buzz-multithreaded\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Categorize Box According to Criteria\", \"titleSlug\": \"categorize-box-according-to-criteria\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 1142792, \"totalSubmissionRaw\": 1601189, \"acRate\": \"71.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "fizz-buzz-multithreaded",
          "title": "Fizz Buzz Multithreaded",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "categorize-box-according-to-criteria",
          "title": "Categorize Box According to Criteria",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "arithmetic-slices": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "413",
        "title": "Arithmetic Slices",
        "titleSlug": "arithmetic-slices",
        "content": "<p>An integer array is called arithmetic if it consists of <strong>at least three elements</strong> and if the difference between any two consecutive elements is the same.</p>\n\n<ul>\n\t<li>For example, <code>[1,3,5,7,9]</code>, <code>[7,7,7,7]</code>, and <code>[3,-1,-5,-9]</code> are arithmetic sequences.</li>\n</ul>\n\n<p>Given an integer array <code>nums</code>, return <em>the number of arithmetic <strong>subarrays</strong> of</em> <code>nums</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5115,
        "dislikes": 288,
        "similarQuestions": "[{\"title\": \"Arithmetic Slices II - Subsequence\", \"titleSlug\": \"arithmetic-slices-ii-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Arithmetic Subarrays\", \"titleSlug\": \"arithmetic-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Zero-Filled Subarrays\", \"titleSlug\": \"number-of-zero-filled-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Length of the Longest Alphabetical Continuous Substring\", \"titleSlug\": \"length-of-the-longest-alphabetical-continuous-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"289.8K\", \"totalSubmission\": \"446K\", \"totalAcceptedRaw\": 289825, \"totalSubmissionRaw\": 445971, \"acRate\": \"65.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "arithmetic-slices-ii-subsequence",
          "title": "Arithmetic Slices II - Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "arithmetic-subarrays",
          "title": "Arithmetic Subarrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-zero-filled-subarrays",
          "title": "Number of Zero-Filled Subarrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "length-of-the-longest-alphabetical-continuous-substring",
          "title": "Length of the Longest Alphabetical Continuous Substring",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "third-maximum-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "414",
        "title": "Third Maximum Number",
        "titleSlug": "third-maximum-number",
        "content": "<p>Given an integer array <code>nums</code>, return <em>the <strong>third distinct maximum</strong> number in this array. If the third maximum does not exist, return the <strong>maximum</strong> number</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,3,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2&#39;s are counted together since they have the same value).\nThe third distinct maximum is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Can you find an <code>O(n)</code> solution?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2889,
        "dislikes": 3036,
        "similarQuestions": "[{\"title\": \"Kth Largest Element in an Array\", \"titleSlug\": \"kth-largest-element-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Neither Minimum nor Maximum\", \"titleSlug\": \"neither-minimum-nor-maximum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"492.1K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 492053, \"totalSubmissionRaw\": 1437538, \"acRate\": \"34.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "kth-largest-element-in-an-array",
          "title": "Kth Largest Element in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "neither-minimum-nor-maximum",
          "title": "Neither Minimum nor Maximum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "add-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "415",
        "title": "Add Strings",
        "titleSlug": "add-strings",
        "content": "<p>Given two non-negative integers, <code>num1</code> and <code>num2</code> represented as string, return <em>the sum of</em> <code>num1</code> <em>and</em> <code>num2</code> <em>as a string</em>.</p>\n\n<p>You must solve the problem without using any built-in library for handling large integers (such as <code>BigInteger</code>). You must also not convert the inputs to integers directly.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;11&quot;, num2 = &quot;123&quot;\n<strong>Output:</strong> &quot;134&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;456&quot;, num2 = &quot;77&quot;\n<strong>Output:</strong> &quot;533&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;0&quot;, num2 = &quot;0&quot;\n<strong>Output:</strong> &quot;0&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of only digits.</li>\n\t<li><code>num1</code> and <code>num2</code> don&#39;t have any leading zeros except for the zero itself.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4867,
        "dislikes": 713,
        "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Multiply Strings\", \"titleSlug\": \"multiply-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add to Array-Form of Integer\", \"titleSlug\": \"add-to-array-form-of-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"624.9K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 624862, \"totalSubmissionRaw\": 1205529, \"acRate\": \"51.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-numbers",
          "title": "Add Two Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "multiply-strings",
          "title": "Multiply Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "add-to-array-form-of-integer",
          "title": "Add to Array-Form of Integer",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "partition-equal-subset-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "416",
        "title": "Partition Equal Subset Sum",
        "titleSlug": "partition-equal-subset-sum",
        "content": "<p>Given an integer array <code>nums</code>, return <code>true</code> <em>if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,11,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array can be partitioned as [1, 5, 5] and [11].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The array cannot be partitioned into equal sum subsets.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 11809,
        "dislikes": 221,
        "similarQuestions": "[{\"title\": \"Partition to K Equal Sum Subsets\", \"titleSlug\": \"partition-to-k-equal-sum-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimize the Difference Between Target and Chosen Elements\", \"titleSlug\": \"minimize-the-difference-between-target-and-chosen-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Ways to Partition an Array\", \"titleSlug\": \"maximum-number-of-ways-to-partition-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Partition Array Into Two Arrays to Minimize Sum Difference\", \"titleSlug\": \"partition-array-into-two-arrays-to-minimize-sum-difference\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Subarrays With Equal Sum\", \"titleSlug\": \"find-subarrays-with-equal-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Great Partitions\", \"titleSlug\": \"number-of-great-partitions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Split With Minimum Sum\", \"titleSlug\": \"split-with-minimum-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"748.8K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 748760, \"totalSubmissionRaw\": 1620598, \"acRate\": \"46.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "partition-to-k-equal-sum-subsets",
          "title": "Partition to K Equal Sum Subsets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimize-the-difference-between-target-and-chosen-elements",
          "title": "Minimize the Difference Between Target and Chosen Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-ways-to-partition-an-array",
          "title": "Maximum Number of Ways to Partition an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
          "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-subarrays-with-equal-sum",
          "title": "Find Subarrays With Equal Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-great-partitions",
          "title": "Number of Great Partitions",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "split-with-minimum-sum",
          "title": "Split With Minimum Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "pacific-atlantic-water-flow": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "417",
        "title": "Pacific Atlantic Water Flow",
        "titleSlug": "pacific-atlantic-water-flow",
        "content": "<p>There is an <code>m x n</code> rectangular island that borders both the <strong>Pacific Ocean</strong> and <strong>Atlantic Ocean</strong>. The <strong>Pacific Ocean</strong> touches the island&#39;s left and top edges, and the <strong>Atlantic Ocean</strong> touches the island&#39;s right and bottom edges.</p>\n\n<p>The island is partitioned into a grid of square cells. You are given an <code>m x n</code> integer matrix <code>heights</code> where <code>heights[r][c]</code> represents the <strong>height above sea level</strong> of the cell at coordinate <code>(r, c)</code>.</p>\n\n<p>The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell&#39;s height is <strong>less than or equal to</strong> the current cell&#39;s height. Water can flow from any cell adjacent to an ocean into the ocean.</p>\n\n<p>Return <em>a <strong>2D list</strong> of grid coordinates </em><code>result</code><em> where </em><code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code><em> denotes that rain water can flow from cell </em><code>(r<sub>i</sub>, c<sub>i</sub>)</code><em> to <strong>both</strong> the Pacific and Atlantic oceans</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg\" style=\"width: 400px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n<strong>Output:</strong> [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n<strong>Explanation:</strong> The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -&gt; Pacific Ocean \n&nbsp;      [0,4] -&gt; Atlantic Ocean\n[1,3]: [1,3] -&gt; [0,3] -&gt; Pacific Ocean \n&nbsp;      [1,3] -&gt; [1,4] -&gt; Atlantic Ocean\n[1,4]: [1,4] -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Ocean \n&nbsp;      [1,4] -&gt; Atlantic Ocean\n[2,2]: [2,2] -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Ocean \n&nbsp;      [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Ocean\n[3,0]: [3,0] -&gt; Pacific Ocean \n&nbsp;      [3,0] -&gt; [4,0] -&gt; Atlantic Ocean\n[3,1]: [3,1] -&gt; [3,0] -&gt; Pacific Ocean \n&nbsp;      [3,1] -&gt; [4,1] -&gt; Atlantic Ocean\n[4,0]: [4,0] -&gt; Pacific Ocean \n       [4,0] -&gt; Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [[1]]\n<strong>Output:</strong> [[0,0]]\n<strong>Explanation:</strong> The water can flow from the only cell to the Pacific and Atlantic oceans.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == heights.length</code></li>\n\t<li><code>n == heights[r].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= heights[r][c] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7062,
        "dislikes": 1379,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"423.6K\", \"totalSubmission\": \"770.7K\", \"totalAcceptedRaw\": 423550, \"totalSubmissionRaw\": 770657, \"acRate\": \"55.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "sentence-screen-fitting": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "418",
        "title": "Sentence Screen Fitting",
        "titleSlug": "sentence-screen-fitting",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1089,
        "dislikes": 539,
        "similarQuestions": "[{\"title\": \"Minimum Cost to Separate Sentence Into Rows\", \"titleSlug\": \"minimum-cost-to-separate-sentence-into-rows\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Message Based on Limit\", \"titleSlug\": \"split-message-based-on-limit\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"97.7K\", \"totalSubmission\": \"271.9K\", \"totalAcceptedRaw\": 97651, \"totalSubmissionRaw\": 271919, \"acRate\": \"35.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-to-separate-sentence-into-rows",
          "title": "Minimum Cost to Separate Sentence Into Rows",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "split-message-based-on-limit",
          "title": "Split Message Based on Limit",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "battleships-in-a-board": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "419",
        "title": "Battleships in a Board",
        "titleSlug": "battleships-in-a-board",
        "content": "<p>Given an <code>m x n</code> matrix <code>board</code> where each cell is a battleship <code>&#39;X&#39;</code> or empty <code>&#39;.&#39;</code>, return <em>the number of the <strong>battleships</strong> on</em> <code>board</code>.</p>\n\n<p><strong>Battleships</strong> can only be placed horizontally or vertically on <code>board</code>. In other words, they can only be made of the shape <code>1 x k</code> (<code>1</code> row, <code>k</code> columns) or <code>k x 1</code> (<code>k</code> rows, <code>1</code> column), where <code>k</code> can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/10/battelship-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;X&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = [[&quot;.&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>board[i][j]</code> is either <code>&#39;.&#39;</code> or <code>&#39;X&#39;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it in one-pass, using only <code>O(1)</code> extra memory and without modifying the values <code>board</code>?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2180,
        "dislikes": 942,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"196.3K\", \"totalSubmission\": \"261.2K\", \"totalAcceptedRaw\": 196261, \"totalSubmissionRaw\": 261173, \"acRate\": \"75.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "strong-password-checker": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "420",
        "title": "Strong Password Checker",
        "titleSlug": "strong-password-checker",
        "content": "<p>A password is considered strong if the below conditions are all met:</p>\n\n<ul>\n\t<li>It has at least <code>6</code> characters and at most <code>20</code> characters.</li>\n\t<li>It contains at least <strong>one lowercase</strong> letter, at least <strong>one uppercase</strong> letter, and at least <strong>one digit</strong>.</li>\n\t<li>It does not contain three repeating characters in a row (i.e., <code>&quot;B<u><strong>aaa</strong></u>bb0&quot;</code> is weak, but <code>&quot;B<strong><u>aa</u></strong>b<u><strong>a</strong></u>0&quot;</code> is strong).</li>\n</ul>\n\n<p>Given a string <code>password</code>, return <em>the minimum number of steps required to make <code>password</code> strong. if <code>password</code> is already strong, return <code>0</code>.</em></p>\n\n<p>In one step, you can:</p>\n\n<ul>\n\t<li>Insert one character to <code>password</code>,</li>\n\t<li>Delete one character from <code>password</code>, or</li>\n\t<li>Replace one character of <code>password</code> with another character.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> password = \"a\"\n<strong>Output:</strong> 5\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> password = \"aA1\"\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> password = \"1337C0d3\"\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= password.length &lt;= 50</code></li>\n\t<li><code>password</code> consists of letters, digits, dot&nbsp;<code>&#39;.&#39;</code> or exclamation mark <code>&#39;!&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 821,
        "dislikes": 1702,
        "similarQuestions": "[{\"title\": \"Strong Password Checker II\", \"titleSlug\": \"strong-password-checker-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"37.9K\", \"totalSubmission\": \"278.5K\", \"totalAcceptedRaw\": 37915, \"totalSubmissionRaw\": 278471, \"acRate\": \"13.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "strong-password-checker-ii",
          "title": "Strong Password Checker II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "maximum-xor-of-two-numbers-in-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "421",
        "title": "Maximum XOR of Two Numbers in an Array",
        "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
        "content": "<p>Given an integer array <code>nums</code>, return <em>the maximum result of </em><code>nums[i] XOR nums[j]</code>, where <code>0 &lt;= i &lt;= j &lt; n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,10,5,25,2,8]\n<strong>Output:</strong> 28\n<strong>Explanation:</strong> The maximum result is 5 XOR 25 = 28.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n<strong>Output:</strong> 127\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5318,
        "dislikes": 384,
        "similarQuestions": "[{\"title\": \"Maximum XOR With an Element From Array\", \"titleSlug\": \"maximum-xor-with-an-element-from-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum XOR After Operations \", \"titleSlug\": \"maximum-xor-after-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Prefix Scores of Strings\", \"titleSlug\": \"sum-of-prefix-scores-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize XOR\", \"titleSlug\": \"minimize-xor\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Strong Pair XOR I\", \"titleSlug\": \"maximum-strong-pair-xor-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Strong Pair XOR II\", \"titleSlug\": \"maximum-strong-pair-xor-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"153.7K\", \"totalSubmission\": \"287.3K\", \"totalAcceptedRaw\": 153734, \"totalSubmissionRaw\": 287312, \"acRate\": \"53.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-xor-with-an-element-from-array",
          "title": "Maximum XOR With an Element From Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-xor-after-operations",
          "title": "Maximum XOR After Operations ",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sum-of-prefix-scores-of-strings",
          "title": "Sum of Prefix Scores of Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimize-xor",
          "title": "Minimize XOR",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-strong-pair-xor-i",
          "title": "Maximum Strong Pair XOR I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-strong-pair-xor-ii",
          "title": "Maximum Strong Pair XOR II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "valid-word-square": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "422",
        "title": "Valid Word Square",
        "titleSlug": "valid-word-square",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 407,
        "dislikes": 264,
        "similarQuestions": "[{\"title\": \"Word Squares\", \"titleSlug\": \"word-squares\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Toeplitz Matrix\", \"titleSlug\": \"toeplitz-matrix\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"54.2K\", \"totalSubmission\": \"133.1K\", \"totalAcceptedRaw\": 54156, \"totalSubmissionRaw\": 133098, \"acRate\": \"40.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "word-squares",
          "title": "Word Squares",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "toeplitz-matrix",
          "title": "Toeplitz Matrix",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "reconstruct-original-digits-from-english": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "423",
        "title": "Reconstruct Original Digits from English",
        "titleSlug": "reconstruct-original-digits-from-english",
        "content": "<p>Given a string <code>s</code> containing an out-of-order English representation of digits <code>0-9</code>, return <em>the digits in <strong>ascending</strong> order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"owoztneoer\"\n<strong>Output:</strong> \"012\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"fviefuro\"\n<strong>Output:</strong> \"45\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is one of the characters <code>[&quot;e&quot;,&quot;g&quot;,&quot;f&quot;,&quot;i&quot;,&quot;h&quot;,&quot;o&quot;,&quot;n&quot;,&quot;s&quot;,&quot;r&quot;,&quot;u&quot;,&quot;t&quot;,&quot;w&quot;,&quot;v&quot;,&quot;x&quot;,&quot;z&quot;]</code>.</li>\n\t<li><code>s</code> is <strong>guaranteed</strong> to be valid.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 798,
        "dislikes": 2649,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"77.4K\", \"totalSubmission\": \"151.3K\", \"totalAcceptedRaw\": 77429, \"totalSubmissionRaw\": 151336, \"acRate\": \"51.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "longest-repeating-character-replacement": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "424",
        "title": "Longest Repeating Character Replacement",
        "titleSlug": "longest-repeating-character-replacement",
        "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p>\n\n<p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABAB&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AABABBA&quot;, k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the one &#39;A&#39; in the middle with &#39;B&#39; and form &quot;AABBBBA&quot;.\nThe substring &quot;BBBB&quot; has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only uppercase English letters.</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9915,
        "dislikes": 444,
        "similarQuestions": "[{\"title\": \"Longest Substring with At Most K Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-k-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Max Consecutive Ones III\", \"titleSlug\": \"max-consecutive-ones-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Make Array Continuous\", \"titleSlug\": \"minimum-number-of-operations-to-make-array-continuous\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximize the Confusion of an Exam\", \"titleSlug\": \"maximize-the-confusion-of-an-exam\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Substring of One Repeating Character\", \"titleSlug\": \"longest-substring-of-one-repeating-character\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"615.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 615708, \"totalSubmissionRaw\": 1159657, \"acRate\": \"53.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
          "title": "Longest Substring with At Most K Distinct Characters",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "max-consecutive-ones-iii",
          "title": "Max Consecutive Ones III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
          "title": "Minimum Number of Operations to Make Array Continuous",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximize-the-confusion-of-an-exam",
          "title": "Maximize the Confusion of an Exam",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-substring-of-one-repeating-character",
          "title": "Longest Substring of One Repeating Character",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "word-squares": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "425",
        "title": "Word Squares",
        "titleSlug": "word-squares",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1077,
        "dislikes": 71,
        "similarQuestions": "[{\"title\": \"Valid Word Square\", \"titleSlug\": \"valid-word-square\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"72.6K\", \"totalSubmission\": \"136.5K\", \"totalAcceptedRaw\": 72595, \"totalSubmissionRaw\": 136484, \"acRate\": \"53.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-word-square",
          "title": "Valid Word Square",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "convert-binary-search-tree-to-sorted-doubly-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "426",
        "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
        "titleSlug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2502,
        "dislikes": 200,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" },
          { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
        ],
        "stats": "{\"totalAccepted\": \"255.4K\", \"totalSubmission\": \"394.4K\", \"totalAcceptedRaw\": 255430, \"totalSubmissionRaw\": 394410, \"acRate\": \"64.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" },
        { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
      ]
    }
  },
  "construct-quad-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "427",
        "title": "Construct Quad Tree",
        "titleSlug": "construct-quad-tree",
        "content": "<p>Given a <code>n * n</code> matrix <code>grid</code> of <code>0&#39;s</code> and <code>1&#39;s</code> only. We want to represent <code>grid</code> with a Quad-Tree.</p>\n\n<p>Return <em>the root of the Quad-Tree representing </em><code>grid</code>.</p>\n\n<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p>\n\n<ul>\n\t<li><code>val</code>: True if the node represents a grid of 1&#39;s or False if the node represents a grid of 0&#39;s. Notice that you can assign the <code>val</code> to True or False when <code>isLeaf</code> is False, and both are accepted in the answer.</li>\n\t<li><code>isLeaf</code>: True if the node is a leaf node on the tree or False if the node has four children.</li>\n</ul>\n\n<pre>\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}</pre>\n\n<p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p>\n\n<ol>\n\t<li>If the current grid has the same value (i.e all <code>1&#39;s</code> or all <code>0&#39;s</code>) set <code>isLeaf</code> True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li>\n\t<li>If the current grid has different values, set <code>isLeaf</code> to False and set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li>\n\t<li>Recurse for each of the children with the proper sub-grid.</li>\n</ol>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"width: 777px; height: 181px;\" />\n<p>If you want to know more about the Quad-Tree, you can refer to the <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</p>\n\n<p><strong>Quad-Tree format:</strong></p>\n\n<p>You don&#39;t need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p>\n\n<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p>\n\n<p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/grid1.png\" style=\"width: 777px; height: 99px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1],[1,0]]\n<strong>Output:</strong> [[0,1],[1,0],[1,1],[1,1],[1,0]]\n<strong>Explanation:</strong> The explanation of this example is shown below:\nNotice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e1tree.png\" style=\"width: 777px; height: 186px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2mat.png\" style=\"width: 777px; height: 343px;\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n<strong>Output:</strong> [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>Explanation:</strong> All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2tree.png\" style=\"width: 777px; height: 328px;\" />\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>n == 2<sup>x</sup></code> where <code>0 &lt;= x &lt;= 6</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1429,
        "dislikes": 1766,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"108.6K\", \"totalSubmission\": \"144.5K\", \"totalAcceptedRaw\": 108616, \"totalSubmissionRaw\": 144543, \"acRate\": \"75.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "serialize-and-deserialize-n-ary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "428",
        "title": "Serialize and Deserialize N-ary Tree",
        "titleSlug": "serialize-and-deserialize-n-ary-tree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1022,
        "dislikes": 56,
        "similarQuestions": "[{\"title\": \"Serialize and Deserialize Binary Tree\", \"titleSlug\": \"serialize-and-deserialize-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize BST\", \"titleSlug\": \"serialize-and-deserialize-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Encode N-ary Tree to Binary Tree\", \"titleSlug\": \"encode-n-ary-tree-to-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"82.1K\", \"totalSubmission\": \"123.7K\", \"totalAcceptedRaw\": 82144, \"totalSubmissionRaw\": 123720, \"acRate\": \"66.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "serialize-and-deserialize-binary-tree",
          "title": "Serialize and Deserialize Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "serialize-and-deserialize-bst",
          "title": "Serialize and Deserialize BST",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "encode-n-ary-tree-to-binary-tree",
          "title": "Encode N-ary Tree to Binary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "n-ary-tree-level-order-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "429",
        "title": "N-ary Tree Level Order Traversal",
        "titleSlug": "n-ary-tree-level-order-traversal",
        "content": "<p>Given an n-ary tree, return the <em>level order</em> traversal of its nodes&#39; values.</p>\n\n<p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [[1],[3,2,4],[5,6]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>\n\t<li>The total number of nodes is between <code>[0, 10<sup>4</sup>]</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3559,
        "dislikes": 135,
        "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Preorder Traversal\", \"titleSlug\": \"n-ary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Postorder Traversal\", \"titleSlug\": \"n-ary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"The Time When the Network Becomes Idle\", \"titleSlug\": \"the-time-when-the-network-becomes-idle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"294.6K\", \"totalSubmission\": \"416.4K\", \"totalAcceptedRaw\": 294552, \"totalSubmissionRaw\": 416385, \"acRate\": \"70.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal",
          "title": "Binary Tree Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-ary-tree-preorder-traversal",
          "title": "N-ary Tree Preorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-ary-tree-postorder-traversal",
          "title": "N-ary Tree Postorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "the-time-when-the-network-becomes-idle",
          "title": "The Time When the Network Becomes Idle",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "flatten-a-multilevel-doubly-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "430",
        "title": "Flatten a Multilevel Doubly Linked List",
        "titleSlug": "flatten-a-multilevel-doubly-linked-list",
        "content": "<p>You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional <strong>child pointer</strong>. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a <strong>multilevel data structure</strong> as shown in the example below.</p>\n\n<p>Given the <code>head</code> of the first level of the list, <strong>flatten</strong> the list so that all the nodes appear in a single-level, doubly linked list. Let <code>curr</code> be a node with a child list. The nodes in the child list should appear <strong>after</strong> <code>curr</code> and <strong>before</strong> <code>curr.next</code> in the flattened list.</p>\n\n<p>Return <em>the </em><code>head</code><em> of the flattened list. The nodes in the list must have <strong>all</strong> of their child pointers set to </em><code>null</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/09/flatten11.jpg\" style=\"width: 700px; height: 339px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n<strong>Output:</strong> [1,2,3,7,8,11,12,9,10,4,5,6]\n<strong>Explanation:</strong> The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n<img src=\"https://assets.leetcode.com/uploads/2021/11/09/flatten12.jpg\" style=\"width: 1000px; height: 69px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/09/flatten2.1jpg\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,null,3]\n<strong>Output:</strong> [1,3,2]\n<strong>Explanation:</strong> The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n<img src=\"https://assets.leetcode.com/uploads/2021/11/24/list.jpg\" style=\"width: 300px; height: 87px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There could be empty list in the input.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of Nodes will not exceed <code>1000</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>How the multilevel linked list is represented in test cases:</strong></p>\n\n<p>We use the multilevel linked list from <strong class=\"example\">Example 1</strong> above:</p>\n\n<pre>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL</pre>\n\n<p>The serialization of each level is as follows:</p>\n\n<pre>\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n</pre>\n\n<p>To serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:</p>\n\n<pre>\n[1,    2,    3, 4, 5, 6, null]\n             |\n[null, null, 7,    8, 9, 10, null]\n                   |\n[            null, 11, 12, null]\n</pre>\n\n<p>Merging the serialization of each level and removing trailing nulls we obtain:</p>\n\n<pre>\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4875,
        "dislikes": 313,
        "similarQuestions": "[{\"title\": \"Flatten Binary Tree to Linked List\", \"titleSlug\": \"flatten-binary-tree-to-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Correct a Binary Tree\", \"titleSlug\": \"correct-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
        ],
        "stats": "{\"totalAccepted\": \"310.9K\", \"totalSubmission\": \"519K\", \"totalAcceptedRaw\": 310879, \"totalSubmissionRaw\": 518956, \"acRate\": \"59.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-binary-tree-to-linked-list",
          "title": "Flatten Binary Tree to Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "correct-a-binary-tree",
          "title": "Correct a Binary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
      ]
    }
  },
  "encode-n-ary-tree-to-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "431",
        "title": "Encode N-ary Tree to Binary Tree",
        "titleSlug": "encode-n-ary-tree-to-binary-tree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 510,
        "dislikes": 26,
        "similarQuestions": "[{\"title\": \"Serialize and Deserialize N-ary Tree\", \"titleSlug\": \"serialize-and-deserialize-n-ary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"20.8K\", \"totalSubmission\": \"26.3K\", \"totalAcceptedRaw\": 20824, \"totalSubmissionRaw\": 26264, \"acRate\": \"79.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "serialize-and-deserialize-n-ary-tree",
          "title": "Serialize and Deserialize N-ary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "all-oone-data-structure": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "432",
        "title": "All O`one Data Structure",
        "titleSlug": "all-oone-data-structure",
        "content": "<p>Design a data structure to store the strings&#39; count with the ability to return the strings with minimum and maximum counts.</p>\n\n<p>Implement the <code>AllOne</code> class:</p>\n\n<ul>\n\t<li><code>AllOne()</code> Initializes the object of the data structure.</li>\n\t<li><code>inc(String key)</code> Increments the count of the string <code>key</code> by <code>1</code>. If <code>key</code> does not exist in the data structure, insert it with count <code>1</code>.</li>\n\t<li><code>dec(String key)</code> Decrements the count of the string <code>key</code> by <code>1</code>. If the count of <code>key</code> is <code>0</code> after the decrement, remove it from the data structure. It is guaranteed that <code>key</code> exists in the data structure before the decrement.</li>\n\t<li><code>getMaxKey()</code> Returns one of the keys with the maximal count. If no element exists, return an empty string <code>&quot;&quot;</code>.</li>\n\t<li><code>getMinKey()</code> Returns one of the keys with the minimum count. If no element exists, return an empty string <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that each function must run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;AllOne&quot;, &quot;inc&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;]\n[[], [&quot;hello&quot;], [&quot;hello&quot;], [], [], [&quot;leet&quot;], [], []]\n<strong>Output</strong>\n[null, null, null, &quot;hello&quot;, &quot;hello&quot;, null, &quot;hello&quot;, &quot;leet&quot;]\n\n<strong>Explanation</strong>\nAllOne allOne = new AllOne();\nallOne.inc(&quot;hello&quot;);\nallOne.inc(&quot;hello&quot;);\nallOne.getMaxKey(); // return &quot;hello&quot;\nallOne.getMinKey(); // return &quot;hello&quot;\nallOne.inc(&quot;leet&quot;);\nallOne.getMaxKey(); // return &quot;hello&quot;\nallOne.getMinKey(); // return &quot;leet&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length &lt;= 10</code></li>\n\t<li><code>key</code> consists of lowercase English letters.</li>\n\t<li>It is guaranteed that for each call to <code>dec</code>, <code>key</code> is existing in the data structure.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code>&nbsp;calls will be made to <code>inc</code>, <code>dec</code>, <code>getMaxKey</code>, and <code>getMinKey</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1502,
        "dislikes": 163,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
        ],
        "stats": "{\"totalAccepted\": \"74.7K\", \"totalSubmission\": \"204.4K\", \"totalAcceptedRaw\": 74702, \"totalSubmissionRaw\": 204388, \"acRate\": \"36.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
      ]
    }
  },
  "minimum-genetic-mutation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "433",
        "title": "Minimum Genetic Mutation",
        "titleSlug": "minimum-genetic-mutation",
        "content": "<p>A gene string can be represented by an 8-character long string, with choices from <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;T&#39;</code>.</p>\n\n<p>Suppose we need to investigate a mutation from a gene string <code>startGene</code> to a gene string <code>endGene</code> where one mutation is defined as one single character changed in the gene string.</p>\n\n<ul>\n\t<li>For example, <code>&quot;AACCGGTT&quot; --&gt; &quot;AACCGGTA&quot;</code> is one mutation.</li>\n</ul>\n\n<p>There is also a gene bank <code>bank</code> that records all the valid gene mutations. A gene must be in <code>bank</code> to make it a valid gene string.</p>\n\n<p>Given the two gene strings <code>startGene</code> and <code>endGene</code> and the gene bank <code>bank</code>, return <em>the minimum number of mutations needed to mutate from </em><code>startGene</code><em> to </em><code>endGene</code>. If there is no such a mutation, return <code>-1</code>.</p>\n\n<p>Note that the starting point is assumed to be valid, so it might not be included in the bank.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> startGene = &quot;AACCGGTT&quot;, endGene = &quot;AACCGGTA&quot;, bank = [&quot;AACCGGTA&quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> startGene = &quot;AACCGGTT&quot;, endGene = &quot;AAACGGTA&quot;, bank = [&quot;AACCGGTA&quot;,&quot;AACCGCTA&quot;,&quot;AAACGGTA&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= bank.length &lt;= 10</code></li>\n\t<li><code>startGene.length == endGene.length == bank[i].length == 8</code></li>\n\t<li><code>startGene</code>, <code>endGene</code>, and <code>bank[i]</code> consist of only the characters <code>[&#39;A&#39;, &#39;C&#39;, &#39;G&#39;, &#39;T&#39;]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2792,
        "dislikes": 297,
        "similarQuestions": "[{\"title\": \"Word Ladder\", \"titleSlug\": \"word-ladder\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"144.3K\", \"totalSubmission\": \"271.1K\", \"totalAcceptedRaw\": 144325, \"totalSubmissionRaw\": 271085, \"acRate\": \"53.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "word-ladder",
          "title": "Word Ladder",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "number-of-segments-in-a-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "434",
        "title": "Number of Segments in a String",
        "titleSlug": "number-of-segments-in-a-string",
        "content": "<p>Given a string <code>s</code>, return <em>the number of segments in the string</em>.</p>\n\n<p>A <strong>segment</strong> is defined to be a contiguous sequence of <strong>non-space characters</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello, my name is John&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The five segments are [&quot;Hello,&quot;, &quot;my&quot;, &quot;name&quot;, &quot;is&quot;, &quot;John&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 300</code></li>\n\t<li><code>s</code> consists of lowercase and uppercase English letters, digits, or one of the following characters <code>&quot;!@#$%^&amp;*()_+-=&#39;,.:&quot;</code>.</li>\n\t<li>The only space character in <code>s</code> is <code>&#39; &#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 749,
        "dislikes": 1244,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"166.4K\", \"totalSubmission\": \"455.2K\", \"totalAcceptedRaw\": 166419, \"totalSubmissionRaw\": 455221, \"acRate\": \"36.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "non-overlapping-intervals": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "435",
        "title": "Non-overlapping Intervals",
        "titleSlug": "non-overlapping-intervals",
        "content": "<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> [1,3] can be removed and the rest of the intervals are non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7753,
        "dislikes": 208,
        "similarQuestions": "[{\"title\": \"Minimum Number of Arrows to Burst Balloons\", \"titleSlug\": \"minimum-number-of-arrows-to-burst-balloons\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Determine if Two Events Have Conflict\", \"titleSlug\": \"determine-if-two-events-have-conflict\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"503.2K\", \"totalSubmission\": \"956K\", \"totalAcceptedRaw\": 503162, \"totalSubmissionRaw\": 955960, \"acRate\": \"52.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
          "title": "Minimum Number of Arrows to Burst Balloons",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "determine-if-two-events-have-conflict",
          "title": "Determine if Two Events Have Conflict",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "find-right-interval": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "436",
        "title": "Find Right Interval",
        "titleSlug": "find-right-interval",
        "content": "<p>You are given an array of <code>intervals</code>, where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and each <code>start<sub>i</sub></code> is <strong>unique</strong>.</p>\n\n<p>The <strong>right interval</strong> for an interval <code>i</code> is an interval <code>j</code> such that <code>start<sub>j</sub> &gt;= end<sub>i</sub></code> and <code>start<sub>j</sub></code> is <strong>minimized</strong>. Note that <code>i</code> may equal <code>j</code>.</p>\n\n<p>Return <em>an array of <strong>right interval</strong> indices for each interval <code>i</code></em>. If no <strong>right interval</strong> exists for interval <code>i</code>, then put <code>-1</code> at index <code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2]]\n<strong>Output:</strong> [-1]\n<strong>Explanation:</strong> There is only one interval in the collection, so it outputs -1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[3,4],[2,3],[1,2]]\n<strong>Output:</strong> [-1,0,1]\n<strong>Explanation:</strong> There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>0</sub> = 3 is the smallest start that is &gt;= end<sub>1</sub> = 3.\nThe right interval for [1,2] is [2,3] since start<sub>1</sub> = 2 is the smallest start that is &gt;= end<sub>2</sub> = 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[2,3],[3,4]]\n<strong>Output:</strong> [-1,2,-1]\n<strong>Explanation:</strong> There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>2</sub> = 3 is the smallest start that is &gt;= end<sub>1</sub> = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li>The start point of each interval is <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2047,
        "dislikes": 329,
        "similarQuestions": "[{\"title\": \"Data Stream as Disjoint Intervals\", \"titleSlug\": \"data-stream-as-disjoint-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"105.9K\", \"totalSubmission\": \"205K\", \"totalAcceptedRaw\": 105884, \"totalSubmissionRaw\": 205002, \"acRate\": \"51.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "data-stream-as-disjoint-intervals",
          "title": "Data Stream as Disjoint Intervals",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "path-sum-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "437",
        "title": "Path Sum III",
        "titleSlug": "path-sum-iii",
        "content": "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <em>the number of paths where the sum of the values&nbsp;along the path equals</em>&nbsp;<code>targetSum</code>.</p>\n\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg\" style=\"width: 450px; height: 386px;\" />\n<pre>\n<strong>Input:</strong> root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The paths that sum to 8 are shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 1000]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10518,
        "dislikes": 494,
        "similarQuestions": "[{\"title\": \"Path Sum\", \"titleSlug\": \"path-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Path Sum II\", \"titleSlug\": \"path-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum IV\", \"titleSlug\": \"path-sum-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Univalue Path\", \"titleSlug\": \"longest-univalue-path\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"515.6K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 515558, \"totalSubmissionRaw\": 1101242, \"acRate\": \"46.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "path-sum",
          "title": "Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-ii",
          "title": "Path Sum II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iv",
          "title": "Path Sum IV",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-univalue-path",
          "title": "Longest Univalue Path",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "find-all-anagrams-in-a-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "438",
        "title": "Find All Anagrams in a String",
        "titleSlug": "find-all-anagrams-in-a-string",
        "content": "<p>Given two strings <code>s</code> and <code>p</code>, return <em>an array of all the start indices of </em><code>p</code><em>&#39;s anagrams in </em><code>s</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;\n<strong>Output:</strong> [0,6]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.\nThe substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;, p = &quot;ab&quot;\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12014,
        "dislikes": 330,
        "similarQuestions": "[{\"title\": \"Valid Anagram\", \"titleSlug\": \"valid-anagram\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Permutation in String\", \"titleSlug\": \"permutation-in-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"827.6K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 827609, \"totalSubmissionRaw\": 1635045, \"acRate\": \"50.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-anagram",
          "title": "Valid Anagram",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "permutation-in-string",
          "title": "Permutation in String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "ternary-expression-parser": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "439",
        "title": "Ternary Expression Parser",
        "titleSlug": "ternary-expression-parser",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 473,
        "dislikes": 64,
        "similarQuestions": "[{\"title\": \"Mini Parser\", \"titleSlug\": \"mini-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Comments\", \"titleSlug\": \"remove-comments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Parse Lisp Expression\", \"titleSlug\": \"parse-lisp-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"31.5K\", \"totalSubmission\": \"52K\", \"totalAcceptedRaw\": 31512, \"totalSubmissionRaw\": 52042, \"acRate\": \"60.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "mini-parser",
          "title": "Mini Parser",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-comments",
          "title": "Remove Comments",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "parse-lisp-expression",
          "title": "Parse Lisp Expression",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "k-th-smallest-in-lexicographical-order": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "440",
        "title": "K-th Smallest in Lexicographical Order",
        "titleSlug": "k-th-smallest-in-lexicographical-order",
        "content": "<p>Given two integers <code>n</code> and <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>lexicographically smallest integer in the range</em> <code>[1, n]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13, k = 2\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 745,
        "dislikes": 86,
        "similarQuestions": "[{\"title\": \"Count Special Integers\", \"titleSlug\": \"count-special-integers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Trie", "slug": "trie" }],
        "stats": "{\"totalAccepted\": \"21.9K\", \"totalSubmission\": \"69K\", \"totalAcceptedRaw\": 21909, \"totalSubmissionRaw\": 68986, \"acRate\": \"31.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-special-integers",
          "title": "Count Special Integers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Trie", "slug": "trie" }]
    }
  },
  "arranging-coins": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "441",
        "title": "Arranging Coins",
        "titleSlug": "arranging-coins",
        "content": "<p>You have <code>n</code> coins and you want to build a staircase with these coins. The staircase consists of <code>k</code> rows where the <code>i<sup>th</sup></code> row has exactly <code>i</code> coins. The last row of the staircase <strong>may be</strong> incomplete.</p>\n\n<p>Given the integer <code>n</code>, return <em>the number of <strong>complete rows</strong> of the staircase you will build</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Because the 3<sup>rd</sup> row is incomplete, we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Because the 4<sup>th</sup> row is incomplete, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3719,
        "dislikes": 1294,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"406.8K\", \"totalSubmission\": \"876.2K\", \"totalAcceptedRaw\": 406837, \"totalSubmissionRaw\": 876239, \"acRate\": \"46.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "find-all-duplicates-in-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "442",
        "title": "Find All Duplicates in an Array",
        "titleSlug": "find-all-duplicates-in-an-array",
        "content": "<p>Given an integer array <code>nums</code> of length <code>n</code> where all the integers of <code>nums</code> are in the range <code>[1, n]</code> and each integer appears <strong>once</strong> or <strong>twice</strong>, return <em>an array of all the integers that appears <strong>twice</strong></em>.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)&nbsp;</code>time and uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,3,2,7,8,2,3,1]\n<strong>Output:</strong> [2,3]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> [1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n\t<li>Each element in <code>nums</code> appears <strong>once</strong> or <strong>twice</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9433,
        "dislikes": 330,
        "similarQuestions": "[{\"title\": \"Find All Numbers Disappeared in an Array\", \"titleSlug\": \"find-all-numbers-disappeared-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Distances\", \"titleSlug\": \"sum-of-distances\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"583.9K\", \"totalSubmission\": \"793.4K\", \"totalAcceptedRaw\": 583883, \"totalSubmissionRaw\": 793439, \"acRate\": \"73.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "find-all-numbers-disappeared-in-an-array",
          "title": "Find All Numbers Disappeared in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-distances",
          "title": "Sum of Distances",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "string-compression": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "443",
        "title": "String Compression",
        "titleSlug": "string-compression",
        "content": "<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group&#39;s length is <code>1</code>, append the character to <code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group&#39;s length.</li>\n</ul>\n\n<p>The compressed string <code>s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code>chars</code></strong>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p>\n\n<p>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</p>\n\n<p>You must write an algorithm that uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n<strong>Explanation:</strong> The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [&quot;a&quot;]\n<strong>Explanation:</strong> The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\n<strong>Explanation:</strong> The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4650,
        "dislikes": 7370,
        "similarQuestions": "[{\"title\": \"Count and Say\", \"titleSlug\": \"count-and-say\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Compressed String Iterator\", \"titleSlug\": \"design-compressed-string-iterator\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Decompress Run-Length Encoded List\", \"titleSlug\": \"decompress-run-length-encoded-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"491K\", \"totalSubmission\": \"916.3K\", \"totalAcceptedRaw\": 490992, \"totalSubmissionRaw\": 916277, \"acRate\": \"53.6%\"}",
        "hints": [
          "How do you know if you are at the end of a consecutive group of characters?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "count-and-say",
          "title": "Count and Say",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "encode-and-decode-strings",
          "title": "Encode and Decode Strings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "design-compressed-string-iterator",
          "title": "Design Compressed String Iterator",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "decompress-run-length-encoded-list",
          "title": "Decompress Run-Length Encoded List",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "How do you know if you are at the end of a consecutive group of characters?"
      ],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "sequence-reconstruction": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "444",
        "title": "Sequence Reconstruction",
        "titleSlug": "sequence-reconstruction",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 557,
        "dislikes": 1490,
        "similarQuestions": "[{\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" }
        ],
        "stats": "{\"totalAccepted\": \"53.4K\", \"totalSubmission\": \"192.9K\", \"totalAcceptedRaw\": 53440, \"totalSubmissionRaw\": 192927, \"acRate\": \"27.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule-ii",
          "title": "Course Schedule II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" }
      ]
    }
  },
  "add-two-numbers-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "445",
        "title": "Add Two Numbers II",
        "titleSlug": "add-two-numbers-ii",
        "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/sumii-linked-list.jpg\" style=\"width: 523px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [7,2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,8,0,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [8,0,7]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Could you solve it without reversing the input lists?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5768,
        "dislikes": 281,
        "similarQuestions": "[{\"title\": \"Add Two Numbers\", \"titleSlug\": \"add-two-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Add Two Polynomials Represented as Linked Lists\", \"titleSlug\": \"add-two-polynomials-represented-as-linked-lists\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Math", "slug": "math" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"455.4K\", \"totalSubmission\": \"745.7K\", \"totalAcceptedRaw\": 455401, \"totalSubmissionRaw\": 745710, \"acRate\": \"61.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-numbers",
          "title": "Add Two Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "add-two-polynomials-represented-as-linked-lists",
          "title": "Add Two Polynomials Represented as Linked Lists",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Math", "slug": "math" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "arithmetic-slices-ii-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "446",
        "title": "Arithmetic Slices II - Subsequence",
        "titleSlug": "arithmetic-slices-ii-subsequence",
        "content": "<p>Given an integer array <code>nums</code>, return <em>the number of all the <strong>arithmetic subsequences</strong> of</em> <code>nums</code>.</p>\n\n<p>A sequence of numbers is called arithmetic if it consists of <strong>at least three elements</strong> and if the difference between any two consecutive elements is the same.</p>\n\n<ul>\n\t<li>For example, <code>[1, 3, 5, 7, 9]</code>, <code>[7, 7, 7, 7]</code>, and <code>[3, -1, -5, -9]</code> are arithmetic sequences.</li>\n\t<li>For example, <code>[1, 1, 2, 5, 7]</code> is not an arithmetic sequence.</li>\n</ul>\n\n<p>A <strong>subsequence</strong> of an array is a sequence that can be formed by removing some elements (possibly none) of the array.</p>\n\n<ul>\n\t<li>For example, <code>[2,5,10]</code> is a subsequence of <code>[1,2,1,<strong><u>2</u></strong>,4,1,<u><strong>5</strong></u>,<u><strong>10</strong></u>]</code>.</li>\n</ul>\n\n<p>The test cases are generated so that the answer fits in <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,6,8,10]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> Any subsequence of this array is arithmetic.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1&nbsp; &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2424,
        "dislikes": 117,
        "similarQuestions": "[{\"title\": \"Arithmetic Slices\", \"titleSlug\": \"arithmetic-slices\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Destroy Sequential Targets\", \"titleSlug\": \"destroy-sequential-targets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Palindromic Subsequences\", \"titleSlug\": \"count-palindromic-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"78K\", \"totalSubmission\": \"166.9K\", \"totalAcceptedRaw\": 77953, \"totalSubmissionRaw\": 166929, \"acRate\": \"46.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "arithmetic-slices",
          "title": "Arithmetic Slices",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "destroy-sequential-targets",
          "title": "Destroy Sequential Targets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-palindromic-subsequences",
          "title": "Count Palindromic Subsequences",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "number-of-boomerangs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "447",
        "title": "Number of Boomerangs",
        "titleSlug": "number-of-boomerangs",
        "content": "<p>You are given <code>n</code> <code>points</code> in the plane that are all <strong>distinct</strong>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. A <strong>boomerang</strong> is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> <strong>(the order of the tuple matters)</strong>.</p>\n\n<p>Return <em>the number of boomerangs</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[0,0],[1,0],[2,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == points.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the points are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 808,
        "dislikes": 998,
        "similarQuestions": "[{\"title\": \"Line Reflection\", \"titleSlug\": \"line-reflection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"97.2K\", \"totalSubmission\": \"176K\", \"totalAcceptedRaw\": 97180, \"totalSubmissionRaw\": 175954, \"acRate\": \"55.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "line-reflection",
          "title": "Line Reflection",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "find-all-numbers-disappeared-in-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "448",
        "title": "Find All Numbers Disappeared in an Array",
        "titleSlug": "find-all-numbers-disappeared-in-an-array",
        "content": "<p>Given an array <code>nums</code> of <code>n</code> integers where <code>nums[i]</code> is in the range <code>[1, n]</code>, return <em>an array of all the integers in the range</em> <code>[1, n]</code> <em>that do not appear in</em> <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,3,2,7,8,2,3,1]\n<strong>Output:</strong> [5,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> [2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it without extra space and in <code>O(n)</code> runtime? You may assume the returned list does not count as extra space.</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 9135,
        "dislikes": 462,
        "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find All Duplicates in an Array\", \"titleSlug\": \"find-all-duplicates-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Unique Binary String\", \"titleSlug\": \"find-unique-binary-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Append K Integers With Minimal Sum\", \"titleSlug\": \"append-k-integers-with-minimal-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Replace Elements in an Array\", \"titleSlug\": \"replace-elements-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range I\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Integers to Choose From a Range II\", \"titleSlug\": \"maximum-number-of-integers-to-choose-from-a-range-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"820.6K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 820601, \"totalSubmissionRaw\": 1353887, \"acRate\": \"60.6%\"}",
        "hints": [
          "This is a really easy problem if you decide to use additional memory. For those trying to write an initial solution using additional memory, think <b>counters!</b>",
          "However, the trick really is to not use any additional space than what is already available to use. Sometimes, multiple passes over the input array help find the solution. However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution.",
          "The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. Can we use this information and modify the array in-place somehow to find what we need?"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "first-missing-positive",
          "title": "First Missing Positive",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-all-duplicates-in-an-array",
          "title": "Find All Duplicates in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-unique-binary-string",
          "title": "Find Unique Binary String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "append-k-integers-with-minimal-sum",
          "title": "Append K Integers With Minimal Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "replace-elements-in-an-array",
          "title": "Replace Elements in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-i",
          "title": "Maximum Number of Integers to Choose From a Range I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-integers-to-choose-from-a-range-ii",
          "title": "Maximum Number of Integers to Choose From a Range II",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "This is a really easy problem if you decide to use additional memory. For those trying to write an initial solution using additional memory, think <b>counters!</b>",
        "However, the trick really is to not use any additional space than what is already available to use. Sometimes, multiple passes over the input array help find the solution. However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution.",
        "The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. Can we use this information and modify the array in-place somehow to find what we need?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "serialize-and-deserialize-bst": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "449",
        "title": "Serialize and Deserialize BST",
        "titleSlug": "serialize-and-deserialize-bst",
        "content": "<p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>\n\n<p><b>The encoded string should be as compact as possible.</b></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,1,3]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3430,
        "dislikes": 162,
        "similarQuestions": "[{\"title\": \"Serialize and Deserialize Binary Tree\", \"titleSlug\": \"serialize-and-deserialize-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize N-ary Tree\", \"titleSlug\": \"serialize-and-deserialize-n-ary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"228.3K\", \"totalSubmission\": \"397.5K\", \"totalAcceptedRaw\": 228338, \"totalSubmissionRaw\": 397528, \"acRate\": \"57.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "serialize-and-deserialize-binary-tree",
          "title": "Serialize and Deserialize Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-duplicate-subtrees",
          "title": "Find Duplicate Subtrees",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "serialize-and-deserialize-n-ary-tree",
          "title": "Serialize and Deserialize N-ary Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "delete-node-in-a-bst": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "450",
        "title": "Delete Node in a BST",
        "titleSlug": "delete-node-in-a-bst",
        "content": "<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return <em>the <strong>root node reference</strong> (possibly updated) of the BST</em>.</p>\n\n<p>Basically, the deletion can be divided into two stages:</p>\n\n<ol>\n\t<li>Search for a node to remove.</li>\n\t<li>If the node is found, delete the node.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg\" style=\"width: 800px; height: 214px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 3\n<strong>Output:</strong> [5,4,6,2,null,null,7]\n<strong>Explanation:</strong> Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg\" style=\"width: 350px; height: 255px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 0\n<strong>Output:</strong> [5,3,6,2,4,null,7]\n<strong>Explanation:</strong> The tree does not contain a node with value = 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [], key = 0\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>Each node has a <strong>unique</strong> value.</li>\n\t<li><code>root</code> is a valid binary search tree.</li>\n\t<li><code>-10<sup>5</sup> &lt;= key &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it with time complexity <code>O(height of tree)</code>?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8641,
        "dislikes": 238,
        "similarQuestions": "[{\"title\": \"Split BST\", \"titleSlug\": \"split-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"441.6K\", \"totalSubmission\": \"867K\", \"totalAcceptedRaw\": 441588, \"totalSubmissionRaw\": 866967, \"acRate\": \"50.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "split-bst",
          "title": "Split BST",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "sort-characters-by-frequency": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "451",
        "title": "Sort Characters By Frequency",
        "titleSlug": "sort-characters-by-frequency",
        "content": "<p>Given a string <code>s</code>, sort it in <strong>decreasing order</strong> based on the <strong>frequency</strong> of the characters. The <strong>frequency</strong> of a character is the number of times it appears in the string.</p>\n\n<p>Return <em>the sorted string</em>. If there are multiple answers, return <em>any of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;tree&quot;\n<strong>Output:</strong> &quot;eert&quot;\n<strong>Explanation:</strong> &#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once.\nSo &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &quot;eetr&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cccaaa&quot;\n<strong>Output:</strong> &quot;aaaccc&quot;\n<strong>Explanation:</strong> Both &#39;c&#39; and &#39;a&#39; appear three times, so both &quot;cccaaa&quot; and &quot;aaaccc&quot; are valid answers.\nNote that &quot;cacaca&quot; is incorrect, as the same characters must be together.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Aabb&quot;\n<strong>Output:</strong> &quot;bbAa&quot;\n<strong>Explanation:</strong> &quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.\nNote that &#39;A&#39; and &#39;a&#39; are treated as two different characters.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of uppercase and lowercase English letters and digits.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7446,
        "dislikes": 242,
        "similarQuestions": "[{\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"First Unique Character in a String\", \"titleSlug\": \"first-unique-character-in-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sort Array by Increasing Frequency\", \"titleSlug\": \"sort-array-by-increasing-frequency\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Percentage of Letter in String\", \"titleSlug\": \"percentage-of-letter-in-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Pairs in Array\", \"titleSlug\": \"maximum-number-of-pairs-in-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Node With Highest Edge Score\", \"titleSlug\": \"node-with-highest-edge-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Even Element\", \"titleSlug\": \"most-frequent-even-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Pairs Of Similar Strings\", \"titleSlug\": \"count-pairs-of-similar-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Bucket Sort", "slug": "bucket-sort" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"564.7K\", \"totalSubmission\": \"800.2K\", \"totalAcceptedRaw\": 564702, \"totalSubmissionRaw\": 800227, \"acRate\": \"70.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "top-k-frequent-elements",
          "title": "Top K Frequent Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "first-unique-character-in-a-string",
          "title": "First Unique Character in a String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sort-array-by-increasing-frequency",
          "title": "Sort Array by Increasing Frequency",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "percentage-of-letter-in-string",
          "title": "Percentage of Letter in String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-number-of-pairs-in-array",
          "title": "Maximum Number of Pairs in Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "node-with-highest-edge-score",
          "title": "Node With Highest Edge Score",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "most-frequent-even-element",
          "title": "Most Frequent Even Element",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-pairs-of-similar-strings",
          "title": "Count Pairs Of Similar Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Bucket Sort", "slug": "bucket-sort" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "minimum-number-of-arrows-to-burst-balloons": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "452",
        "title": "Minimum Number of Arrows to Burst Balloons",
        "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
        "content": "<p>There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array <code>points</code> where <code>points[i] = [x<sub>start</sub>, x<sub>end</sub>]</code> denotes a balloon whose <strong>horizontal diameter</strong> stretches between <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code>. You do not know the exact y-coordinates of the balloons.</p>\n\n<p>Arrows can be shot up <strong>directly vertically</strong> (in the positive y-direction) from different points along the x-axis. A balloon with <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code> is <strong>burst</strong> by an arrow shot at <code>x</code> if <code>x<sub>start</sub> &lt;= x &lt;= x<sub>end</sub></code>. There is <strong>no limit</strong> to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.</p>\n\n<p>Given the array <code>points</code>, return <em>the <strong>minimum</strong> number of arrows that must be shot to burst all balloons</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[10,16],[2,8],[1,6],[7,12]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[3,4],[5,6],[7,8]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One arrow needs to be shot for each balloon for a total of 4 arrows.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[2,3],[3,4],[4,5]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= x<sub>start</sub> &lt; x<sub>end</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6626,
        "dislikes": 193,
        "similarQuestions": "[{\"title\": \"Meeting Rooms II\", \"titleSlug\": \"meeting-rooms-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-overlapping Intervals\", \"titleSlug\": \"non-overlapping-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"359.6K\", \"totalSubmission\": \"643.1K\", \"totalAcceptedRaw\": 359636, \"totalSubmissionRaw\": 643051, \"acRate\": \"55.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "meeting-rooms-ii",
          "title": "Meeting Rooms II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "non-overlapping-intervals",
          "title": "Non-overlapping Intervals",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "minimum-moves-to-equal-array-elements": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "453",
        "title": "Minimum Moves to Equal Array Elements",
        "titleSlug": "minimum-moves-to-equal-array-elements",
        "content": "<p>Given an integer array <code>nums</code> of size <code>n</code>, return <em>the minimum number of moves required to make all array elements equal</em>.</p>\n\n<p>In one move, you can increment <code>n - 1</code> elements of the array by <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Only three moves are needed (remember each move increments two elements):\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>The answer is guaranteed to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2492,
        "dislikes": 1876,
        "similarQuestions": "[{\"title\": \"Minimum Moves to Equal Array Elements II\", \"titleSlug\": \"minimum-moves-to-equal-array-elements-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Running Time of N Computers\", \"titleSlug\": \"maximum-running-time-of-n-computers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Pour Water Between Buckets to Make Water Levels Equal\", \"titleSlug\": \"pour-water-between-buckets-to-make-water-levels-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Divide Players Into Teams of Equal Skill\", \"titleSlug\": \"divide-players-into-teams-of-equal-skill\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"164.8K\", \"totalSubmission\": \"291.6K\", \"totalAcceptedRaw\": 164758, \"totalSubmissionRaw\": 291588, \"acRate\": \"56.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-moves-to-equal-array-elements-ii",
          "title": "Minimum Moves to Equal Array Elements II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-running-time-of-n-computers",
          "title": "Maximum Running Time of N Computers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "pour-water-between-buckets-to-make-water-levels-equal",
          "title": "Pour Water Between Buckets to Make Water Levels Equal",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "divide-players-into-teams-of-equal-skill",
          "title": "Divide Players Into Teams of Equal Skill",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "4sum-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "454",
        "title": "4Sum II",
        "titleSlug": "4sum-ii",
        "content": "<p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j, k, l &lt; n</code></li>\n\t<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe two tuples are:\n1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length</code></li>\n\t<li><code>n == nums2.length</code></li>\n\t<li><code>n == nums3.length</code></li>\n\t<li><code>n == nums4.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>-2<sup>28</sup> &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2<sup>28</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4830,
        "dislikes": 138,
        "similarQuestions": "[{\"title\": \"4Sum\", \"titleSlug\": \"4sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"313.7K\", \"totalSubmission\": \"548.7K\", \"totalAcceptedRaw\": 313710, \"totalSubmissionRaw\": 548718, \"acRate\": \"57.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "4sum",
          "title": "4Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "assign-cookies": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "455",
        "title": "Assign Cookies",
        "titleSlug": "assign-cookies",
        "content": "<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p>\n\n<p>Each child <code>i</code> has a greed factor <code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie <code>j</code> has a size <code>s[j]</code>. If <code>s[j] &gt;= g[i]</code>, we can assign the cookie <code>j</code> to the child <code>i</code>, and the child <code>i</code> will be content. Your goal is to maximize the number of your content children and output the maximum number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> g = [1,2,3], s = [1,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> g = [1,2], s = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= g.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= g[i], s[j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2789,
        "dislikes": 257,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"268.1K\", \"totalSubmission\": \"539.3K\", \"totalAcceptedRaw\": 268066, \"totalSubmissionRaw\": 539316, \"acRate\": \"49.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "132-pattern": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "456",
        "title": "132 Pattern",
        "titleSlug": "132-pattern",
        "content": "<p>Given an array of <code>n</code> integers <code>nums</code>, a <strong>132 pattern</strong> is a subsequence of three integers <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[k] &lt; nums[j]</code>.</p>\n\n<p>Return <code>true</code><em> if there is a <strong>132 pattern</strong> in </em><code>nums</code><em>, otherwise, return </em><code>false</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no 132 pattern in the sequence.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,4,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a 132 pattern in the sequence: [1, 4, 2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,3,2,0]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6985,
        "dislikes": 411,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"243.7K\", \"totalSubmission\": \"722.1K\", \"totalAcceptedRaw\": 243708, \"totalSubmissionRaw\": 722065, \"acRate\": \"33.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "circular-array-loop": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "457",
        "title": "Circular Array Loop",
        "titleSlug": "circular-array-loop",
        "content": "<p>You are playing a game involving a <strong>circular</strong> array of non-zero integers <code>nums</code>. Each <code>nums[i]</code> denotes the number of indices forward/backward you must move if you are located at index <code>i</code>:</p>\n\n<ul>\n\t<li>If <code>nums[i]</code> is positive, move <code>nums[i]</code> steps <strong>forward</strong>, and</li>\n\t<li>If <code>nums[i]</code> is negative, move <code>nums[i]</code> steps <strong>backward</strong>.</li>\n</ul>\n\n<p>Since the array is <strong>circular</strong>, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.</p>\n\n<p>A <strong>cycle</strong> in the array consists of a sequence of indices <code>seq</code> of length <code>k</code> where:</p>\n\n<ul>\n\t<li>Following the movement rules above results in the repeating index sequence <code>seq[0] -&gt; seq[1] -&gt; ... -&gt; seq[k - 1] -&gt; seq[0] -&gt; ...</code></li>\n\t<li>Every <code>nums[seq[j]]</code> is either <strong>all positive</strong> or <strong>all negative</strong>.</li>\n\t<li><code>k &gt; 1</code></li>\n</ul>\n\n<p>Return <code>true</code><em> if there is a <strong>cycle</strong> in </em><code>nums</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/01/img1.jpg\" style=\"width: 402px; height: 289px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,-1,1,2,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --&gt; 2 --&gt; 3 --&gt; 0 --&gt; ..., and all of its nodes are white (jumping in the same direction).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/01/img2.jpg\" style=\"width: 402px; height: 390px;\" />\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3,-4,-5,6]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nThe only cycle is of size 1, so we return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/01/img3.jpg\" style=\"width: 497px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,-1,5,1,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --&gt; 1 --&gt; 0 --&gt; ..., and while it is of size &gt; 1, it has a node jumping forward and a node jumping backward, so <strong>it is not a cycle</strong>.\nWe can see the cycle 3 --&gt; 4 --&gt; 3 --&gt; ..., and all of its nodes are white (jumping in the same direction).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it in <code>O(n)</code> time complexity and <code>O(1)</code> extra space complexity?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 636,
        "dislikes": 686,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"75.6K\", \"totalSubmission\": \"226.5K\", \"totalAcceptedRaw\": 75618, \"totalSubmissionRaw\": 226457, \"acRate\": \"33.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "poor-pigs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "458",
        "title": "Poor Pigs",
        "titleSlug": "poor-pigs",
        "content": "<p>There are <code>buckets</code> buckets of liquid, where <strong>exactly one</strong> of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have <code>minutesToTest</code> minutes to determine which bucket is poisonous.</p>\n\n<p>You can feed the pigs according to these steps:</p>\n\n<ol>\n\t<li>Choose some live pigs to feed.</li>\n\t<li>For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.</li>\n\t<li>Wait for <code>minutesToDie</code> minutes. You may <strong>not</strong> feed any other pigs during this time.</li>\n\t<li>After <code>minutesToDie</code> minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.</li>\n\t<li>Repeat this process until you run out of time.</li>\n</ol>\n\n<p>Given <code>buckets</code>, <code>minutesToDie</code>, and <code>minutesToTest</code>, return <em>the <strong>minimum</strong> number of pigs needed to figure out which bucket is poisonous within the allotted time</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> buckets = 4, minutesToDie = 15, minutesToTest = 15\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buckets = 4, minutesToDie = 15, minutesToTest = 30\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buckets &lt;= 1000</code></li>\n\t<li><code>1 &lt;=&nbsp;minutesToDie &lt;=&nbsp;minutesToTest &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1746,
        "dislikes": 3337,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Combinatorics", "slug": "combinatorics" }
        ],
        "stats": "{\"totalAccepted\": \"116.5K\", \"totalSubmission\": \"193.9K\", \"totalAcceptedRaw\": 116546, \"totalSubmissionRaw\": 193859, \"acRate\": \"60.1%\"}",
        "hints": [
          "What if you only have one shot? Eg. 4 buckets, 15 mins to die, and 15 mins to test.",
          "How many states can we generate with x pigs and T tests?",
          "Find minimum <code>x</code> such that <code>(T+1)^x >= N</code>"
        ]
      },
      "similar": [],
      "hints": [
        "What if you only have one shot? Eg. 4 buckets, 15 mins to die, and 15 mins to test.",
        "How many states can we generate with x pigs and T tests?",
        "Find minimum <code>x</code> such that <code>(T+1)^x >= N</code>"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Combinatorics", "slug": "combinatorics" }
      ]
    }
  },
  "repeated-substring-pattern": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "459",
        "title": "Repeated Substring Pattern",
        "titleSlug": "repeated-substring-pattern",
        "content": "<p>Given a string <code>s</code>, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is the substring &quot;ab&quot; twice.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcabcabc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is the substring &quot;abc&quot; four times or the substring &quot;abcabc&quot; twice.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6232,
        "dislikes": 497,
        "similarQuestions": "[{\"title\": \"Find the Index of the First Occurrence in a String\", \"titleSlug\": \"find-the-index-of-the-first-occurrence-in-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Repeated String Match\", \"titleSlug\": \"repeated-string-match\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "String Matching", "slug": "string-matching" }
        ],
        "stats": "{\"totalAccepted\": \"419.6K\", \"totalSubmission\": \"911K\", \"totalAcceptedRaw\": 419594, \"totalSubmissionRaw\": 910960, \"acRate\": \"46.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
          "title": "Find the Index of the First Occurrence in a String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "repeated-string-match",
          "title": "Repeated String Match",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "String Matching", "slug": "string-matching" }
      ]
    }
  },
  "lfu-cache": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "460",
        "title": "LFU Cache",
        "titleSlug": "lfu-cache",
        "content": "<p>Design and implement a data structure for a <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\" target=\"_blank\">Least Frequently Used (LFU)</a> cache.</p>\n\n<p>Implement the <code>LFUCache</code> class:</p>\n\n<ul>\n\t<li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li>\n\t<li><code>int get(int key)</code> Gets the value of the <code>key</code> if the <code>key</code> exists in the cache. Otherwise, returns <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if present, or inserts the <code>key</code> if not already present. When the cache reaches its <code>capacity</code>, it should invalidate and remove the <strong>least frequently used</strong> key before inserting a new item. For this problem, when there is a <strong>tie</strong> (i.e., two or more keys with the same frequency), the <strong>least recently used</strong> <code>key</code> would be invalidated.</li>\n</ul>\n\n<p>To determine the least frequently used key, a <strong>use counter</strong> is maintained for each key in the cache. The key with the smallest <strong>use counter</strong> is the least frequently used key.</p>\n\n<p>When a key is first inserted into the cache, its <strong>use counter</strong> is set to <code>1</code> (due to the <code>put</code> operation). The <strong>use counter</strong> for a key in the cache is incremented either a <code>get</code> or <code>put</code> operation is called on it.</p>\n\n<p>The functions&nbsp;<code data-stringify-type=\"code\">get</code>&nbsp;and&nbsp;<code data-stringify-type=\"code\">put</code>&nbsp;must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\n<strong>Explanation</strong>\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n&nbsp;                // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity&nbsp;&lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code>&nbsp;calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<span style=\"display: none;\">&nbsp;</span>",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5453,
        "dislikes": 322,
        "similarQuestions": "[{\"title\": \"LRU Cache\", \"titleSlug\": \"lru-cache\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design In-Memory File System\", \"titleSlug\": \"design-in-memory-file-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
        ],
        "stats": "{\"totalAccepted\": \"235.6K\", \"totalSubmission\": \"537.7K\", \"totalAcceptedRaw\": 235552, \"totalSubmissionRaw\": 537749, \"acRate\": \"43.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "lru-cache",
          "title": "LRU Cache",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "design-in-memory-file-system",
          "title": "Design In-Memory File System",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Doubly-Linked List", "slug": "doubly-linked-list" }
      ]
    }
  },
  "hamming-distance": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "461",
        "title": "Hamming Distance",
        "titleSlug": "hamming-distance",
        "content": "<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\n\n<p>Given two integers <code>x</code> and <code>y</code>, return <em>the <strong>Hamming distance</strong> between them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 1, y = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       &uarr;   &uarr;\nThe above arrows point to positions where the corresponding bits are different.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 3, y = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;=&nbsp;x, y &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3757,
        "dislikes": 216,
        "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Total Hamming Distance\", \"titleSlug\": \"total-hamming-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"553.3K\", \"totalSubmission\": \"735.5K\", \"totalAcceptedRaw\": 553335, \"totalSubmissionRaw\": 735484, \"acRate\": \"75.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-1-bits",
          "title": "Number of 1 Bits",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "total-hamming-distance",
          "title": "Total Hamming Distance",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "minimum-moves-to-equal-array-elements-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "462",
        "title": "Minimum Moves to Equal Array Elements II",
        "titleSlug": "minimum-moves-to-equal-array-elements-ii",
        "content": "<p>Given an integer array <code>nums</code> of size <code>n</code>, return <em>the minimum number of moves required to make all array elements equal</em>.</p>\n\n<p>In one move, you can increment or decrement an element of the array by <code>1</code>.</p>\n\n<p>Test cases are designed so that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOnly two moves are needed (remember each move increments or decrements one element):\n[<u>1</u>,2,3]  =&gt;  [2,2,<u>3</u>]  =&gt;  [2,2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,10,2,9]\n<strong>Output:</strong> 16\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3260,
        "dislikes": 120,
        "similarQuestions": "[{\"title\": \"Best Meeting Point\", \"titleSlug\": \"best-meeting-point\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Moves to Equal Array Elements\", \"titleSlug\": \"minimum-moves-to-equal-array-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make a Uni-Value Grid\", \"titleSlug\": \"minimum-operations-to-make-a-uni-value-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Removing Minimum Number of Magic Beans\", \"titleSlug\": \"removing-minimum-number-of-magic-beans\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make Array Equal\", \"titleSlug\": \"minimum-cost-to-make-array-equal\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make All Array Elements Equal\", \"titleSlug\": \"minimum-operations-to-make-all-array-elements-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make Array Equalindromic\", \"titleSlug\": \"minimum-cost-to-make-array-equalindromic\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"172.8K\", \"totalSubmission\": \"288.3K\", \"totalAcceptedRaw\": 172813, \"totalSubmissionRaw\": 288274, \"acRate\": \"59.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "best-meeting-point",
          "title": "Best Meeting Point",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-moves-to-equal-array-elements",
          "title": "Minimum Moves to Equal Array Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-operations-to-make-a-uni-value-grid",
          "title": "Minimum Operations to Make a Uni-Value Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "removing-minimum-number-of-magic-beans",
          "title": "Removing Minimum Number of Magic Beans",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-cost-to-make-array-equal",
          "title": "Minimum Cost to Make Array Equal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-operations-to-make-all-array-elements-equal",
          "title": "Minimum Operations to Make All Array Elements Equal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-to-make-array-equalindromic",
          "title": "Minimum Cost to Make Array Equalindromic",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "island-perimeter": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "463",
        "title": "Island Perimeter",
        "titleSlug": "island-perimeter",
        "content": "<p>You are given <code>row x col</code> <code>grid</code> representing a map where <code>grid[i][j] = 1</code> represents&nbsp;land and <code>grid[i][j] = 0</code> represents water.</p>\n\n<p>Grid cells are connected <strong>horizontally/vertically</strong> (not diagonally). The <code>grid</code> is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p>\n\n<p>The island doesn&#39;t have &quot;lakes&quot;, meaning the water inside isn&#39;t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don&#39;t exceed 100. Determine the perimeter of the island.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/island.png\" style=\"width: 221px; height: 213px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The perimeter is the 16 yellow stripes in the image above.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>row == grid.length</code></li>\n\t<li><code>col == grid[i].length</code></li>\n\t<li><code>1 &lt;= row, col &lt;= 100</code></li>\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There is exactly one island in <code>grid</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6136,
        "dislikes": 316,
        "similarQuestions": "[{\"title\": \"Max Area of Island\", \"titleSlug\": \"max-area-of-island\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flood Fill\", \"titleSlug\": \"flood-fill\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Coloring A Border\", \"titleSlug\": \"coloring-a-border\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"478.1K\", \"totalSubmission\": \"681.9K\", \"totalAcceptedRaw\": 478088, \"totalSubmissionRaw\": 681930, \"acRate\": \"70.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "max-area-of-island",
          "title": "Max Area of Island",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "flood-fill",
          "title": "Flood Fill",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "coloring-a-border",
          "title": "Coloring A Border",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "can-i-win": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "464",
        "title": "Can I Win",
        "titleSlug": "can-i-win",
        "content": "<p>In the &quot;100 game&quot; two players take turns adding, to a running total, any integer from <code>1</code> to <code>10</code>. The player who first causes the running total to <strong>reach or exceed</strong> 100 wins.</p>\n\n<p>What if we change the game so that players <strong>cannot</strong> re-use integers?</p>\n\n<p>For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total &gt;= 100.</p>\n\n<p>Given two integers <code>maxChoosableInteger</code> and <code>desiredTotal</code>, return <code>true</code> if the first player to move can force a win, otherwise, return <code>false</code>. Assume both players play <strong>optimally</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 0\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 1\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= maxChoosableInteger &lt;= 20</code></li>\n\t<li><code>0 &lt;= desiredTotal &lt;= 300</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2584,
        "dislikes": 377,
        "similarQuestions": "[{\"title\": \"Flip Game II\", \"titleSlug\": \"flip-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Predict the Winner\", \"titleSlug\": \"predict-the-winner\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Memoization", "slug": "memoization" },
          { "name": "Game Theory", "slug": "game-theory" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"91K\", \"totalSubmission\": \"307.9K\", \"totalAcceptedRaw\": 91036, \"totalSubmissionRaw\": 307897, \"acRate\": \"29.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "flip-game-ii",
          "title": "Flip Game II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "guess-number-higher-or-lower-ii",
          "title": "Guess Number Higher or Lower II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "predict-the-winner",
          "title": "Predict the Winner",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Memoization", "slug": "memoization" },
        { "name": "Game Theory", "slug": "game-theory" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "optimal-account-balancing": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "465",
        "title": "Optimal Account Balancing",
        "titleSlug": "optimal-account-balancing",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1398,
        "dislikes": 129,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"84.2K\", \"totalSubmission\": \"170.7K\", \"totalAcceptedRaw\": 84223, \"totalSubmissionRaw\": 170695, \"acRate\": \"49.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "count-the-repetitions": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "466",
        "title": "Count The Repetitions",
        "titleSlug": "count-the-repetitions",
        "content": "<p>We define <code>str = [s, n]</code> as the string <code>str</code> which consists of the string <code>s</code> concatenated <code>n</code> times.</p>\n\n<ul>\n\t<li>For example, <code>str == [&quot;abc&quot;, 3] ==&quot;abcabcabc&quot;</code>.</li>\n</ul>\n\n<p>We define that string <code>s1</code> can be obtained from string <code>s2</code> if we can remove some characters from <code>s2</code> such that it becomes <code>s1</code>.</p>\n\n<ul>\n\t<li>For example, <code>s1 = &quot;abc&quot;</code> can be obtained from <code>s2 = &quot;ab<strong><u>dbe</u></strong>c&quot;</code> based on our definition by removing the bolded underlined characters.</li>\n</ul>\n\n<p>You are given two strings <code>s1</code> and <code>s2</code> and two integers <code>n1</code> and <code>n2</code>. You have the two strings <code>str1 = [s1, n1]</code> and <code>str2 = [s2, n2]</code>.</p>\n\n<p>Return <em>the maximum integer </em><code>m</code><em> such that </em><code>str = [str2, m]</code><em> can be obtained from </em><code>str1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n\t<li><code>1 &lt;= n1, n2 &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 391,
        "dislikes": 344,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"17.3K\", \"totalSubmission\": \"58.2K\", \"totalAcceptedRaw\": 17334, \"totalSubmissionRaw\": 58188, \"acRate\": \"29.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "unique-substrings-in-wraparound-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "467",
        "title": "Unique Substrings in Wraparound String",
        "titleSlug": "unique-substrings-in-wraparound-string",
        "content": "<p>We define the string <code>base</code> to be the infinite wraparound string of <code>&quot;abcdefghijklmnopqrstuvwxyz&quot;</code>, so <code>base</code> will look like this:</p>\n\n<ul>\n\t<li><code>&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;</code>.</li>\n</ul>\n\n<p>Given a string <code>s</code>, return <em>the number of <strong>unique non-empty substrings</strong> of </em><code>s</code><em> are present in </em><code>base</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Only the substring &quot;a&quot; of s is in base.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cac&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two substrings (&quot;a&quot;, &quot;c&quot;) of s in base.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;zab&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are six substrings (&quot;z&quot;, &quot;a&quot;, &quot;b&quot;, &quot;za&quot;, &quot;ab&quot;, and &quot;zab&quot;) of s in base.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1395,
        "dislikes": 170,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"42.6K\", \"totalSubmission\": \"108.5K\", \"totalAcceptedRaw\": 42604, \"totalSubmissionRaw\": 108526, \"acRate\": \"39.3%\"}",
        "hints": [
          "One possible solution might be to consider allocating an array size of 26 for each character in the alphabet. (Credits to @r2ysxu)"
        ]
      },
      "similar": [],
      "hints": [
        "One possible solution might be to consider allocating an array size of 26 for each character in the alphabet. (Credits to @r2ysxu)"
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "validate-ip-address": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "468",
        "title": "Validate IP Address",
        "titleSlug": "validate-ip-address",
        "content": "<p>Given a string <code>queryIP</code>, return <code>&quot;IPv4&quot;</code> if IP is a valid IPv4 address, <code>&quot;IPv6&quot;</code> if IP is a valid IPv6 address or <code>&quot;Neither&quot;</code> if IP is not a correct IP of any type.</p>\n\n<p><strong>A valid IPv4</strong> address is an IP in the form <code>&quot;x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>&quot;</code> where <code>0 &lt;= x<sub>i</sub> &lt;= 255</code> and <code>x<sub>i</sub></code> <strong>cannot contain</strong> leading zeros. For example, <code>&quot;192.168.1.1&quot;</code> and <code>&quot;192.168.1.0&quot;</code> are valid IPv4 addresses while <code>&quot;192.168.01.1&quot;</code>, <code>&quot;192.168.1.00&quot;</code>, and <code>&quot;192.168@1.1&quot;</code> are invalid IPv4 addresses.</p>\n\n<p><strong>A valid IPv6</strong> address is an IP in the form <code>&quot;x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4</sub>:x<sub>5</sub>:x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>&quot;</code> where:</p>\n\n<ul>\n\t<li><code>1 &lt;= x<sub>i</sub>.length &lt;= 4</code></li>\n\t<li><code>x<sub>i</sub></code> is a <strong>hexadecimal string</strong> which may contain digits, lowercase English letter (<code>&#39;a&#39;</code> to <code>&#39;f&#39;</code>) and upper-case English letters (<code>&#39;A&#39;</code> to <code>&#39;F&#39;</code>).</li>\n\t<li>Leading zeros are allowed in <code>x<sub>i</sub></code>.</li>\n</ul>\n\n<p>For example, &quot;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> and &quot;<code>2001:db8:85a3:0:0:8A2E:0370:7334&quot;</code> are valid IPv6 addresses, while &quot;<code>2001:0db8:85a3::8A2E:037j:7334&quot;</code> and &quot;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> are invalid IPv6 addresses.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queryIP = &quot;172.16.254.1&quot;\n<strong>Output:</strong> &quot;IPv4&quot;\n<strong>Explanation:</strong> This is a valid IPv4 address, return &quot;IPv4&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queryIP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;\n<strong>Output:</strong> &quot;IPv6&quot;\n<strong>Explanation:</strong> This is a valid IPv6 address, return &quot;IPv6&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> queryIP = &quot;256.256.256.256&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n<strong>Explanation:</strong> This is neither a IPv4 address nor a IPv6 address.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>queryIP</code> consists only of English letters, digits and the characters <code>&#39;.&#39;</code> and <code>&#39;:&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 964,
        "dislikes": 2678,
        "similarQuestions": "[{\"title\": \"IP to CIDR\", \"titleSlug\": \"ip-to-cidr\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strong Password Checker II\", \"titleSlug\": \"strong-password-checker-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"151.9K\", \"totalSubmission\": \"567.1K\", \"totalAcceptedRaw\": 151897, \"totalSubmissionRaw\": 567070, \"acRate\": \"26.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "ip-to-cidr",
          "title": "IP to CIDR",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "strong-password-checker-ii",
          "title": "Strong Password Checker II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "convex-polygon": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "469",
        "title": "Convex Polygon",
        "titleSlug": "convex-polygon",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 97,
        "dislikes": 235,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"10.6K\", \"totalSubmission\": \"26.8K\", \"totalAcceptedRaw\": 10566, \"totalSubmissionRaw\": 26843, \"acRate\": \"39.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "implement-rand10-using-rand7": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "470",
        "title": "Implement Rand10() Using Rand7()",
        "titleSlug": "implement-rand10-using-rand7",
        "content": "<p>Given the <strong>API</strong> <code>rand7()</code> that generates a uniform random integer in the range <code>[1, 7]</code>, write a function <code>rand10()</code> that generates a uniform random integer in the range <code>[1, 10]</code>. You can only call the API <code>rand7()</code>, and you shouldn&#39;t call any other API. Please <strong>do not</strong> use a language&#39;s built-in random API.</p>\n\n<p>Each test case will have one <strong>internal</strong> argument <code>n</code>, the number of times that your implemented function <code>rand10()</code> will be called while testing. Note that this is <strong>not an argument</strong> passed to <code>rand10()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [2]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 2\n<strong>Output:</strong> [2,8]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [3,8,10]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What is the <a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\">expected value</a> for the number of calls to <code>rand7()</code> function?</li>\n\t<li>Could you minimize the number of calls to <code>rand7()</code>?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1075,
        "dislikes": 355,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Rejection Sampling", "slug": "rejection-sampling" },
          { "name": "Randomized", "slug": "randomized" },
          {
            "name": "Probability and Statistics",
            "slug": "probability-and-statistics"
          }
        ],
        "stats": "{\"totalAccepted\": \"77.4K\", \"totalSubmission\": \"168.3K\", \"totalAcceptedRaw\": 77387, \"totalSubmissionRaw\": 168339, \"acRate\": \"46.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Rejection Sampling", "slug": "rejection-sampling" },
        { "name": "Randomized", "slug": "randomized" },
        {
          "name": "Probability and Statistics",
          "slug": "probability-and-statistics"
        }
      ]
    }
  },
  "encode-string-with-shortest-length": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "471",
        "title": "Encode String with Shortest Length",
        "titleSlug": "encode-string-with-shortest-length",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 620,
        "dislikes": 50,
        "similarQuestions": "[{\"title\": \"Decode String\", \"titleSlug\": \"decode-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Atoms\", \"titleSlug\": \"number-of-atoms\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"30.5K\", \"totalSubmission\": \"60.3K\", \"totalAcceptedRaw\": 30460, \"totalSubmissionRaw\": 60346, \"acRate\": \"50.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "decode-string",
          "title": "Decode String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-atoms",
          "title": "Number of Atoms",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "concatenated-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "472",
        "title": "Concatenated Words",
        "titleSlug": "concatenated-words",
        "content": "<p>Given an array of strings <code>words</code> (<strong>without duplicates</strong>), return <em>all the <strong>concatenated words</strong> in the given list of</em> <code>words</code>.</p>\n\n<p>A <strong>concatenated word</strong> is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct)&nbsp;in the given array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]\n<strong>Output:</strong> [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]\n<strong>Explanation:</strong> &quot;catsdogcats&quot; can be concatenated by &quot;cats&quot;, &quot;dog&quot; and &quot;cats&quot;; \n&quot;dogcatsdog&quot; can be concatenated by &quot;dog&quot;, &quot;cats&quot; and &quot;dog&quot;; \n&quot;ratcatdogcat&quot; can be concatenated by &quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot; and &quot;cat&quot;.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;dog&quot;,&quot;catdog&quot;]\n<strong>Output:</strong> [&quot;catdog&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= sum(words[i].length) &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3773,
        "dislikes": 276,
        "similarQuestions": "[{\"title\": \"Word Break II\", \"titleSlug\": \"word-break-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"216K\", \"totalSubmission\": \"435K\", \"totalAcceptedRaw\": 216005, \"totalSubmissionRaw\": 434953, \"acRate\": \"49.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "word-break-ii",
          "title": "Word Break II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "matchsticks-to-square": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "473",
        "title": "Matchsticks to Square",
        "titleSlug": "matchsticks-to-square",
        "content": "<p>You are given an integer array <code>matchsticks</code> where <code>matchsticks[i]</code> is the length of the <code>i<sup>th</sup></code> matchstick. You want to use <strong>all the matchsticks</strong> to make one square. You <strong>should not break</strong> any stick, but you can link them up, and each matchstick must be used <strong>exactly one time</strong>.</p>\n\n<p>Return <code>true</code> if you can make this square and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matchsticks = [1,1,2,2,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can form a square with length 2, one side of the square came two sticks with length 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matchsticks = [3,3,3,3,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You cannot find a way to form a square with all the matchsticks.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matchsticks.length &lt;= 15</code></li>\n\t<li><code>1 &lt;= matchsticks[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3720,
        "dislikes": 284,
        "similarQuestions": "[{\"title\": \"Maximum Rows Covered by Columns\", \"titleSlug\": \"maximum-rows-covered-by-columns\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"155.7K\", \"totalSubmission\": \"387.4K\", \"totalAcceptedRaw\": 155655, \"totalSubmissionRaw\": 387357, \"acRate\": \"40.2%\"}",
        "hints": [
          "Treat the matchsticks as an array. Can we split the array into 4 equal parts?",
          "Every matchstick can belong to either of the 4 sides. We don't know which one. Maybe try out all options!",
          "For every matchstick, we have to try out each of the 4 options i.e. which side it can belong to. We can make use of recursion for this.",
          "We don't really need to keep track of which matchsticks belong to a particular side during recursion. We just need to keep track of the <b>length</b> of each of the 4 sides.",
          "When all matchsticks have been used we simply need to see the length of all 4 sides. If they're equal, we have a square on our hands!"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-rows-covered-by-columns",
          "title": "Maximum Rows Covered by Columns",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Treat the matchsticks as an array. Can we split the array into 4 equal parts?",
        "Every matchstick can belong to either of the 4 sides. We don't know which one. Maybe try out all options!",
        "For every matchstick, we have to try out each of the 4 options i.e. which side it can belong to. We can make use of recursion for this.",
        "We don't really need to keep track of which matchsticks belong to a particular side during recursion. We just need to keep track of the <b>length</b> of each of the 4 sides.",
        "When all matchsticks have been used we simply need to see the length of all 4 sides. If they're equal, we have a square on our hands!"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "ones-and-zeroes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "474",
        "title": "Ones and Zeroes",
        "titleSlug": "ones-and-zeroes",
        "content": "<p>You are given an array of binary strings <code>strs</code> and two integers <code>m</code> and <code>n</code>.</p>\n\n<p>Return <em>the size of the largest subset of <code>strs</code> such that there are <strong>at most</strong> </em><code>m</code><em> </em><code>0</code><em>&#39;s and </em><code>n</code><em> </em><code>1</code><em>&#39;s in the subset</em>.</p>\n\n<p>A set <code>x</code> is a <strong>subset</strong> of a set <code>y</code> if all elements of <code>x</code> are also elements of <code>y</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;10&quot;,&quot;0001&quot;,&quot;111001&quot;,&quot;1&quot;,&quot;0&quot;], m = 5, n = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The largest subset with at most 5 0&#39;s and 3 1&#39;s is {&quot;10&quot;, &quot;0001&quot;, &quot;1&quot;, &quot;0&quot;}, so the answer is 4.\nOther valid but smaller subsets include {&quot;0001&quot;, &quot;1&quot;} and {&quot;10&quot;, &quot;1&quot;, &quot;0&quot;}.\n{&quot;111001&quot;} is an invalid subset because it contains 4 1&#39;s, greater than the maximum of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;10&quot;,&quot;0&quot;,&quot;1&quot;], m = 1, n = 1\n<strong>Output:</strong> 2\n<b>Explanation:</b> The largest subset is {&quot;0&quot;, &quot;1&quot;}, so the answer is 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 600</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists only of digits <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5289,
        "dislikes": 441,
        "similarQuestions": "[{\"title\": \"Count Subarrays With More Ones Than Zeros\", \"titleSlug\": \"count-subarrays-with-more-ones-than-zeros\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"All Divisions With the Highest Score of a Binary Array\", \"titleSlug\": \"all-divisions-with-the-highest-score-of-a-binary-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"191.5K\", \"totalSubmission\": \"404.8K\", \"totalAcceptedRaw\": 191484, \"totalSubmissionRaw\": 404786, \"acRate\": \"47.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "count-subarrays-with-more-ones-than-zeros",
          "title": "Count Subarrays With More Ones Than Zeros",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "non-negative-integers-without-consecutive-ones",
          "title": "Non-negative Integers without Consecutive Ones",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "all-divisions-with-the-highest-score-of-a-binary-array",
          "title": "All Divisions With the Highest Score of a Binary Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "heaters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "475",
        "title": "Heaters",
        "titleSlug": "heaters",
        "content": "<p>Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.</p>\n\n<p>Every house can be warmed, as long as the house is within the heater&#39;s warm radius range.&nbsp;</p>\n\n<p>Given the positions of <code>houses</code> and <code>heaters</code> on a horizontal line, return <em>the minimum radius standard of heaters&nbsp;so that those heaters could cover all houses.</em></p>\n\n<p><strong>Notice</strong> that&nbsp;all the <code>heaters</code> follow your radius standard, and the warm radius will the same.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,2,3], heaters = [2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,2,3,4], heaters = [1,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> houses = [1,5], heaters = [2]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= houses.length, heaters.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= houses[i], heaters[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2004,
        "dislikes": 1142,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"110.3K\", \"totalSubmission\": \"296.2K\", \"totalAcceptedRaw\": 110334, \"totalSubmissionRaw\": 296205, \"acRate\": \"37.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "number-complement": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "476",
        "title": "Number Complement",
        "titleSlug": "number-complement",
        "content": "<p>The <strong>complement</strong> of an integer is the integer you get when you flip all the <code>0</code>&#39;s to <code>1</code>&#39;s and all the <code>1</code>&#39;s to <code>0</code>&#39;s in its binary representation.</p>\n\n<ul>\n\t<li>For example, The integer <code>5</code> is <code>&quot;101&quot;</code> in binary and its <strong>complement</strong> is <code>&quot;010&quot;</code> which is the integer <code>2</code>.</li>\n</ul>\n\n<p>Given an integer <code>num</code>, return <em>its complement</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt; 2<sup>31</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1009: <a href=\"https://leetcode.com/problems/complement-of-base-10-integer/\" target=\"_blank\">https://leetcode.com/problems/complement-of-base-10-integer/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2618,
        "dislikes": 119,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"318.6K\", \"totalSubmission\": \"471.8K\", \"totalAcceptedRaw\": 318598, \"totalSubmissionRaw\": 471831, \"acRate\": \"67.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "total-hamming-distance": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "477",
        "title": "Total Hamming Distance",
        "titleSlug": "total-hamming-distance",
        "content": "<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\n\n<p>Given an integer array <code>nums</code>, return <em>the sum of <strong>Hamming distances</strong> between all the pairs of the integers in</em> <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,14,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,14,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>The answer for the given input will fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2156,
        "dislikes": 89,
        "similarQuestions": "[{\"title\": \"Hamming Distance\", \"titleSlug\": \"hamming-distance\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"104.1K\", \"totalSubmission\": \"198.8K\", \"totalAcceptedRaw\": 104064, \"totalSubmissionRaw\": 198833, \"acRate\": \"52.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "hamming-distance",
          "title": "Hamming Distance",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "generate-random-point-in-a-circle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "478",
        "title": "Generate Random Point in a Circle",
        "titleSlug": "generate-random-point-in-a-circle",
        "content": "<p>Given the radius and the position of the center of a circle, implement the function <code>randPoint</code> which generates a uniform random point inside the circle.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(double radius, double x_center, double y_center)</code> initializes the object with the radius of the circle <code>radius</code> and the position of the center <code>(x_center, y_center)</code>.</li>\n\t<li><code>randPoint()</code> returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array <code>[x, y]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;]\n[[1.0, 0.0, 0.0], [], [], []]\n<strong>Output</strong>\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;&nbsp;radius &lt;= 10<sup>8</sup></code></li>\n\t<li><code>-10<sup>7</sup> &lt;= x_center, y_center &lt;= 10<sup>7</sup></code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>randPoint</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 441,
        "dislikes": 763,
        "similarQuestions": "[{\"title\": \"Random Point in Non-overlapping Rectangles\", \"titleSlug\": \"random-point-in-non-overlapping-rectangles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" },
          { "name": "Rejection Sampling", "slug": "rejection-sampling" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"39.3K\", \"totalSubmission\": \"99.3K\", \"totalAcceptedRaw\": 39310, \"totalSubmissionRaw\": 99331, \"acRate\": \"39.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "random-point-in-non-overlapping-rectangles",
          "title": "Random Point in Non-overlapping Rectangles",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" },
        { "name": "Rejection Sampling", "slug": "rejection-sampling" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "largest-palindrome-product": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "479",
        "title": "Largest Palindrome Product",
        "titleSlug": "largest-palindrome-product",
        "content": "<p>Given an integer n, return <em>the <strong>largest palindromic integer</strong> that can be represented as the product of two <code>n</code>-digits integers</em>. Since the answer can be very large, return it <strong>modulo</strong> <code>1337</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 169,
        "dislikes": 1546,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"23.3K\", \"totalSubmission\": \"71.4K\", \"totalAcceptedRaw\": 23298, \"totalSubmissionRaw\": 71416, \"acRate\": \"32.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "sliding-window-median": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "480",
        "title": "Sliding Window Median",
        "titleSlug": "sliding-window-median",
        "content": "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.</p>\n\n<ul>\n\t<li>For examples, if <code>arr = [2,<u>3</u>,4]</code>, the median is <code>3</code>.</li>\n\t<li>For examples, if <code>arr = [1,<u>2,3</u>,4]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li>\n</ul>\n\n<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. There is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>\n\n<p>Return <em>the median array for each window in the original array</em>. Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3\n<strong>Output:</strong> [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\n<strong>Explanation:</strong> \nWindow position                Median\n---------------                -----\n[<strong>1  3  -1</strong>] -3  5  3  6  7        1\n 1 [<strong>3  -1  -3</strong>] 5  3  6  7       -1\n 1  3 [<strong>-1  -3  5</strong>] 3  6  7       -1\n 1  3  -1 [<strong>-3  5  3</strong>] 6  7        3\n 1  3  -1  -3 [<strong>5  3  6</strong>] 7        5\n 1  3  -1  -3  5 [<strong>3  6  7</strong>]       6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,2,3,1,4,2], k = 3\n<strong>Output:</strong> [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3091,
        "dislikes": 188,
        "similarQuestions": "[{\"title\": \"Find Median from Data Stream\", \"titleSlug\": \"find-median-from-data-stream\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"137.9K\", \"totalSubmission\": \"349K\", \"totalAcceptedRaw\": 137940, \"totalSubmissionRaw\": 348980, \"acRate\": \"39.5%\"}",
        "hints": [
          "The simplest of solutions comes from the basic idea of finding the median given a set of numbers. We know that by definition, a median is the center element (or an average of the two center elements). Given an unsorted list of numbers, how do we find the median element? If you know the answer to this question, can we extend this idea to every sliding window that we come across in the array?",
          "Is there a better way to do what we are doing in the above hint? Don't you think there is duplication of calculation being done there? Is there some sort of optimization that we can do to achieve the same result? This approach is merely a modification of the basic approach except that it simply reduces duplication of calculations once done.",
          "The third line of thought is also based on this same idea but achieving the result in a different way. We obviously need the window to be sorted for us to be able to find the median. Is there a data-structure out there that we can use (in one or more quantities) to obtain the median element extremely fast, say O(1) time while having the ability to perform the other operations fairly efficiently as well?"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "find-median-from-data-stream",
          "title": "Find Median from Data Stream",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The simplest of solutions comes from the basic idea of finding the median given a set of numbers. We know that by definition, a median is the center element (or an average of the two center elements). Given an unsorted list of numbers, how do we find the median element? If you know the answer to this question, can we extend this idea to every sliding window that we come across in the array?",
        "Is there a better way to do what we are doing in the above hint? Don't you think there is duplication of calculation being done there? Is there some sort of optimization that we can do to achieve the same result? This approach is merely a modification of the basic approach except that it simply reduces duplication of calculations once done.",
        "The third line of thought is also based on this same idea but achieving the result in a different way. We obviously need the window to be sorted for us to be able to find the median. Is there a data-structure out there that we can use (in one or more quantities) to obtain the median element extremely fast, say O(1) time while having the ability to perform the other operations fairly efficiently as well?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "magical-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "481",
        "title": "Magical String",
        "titleSlug": "magical-string",
        "content": "<p>A magical string <code>s</code> consists of only <code>&#39;1&#39;</code> and <code>&#39;2&#39;</code> and obeys the following rules:</p>\n\n<ul>\n\t<li>The string s is magical because concatenating the number of contiguous occurrences of characters <code>&#39;1&#39;</code> and <code>&#39;2&#39;</code> generates the string <code>s</code> itself.</li>\n</ul>\n\n<p>The first few elements of <code>s</code> is <code>s = &quot;1221121221221121122&hellip;&hellip;&quot;</code>. If we group the consecutive <code>1</code>&#39;s and <code>2</code>&#39;s in <code>s</code>, it will be <code>&quot;1 22 11 2 1 22 1 22 11 2 11 22 ......&quot;</code> and the occurrences of <code>1</code>&#39;s or <code>2</code>&#39;s in each group are <code>&quot;1 2 2 1 1 2 1 2 2 1 2 2 ......&quot;</code>. You can see that the occurrence sequence is <code>s</code> itself.</p>\n\n<p>Given an integer <code>n</code>, return the number of <code>1</code>&#39;s in the first <code>n</code> number in the magical string <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The first 6 elements of magical string s is &quot;122112&quot; and it contains three 1&#39;s, so return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 290,
        "dislikes": 1230,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"34.6K\", \"totalSubmission\": \"67.8K\", \"totalAcceptedRaw\": 34579, \"totalSubmissionRaw\": 67775, \"acRate\": \"51.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "license-key-formatting": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "482",
        "title": "License Key Formatting",
        "titleSlug": "license-key-formatting",
        "content": "<p>You are given a license key represented as a string <code>s</code> that consists of only alphanumeric characters and dashes. The string is separated into <code>n + 1</code> groups by <code>n</code> dashes. You are also given an integer <code>k</code>.</p>\n\n<p>We want to reformat the string <code>s</code> such that each group contains exactly <code>k</code> characters, except for the first group, which could be shorter than <code>k</code> but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.</p>\n\n<p>Return <em>the reformatted license key</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;5F3Z-2e-9-w&quot;, k = 4\n<strong>Output:</strong> &quot;5F3Z-2E9W&quot;\n<strong>Explanation:</strong> The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2-5g-3-J&quot;, k = 2\n<strong>Output:</strong> &quot;2-5G-3J&quot;\n<strong>Explanation:</strong> The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, and dashes <code>&#39;-&#39;</code>.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1061,
        "dislikes": 1379,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"268.1K\", \"totalSubmission\": \"616.4K\", \"totalAcceptedRaw\": 268148, \"totalSubmissionRaw\": 616368, \"acRate\": \"43.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "smallest-good-base": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "483",
        "title": "Smallest Good Base",
        "titleSlug": "smallest-good-base",
        "content": "<p>Given an integer <code>n</code> represented as a string, return <em>the smallest <strong>good base</strong> of</em> <code>n</code>.</p>\n\n<p>We call <code>k &gt;= 2</code> a <strong>good base</strong> of <code>n</code>, if all digits of <code>n</code> base <code>k</code> are <code>1</code>&#39;s.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = &quot;13&quot;\n<strong>Output:</strong> &quot;3&quot;\n<strong>Explanation:</strong> 13 base 3 is 111.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = &quot;4681&quot;\n<strong>Output:</strong> &quot;8&quot;\n<strong>Explanation:</strong> 4681 base 8 is 11111.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = &quot;1000000000000000000&quot;\n<strong>Output:</strong> &quot;999999999999999999&quot;\n<strong>Explanation:</strong> 1000000000000000000 base 999999999999999999 is 11.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n</code> is an integer in the range <code>[3, 10<sup>18</sup>]</code>.</li>\n\t<li><code>n</code> does not contain any leading zeros.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 373,
        "dislikes": 481,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"20.6K\", \"totalSubmission\": \"51.8K\", \"totalAcceptedRaw\": 20571, \"totalSubmissionRaw\": 51839, \"acRate\": \"39.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "find-permutation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "484",
        "title": "Find Permutation",
        "titleSlug": "find-permutation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 683,
        "dislikes": 139,
        "similarQuestions": "[{\"title\": \"Using a Robot to Print the Lexicographically Smallest String\", \"titleSlug\": \"using-a-robot-to-print-the-lexicographically-smallest-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"38K\", \"totalSubmission\": \"56.8K\", \"totalAcceptedRaw\": 37976, \"totalSubmissionRaw\": 56780, \"acRate\": \"66.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "using-a-robot-to-print-the-lexicographically-smallest-string",
          "title": "Using a Robot to Print the Lexicographically Smallest String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "max-consecutive-ones": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "485",
        "title": "Max Consecutive Ones",
        "titleSlug": "max-consecutive-ones",
        "content": "<p>Given a binary array <code>nums</code>, return <em>the maximum number of consecutive </em><code>1</code><em>&#39;s in the array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,1,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,1,0,1]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5405,
        "dislikes": 448,
        "similarQuestions": "[{\"title\": \"Max Consecutive Ones II\", \"titleSlug\": \"max-consecutive-ones-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Max Consecutive Ones III\", \"titleSlug\": \"max-consecutive-ones-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Consecutive Characters\", \"titleSlug\": \"consecutive-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longer Contiguous Segments of Ones than Zeros\", \"titleSlug\": \"longer-contiguous-segments-of-ones-than-zeros\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Length of the Longest Alphabetical Continuous Substring\", \"titleSlug\": \"length-of-the-longest-alphabetical-continuous-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Enemy Forts That Can Be Captured\", \"titleSlug\": \"maximum-enemy-forts-that-can-be-captured\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"1M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1033913, \"totalSubmissionRaw\": 1777617, \"acRate\": \"58.2%\"}",
        "hints": [
          "You need to think about two things as far as any window is concerned. One is the starting point for the window. How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window.\r\n\r\nHow do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows of consecutive ones. All that remains afterward is to find the longest such window and return the size."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "max-consecutive-ones-ii",
          "title": "Max Consecutive Ones II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "max-consecutive-ones-iii",
          "title": "Max Consecutive Ones III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "consecutive-characters",
          "title": "Consecutive Characters",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "longer-contiguous-segments-of-ones-than-zeros",
          "title": "Longer Contiguous Segments of Ones than Zeros",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "length-of-the-longest-alphabetical-continuous-substring",
          "title": "Length of the Longest Alphabetical Continuous Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-enemy-forts-that-can-be-captured",
          "title": "Maximum Enemy Forts That Can Be Captured",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "You need to think about two things as far as any window is concerned. One is the starting point for the window. How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window.\r\n\r\nHow do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows of consecutive ones. All that remains afterward is to find the longest such window and return the size."
      ],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "predict-the-winner": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "486",
        "title": "Predict the Winner",
        "titleSlug": "predict-the-winner",
        "content": "<p>You are given an integer array <code>nums</code>. Two players are playing a game with this array: player 1 and player 2.</p>\n\n<p>Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of <code>0</code>. At each turn, the player takes one of the numbers from either end of the array (i.e., <code>nums[0]</code> or <code>nums[nums.length - 1]</code>) which reduces the size of the array by <code>1</code>. The player adds the chosen number to their score. The game ends when there are no more elements in the array.</p>\n\n<p>Return <code>true</code> if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return <code>true</code>. You may assume that both players are playing optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,233,7]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5677,
        "dislikes": 269,
        "similarQuestions": "[{\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Recursion", "slug": "recursion" },
          { "name": "Game Theory", "slug": "game-theory" }
        ],
        "stats": "{\"totalAccepted\": \"221.1K\", \"totalSubmission\": \"399.2K\", \"totalAcceptedRaw\": 221147, \"totalSubmissionRaw\": 399208, \"acRate\": \"55.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "can-i-win",
          "title": "Can I Win",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Recursion", "slug": "recursion" },
        { "name": "Game Theory", "slug": "game-theory" }
      ]
    }
  },
  "max-consecutive-ones-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "487",
        "title": "Max Consecutive Ones II",
        "titleSlug": "max-consecutive-ones-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1497,
        "dislikes": 25,
        "similarQuestions": "[{\"title\": \"Max Consecutive Ones\", \"titleSlug\": \"max-consecutive-ones\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Max Consecutive Ones III\", \"titleSlug\": \"max-consecutive-ones-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"All Divisions With the Highest Score of a Binary Array\", \"titleSlug\": \"all-divisions-with-the-highest-score-of-a-binary-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"137.2K\", \"totalSubmission\": \"273.1K\", \"totalAcceptedRaw\": 137181, \"totalSubmissionRaw\": 273141, \"acRate\": \"50.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "max-consecutive-ones",
          "title": "Max Consecutive Ones",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "max-consecutive-ones-iii",
          "title": "Max Consecutive Ones III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "all-divisions-with-the-highest-score-of-a-binary-array",
          "title": "All Divisions With the Highest Score of a Binary Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "zuma-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "488",
        "title": "Zuma Game",
        "titleSlug": "zuma-game",
        "content": "<p>You are playing a variation of the game Zuma.</p>\n\n<p>In this variation of Zuma, there is a <strong>single row</strong> of colored balls on a board, where each ball can be colored red <code>&#39;R&#39;</code>, yellow <code>&#39;Y&#39;</code>, blue <code>&#39;B&#39;</code>, green <code>&#39;G&#39;</code>, or white <code>&#39;W&#39;</code>. You also have several colored balls in your hand.</p>\n\n<p>Your goal is to <strong>clear all</strong> of the balls from the board. On each turn:</p>\n\n<ul>\n\t<li>Pick <strong>any</strong> ball from your hand and insert it in between two balls in the row or on either end of the row.</li>\n\t<li>If there is a group of <strong>three or more consecutive balls</strong> of the <strong>same color</strong>, remove the group of balls from the board.\n\t<ul>\n\t\t<li>If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.</li>\n\t</ul>\n\t</li>\n\t<li>If there are no more balls on the board, then you win the game.</li>\n\t<li>Repeat this process until you either win or do not have any more balls in your hand.</li>\n</ul>\n\n<p>Given a string <code>board</code>, representing the row of balls on the board, and a string <code>hand</code>, representing the balls in your hand, return <em>the <strong>minimum</strong> number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;WRRBBW&quot;, hand = &quot;RB&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to clear all the balls. The best you can do is:\n- Insert &#39;R&#39; so the board becomes WRR<u>R</u>BBW. W<u>RRR</u>BBW -&gt; WBBW.\n- Insert &#39;B&#39; so the board becomes WBB<u>B</u>W. W<u>BBB</u>W -&gt; WW.\nThere are still balls remaining on the board, and you are out of balls to insert.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;WWRRBBWW&quot;, hand = &quot;WRBRW&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> To make the board empty:\n- Insert &#39;R&#39; so the board becomes WWRR<u>R</u>BBWW. WW<u>RRR</u>BBWW -&gt; WWBBWW.\n- Insert &#39;B&#39; so the board becomes WWBB<u>B</u>WW. WW<u>BBB</u>WW -&gt; <u>WWWW</u> -&gt; empty.\n2 balls from your hand were needed to clear the board.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;G&quot;, hand = &quot;GGGGG&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> To make the board empty:\n- Insert &#39;G&#39; so the board becomes G<u>G</u>.\n- Insert &#39;G&#39; so the board becomes GG<u>G</u>. <u>GGG</u> -&gt; empty.\n2 balls from your hand were needed to clear the board.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= board.length &lt;= 16</code></li>\n\t<li><code>1 &lt;= hand.length &lt;= 5</code></li>\n\t<li><code>board</code> and <code>hand</code> consist of the characters <code>&#39;R&#39;</code>, <code>&#39;Y&#39;</code>, <code>&#39;B&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;W&#39;</code>.</li>\n\t<li>The initial row of balls on the board will <strong>not</strong> have any groups of three or more consecutive balls of the same color.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 434,
        "dislikes": 484,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"22.5K\", \"totalSubmission\": \"68.1K\", \"totalAcceptedRaw\": 22511, \"totalSubmissionRaw\": 68111, \"acRate\": \"33.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "robot-room-cleaner": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "489",
        "title": "Robot Room Cleaner",
        "titleSlug": "robot-room-cleaner",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 2715,
        "dislikes": 168,
        "similarQuestions": "[{\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Path in a Hidden Grid\", \"titleSlug\": \"shortest-path-in-a-hidden-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Cost in a Hidden Grid\", \"titleSlug\": \"minimum-path-cost-in-a-hidden-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Spaces Cleaning Robot Cleaned\", \"titleSlug\": \"number-of-spaces-cleaning-robot-cleaned\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Interactive", "slug": "interactive" }
        ],
        "stats": "{\"totalAccepted\": \"154.4K\", \"totalSubmission\": \"201.5K\", \"totalAcceptedRaw\": 154394, \"totalSubmissionRaw\": 201519, \"acRate\": \"76.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "walls-and-gates",
          "title": "Walls and Gates",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-path-in-a-hidden-grid",
          "title": "Shortest Path in a Hidden Grid",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-cost-in-a-hidden-grid",
          "title": "Minimum Path Cost in a Hidden Grid",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-spaces-cleaning-robot-cleaned",
          "title": "Number of Spaces Cleaning Robot Cleaned",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Interactive", "slug": "interactive" }
      ]
    }
  },
  "the-maze": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "490",
        "title": "The Maze",
        "titleSlug": "the-maze",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1804,
        "dislikes": 179,
        "similarQuestions": "[{\"title\": \"The Maze III\", \"titleSlug\": \"the-maze-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"The Maze II\", \"titleSlug\": \"the-maze-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"162.5K\", \"totalSubmission\": \"283.3K\", \"totalAcceptedRaw\": 162548, \"totalSubmissionRaw\": 283260, \"acRate\": \"57.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "the-maze-iii",
          "title": "The Maze III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "the-maze-ii",
          "title": "The Maze II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "non-decreasing-subsequences": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "491",
        "title": "Non-decreasing Subsequences",
        "titleSlug": "non-decreasing-subsequences",
        "content": "<p>Given an integer array <code>nums</code>, return <em>all the different possible non-decreasing subsequences of the given array with at least two elements</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,6,7,7]\n<strong>Output:</strong> [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,4,3,2,1]\n<strong>Output:</strong> [[4,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 15</code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3560,
        "dislikes": 226,
        "similarQuestions": "[{\"title\": \"Maximum Length of Pair Chain\", \"titleSlug\": \"maximum-length-of-pair-chain\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"161.1K\", \"totalSubmission\": \"266.4K\", \"totalAcceptedRaw\": 161079, \"totalSubmissionRaw\": 266368, \"acRate\": \"60.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-length-of-pair-chain",
          "title": "Maximum Length of Pair Chain",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "construct-the-rectangle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "492",
        "title": "Construct the Rectangle",
        "titleSlug": "construct-the-rectangle",
        "content": "<p>A web developer needs to know how to design a web page&#39;s size. So, given a specific rectangular web page&rsquo;s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p>\n\n<ol>\n\t<li>The area of the rectangular web page you designed must equal to the given target area.</li>\n\t<li>The width <code>W</code> should not be larger than the length <code>L</code>, which means <code>L &gt;= W</code>.</li>\n\t<li>The difference between length <code>L</code> and width <code>W</code> should be as small as possible.</li>\n</ol>\n\n<p>Return <em>an array <code>[L, W]</code> where <code>L</code> and <code>W</code> are the length and width of the&nbsp;web page you designed in sequence.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> area = 4\n<strong>Output:</strong> [2,2]\n<strong>Explanation:</strong> The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> area = 37\n<strong>Output:</strong> [37,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> area = 122122\n<strong>Output:</strong> [427,286]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= area &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 671,
        "dislikes": 383,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"108.6K\", \"totalSubmission\": \"191.7K\", \"totalAcceptedRaw\": 108556, \"totalSubmissionRaw\": 191702, \"acRate\": \"56.6%\"}",
        "hints": [
          "The W is always less than or equal to the square root of the area, so we start searching at sqrt(area) till we find the result."
        ]
      },
      "similar": [],
      "hints": [
        "The W is always less than or equal to the square root of the area, so we start searching at sqrt(area) till we find the result."
      ],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "reverse-pairs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "493",
        "title": "Reverse Pairs",
        "titleSlug": "reverse-pairs",
        "content": "<p>Given an integer array <code>nums</code>, return <em>the number of <strong>reverse pairs</strong> in the array</em>.</p>\n\n<p>A <strong>reverse pair</strong> is a pair <code>(i, j)</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; nums.length</code> and</li>\n\t<li><code>nums[i] &gt; 2 * nums[j]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The reverse pairs are:\n(1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,3,5,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The reverse pairs are:\n(1, 4) --&gt; nums[1] = 4, nums[4] = 1, 4 &gt; 2 * 1\n(2, 4) --&gt; nums[2] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 5, nums[4] = 1, 5 &gt; 2 * 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 5818,
        "dislikes": 250,
        "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count of Range Sum\", \"titleSlug\": \"count-of-range-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Merge Sort", "slug": "merge-sort" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"156K\", \"totalSubmission\": \"510.5K\", \"totalAcceptedRaw\": 155971, \"totalSubmissionRaw\": 510498, \"acRate\": \"30.6%\"}",
        "hints": [
          "Use the merge-sort technique.",
          "Divide the array into two parts and sort them.",
          "For each integer in the first part, count the number of integers that satisfy the condition from the second part. Use the pointer to help you in the counting process."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-of-smaller-numbers-after-self",
          "title": "Count of Smaller Numbers After Self",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-of-range-sum",
          "title": "Count of Range Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Use the merge-sort technique.",
        "Divide the array into two parts and sort them.",
        "For each integer in the first part, count the number of integers that satisfy the condition from the second part. Use the pointer to help you in the counting process."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Merge Sort", "slug": "merge-sort" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "target-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "494",
        "title": "Target Sum",
        "titleSlug": "target-sum",
        "content": "<p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p>\n\n<p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code> before each integer in nums and then concatenate all the integers.</p>\n\n<ul>\n\t<li>For example, if <code>nums = [2, 1]</code>, you can add a <code>&#39;+&#39;</code> before <code>2</code> and a <code>&#39;-&#39;</code> before <code>1</code> and concatenate them to build the expression <code>&quot;+2-1&quot;</code>.</li>\n</ul>\n\n<p>Return the number of different <strong>expressions</strong> that you can build, which evaluates to <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1,1], target = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], target = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10459,
        "dislikes": 342,
        "similarQuestions": "[{\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Ways to Express an Integer as Sum of Powers\", \"titleSlug\": \"ways-to-express-an-integer-as-sum-of-powers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"540.4K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 540374, \"totalSubmissionRaw\": 1166071, \"acRate\": \"46.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "expression-add-operators",
          "title": "Expression Add Operators",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
          "title": "Ways to Express an Integer as Sum of Powers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "teemo-attacking": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "495",
        "title": "Teemo Attacking",
        "titleSlug": "teemo-attacking",
        "content": "<p>Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly <code>duration</code> seconds. More formally, an attack at second <code>t</code> will mean Ashe is poisoned during the <strong>inclusive</strong> time interval <code>[t, t + duration - 1]</code>. If Teemo attacks again <strong>before</strong> the poison effect ends, the timer for it is <strong>reset</strong>, and the poison effect will end <code>duration</code> seconds after the new attack.</p>\n\n<p>You are given a <strong>non-decreasing</strong> integer array <code>timeSeries</code>, where <code>timeSeries[i]</code> denotes that Teemo attacks Ashe at second <code>timeSeries[i]</code>, and an integer <code>duration</code>.</p>\n\n<p>Return <em>the <strong>total</strong> number of seconds that Ashe is poisoned</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> timeSeries = [1,4], duration = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Teemo&#39;s attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> timeSeries = [1,2], duration = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Teemo&#39;s attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= timeSeries.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= timeSeries[i], duration &lt;= 10<sup>7</sup></code></li>\n\t<li><code>timeSeries</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1078,
        "dislikes": 109,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Can Place Flowers\", \"titleSlug\": \"can-place-flowers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Dota2 Senate\", \"titleSlug\": \"dota2-senate\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"140.8K\", \"totalSubmission\": \"249.1K\", \"totalAcceptedRaw\": 140846, \"totalSubmissionRaw\": 249131, \"acRate\": \"56.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "can-place-flowers",
          "title": "Can Place Flowers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "dota2-senate",
          "title": "Dota2 Senate",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "next-greater-element-i": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "496",
        "title": "Next Greater Element I",
        "titleSlug": "next-greater-element-i",
        "content": "<p>The <strong>next greater element</strong> of some element <code>x</code> in an array is the <strong>first greater</strong> element that is <strong>to the right</strong> of <code>x</code> in the same array.</p>\n\n<p>You are given two <strong>distinct 0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, where <code>nums1</code> is a subset of <code>nums2</code>.</p>\n\n<p>For each <code>0 &lt;= i &lt; nums1.length</code>, find the index <code>j</code> such that <code>nums1[i] == nums2[j]</code> and determine the <strong>next greater element</strong> of <code>nums2[j]</code> in <code>nums2</code>. If there is no next greater element, then the answer for this query is <code>-1</code>.</p>\n\n<p>Return <em>an array </em><code>ans</code><em> of length </em><code>nums1.length</code><em> such that </em><code>ans[i]</code><em> is the <strong>next greater element</strong> as described above.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,1,2], nums2 = [1,3,4,2]\n<strong>Output:</strong> [-1,3,-1]\n<strong>Explanation:</strong> The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,<u>4</u>,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [<u>1</u>,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,<u>2</u>]. There is no next greater element, so the answer is -1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,4], nums2 = [1,2,3,4]\n<strong>Output:</strong> [3,-1]\n<strong>Explanation:</strong> The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,<u>2</u>,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,<u>4</u>]. There is no next greater element, so the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All integers in <code>nums1</code> and <code>nums2</code> are <strong>unique</strong>.</li>\n\t<li>All the integers of <code>nums1</code> also appear in <code>nums2</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you find an <code>O(nums1.length + nums2.length)</code> solution?",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7412,
        "dislikes": 603,
        "similarQuestions": "[{\"title\": \"Next Greater Element II\", \"titleSlug\": \"next-greater-element-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Next Greater Element III\", \"titleSlug\": \"next-greater-element-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Daily Temperatures\", \"titleSlug\": \"daily-temperatures\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Subarray Ranges\", \"titleSlug\": \"sum-of-subarray-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Total Strength of Wizards\", \"titleSlug\": \"sum-of-total-strength-of-wizards\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Next Greater Element IV\", \"titleSlug\": \"next-greater-element-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Remove Nodes From Linked List\", \"titleSlug\": \"remove-nodes-from-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"635.6K\", \"totalSubmission\": \"884.8K\", \"totalAcceptedRaw\": 635562, \"totalSubmissionRaw\": 884803, \"acRate\": \"71.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "next-greater-element-ii",
          "title": "Next Greater Element II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "next-greater-element-iii",
          "title": "Next Greater Element III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "daily-temperatures",
          "title": "Daily Temperatures",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-subarray-ranges",
          "title": "Sum of Subarray Ranges",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sum-of-total-strength-of-wizards",
          "title": "Sum of Total Strength of Wizards",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "next-greater-element-iv",
          "title": "Next Greater Element IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "remove-nodes-from-linked-list",
          "title": "Remove Nodes From Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "random-point-in-non-overlapping-rectangles": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "497",
        "title": "Random Point in Non-overlapping Rectangles",
        "titleSlug": "random-point-in-non-overlapping-rectangles",
        "content": "<p>You are given an array of non-overlapping axis-aligned rectangles <code>rects</code> where <code>rects[i] = [a<sub>i</sub>, b<sub>i</sub>, x<sub>i</sub>, y<sub>i</sub>]</code> indicates that <code>(a<sub>i</sub>, b<sub>i</sub>)</code> is the bottom-left corner point of the <code>i<sup>th</sup></code> rectangle and <code>(x<sub>i</sub>, y<sub>i</sub>)</code> is the top-right corner point of the <code>i<sup>th</sup></code> rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.</p>\n\n<p>Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.</p>\n\n<p><strong>Note</strong> that an integer point is a point that has integer coordinates.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[][] rects)</code> Initializes the object with the given rectangles <code>rects</code>.</li>\n\t<li><code>int[] pick()</code> Returns a random integer point <code>[u, v]</code> inside the space covered by one of the given rectangles.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/24/lc-pickrandomrec.jpg\" style=\"width: 419px; height: 539px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\n<strong>Output</strong>\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rects.length &lt;= 100</code></li>\n\t<li><code>rects[i].length == 4</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= a<sub>i</sub> &lt; x<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= b<sub>i</sub> &lt; y<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>x<sub>i</sub> - a<sub>i</sub> &lt;= 2000</code></li>\n\t<li><code>y<sub>i</sub> - b<sub>i</sub> &lt;= 2000</code></li>\n\t<li>All the rectangles do not overlap.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 452,
        "dislikes": 663,
        "similarQuestions": "[{\"title\": \"Random Pick with Weight\", \"titleSlug\": \"random-pick-with-weight\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Generate Random Point in a Circle\", \"titleSlug\": \"generate-random-point-in-a-circle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
          { "name": "Prefix Sum", "slug": "prefix-sum" },
          { "name": "Ordered Set", "slug": "ordered-set" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"38.9K\", \"totalSubmission\": \"98.1K\", \"totalAcceptedRaw\": 38856, \"totalSubmissionRaw\": 98142, \"acRate\": \"39.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "random-pick-with-weight",
          "title": "Random Pick with Weight",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "generate-random-point-in-a-circle",
          "title": "Generate Random Point in a Circle",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
        { "name": "Prefix Sum", "slug": "prefix-sum" },
        { "name": "Ordered Set", "slug": "ordered-set" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "diagonal-traverse": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "498",
        "title": "Diagonal Traverse",
        "titleSlug": "diagonal-traverse",
        "content": "<p>Given an <code>m x n</code> matrix <code>mat</code>, return <em>an array of all the elements of the array in a diagonal order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg\" style=\"width: 334px; height: 334px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,2,4,7,5,3,6,8,9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,2],[3,4]]\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3309,
        "dislikes": 656,
        "similarQuestions": "[{\"title\": \"Decode the Slanted Ciphertext\", \"titleSlug\": \"decode-the-slanted-ciphertext\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"272.3K\", \"totalSubmission\": \"459.2K\", \"totalAcceptedRaw\": 272288, \"totalSubmissionRaw\": 459187, \"acRate\": \"59.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "decode-the-slanted-ciphertext",
          "title": "Decode the Slanted Ciphertext",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "the-maze-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "499",
        "title": "The Maze III",
        "titleSlug": "the-maze-iii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 461,
        "dislikes": 70,
        "similarQuestions": "[{\"title\": \"The Maze\", \"titleSlug\": \"the-maze\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"The Maze II\", \"titleSlug\": \"the-maze-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Shortest Path", "slug": "shortest-path" }
        ],
        "stats": "{\"totalAccepted\": \"29.9K\", \"totalSubmission\": \"61.7K\", \"totalAcceptedRaw\": 29868, \"totalSubmissionRaw\": 61738, \"acRate\": \"48.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "the-maze",
          "title": "The Maze",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "the-maze-ii",
          "title": "The Maze II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Shortest Path", "slug": "shortest-path" }
      ]
    }
  },
  "keyboard-row": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "500",
        "title": "Keyboard Row",
        "titleSlug": "keyboard-row",
        "content": "<p>Given an array of strings <code>words</code>, return <em>the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below</em>.</p>\n\n<p>In the <strong>American keyboard</strong>:</p>\n\n<ul>\n\t<li>the first row consists of the characters <code>&quot;qwertyuiop&quot;</code>,</li>\n\t<li>the second row consists of the characters <code>&quot;asdfghjkl&quot;</code>, and</li>\n\t<li>the third row consists of the characters <code>&quot;zxcvbnm&quot;</code>.</li>\n</ul>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/keyboard.png\" style=\"width: 800px; max-width: 600px; height: 267px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Hello&quot;,&quot;Alaska&quot;,&quot;Dad&quot;,&quot;Peace&quot;]\n<strong>Output:</strong> [&quot;Alaska&quot;,&quot;Dad&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;omk&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;adsdf&quot;,&quot;sfd&quot;]\n<strong>Output:</strong> [&quot;adsdf&quot;,&quot;sfd&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consists of English letters (both lowercase and uppercase).&nbsp;</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1521,
        "dislikes": 1112,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"210K\", \"totalSubmission\": \"298.7K\", \"totalAcceptedRaw\": 209987, \"totalSubmissionRaw\": 298725, \"acRate\": \"70.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "find-mode-in-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "501",
        "title": "Find Mode in Binary Search Tree",
        "titleSlug": "find-mode-in-binary-search-tree",
        "content": "<p>Given the <code>root</code> of a binary search tree (BST) with duplicates, return <em>all the <a href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\" target=\"_blank\">mode(s)</a> (i.e., the most frequently occurred element) in it</em>.</p>\n\n<p>If the tree has more than one mode, return them in <strong>any order</strong>.</p>\n\n<p>Assume a BST is defined as follows:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than or equal to</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than or equal to</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/11/mode-tree.jpg\" style=\"width: 142px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,2]\n<strong>Output:</strong> [2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3795,
        "dislikes": 766,
        "similarQuestions": "[{\"title\": \"Validate Binary Search Tree\", \"titleSlug\": \"validate-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"287.5K\", \"totalSubmission\": \"517K\", \"totalAcceptedRaw\": 287527, \"totalSubmissionRaw\": 516994, \"acRate\": \"55.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "validate-binary-search-tree",
          "title": "Validate Binary Search Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "ipo": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "502",
        "title": "IPO",
        "titleSlug": "ipo",
        "content": "<p>Suppose LeetCode will start its <strong>IPO</strong> soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the <strong>IPO</strong>. Since it has limited resources, it can only finish at most <code>k</code> distinct projects before the <strong>IPO</strong>. Help LeetCode design the best way to maximize its total capital after finishing at most <code>k</code> distinct projects.</p>\n\n<p>You are given <code>n</code> projects where the <code>i<sup>th</sup></code> project has a pure profit <code>profits[i]</code> and a minimum capital of <code>capital[i]</code> is needed to start it.</p>\n\n<p>Initially, you have <code>w</code> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.</p>\n\n<p>Pick a list of <strong>at most</strong> <code>k</code> distinct projects from given projects to <strong>maximize your final capital</strong>, and return <em>the final maximized capital</em>.</p>\n\n<p>The answer is guaranteed to fit in a 32-bit signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= w &lt;= 10<sup>9</sup></code></li>\n\t<li><code>n == profits.length</code></li>\n\t<li><code>n == capital.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= profits[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= capital[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2949,
        "dislikes": 186,
        "similarQuestions": "[{\"title\": \"Maximum Subsequence Score\", \"titleSlug\": \"maximum-subsequence-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Elegance of a K-Length Subsequence\", \"titleSlug\": \"maximum-elegance-of-a-k-length-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"110.8K\", \"totalSubmission\": \"223.6K\", \"totalAcceptedRaw\": 110800, \"totalSubmissionRaw\": 223564, \"acRate\": \"49.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-subsequence-score",
          "title": "Maximum Subsequence Score",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-elegance-of-a-k-length-subsequence",
          "title": "Maximum Elegance of a K-Length Subsequence",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "next-greater-element-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "503",
        "title": "Next Greater Element II",
        "titleSlug": "next-greater-element-ii",
        "content": "<p>Given a circular integer array <code>nums</code> (i.e., the next element of <code>nums[nums.length - 1]</code> is <code>nums[0]</code>), return <em>the <strong>next greater number</strong> for every element in</em> <code>nums</code>.</p>\n\n<p>The <strong>next greater number</strong> of a number <code>x</code> is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn&#39;t exist, return <code>-1</code> for this number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1]\n<strong>Output:</strong> [2,-1,2]\nExplanation: The first 1&#39;s next greater number is 2; \nThe number 2 can&#39;t find next greater number. \nThe second 1&#39;s next greater number needs to search circularly, which is also 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,3]\n<strong>Output:</strong> [2,3,4,-1,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7587,
        "dislikes": 183,
        "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Next Greater Element III\", \"titleSlug\": \"next-greater-element-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"357.2K\", \"totalSubmission\": \"562.1K\", \"totalAcceptedRaw\": 357214, \"totalSubmissionRaw\": 562083, \"acRate\": \"63.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "next-greater-element-i",
          "title": "Next Greater Element I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "next-greater-element-iii",
          "title": "Next Greater Element III",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "base-7": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "504",
        "title": "Base 7",
        "titleSlug": "base-7",
        "content": "<p>Given an integer <code>num</code>, return <em>a string of its <strong>base 7</strong> representation</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 100\n<strong>Output:</strong> \"202\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> num = -7\n<strong>Output:</strong> \"-10\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>7</sup> &lt;= num &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 762,
        "dislikes": 223,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"122.2K\", \"totalSubmission\": \"246.8K\", \"totalAcceptedRaw\": 122159, \"totalSubmissionRaw\": 246845, \"acRate\": \"49.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "the-maze-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "505",
        "title": "The Maze II",
        "titleSlug": "the-maze-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1305,
        "dislikes": 56,
        "similarQuestions": "[{\"title\": \"The Maze\", \"titleSlug\": \"the-maze\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"The Maze III\", \"titleSlug\": \"the-maze-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Shortest Path", "slug": "shortest-path" }
        ],
        "stats": "{\"totalAccepted\": \"103.9K\", \"totalSubmission\": \"195.1K\", \"totalAcceptedRaw\": 103854, \"totalSubmissionRaw\": 195128, \"acRate\": \"53.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "the-maze",
          "title": "The Maze",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "the-maze-iii",
          "title": "The Maze III",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Shortest Path", "slug": "shortest-path" }
      ]
    }
  },
  "relative-ranks": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "506",
        "title": "Relative Ranks",
        "titleSlug": "relative-ranks",
        "content": "<p>You are given an integer array <code>score</code> of size <code>n</code>, where <code>score[i]</code> is the score of the <code>i<sup>th</sup></code> athlete in a competition. All the scores are guaranteed to be <strong>unique</strong>.</p>\n\n<p>The athletes are <strong>placed</strong> based on their scores, where the <code>1<sup>st</sup></code> place athlete has the highest score, the <code>2<sup>nd</sup></code> place athlete has the <code>2<sup>nd</sup></code> highest score, and so on. The placement of each athlete determines their rank:</p>\n\n<ul>\n\t<li>The <code>1<sup>st</sup></code> place athlete&#39;s rank is <code>&quot;Gold Medal&quot;</code>.</li>\n\t<li>The <code>2<sup>nd</sup></code> place athlete&#39;s rank is <code>&quot;Silver Medal&quot;</code>.</li>\n\t<li>The <code>3<sup>rd</sup></code> place athlete&#39;s rank is <code>&quot;Bronze Medal&quot;</code>.</li>\n\t<li>For the <code>4<sup>th</sup></code> place to the <code>n<sup>th</sup></code> place athlete, their rank is their placement number (i.e., the <code>x<sup>th</sup></code> place athlete&#39;s rank is <code>&quot;x&quot;</code>).</li>\n</ul>\n\n<p>Return an array <code>answer</code> of size <code>n</code> where <code>answer[i]</code> is the <strong>rank</strong> of the <code>i<sup>th</sup></code> athlete.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> score = [5,4,3,2,1]\n<strong>Output:</strong> [&quot;Gold Medal&quot;,&quot;Silver Medal&quot;,&quot;Bronze Medal&quot;,&quot;4&quot;,&quot;5&quot;]\n<strong>Explanation:</strong> The placements are [1<sup>st</sup>, 2<sup>nd</sup>, 3<sup>rd</sup>, 4<sup>th</sup>, 5<sup>th</sup>].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> score = [10,3,8,9,4]\n<strong>Output:</strong> [&quot;Gold Medal&quot;,&quot;5&quot;,&quot;Bronze Medal&quot;,&quot;Silver Medal&quot;,&quot;4&quot;]\n<strong>Explanation:</strong> The placements are [1<sup>st</sup>, 5<sup>th</sup>, 3<sup>rd</sup>, 2<sup>nd</sup>, 4<sup>th</sup>].\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == score.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= score[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All the values in <code>score</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1303,
        "dislikes": 68,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"148.5K\", \"totalSubmission\": \"236.1K\", \"totalAcceptedRaw\": 148545, \"totalSubmissionRaw\": 236101, \"acRate\": \"62.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "perfect-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "507",
        "title": "Perfect Number",
        "titleSlug": "perfect-number",
        "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Perfect_number\" target=\"_blank\"><strong>perfect number</strong></a> is a <strong>positive integer</strong> that is equal to the sum of its <strong>positive divisors</strong>, excluding the number itself. A <strong>divisor</strong> of an integer <code>x</code> is an integer that can divide <code>x</code> evenly.</p>\n\n<p>Given an integer <code>n</code>, return <code>true</code><em> if </em><code>n</code><em> is a perfect number, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 28\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 7\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1009,
        "dislikes": 1202,
        "similarQuestions": "[{\"title\": \"Self Dividing Numbers\", \"titleSlug\": \"self-dividing-numbers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"165.4K\", \"totalSubmission\": \"422.1K\", \"totalAcceptedRaw\": 165426, \"totalSubmissionRaw\": 422139, \"acRate\": \"39.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "self-dividing-numbers",
          "title": "Self Dividing Numbers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "most-frequent-subtree-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "508",
        "title": "Most Frequent Subtree Sum",
        "titleSlug": "most-frequent-subtree-sum",
        "content": "<p>Given the <code>root</code> of a binary tree, return the most frequent <strong>subtree sum</strong>. If there is a tie, return all the values with the highest frequency in any order.</p>\n\n<p>The <strong>subtree sum</strong> of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/freq1-tree.jpg\" style=\"width: 207px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> root = [5,2,-3]\n<strong>Output:</strong> [2,-3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/freq2-tree.jpg\" style=\"width: 207px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> root = [5,2,-5]\n<strong>Output:</strong> [2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2179,
        "dislikes": 304,
        "similarQuestions": "[{\"title\": \"Subtree of Another Tree\", \"titleSlug\": \"subtree-of-another-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Nodes Equal to Sum of Descendants\", \"titleSlug\": \"count-nodes-equal-to-sum-of-descendants\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"135.5K\", \"totalSubmission\": \"205.7K\", \"totalAcceptedRaw\": 135496, \"totalSubmissionRaw\": 205691, \"acRate\": \"65.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "subtree-of-another-tree",
          "title": "Subtree of Another Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-nodes-equal-to-sum-of-descendants",
          "title": "Count Nodes Equal to Sum of Descendants",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "fibonacci-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "509",
        "title": "Fibonacci Number",
        "titleSlug": "fibonacci-number",
        "content": "<p>The <b>Fibonacci numbers</b>, commonly denoted <code>F(n)</code> form a sequence, called the <b>Fibonacci sequence</b>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n\n<pre>\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</pre>\n\n<p>Given <code>n</code>, calculate <code>F(n)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 30</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7808,
        "dislikes": 341,
        "similarQuestions": "[{\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Split Array into Fibonacci Sequence\", \"titleSlug\": \"split-array-into-fibonacci-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Length of Longest Fibonacci Subsequence\", \"titleSlug\": \"length-of-longest-fibonacci-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-th Tribonacci Number\", \"titleSlug\": \"n-th-tribonacci-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Recursion", "slug": "recursion" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 1601343, \"totalSubmissionRaw\": 2269850, \"acRate\": \"70.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "climbing-stairs",
          "title": "Climbing Stairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "split-array-into-fibonacci-sequence",
          "title": "Split Array into Fibonacci Sequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "length-of-longest-fibonacci-subsequence",
          "title": "Length of Longest Fibonacci Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-th-tribonacci-number",
          "title": "N-th Tribonacci Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Recursion", "slug": "recursion" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "inorder-successor-in-bst-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "510",
        "title": "Inorder Successor in BST II",
        "titleSlug": "inorder-successor-in-bst-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 852,
        "dislikes": 40,
        "similarQuestions": "[{\"title\": \"Inorder Successor in BST\", \"titleSlug\": \"inorder-successor-in-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"63.7K\", \"totalSubmission\": \"104.5K\", \"totalAcceptedRaw\": 63707, \"totalSubmissionRaw\": 104545, \"acRate\": \"60.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "inorder-successor-in-bst",
          "title": "Inorder Successor in BST",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "game-play-analysis-i": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "511",
        "title": "Game Play Analysis I",
        "titleSlug": "game-play-analysis-i",
        "content": "<p>Table: <code>Activity</code></p>\n\n<pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| player_id    | int     |\n| device_id    | int     |\n| event_date   | date    |\n| games_played | int     |\n+--------------+---------+\n(player_id, event_date) is the primary key (combination of columns with unique values) of this table.\nThis table shows the activity of players of some games.\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find the <strong>first login date</strong> for each player.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-05-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+\n<strong>Output:</strong> \n+-----------+-------------+\n| player_id | first_login |\n+-----------+-------------+\n| 1         | 2016-03-01  |\n| 2         | 2017-06-25  |\n| 3         | 2016-03-02  |\n+-----------+-------------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 802,
        "dislikes": 26,
        "similarQuestions": "[{\"title\": \"Game Play Analysis II\", \"titleSlug\": \"game-play-analysis-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"237.9K\", \"totalSubmission\": \"320.2K\", \"totalAcceptedRaw\": 237876, \"totalSubmissionRaw\": 320177, \"acRate\": \"74.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "game-play-analysis-ii",
          "title": "Game Play Analysis II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "game-play-analysis-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "512",
        "title": "Game Play Analysis II",
        "titleSlug": "game-play-analysis-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 259,
        "dislikes": 42,
        "similarQuestions": "[{\"title\": \"Game Play Analysis I\", \"titleSlug\": \"game-play-analysis-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Game Play Analysis III\", \"titleSlug\": \"game-play-analysis-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"81.1K\", \"totalSubmission\": \"154.6K\", \"totalAcceptedRaw\": 81114, \"totalSubmissionRaw\": 154612, \"acRate\": \"52.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "game-play-analysis-i",
          "title": "Game Play Analysis I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "game-play-analysis-iii",
          "title": "Game Play Analysis III",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "find-bottom-left-tree-value": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "513",
        "title": "Find Bottom Left Tree Value",
        "titleSlug": "find-bottom-left-tree-value",
        "content": "<p>Given the <code>root</code> of a binary tree, return the leftmost value in the last row of the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg\" style=\"width: 302px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg\" style=\"width: 432px; height: 421px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,null,5,6,null,null,7]\n<strong>Output:</strong> 7\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3173,
        "dislikes": 257,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"235.6K\", \"totalSubmission\": \"348.2K\", \"totalAcceptedRaw\": 235626, \"totalSubmissionRaw\": 348214, \"acRate\": \"67.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "freedom-trail": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "514",
        "title": "Freedom Trail",
        "titleSlug": "freedom-trail",
        "content": "<p>In the video game Fallout 4, the quest <strong>&quot;Road to Freedom&quot;</strong> requires players to reach a metal dial called the <strong>&quot;Freedom Trail Ring&quot;</strong> and use the dial to spell a specific keyword to open the door.</p>\n\n<p>Given a string <code>ring</code> that represents the code engraved on the outer ring and another string <code>key</code> that represents the keyword that needs to be spelled, return <em>the minimum number of steps to spell all the characters in the keyword</em>.</p>\n\n<p>Initially, the first character of the ring is aligned at the <code>&quot;12:00&quot;</code> direction. You should spell all the characters in <code>key</code> one by one by rotating <code>ring</code> clockwise or anticlockwise to make each character of the string key aligned at the <code>&quot;12:00&quot;</code> direction and then by pressing the center button.</p>\n\n<p>At the stage of rotating the ring to spell the key character <code>key[i]</code>:</p>\n\n<ol>\n\t<li>You can rotate the ring clockwise or anticlockwise by one place, which counts as <strong>one step</strong>. The final purpose of the rotation is to align one of <code>ring</code>&#39;s characters at the <code>&quot;12:00&quot;</code> direction, where this character must equal <code>key[i]</code>.</li>\n\t<li>If the character <code>key[i]</code> has been aligned at the <code>&quot;12:00&quot;</code> direction, press the center button to spell, which also counts as <strong>one step</strong>. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/ring.jpg\" style=\"width: 450px; height: 450px;\" />\n<pre>\n<strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;gd&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nFor the first key character &#39;g&#39;, since it is already in place, we just need 1 step to spell this character. \nFor the second key character &#39;d&#39;, we need to rotate the ring &quot;godding&quot; anticlockwise by two steps to make it become &quot;ddinggo&quot;.\nAlso, we need 1 more step for spelling.\nSo the final output is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;godding&quot;\n<strong>Output:</strong> 13\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ring.length, key.length &lt;= 100</code></li>\n\t<li><code>ring</code> and <code>key</code> consist of only lower case English letters.</li>\n\t<li>It is guaranteed that <code>key</code> could always be spelled by rotating <code>ring</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 883,
        "dislikes": 37,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"34.9K\", \"totalSubmission\": \"73.8K\", \"totalAcceptedRaw\": 34888, \"totalSubmissionRaw\": 73765, \"acRate\": \"47.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "find-largest-value-in-each-tree-row": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "515",
        "title": "Find Largest Value in Each Tree Row",
        "titleSlug": "find-largest-value-in-each-tree-row",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>an array of the largest value in each row</em> of the tree <strong>(0-indexed)</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg\" style=\"width: 300px; height: 172px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5,3,null,9]\n<strong>Output:</strong> [1,3,9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> [1,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3514,
        "dislikes": 110,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"321.7K\", \"totalSubmission\": \"490.3K\", \"totalAcceptedRaw\": 321718, \"totalSubmissionRaw\": 490261, \"acRate\": \"65.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "longest-palindromic-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "516",
        "title": "Longest Palindromic Subsequence",
        "titleSlug": "longest-palindromic-subsequence",
        "content": "<p>Given a string <code>s</code>, find <em>the longest palindromic <strong>subsequence</strong>&#39;s length in</em> <code>s</code>.</p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbab&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One possible longest palindromic subsequence is &quot;bbbb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One possible longest palindromic subsequence is &quot;bb&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9210,
        "dislikes": 316,
        "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindromic Substrings\", \"titleSlug\": \"palindromic-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Different Palindromic Subsequences\", \"titleSlug\": \"count-different-palindromic-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subsequence\", \"titleSlug\": \"longest-common-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Palindromic Subsequence II\", \"titleSlug\": \"longest-palindromic-subsequence-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximize Palindrome Length From Subsequences\", \"titleSlug\": \"maximize-palindrome-length-from-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Product of the Length of Two Palindromic Subsequences\", \"titleSlug\": \"maximum-product-of-the-length-of-two-palindromic-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"447K\", \"totalSubmission\": \"717.2K\", \"totalAcceptedRaw\": 447045, \"totalSubmissionRaw\": 717174, \"acRate\": \"62.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-substring",
          "title": "Longest Palindromic Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "palindromic-substrings",
          "title": "Palindromic Substrings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-different-palindromic-subsequences",
          "title": "Count Different Palindromic Subsequences",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-common-subsequence",
          "title": "Longest Common Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-subsequence-ii",
          "title": "Longest Palindromic Subsequence II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximize-palindrome-length-from-subsequences",
          "title": "Maximize Palindrome Length From Subsequences",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
          "title": "Maximum Product of the Length of Two Palindromic Subsequences",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "super-washing-machines": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "517",
        "title": "Super Washing Machines",
        "titleSlug": "super-washing-machines",
        "content": "<p>You have <code>n</code> super washing machines on a line. Initially, each washing machine has some dresses or is empty.</p>\n\n<p>For each move, you could choose any <code>m</code> (<code>1 &lt;= m &lt;= n</code>) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.</p>\n\n<p>Given an integer array <code>machines</code> representing the number of dresses in each washing machine from left to right on the line, return <em>the minimum number of moves to make all the washing machines have the same number of dresses</em>. If it is not possible to do it, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [1,0,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n1st move:    1     0 &lt;-- 5    =&gt;    1     1     4\n2nd move:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3\n3rd move:    2     1 &lt;-- 3    =&gt;    2     2     2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,3,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n1st move:    0 &lt;-- 3     0    =&gt;    1     2     0\n2nd move:    1     2 --&gt; 0    =&gt;    1     1     1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,2,0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nIt&#39;s impossible to make all three washing machines have the same number of dresses.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == machines.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= machines[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 749,
        "dislikes": 211,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"27.9K\", \"totalSubmission\": \"68.4K\", \"totalAcceptedRaw\": 27937, \"totalSubmissionRaw\": 68354, \"acRate\": \"40.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "coin-change-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "518",
        "title": "Coin Change II",
        "titleSlug": "coin-change-ii",
        "content": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>\n\n<p>Return <em>the number of combinations that make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>0</code>.</p>\n\n<p>You may assume that you have an infinite number of each kind of coin.</p>\n\n<p>The answer is <strong>guaranteed</strong> to fit into a signed <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = 5, coins = [1,2,5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = 3, coins = [2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> the amount of 3 cannot be made up just with coins of 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> amount = 10, coins = [10]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 5000</code></li>\n\t<li>All the values of <code>coins</code> are <strong>unique</strong>.</li>\n\t<li><code>0 &lt;= amount &lt;= 5000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9001,
        "dislikes": 159,
        "similarQuestions": "[{\"title\": \"Maximum Value of K Coins From Piles\", \"titleSlug\": \"maximum-value-of-k-coins-from-piles\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Earn Points\", \"titleSlug\": \"number-of-ways-to-earn-points\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count of Sub-Multisets With Bounded Sum\", \"titleSlug\": \"count-of-sub-multisets-with-bounded-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Length of the Longest Subsequence That Sums to Target\", \"titleSlug\": \"length-of-the-longest-subsequence-that-sums-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"563.5K\", \"totalSubmission\": \"888.7K\", \"totalAcceptedRaw\": 563456, \"totalSubmissionRaw\": 888683, \"acRate\": \"63.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-value-of-k-coins-from-piles",
          "title": "Maximum Value of K Coins From Piles",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-ways-to-earn-points",
          "title": "Number of Ways to Earn Points",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-of-sub-multisets-with-bounded-sum",
          "title": "Count of Sub-Multisets With Bounded Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "length-of-the-longest-subsequence-that-sums-to-target",
          "title": "Length of the Longest Subsequence That Sums to Target",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "random-flip-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "519",
        "title": "Random Flip Matrix",
        "titleSlug": "random-flip-matrix",
        "content": "<p>There is an <code>m x n</code> binary grid <code>matrix</code> with all the values set <code>0</code> initially. Design an algorithm to randomly pick an index <code>(i, j)</code> where <code>matrix[i][j] == 0</code> and flips it to <code>1</code>. All the indices <code>(i, j)</code> where <code>matrix[i][j] == 0</code> should be equally likely to be returned.</p>\n\n<p>Optimize your algorithm to minimize the number of calls made to the <strong>built-in</strong> random function of your language and optimize the time and space complexity.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int m, int n)</code> Initializes the object with the size of the binary matrix <code>m</code> and <code>n</code>.</li>\n\t<li><code>int[] flip()</code> Returns a random index <code>[i, j]</code> of the matrix where <code>matrix[i][j] == 0</code> and flips it to <code>1</code>.</li>\n\t<li><code>void reset()</code> Resets all the values of the matrix to be <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;flip&quot;, &quot;flip&quot;, &quot;flip&quot;, &quot;reset&quot;, &quot;flip&quot;]\n[[3, 1], [], [], [], [], []]\n<strong>Output</strong>\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li>\n\t<li>There will be at least one free cell for each call to <code>flip</code>.</li>\n\t<li>At most <code>1000</code> calls will be made to <code>flip</code> and <code>reset</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 397,
        "dislikes": 114,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"18.3K\", \"totalSubmission\": \"45.1K\", \"totalAcceptedRaw\": 18275, \"totalSubmissionRaw\": 45117, \"acRate\": \"40.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Reservoir Sampling", "slug": "reservoir-sampling" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "detect-capital": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "520",
        "title": "Detect Capital",
        "titleSlug": "detect-capital",
        "content": "<p>We define the usage of capitals in a word to be right when one of the following cases holds:</p>\n\n<ul>\n\t<li>All letters in this word are capitals, like <code>&quot;USA&quot;</code>.</li>\n\t<li>All letters in this word are not capitals, like <code>&quot;leetcode&quot;</code>.</li>\n\t<li>Only the first letter in this word is capital, like <code>&quot;Google&quot;</code>.</li>\n</ul>\n\n<p>Given a string <code>word</code>, return <code>true</code> if the usage of capitals in it is right.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> word = \"USA\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> word = \"FlaG\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code> consists of lowercase and uppercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3330,
        "dislikes": 456,
        "similarQuestions": "[{\"title\": \"Capitalize the Title\", \"titleSlug\": \"capitalize-the-title\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"413.4K\", \"totalSubmission\": \"729.9K\", \"totalAcceptedRaw\": 413365, \"totalSubmissionRaw\": 729930, \"acRate\": \"56.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "capitalize-the-title",
          "title": "Capitalize the Title",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "longest-uncommon-subsequence-i": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "521",
        "title": "Longest Uncommon Subsequence I",
        "titleSlug": "longest-uncommon-subsequence-i",
        "content": "<p>Given two strings <code>a</code> and <code>b</code>, return <em>the length of the <strong>longest uncommon subsequence</strong> between </em><code>a</code> <em>and</em> <code>b</code>. If the longest uncommon subsequence does not exist, return <code>-1</code>.</p>\n\n<p>An <strong>uncommon subsequence</strong> between two strings is a string that is a <strong>subsequence of one but not the other</strong>.</p>\n\n<p>A <strong>subsequence</strong> of a string <code>s</code> is a string that can be obtained after deleting any number of characters from <code>s</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abc&quot;</code> is a subsequence of <code>&quot;aebdc&quot;</code> because you can delete the underlined characters in <code>&quot;a<u>e</u>b<u>d</u>c&quot;</code> to get <code>&quot;abc&quot;</code>. Other subsequences of <code>&quot;aebdc&quot;</code> include <code>&quot;aebdc&quot;</code>, <code>&quot;aeb&quot;</code>, and <code>&quot;&quot;</code> (empty string).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;aba&quot;, b = &quot;cdc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One longest uncommon subsequence is &quot;aba&quot; because &quot;aba&quot; is a subsequence of &quot;aba&quot; but not &quot;cdc&quot;.\nNote that &quot;cdc&quot; is also a longest uncommon subsequence.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;aaa&quot;, b = &quot;bbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>&nbsp;The longest uncommon subsequences are &quot;aaa&quot; and &quot;bbb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;aaa&quot;, b = &quot;aaa&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>&nbsp;Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 100</code></li>\n\t<li><code>a</code> and <code>b</code> consist of lower-case English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 809,
        "dislikes": 6437,
        "similarQuestions": "[{\"title\": \"Longest Uncommon Subsequence II\", \"titleSlug\": \"longest-uncommon-subsequence-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"104.8K\", \"totalSubmission\": \"173.1K\", \"totalAcceptedRaw\": 104812, \"totalSubmissionRaw\": 173125, \"acRate\": \"60.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-uncommon-subsequence-ii",
          "title": "Longest Uncommon Subsequence II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "longest-uncommon-subsequence-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "522",
        "title": "Longest Uncommon Subsequence II",
        "titleSlug": "longest-uncommon-subsequence-ii",
        "content": "<p>Given an array of strings <code>strs</code>, return <em>the length of the <strong>longest uncommon subsequence</strong> between them</em>. If the longest uncommon subsequence does not exist, return <code>-1</code>.</p>\n\n<p>An <strong>uncommon subsequence</strong> between an array of strings is a string that is a <strong>subsequence of one string but not the others</strong>.</p>\n\n<p>A <strong>subsequence</strong> of a string <code>s</code> is a string that can be obtained after deleting any number of characters from <code>s</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abc&quot;</code> is a subsequence of <code>&quot;aebdc&quot;</code> because you can delete the underlined characters in <code>&quot;a<u>e</u>b<u>d</u>c&quot;</code> to get <code>&quot;abc&quot;</code>. Other subsequences of <code>&quot;aebdc&quot;</code> include <code>&quot;aebdc&quot;</code>, <code>&quot;aeb&quot;</code>, and <code>&quot;&quot;</code> (empty string).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> strs = [\"aba\",\"cdc\",\"eae\"]\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> strs = [\"aaa\",\"aaa\",\"aa\"]\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= strs.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 10</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 494,
        "dislikes": 1270,
        "similarQuestions": "[{\"title\": \"Longest Uncommon Subsequence I\", \"titleSlug\": \"longest-uncommon-subsequence-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"49.7K\", \"totalSubmission\": \"121.2K\", \"totalAcceptedRaw\": 49673, \"totalSubmissionRaw\": 121165, \"acRate\": \"41.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "longest-uncommon-subsequence-i",
          "title": "Longest Uncommon Subsequence I",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "continuous-subarray-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "523",
        "title": "Continuous Subarray Sum",
        "titleSlug": "continuous-subarray-sum",
        "content": "<p>Given an integer array nums and an integer k, return <code>true</code> <em>if </em><code>nums</code><em> has a <strong>good subarray</strong> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>good subarray</strong> is a subarray where:</p>\n\n<ul>\n\t<li>its length is <strong>at least two</strong>, and</li>\n\t<li>the sum of the elements of the subarray is a multiple of <code>k</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>A <strong>subarray</strong> is a contiguous part of the array.</li>\n\t<li>An integer <code>x</code> is a multiple of <code>k</code> if there exists an integer <code>n</code> such that <code>x = n * k</code>. <code>0</code> is <strong>always</strong> a multiple of <code>k</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [23,<u>2,4</u>,6,7], k = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [<u>23,2,6,4,7</u>], k = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [23,2,6,4,7], k = 13\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= sum(nums[i]) &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5308,
        "dislikes": 518,
        "similarQuestions": "[{\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Make Array Continuous\", \"titleSlug\": \"minimum-number-of-operations-to-make-array-continuous\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Intervals Between Identical Elements\", \"titleSlug\": \"intervals-between-identical-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Apply Operations to Make All Array Elements Equal to Zero\", \"titleSlug\": \"apply-operations-to-make-all-array-elements-equal-to-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"428K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 427985, \"totalSubmissionRaw\": 1491529, \"acRate\": \"28.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-sum-equals-k",
          "title": "Subarray Sum Equals K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
          "title": "Minimum Number of Operations to Make Array Continuous",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "intervals-between-identical-elements",
          "title": "Intervals Between Identical Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "apply-operations-to-make-all-array-elements-equal-to-zero",
          "title": "Apply Operations to Make All Array Elements Equal to Zero",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "longest-word-in-dictionary-through-deleting": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "524",
        "title": "Longest Word in Dictionary through Deleting",
        "titleSlug": "longest-word-in-dictionary-through-deleting",
        "content": "<p>Given a string <code>s</code> and a string array <code>dictionary</code>, return <em>the longest string in the dictionary that can be formed by deleting some of the given string characters</em>. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abpcplea&quot;, dictionary = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]\n<strong>Output:</strong> &quot;apple&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abpcplea&quot;, dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li>\n\t<li><code>s</code> and <code>dictionary[i]</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1731,
        "dislikes": 355,
        "similarQuestions": "[{\"title\": \"Longest Word in Dictionary\", \"titleSlug\": \"longest-word-in-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"149.1K\", \"totalSubmission\": \"291.9K\", \"totalAcceptedRaw\": 149069, \"totalSubmissionRaw\": 291890, \"acRate\": \"51.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-word-in-dictionary",
          "title": "Longest Word in Dictionary",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "contiguous-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "525",
        "title": "Contiguous Array",
        "titleSlug": "contiguous-array",
        "content": "<p>Given a binary array <code>nums</code>, return <em>the maximum length of a contiguous subarray with an equal number of </em><code>0</code><em> and </em><code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6876,
        "dislikes": 278,
        "similarQuestions": "[{\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"319.9K\", \"totalSubmission\": \"681.7K\", \"totalAcceptedRaw\": 319918, \"totalSubmissionRaw\": 681689, \"acRate\": \"46.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-size-subarray-sum-equals-k",
          "title": "Maximum Size Subarray Sum Equals k",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "beautiful-arrangement": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "526",
        "title": "Beautiful Arrangement",
        "titleSlug": "beautiful-arrangement",
        "content": "<p>Suppose you have <code>n</code> integers labeled <code>1</code> through <code>n</code>. A permutation of those <code>n</code> integers <code>perm</code> (<strong>1-indexed</strong>) is considered a <strong>beautiful arrangement</strong> if for every <code>i</code> (<code>1 &lt;= i &lt;= n</code>), <strong>either</strong> of the following is true:</p>\n\n<ul>\n\t<li><code>perm[i]</code> is divisible by <code>i</code>.</li>\n\t<li><code>i</code> is divisible by <code>perm[i]</code>.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the <strong>number</strong> of the <strong>beautiful arrangements</strong> that you can construct</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 2\n<b>Explanation:</b> \nThe first beautiful arrangement is [1,2]:\n    - perm[1] = 1 is divisible by i = 1\n    - perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n    - perm[1] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm[2] = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3124,
        "dislikes": 355,
        "similarQuestions": "[{\"title\": \"Beautiful Arrangement II\", \"titleSlug\": \"beautiful-arrangement-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"166.2K\", \"totalSubmission\": \"258.5K\", \"totalAcceptedRaw\": 166170, \"totalSubmissionRaw\": 258507, \"acRate\": \"64.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "beautiful-arrangement-ii",
          "title": "Beautiful Arrangement II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "word-abbreviation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "527",
        "title": "Word Abbreviation",
        "titleSlug": "word-abbreviation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 383,
        "dislikes": 288,
        "similarQuestions": "[{\"title\": \"Valid Word Abbreviation\", \"titleSlug\": \"valid-word-abbreviation\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Unique Word Abbreviation\", \"titleSlug\": \"minimum-unique-word-abbreviation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if a String Is an Acronym of Words\", \"titleSlug\": \"check-if-a-string-is-an-acronym-of-words\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"26.7K\", \"totalSubmission\": \"43.9K\", \"totalAcceptedRaw\": 26697, \"totalSubmissionRaw\": 43852, \"acRate\": \"60.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-word-abbreviation",
          "title": "Valid Word Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-unique-word-abbreviation",
          "title": "Minimum Unique Word Abbreviation",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-a-string-is-an-acronym-of-words",
          "title": "Check if a String Is an Acronym of Words",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "random-pick-with-weight": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "528",
        "title": "Random Pick with Weight",
        "titleSlug": "random-pick-with-weight",
        "content": "<p>You are given a <strong>0-indexed</strong> array of positive integers <code>w</code> where <code>w[i]</code> describes the <strong>weight</strong> of the <code>i<sup>th</sup></code> index.</p>\n\n<p>You need to implement the function <code>pickIndex()</code>, which <strong>randomly</strong> picks an index in the range <code>[0, w.length - 1]</code> (<strong>inclusive</strong>) and returns it. The <strong>probability</strong> of picking an index <code>i</code> is <code>w[i] / sum(w)</code>.</p>\n\n<ul>\n\t<li>For example, if <code>w = [1, 3]</code>, the probability of picking index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e., <code>25%</code>), and the probability of picking index <code>1</code> is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;]\n[[[1]],[]]\n<strong>Output</strong>\n[null,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\n[[[1,3]],[],[],[],[],[]]\n<strong>Output</strong>\n[null,1,1,1,1,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= w.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pickIndex</code> will be called at most <code>10<sup>4</sup></code> times.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1702,
        "dislikes": 715,
        "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Blacklist\", \"titleSlug\": \"random-pick-with-blacklist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Random Point in Non-overlapping Rectangles\", \"titleSlug\": \"random-point-in-non-overlapping-rectangles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Prefix Sum", "slug": "prefix-sum" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"403.9K\", \"totalSubmission\": \"871.1K\", \"totalAcceptedRaw\": 403892, \"totalSubmissionRaw\": 871052, \"acRate\": \"46.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "random-pick-index",
          "title": "Random Pick Index",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "random-pick-with-blacklist",
          "title": "Random Pick with Blacklist",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "random-point-in-non-overlapping-rectangles",
          "title": "Random Point in Non-overlapping Rectangles",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Prefix Sum", "slug": "prefix-sum" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "minesweeper": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "529",
        "title": "Minesweeper",
        "titleSlug": "minesweeper",
        "content": "<p>Let&#39;s play the minesweeper game (<a href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\" target=\"_blank\">Wikipedia</a>, <a href=\"http://minesweeperonline.com\" target=\"_blank\">online game</a>)!</p>\n\n<p>You are given an <code>m x n</code> char matrix <code>board</code> representing the game board where:</p>\n\n<ul>\n\t<li><code>&#39;M&#39;</code> represents an unrevealed mine,</li>\n\t<li><code>&#39;E&#39;</code> represents an unrevealed empty square,</li>\n\t<li><code>&#39;B&#39;</code> represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),</li>\n\t<li>digit (<code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>) represents how many mines are adjacent to this revealed square, and</li>\n\t<li><code>&#39;X&#39;</code> represents a revealed mine.</li>\n</ul>\n\n<p>You are also given an integer array <code>click</code> where <code>click = [click<sub>r</sub>, click<sub>c</sub>]</code> represents the next click position among all the unrevealed squares (<code>&#39;M&#39;</code> or <code>&#39;E&#39;</code>).</p>\n\n<p>Return <em>the board after revealing this position according to the following rules</em>:</p>\n\n<ol>\n\t<li>If a mine <code>&#39;M&#39;</code> is revealed, then the game is over. You should change it to <code>&#39;X&#39;</code>.</li>\n\t<li>If an empty square <code>&#39;E&#39;</code> with no adjacent mines is revealed, then change it to a revealed blank <code>&#39;B&#39;</code> and all of its adjacent unrevealed squares should be revealed recursively.</li>\n\t<li>If an empty square <code>&#39;E&#39;</code> with at least one adjacent mine is revealed, then change it to a digit (<code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>) representing the number of adjacent mines.</li>\n\t<li>Return the board when no more squares will be revealed.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2023/08/09/untitled.jpeg\" style=\"width: 500px; max-width: 400px; height: 269px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],[&quot;E&quot;,&quot;E&quot;,&quot;M&quot;,&quot;E&quot;,&quot;E&quot;],[&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],[&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;]], click = [3,0]\n<strong>Output:</strong> [[&quot;B&quot;,&quot;1&quot;,&quot;E&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;M&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2023/08/09/untitled-2.jpeg\" style=\"width: 489px; max-width: 400px; height: 269px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;B&quot;,&quot;1&quot;,&quot;E&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;M&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]], click = [1,2]\n<strong>Output:</strong> [[&quot;B&quot;,&quot;1&quot;,&quot;E&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;X&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>board[i][j]</code> is either <code>&#39;M&#39;</code>, <code>&#39;E&#39;</code>, <code>&#39;B&#39;</code>, or a digit from <code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>.</li>\n\t<li><code>click.length == 2</code></li>\n\t<li><code>0 &lt;= click<sub>r</sub> &lt; m</code></li>\n\t<li><code>0 &lt;= click<sub>c</sub> &lt; n</code></li>\n\t<li><code>board[click<sub>r</sub>][click<sub>c</sub>]</code> is either <code>&#39;M&#39;</code> or <code>&#39;E&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1899,
        "dislikes": 1038,
        "similarQuestions": "[{\"title\": \"Detonate the Maximum Bombs\", \"titleSlug\": \"detonate-the-maximum-bombs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"147.9K\", \"totalSubmission\": \"223.3K\", \"totalAcceptedRaw\": 147898, \"totalSubmissionRaw\": 223253, \"acRate\": \"66.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "detonate-the-maximum-bombs",
          "title": "Detonate the Maximum Bombs",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "minimum-absolute-difference-in-bst": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "530",
        "title": "Minimum Absolute Difference in BST",
        "titleSlug": "minimum-absolute-difference-in-bst",
        "content": "<p>Given the <code>root</code> of a Binary Search Tree (BST), return <em>the minimum absolute difference between the values of any two different nodes in the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg\" style=\"width: 292px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,6,1,3]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg\" style=\"width: 282px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,0,48,null,null,12,49]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 783: <a href=\"https://leetcode.com/problems/minimum-distance-between-bst-nodes/\" target=\"_blank\">https://leetcode.com/problems/minimum-distance-between-bst-nodes/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4207,
        "dislikes": 211,
        "similarQuestions": "[{\"title\": \"K-diff Pairs in an Array\", \"titleSlug\": \"k-diff-pairs-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"333.2K\", \"totalSubmission\": \"569.3K\", \"totalAcceptedRaw\": 333231, \"totalSubmissionRaw\": 569316, \"acRate\": \"58.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "k-diff-pairs-in-an-array",
          "title": "K-diff Pairs in an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "lonely-pixel-i": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "531",
        "title": "Lonely Pixel I",
        "titleSlug": "lonely-pixel-i",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 425,
        "dislikes": 41,
        "similarQuestions": "[{\"title\": \"Lonely Pixel II\", \"titleSlug\": \"lonely-pixel-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"41.7K\", \"totalSubmission\": \"66.9K\", \"totalAcceptedRaw\": 41654, \"totalSubmissionRaw\": 66947, \"acRate\": \"62.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "lonely-pixel-ii",
          "title": "Lonely Pixel II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "k-diff-pairs-in-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "532",
        "title": "K-diff Pairs in an Array",
        "titleSlug": "k-diff-pairs-in-an-array",
        "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the number of <b>unique</b> k-diff pairs in the array</em>.</p>\n\n<p>A <strong>k-diff</strong> pair is an integer pair <code>(nums[i], nums[j])</code>, where the following are true:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j &lt; nums.length</code></li>\n\t<li><code>i != j</code></li>\n\t<li><code>|nums[i] - nums[j]| == k</code></li>\n</ul>\n\n<p><strong>Notice</strong> that <code>|val|</code> denotes the absolute value of <code>val</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,4,1,5], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of <strong>unique</strong> pairs.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1,5,4], k = 0\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is one 0-diff pair in the array, (1, 1).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3714,
        "dislikes": 2233,
        "similarQuestions": "[{\"title\": \"Minimum Absolute Difference in BST\", \"titleSlug\": \"minimum-absolute-difference-in-bst\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Number of Pairs With Absolute Difference K\", \"titleSlug\": \"count-number-of-pairs-with-absolute-difference-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Product of Two Sorted Arrays\", \"titleSlug\": \"kth-smallest-product-of-two-sorted-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Number of Bad Pairs\", \"titleSlug\": \"count-number-of-bad-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Pairs Satisfying Inequality\", \"titleSlug\": \"number-of-pairs-satisfying-inequality\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Absolute Difference Between Elements With Constraint\", \"titleSlug\": \"minimum-absolute-difference-between-elements-with-constraint\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"320.5K\", \"totalSubmission\": \"759.1K\", \"totalAcceptedRaw\": 320546, \"totalSubmissionRaw\": 759097, \"acRate\": \"42.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-absolute-difference-in-bst",
          "title": "Minimum Absolute Difference in BST",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-number-of-pairs-with-absolute-difference-k",
          "title": "Count Number of Pairs With Absolute Difference K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "kth-smallest-product-of-two-sorted-arrays",
          "title": "Kth Smallest Product of Two Sorted Arrays",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-number-of-bad-pairs",
          "title": "Count Number of Bad Pairs",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-pairs-satisfying-inequality",
          "title": "Number of Pairs Satisfying Inequality",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-absolute-difference-between-elements-with-constraint",
          "title": "Minimum Absolute Difference Between Elements With Constraint",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "lonely-pixel-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "533",
        "title": "Lonely Pixel II",
        "titleSlug": "lonely-pixel-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 85,
        "dislikes": 764,
        "similarQuestions": "[{\"title\": \"Lonely Pixel I\", \"titleSlug\": \"lonely-pixel-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"13.1K\", \"totalSubmission\": \"26.9K\", \"totalAcceptedRaw\": 13069, \"totalSubmissionRaw\": 26929, \"acRate\": \"48.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "lonely-pixel-i",
          "title": "Lonely Pixel I",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "game-play-analysis-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "534",
        "title": "Game Play Analysis III",
        "titleSlug": "game-play-analysis-iii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 384,
        "dislikes": 16,
        "similarQuestions": "[{\"title\": \"Game Play Analysis II\", \"titleSlug\": \"game-play-analysis-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Game Play Analysis IV\", \"titleSlug\": \"game-play-analysis-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"71.1K\", \"totalSubmission\": \"87.9K\", \"totalAcceptedRaw\": 71106, \"totalSubmissionRaw\": 87915, \"acRate\": \"80.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "game-play-analysis-ii",
          "title": "Game Play Analysis II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "game-play-analysis-iv",
          "title": "Game Play Analysis IV",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "encode-and-decode-tinyurl": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "535",
        "title": "Encode and Decode TinyURL",
        "titleSlug": "encode-and-decode-tinyurl",
        "content": "<blockquote>Note: This is a companion problem to the <a href=\"https://leetcode.com/discuss/interview-question/system-design/\" target=\"_blank\">System Design</a> problem: <a href=\"https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/\" target=\"_blank\">Design TinyURL</a>.</blockquote>\n\n<p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>. Design a class to encode a URL and decode a tiny URL.</p>\n\n<p>There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution()</code> Initializes the object of the system.</li>\n\t<li><code>String encode(String longUrl)</code> Returns a tiny URL for the given <code>longUrl</code>.</li>\n\t<li><code>String decode(String shortUrl)</code> Returns the original long URL for the given <code>shortUrl</code>. It is guaranteed that the given <code>shortUrl</code> was encoded by the same object.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> url = &quot;https://leetcode.com/problems/design-tinyurl&quot;\n<strong>Output:</strong> &quot;https://leetcode.com/problems/design-tinyurl&quot;\n\n<strong>Explanation:</strong>\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= url.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>url</code> is guranteed to be a valid URL.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1955,
        "dislikes": 3728,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"247.2K\", \"totalSubmission\": \"286.8K\", \"totalAcceptedRaw\": 247250, \"totalSubmissionRaw\": 286765, \"acRate\": \"86.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "construct-binary-tree-from-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "536",
        "title": "Construct Binary Tree from String",
        "titleSlug": "construct-binary-tree-from-string",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1025,
        "dislikes": 156,
        "similarQuestions": "[{\"title\": \"Construct String from Binary Tree\", \"titleSlug\": \"construct-string-from-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"86.1K\", \"totalSubmission\": \"152.4K\", \"totalAcceptedRaw\": 86087, \"totalSubmissionRaw\": 152432, \"acRate\": \"56.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "construct-string-from-binary-tree",
          "title": "Construct String from Binary Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "complex-number-multiplication": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "537",
        "title": "Complex Number Multiplication",
        "titleSlug": "complex-number-multiplication",
        "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Complex_number\" target=\"_blank\">complex number</a> can be represented as a string on the form <code>&quot;<strong>real</strong>+<strong>imaginary</strong>i&quot;</code> where:</p>\n\n<ul>\n\t<li><code>real</code> is the real part and is an integer in the range <code>[-100, 100]</code>.</li>\n\t<li><code>imaginary</code> is the imaginary part and is an integer in the range <code>[-100, 100]</code>.</li>\n\t<li><code>i<sup>2</sup> == -1</code>.</li>\n</ul>\n\n<p>Given two complex numbers <code>num1</code> and <code>num2</code> as strings, return <em>a string of the complex number that represents their multiplications</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;1+1i&quot;, num2 = &quot;1+1i&quot;\n<strong>Output:</strong> &quot;0+2i&quot;\n<strong>Explanation:</strong> (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;1+-1i&quot;, num2 = &quot;1+-1i&quot;\n<strong>Output:</strong> &quot;0+-2i&quot;\n<strong>Explanation:</strong> (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>num1</code> and <code>num2</code> are valid complex numbers.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 687,
        "dislikes": 1240,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"92.3K\", \"totalSubmission\": \"128.9K\", \"totalAcceptedRaw\": 92335, \"totalSubmissionRaw\": 128927, \"acRate\": \"71.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "convert-bst-to-greater-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "538",
        "title": "Convert BST to Greater Tree",
        "titleSlug": "convert-bst-to-greater-tree",
        "content": "<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p>\n\n<p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/02/tree.png\" style=\"width: 500px; height: 341px;\" />\n<pre>\n<strong>Input:</strong> root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>Output:</strong> [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0,null,1]\n<strong>Output:</strong> [1,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>All the values in the tree are <strong>unique</strong>.</li>\n\t<li><code>root</code> is guaranteed to be a valid binary search tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1038: <a href=\"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\" target=\"_blank\">https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5084,
        "dislikes": 172,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"284.3K\", \"totalSubmission\": \"414.1K\", \"totalAcceptedRaw\": 284300, \"totalSubmissionRaw\": 414142, \"acRate\": \"68.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "minimum-time-difference": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "539",
        "title": "Minimum Time Difference",
        "titleSlug": "minimum-time-difference",
        "content": "Given a list of 24-hour clock time points in <strong>&quot;HH:MM&quot;</strong> format, return <em>the minimum <b>minutes</b> difference between any two time-points in the list</em>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> timePoints = [\"23:59\",\"00:00\"]\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= timePoints.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>timePoints[i]</code> is in the format <strong>&quot;HH:MM&quot;</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1788,
        "dislikes": 250,
        "similarQuestions": "[{\"title\": \"Minimum Cost to Set Cooking Time\", \"titleSlug\": \"minimum-cost-to-set-cooking-time\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"138.9K\", \"totalSubmission\": \"245.3K\", \"totalAcceptedRaw\": 138931, \"totalSubmissionRaw\": 245269, \"acRate\": \"56.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-to-set-cooking-time",
          "title": "Minimum Cost to Set Cooking Time",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "single-element-in-a-sorted-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "540",
        "title": "Single Element in a Sorted Array",
        "titleSlug": "single-element-in-a-sorted-array",
        "content": "<p>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.</p>\n\n<p>Return <em>the single element that appears only once</em>.</p>\n\n<p>Your solution must run in <code>O(log n)</code> time and <code>O(1)</code> space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,2,3,3,4,4,8,8]\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,3,7,7,10,11,11]\n<strong>Output:</strong> 10\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10627,
        "dislikes": 166,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"569.8K\", \"totalSubmission\": \"966K\", \"totalAcceptedRaw\": 569785, \"totalSubmissionRaw\": 965991, \"acRate\": \"59.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "reverse-string-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "541",
        "title": "Reverse String II",
        "titleSlug": "reverse-string-ii",
        "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, reverse the first <code>k</code> characters for every <code>2k</code> characters counting from the start of the string.</p>\n\n<p>If there are fewer than <code>k</code> characters left, reverse all of them. If there are less than <code>2k</code> but greater than or equal to <code>k</code> characters, then reverse the first <code>k</code> characters and leave the other as original.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abcdefg\", k = 2\n<strong>Output:</strong> \"bacdfeg\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\", k = 2\n<strong>Output:</strong> \"bacd\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1851,
        "dislikes": 3626,
        "similarQuestions": "[{\"title\": \"Reverse String\", \"titleSlug\": \"reverse-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Reverse Words in a String III\", \"titleSlug\": \"reverse-words-in-a-string-iii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Faulty Keyboard\", \"titleSlug\": \"faulty-keyboard\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"225.9K\", \"totalSubmission\": \"447.3K\", \"totalAcceptedRaw\": 225882, \"totalSubmissionRaw\": 447319, \"acRate\": \"50.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-string",
          "title": "Reverse String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-words-in-a-string-iii",
          "title": "Reverse Words in a String III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "faulty-keyboard",
          "title": "Faulty Keyboard",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "01-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "542",
        "title": "01 Matrix",
        "titleSlug": "01-matrix",
        "content": "<p>Given an <code>m x n</code> binary matrix <code>mat</code>, return <em>the distance of the nearest </em><code>0</code><em> for each cell</em>.</p>\n\n<p>The distance between two adjacent cells is <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0,0],[0,1,0],[0,0,0]]\n<strong>Output:</strong> [[0,0,0],[0,1,0],[0,0,0]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> mat = [[0,0,0],[0,1,0],[1,1,1]]\n<strong>Output:</strong> [[0,0,0],[0,1,0],[1,2,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li>There is at least one <code>0</code> in <code>mat</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9047,
        "dislikes": 401,
        "similarQuestions": "[{\"title\": \"Shortest Path to Get Food\", \"titleSlug\": \"shortest-path-to-get-food\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Remove Adjacent Ones in Matrix\", \"titleSlug\": \"minimum-operations-to-remove-adjacent-ones-in-matrix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Difference Between Ones and Zeros in Row and Column\", \"titleSlug\": \"difference-between-ones-and-zeros-in-row-and-column\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"512.9K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 512927, \"totalSubmissionRaw\": 1069472, \"acRate\": \"48.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-path-to-get-food",
          "title": "Shortest Path to Get Food",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-operations-to-remove-adjacent-ones-in-matrix",
          "title": "Minimum Operations to Remove Adjacent Ones in Matrix",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "difference-between-ones-and-zeros-in-row-and-column",
          "title": "Difference Between Ones and Zeros in Row and Column",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "diameter-of-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "543",
        "title": "Diameter of Binary Tree",
        "titleSlug": "diameter-of-binary-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the length of the <strong>diameter</strong> of the tree</em>.</p>\n\n<p>The <strong>diameter</strong> of a binary tree is the <strong>length</strong> of the longest path between any two nodes in a tree. This path may or may not pass through the <code>root</code>.</p>\n\n<p>The <strong>length</strong> of a path between two nodes is represented by the number of edges between them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg\" style=\"width: 292px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 12896,
        "dislikes": 846,
        "similarQuestions": "[{\"title\": \"Diameter of N-Ary Tree\", \"titleSlug\": \"diameter-of-n-ary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Path With Different Adjacent Characters\", \"titleSlug\": \"longest-path-with-different-adjacent-characters\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1252935, \"totalSubmissionRaw\": 2142444, \"acRate\": \"58.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "diameter-of-n-ary-tree",
          "title": "Diameter of N-Ary Tree",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-path-with-different-adjacent-characters",
          "title": "Longest Path With Different Adjacent Characters",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "output-contest-matches": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "544",
        "title": "Output Contest Matches",
        "titleSlug": "output-contest-matches",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 386,
        "dislikes": 131,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Recursion", "slug": "recursion" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"26.7K\", \"totalSubmission\": \"34.7K\", \"totalAcceptedRaw\": 26709, \"totalSubmissionRaw\": 34662, \"acRate\": \"77.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Recursion", "slug": "recursion" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "boundary-of-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "545",
        "title": "Boundary of Binary Tree",
        "titleSlug": "boundary-of-binary-tree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1288,
        "dislikes": 2096,
        "similarQuestions": "[{\"title\": \"Binary Tree Right Side View\", \"titleSlug\": \"binary-tree-right-side-view\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"125.4K\", \"totalSubmission\": \"278.9K\", \"totalAcceptedRaw\": 125383, \"totalSubmissionRaw\": 278858, \"acRate\": \"45.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-right-side-view",
          "title": "Binary Tree Right Side View",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "remove-boxes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "546",
        "title": "Remove Boxes",
        "titleSlug": "remove-boxes",
        "content": "<p>You are given several <code>boxes</code> with different colors represented by different positive numbers.</p>\n\n<p>You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of <code>k</code> boxes, <code>k &gt;= 1</code>), remove them and get <code>k * k</code> points.</p>\n\n<p>Return <em>the maximum points you can get</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1,3,2,2,2,3,4,3,1]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 points) \n----&gt; [1, 1] (3*3=9 points) \n----&gt; [] (2*2=4 points)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1,1,1]\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= boxes.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= boxes[i]&nbsp;&lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2194,
        "dislikes": 121,
        "similarQuestions": "[{\"title\": \"Strange Printer\", \"titleSlug\": \"strange-printer\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Unique Flavors After Sharing K Candies\", \"titleSlug\": \"number-of-unique-flavors-after-sharing-k-candies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Memoization", "slug": "memoization" }
        ],
        "stats": "{\"totalAccepted\": \"43.7K\", \"totalSubmission\": \"91.8K\", \"totalAcceptedRaw\": 43697, \"totalSubmissionRaw\": 91828, \"acRate\": \"47.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "strange-printer",
          "title": "Strange Printer",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-unique-flavors-after-sharing-k-candies",
          "title": "Number of Unique Flavors After Sharing K Candies",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Memoization", "slug": "memoization" }
      ]
    }
  },
  "number-of-provinces": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "547",
        "title": "Number of Provinces",
        "titleSlug": "number-of-provinces",
        "content": "<p>There are <code>n</code> cities. Some of them are connected, while some are not. If city <code>a</code> is connected directly with city <code>b</code>, and city <code>b</code> is connected directly with city <code>c</code>, then city <code>a</code> is connected indirectly with city <code>c</code>.</p>\n\n<p>A <strong>province</strong> is a group of directly or indirectly connected cities and no other cities outside of the group.</p>\n\n<p>You are given an <code>n x n</code> matrix <code>isConnected</code> where <code>isConnected[i][j] = 1</code> if the <code>i<sup>th</sup></code> city and the <code>j<sup>th</sup></code> city are directly connected, and <code>isConnected[i][j] = 0</code> otherwise.</p>\n\n<p>Return <em>the total number of <strong>provinces</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg\" style=\"width: 222px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> isConnected = [[1,1,0],[1,1,0],[0,0,1]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg\" style=\"width: 222px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> isConnected = [[1,0,0],[0,1,0],[0,0,1]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>n == isConnected.length</code></li>\n\t<li><code>n == isConnected[i].length</code></li>\n\t<li><code>isConnected[i][j]</code> is <code>1</code> or <code>0</code>.</li>\n\t<li><code>isConnected[i][i] == 1</code></li>\n\t<li><code>isConnected[i][j] == isConnected[j][i]</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9256,
        "dislikes": 333,
        "similarQuestions": "[{\"title\": \"Number of Connected Components in an Undirected Graph\", \"titleSlug\": \"number-of-connected-components-in-an-undirected-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Robot Return to Origin\", \"titleSlug\": \"robot-return-to-origin\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity\", \"titleSlug\": \"sentence-similarity\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity II\", \"titleSlug\": \"sentence-similarity-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"The Earliest Moment When Everyone Become Friends\", \"titleSlug\": \"the-earliest-moment-when-everyone-become-friends\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Detonate the Maximum Bombs\", \"titleSlug\": \"detonate-the-maximum-bombs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"795.6K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 795620, \"totalSubmissionRaw\": 1210990, \"acRate\": \"65.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-connected-components-in-an-undirected-graph",
          "title": "Number of Connected Components in an Undirected Graph",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "robot-return-to-origin",
          "title": "Robot Return to Origin",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sentence-similarity",
          "title": "Sentence Similarity",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sentence-similarity-ii",
          "title": "Sentence Similarity II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "the-earliest-moment-when-everyone-become-friends",
          "title": "The Earliest Moment When Everyone Become Friends",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "detonate-the-maximum-bombs",
          "title": "Detonate the Maximum Bombs",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "split-array-with-equal-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "548",
        "title": "Split Array with Equal Sum",
        "titleSlug": "split-array-with-equal-sum",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 412,
        "dislikes": 131,
        "similarQuestions": "[{\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Split a String\", \"titleSlug\": \"number-of-ways-to-split-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"23.7K\", \"totalSubmission\": \"47.3K\", \"totalAcceptedRaw\": 23707, \"totalSubmissionRaw\": 47300, \"acRate\": \"50.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "fair-distribution-of-cookies",
          "title": "Fair Distribution of Cookies",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-split-a-string",
          "title": "Number of Ways to Split a String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "binary-tree-longest-consecutive-sequence-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "549",
        "title": "Binary Tree Longest Consecutive Sequence II",
        "titleSlug": "binary-tree-longest-consecutive-sequence-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1141,
        "dislikes": 91,
        "similarQuestions": "[{\"title\": \"Binary Tree Longest Consecutive Sequence\", \"titleSlug\": \"binary-tree-longest-consecutive-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if an Array Is Consecutive\", \"titleSlug\": \"check-if-an-array-is-consecutive\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"52.5K\", \"totalSubmission\": \"106.2K\", \"totalAcceptedRaw\": 52503, \"totalSubmissionRaw\": 106196, \"acRate\": \"49.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-longest-consecutive-sequence",
          "title": "Binary Tree Longest Consecutive Sequence",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-an-array-is-consecutive",
          "title": "Check if an Array Is Consecutive",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "game-play-analysis-iv": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "550",
        "title": "Game Play Analysis IV",
        "titleSlug": "game-play-analysis-iv",
        "content": "<p>Table: <code>Activity</code></p>\n\n<pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| player_id    | int     |\n| device_id    | int     |\n| event_date   | date    |\n| games_played | int     |\n+--------------+---------+\n(player_id, event_date) is the primary key (combination of columns with unique values) of this table.\nThis table shows the activity of players of some games.\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a&nbsp;solution&nbsp;to report the <strong>fraction</strong> of players that logged in again on the day after the day they first logged in, <strong>rounded to 2 decimal places</strong>. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-03-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+\n<strong>Output:</strong> \n+-----------+\n| fraction  |\n+-----------+\n| 0.33      |\n+-----------+\n<strong>Explanation:</strong> \nOnly the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 737,
        "dislikes": 154,
        "similarQuestions": "[{\"title\": \"Game Play Analysis III\", \"titleSlug\": \"game-play-analysis-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Game Play Analysis V\", \"titleSlug\": \"game-play-analysis-v\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"110.1K\", \"totalSubmission\": \"309.3K\", \"totalAcceptedRaw\": 110142, \"totalSubmissionRaw\": 309299, \"acRate\": \"35.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "game-play-analysis-iii",
          "title": "Game Play Analysis III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "game-play-analysis-v",
          "title": "Game Play Analysis V",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "student-attendance-record-i": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "551",
        "title": "Student Attendance Record I",
        "titleSlug": "student-attendance-record-i",
        "content": "<p>You are given a string <code>s</code> representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p>\n\n<ul>\n\t<li><code>&#39;A&#39;</code>: Absent.</li>\n\t<li><code>&#39;L&#39;</code>: Late.</li>\n\t<li><code>&#39;P&#39;</code>: Present.</li>\n</ul>\n\n<p>The student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p>\n\n<ul>\n\t<li>The student was absent (<code>&#39;A&#39;</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li>\n\t<li>The student was <strong>never</strong> late (<code>&#39;L&#39;</code>) for 3 or more <strong>consecutive</strong> days.</li>\n</ul>\n\n<p>Return <code>true</code><em> if the student is eligible for an attendance award, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PPALLP&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The student has fewer than 2 absences and was never late 3 or more consecutive days.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PPALLL&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;A&#39;</code>, <code>&#39;L&#39;</code>, or <code>&#39;P&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 683,
        "dislikes": 43,
        "similarQuestions": "[{\"title\": \"Student Attendance Record II\", \"titleSlug\": \"student-attendance-record-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"198.8K\", \"totalSubmission\": \"409.4K\", \"totalAcceptedRaw\": 198785, \"totalSubmissionRaw\": 409439, \"acRate\": \"48.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "student-attendance-record-ii",
          "title": "Student Attendance Record II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "student-attendance-record-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "552",
        "title": "Student Attendance Record II",
        "titleSlug": "student-attendance-record-ii",
        "content": "<p>An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p>\n\n<ul>\n\t<li><code>&#39;A&#39;</code>: Absent.</li>\n\t<li><code>&#39;L&#39;</code>: Late.</li>\n\t<li><code>&#39;P&#39;</code>: Present.</li>\n</ul>\n\n<p>Any student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p>\n\n<ul>\n\t<li>The student was absent (<code>&#39;A&#39;</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li>\n\t<li>The student was <strong>never</strong> late (<code>&#39;L&#39;</code>) for 3 or more <strong>consecutive</strong> days.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the <strong>number</strong> of possible attendance records of length</em> <code>n</code><em> that make a student eligible for an attendance award. The answer may be very large, so return it <strong>modulo</strong> </em><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> There are 8 records with length 2 that are eligible for an award:\n&quot;PP&quot;, &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;\nOnly &quot;AA&quot; is not eligible because there are 2 absences (there need to be fewer than 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10101\n<strong>Output:</strong> 183236316\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1699,
        "dislikes": 248,
        "similarQuestions": "[{\"title\": \"Student Attendance Record I\", \"titleSlug\": \"student-attendance-record-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"63.9K\", \"totalSubmission\": \"151K\", \"totalAcceptedRaw\": 63903, \"totalSubmissionRaw\": 151043, \"acRate\": \"42.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "student-attendance-record-i",
          "title": "Student Attendance Record I",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "optimal-division": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "553",
        "title": "Optimal Division",
        "titleSlug": "optimal-division",
        "content": "<p>You are given an integer array <code>nums</code>. The adjacent integers in <code>nums</code> will perform the float division.</p>\n\n<ul>\n\t<li>For example, for <code>nums = [2,3,4]</code>, we will evaluate the expression <code>&quot;2/3/4&quot;</code>.</li>\n</ul>\n\n<p>However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.</p>\n\n<p>Return <em>the corresponding expression that has the maximum value in string format</em>.</p>\n\n<p><strong>Note:</strong> your expression should not contain redundant parenthesis.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1000,100,10,2]\n<strong>Output:</strong> &quot;1000/(100/10/2)&quot;\n<strong>Explanation:</strong> 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in &quot;1000/(<strong>(</strong>100/10<strong>)</strong>/2)&quot; are redundant since they do not influence the operation priority.\nSo you should return &quot;1000/(100/10/2)&quot;.\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4]\n<strong>Output:</strong> &quot;2/(3/4)&quot;\n<strong>Explanation:</strong> (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>2 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>There is only one optimal division for the given input.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 362,
        "dislikes": 1574,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"38.2K\", \"totalSubmission\": \"63.1K\", \"totalAcceptedRaw\": 38185, \"totalSubmissionRaw\": 63107, \"acRate\": \"60.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "brick-wall": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "554",
        "title": "Brick Wall",
        "titleSlug": "brick-wall",
        "content": "<p>There is a rectangular brick wall in front of you with <code>n</code> rows of bricks. The <code>i<sup>th</sup></code> row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.</p>\n\n<p>Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</p>\n\n<p>Given the 2D array <code>wall</code> that contains the information about the wall, return <em>the minimum number of crossed bricks after drawing such a vertical line</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg\" style=\"width: 493px; height: 577px;\" />\n<pre>\n<strong>Input:</strong> wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> wall = [[1],[1],[1]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == wall.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wall[i].length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= sum(wall[i].length) &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>sum(wall[i])</code> is the same for each row <code>i</code>.</li>\n\t<li><code>1 &lt;= wall[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2436,
        "dislikes": 148,
        "similarQuestions": "[{\"title\": \"Number of Ways to Build Sturdy Brick Wall\", \"titleSlug\": \"number-of-ways-to-build-sturdy-brick-wall\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"130.7K\", \"totalSubmission\": \"240.2K\", \"totalAcceptedRaw\": 130664, \"totalSubmissionRaw\": 240189, \"acRate\": \"54.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-build-sturdy-brick-wall",
          "title": "Number of Ways to Build Sturdy Brick Wall",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "split-concatenated-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "555",
        "title": "Split Concatenated Strings",
        "titleSlug": "split-concatenated-strings",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 73,
        "dislikes": 258,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"15.2K\", \"totalAcceptedRaw\": 6604, \"totalSubmissionRaw\": 15193, \"acRate\": \"43.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "next-greater-element-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "556",
        "title": "Next Greater Element III",
        "titleSlug": "next-greater-element-iii",
        "content": "<p>Given a positive integer <code>n</code>, find <em>the smallest integer which has exactly the same digits existing in the integer</em> <code>n</code> <em>and is greater in value than</em> <code>n</code>. If no such positive integer exists, return <code>-1</code>.</p>\n\n<p><strong>Note</strong> that the returned integer should fit in <strong>32-bit integer</strong>, if there is a valid answer but it does not fit in <strong>32-bit integer</strong>, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 12\n<strong>Output:</strong> 21\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 21\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3530,
        "dislikes": 438,
        "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Next Greater Element II\", \"titleSlug\": \"next-greater-element-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Next Palindrome Using Same Digits\", \"titleSlug\": \"next-palindrome-using-same-digits\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"141.4K\", \"totalSubmission\": \"416.7K\", \"totalAcceptedRaw\": 141365, \"totalSubmissionRaw\": 416660, \"acRate\": \"33.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "next-greater-element-i",
          "title": "Next Greater Element I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "next-greater-element-ii",
          "title": "Next Greater Element II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "next-palindrome-using-same-digits",
          "title": "Next Palindrome Using Same Digits",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "reverse-words-in-a-string-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "557",
        "title": "Reverse Words in a String III",
        "titleSlug": "reverse-words-in-a-string-iii",
        "content": "<p>Given a string <code>s</code>, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Let&#39;s take LeetCode contest&quot;\n<strong>Output:</strong> &quot;s&#39;teL ekat edoCteeL tsetnoc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Mr Ding&quot;\n<strong>Output:</strong> &quot;rM gniD&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> contains printable <strong>ASCII</strong> characters.</li>\n\t<li><code>s</code> does not contain any leading or trailing spaces.</li>\n\t<li>There is <strong>at least one</strong> word in <code>s</code>.</li>\n\t<li>All the words in <code>s</code> are separated by a single space.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5769,
        "dislikes": 241,
        "similarQuestions": "[{\"title\": \"Reverse String II\", \"titleSlug\": \"reverse-string-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"858.4K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 858385, \"totalSubmissionRaw\": 1035219, \"acRate\": \"82.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "reverse-string-ii",
          "title": "Reverse String II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "logical-or-of-two-binary-grids-represented-as-quad-trees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "558",
        "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "titleSlug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
        "content": "<p>A Binary Matrix is a matrix in which all the elements are either <strong>0</strong> or <strong>1</strong>.</p>\n\n<p>Given <code>quadTree1</code> and <code>quadTree2</code>. <code>quadTree1</code> represents a <code>n * n</code> binary matrix and <code>quadTree2</code> represents another <code>n * n</code> binary matrix.</p>\n\n<p>Return <em>a Quad-Tree</em> representing the <code>n * n</code> binary matrix which is the result of <strong>logical bitwise OR</strong> of the two binary matrixes represented by <code>quadTree1</code> and <code>quadTree2</code>.</p>\n\n<p>Notice that you can assign the value of a node to <strong>True</strong> or <strong>False</strong> when <code>isLeaf</code> is <strong>False</strong>, and both are <strong>accepted</strong> in the answer.</p>\n\n<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p>\n\n<ul>\n\t<li><code>val</code>: True if the node represents a grid of 1&#39;s or False if the node represents a grid of 0&#39;s.</li>\n\t<li><code>isLeaf</code>: True if the node is leaf node on the tree or False if the node has the four children.</li>\n</ul>\n\n<pre>\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}</pre>\n\n<p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p>\n\n<ol>\n\t<li>If the current grid has the same value (i.e all <code>1&#39;s</code> or all <code>0&#39;s</code>) set <code>isLeaf</code> True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li>\n\t<li>If the current grid has different values, set <code>isLeaf</code> to False and set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li>\n\t<li>Recurse for each of the children with the proper sub-grid.</li>\n</ol>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"width: 777px; height: 181px;\" />\n<p>If you want to know more about the Quad-Tree, you can refer to the <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</p>\n\n<p><strong>Quad-Tree format:</strong></p>\n\n<p>The input/output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p>\n\n<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p>\n\n<p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt1.png\" style=\"width: 550px; height: 196px;\" /> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qt2.png\" style=\"width: 550px; height: 278px;\" />\n<pre>\n<strong>Input:</strong> quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>Output:</strong> [[0,0],[1,1],[1,1],[1,1],[1,0]]\n<strong>Explanation:</strong> quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don&#39;t have to construct the binary matrix to get the result tree.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/qtr.png\" style=\"width: 777px; height: 222px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> quadTree1 = [[1,0]], quadTree2 = [[1,0]]\n<strong>Output:</strong> [[1,0]]\n<strong>Explanation:</strong> Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>quadTree1</code> and <code>quadTree2</code> are both <strong>valid</strong> Quad-Trees each representing a <code>n * n</code> grid.</li>\n\t<li><code>n == 2<sup>x</sup></code> where <code>0 &lt;= x &lt;= 9</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 181,
        "dislikes": 468,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Tree", "slug": "tree" }
        ],
        "stats": "{\"totalAccepted\": \"13.9K\", \"totalSubmission\": \"28.3K\", \"totalAcceptedRaw\": 13909, \"totalSubmissionRaw\": 28306, \"acRate\": \"49.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Tree", "slug": "tree" }
      ]
    }
  },
  "maximum-depth-of-n-ary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "559",
        "title": "Maximum Depth of N-ary Tree",
        "titleSlug": "maximum-depth-of-n-ary-tree",
        "content": "<p>Given a n-ary tree, find its maximum depth.</p>\n\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n\n<p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The total number of nodes is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2703,
        "dislikes": 84,
        "similarQuestions": "[{\"title\": \"Maximum Depth of Binary Tree\", \"titleSlug\": \"maximum-depth-of-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"The Time When the Network Becomes Idle\", \"titleSlug\": \"the-time-when-the-network-becomes-idle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"268.9K\", \"totalSubmission\": \"373.9K\", \"totalAcceptedRaw\": 268923, \"totalSubmissionRaw\": 373880, \"acRate\": \"71.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-depth-of-binary-tree",
          "title": "Maximum Depth of Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "the-time-when-the-network-becomes-idle",
          "title": "The Time When the Network Becomes Idle",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "subarray-sum-equals-k": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "560",
        "title": "Subarray Sum Equals K",
        "titleSlug": "subarray-sum-equals-k",
        "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the total number of subarrays whose sum equals to</em> <code>k</code>.</p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3], k = 3\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 20476,
        "dislikes": 611,
        "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Continuous Subarray Sum\", \"titleSlug\": \"continuous-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Product Less Than K\", \"titleSlug\": \"subarray-product-less-than-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Pivot Index\", \"titleSlug\": \"find-pivot-index\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Subarray Sums Divisible by K\", \"titleSlug\": \"subarray-sums-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Reduce X to Zero\", \"titleSlug\": \"minimum-operations-to-reduce-x-to-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Sum Score of Array\", \"titleSlug\": \"maximum-sum-score-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1109834, \"totalSubmissionRaw\": 2565072, \"acRate\": \"43.3%\"}",
        "hints": [
          "Will Brute force work here? Try to optimize it.",
          "Can we optimize it by using some extra space?",
          "What about storing sum frequencies in a hash table? Will it be useful?",
          "sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum",
          "title": "Two Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "continuous-subarray-sum",
          "title": "Continuous Subarray Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-product-less-than-k",
          "title": "Subarray Product Less Than K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-pivot-index",
          "title": "Find Pivot Index",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-sums-divisible-by-k",
          "title": "Subarray Sums Divisible by K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-operations-to-reduce-x-to-zero",
          "title": "Minimum Operations to Reduce X to Zero",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-radius-subarray-averages",
          "title": "K Radius Subarray Averages",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-sum-score-of-array",
          "title": "Maximum Sum Score of Array",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Will Brute force work here? Try to optimize it.",
        "Can we optimize it by using some extra space?",
        "What about storing sum frequencies in a hash table? Will it be useful?",
        "sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "array-partition": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "561",
        "title": "Array Partition",
        "titleSlug": "array-partition",
        "content": "<p>Given an integer array <code>nums</code> of <code>2n</code> integers, group these integers into <code>n</code> pairs <code>(a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>)</code> such that the sum of <code>min(a<sub>i</sub>, b<sub>i</sub>)</code> for all <code>i</code> is <strong>maximized</strong>. Return<em> the maximized sum</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,2,6,5,1,2]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1950,
        "dislikes": 239,
        "similarQuestions": "[{\"title\": \"Minimum Difference Between Highest and Lowest of K Scores\", \"titleSlug\": \"minimum-difference-between-highest-and-lowest-of-k-scores\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost of Buying Candies With Discount\", \"titleSlug\": \"minimum-cost-of-buying-candies-with-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"All Divisions With the Highest Score of a Binary Array\", \"titleSlug\": \"all-divisions-with-the-highest-score-of-a-binary-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Counting Sort", "slug": "counting-sort" }
        ],
        "stats": "{\"totalAccepted\": \"444.7K\", \"totalSubmission\": \"568.8K\", \"totalAcceptedRaw\": 444673, \"totalSubmissionRaw\": 568785, \"acRate\": \"78.2%\"}",
        "hints": [
          "Obviously, brute force won't help here. Think of something else, take some example like 1,2,3,4.",
          "How will you make pairs to get the result? There must be some pattern.",
          "Did you observe that- Minimum element gets add into the result in sacrifice of maximum element.",
          "Still won't able to find pairs? Sort the array and try to find the pattern."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-difference-between-highest-and-lowest-of-k-scores",
          "title": "Minimum Difference Between Highest and Lowest of K Scores",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "minimum-cost-of-buying-candies-with-discount",
          "title": "Minimum Cost of Buying Candies With Discount",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "all-divisions-with-the-highest-score-of-a-binary-array",
          "title": "All Divisions With the Highest Score of a Binary Array",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Obviously, brute force won't help here. Think of something else, take some example like 1,2,3,4.",
        "How will you make pairs to get the result? There must be some pattern.",
        "Did you observe that- Minimum element gets add into the result in sacrifice of maximum element.",
        "Still won't able to find pairs? Sort the array and try to find the pattern."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Counting Sort", "slug": "counting-sort" }
      ]
    }
  },
  "longest-line-of-consecutive-one-in-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "562",
        "title": "Longest Line of Consecutive One in Matrix",
        "titleSlug": "longest-line-of-consecutive-one-in-matrix",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 876,
        "dislikes": 115,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"74.9K\", \"totalSubmission\": \"148.8K\", \"totalAcceptedRaw\": 74903, \"totalSubmissionRaw\": 148788, \"acRate\": \"50.3%\"}",
        "hints": [
          "One solution is to count ones in each direction separately and find the longest line. Don't you think  it will take too much lines of code?",
          "Is it possible to use some extra space to make the solution simple?",
          "Can we use dynamic programming to make use of intermediate results?",
          "Think of a 3D array which can be used to store the longest line obtained so far for each direction."
        ]
      },
      "similar": [],
      "hints": [
        "One solution is to count ones in each direction separately and find the longest line. Don't you think  it will take too much lines of code?",
        "Is it possible to use some extra space to make the solution simple?",
        "Can we use dynamic programming to make use of intermediate results?",
        "Think of a 3D array which can be used to store the longest line obtained so far for each direction."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "binary-tree-tilt": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "563",
        "title": "Binary Tree Tilt",
        "titleSlug": "binary-tree-tilt",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the sum of every tree node&#39;s <strong>tilt</strong>.</em></p>\n\n<p>The <strong>tilt</strong> of a tree node is the <strong>absolute difference</strong> between the sum of all left subtree node <strong>values</strong> and all right subtree node <strong>values</strong>. If a node does not have a left child, then the sum of the left subtree node <strong>values</strong> is treated as <code>0</code>. The rule is similar if the node does not have a right child.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg\" style=\"width: 712px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg\" style=\"width: 800px; height: 203px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,9,3,5,null,7]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg\" style=\"width: 800px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [21,7,14,1,1,2,2,3,3]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2181,
        "dislikes": 2151,
        "similarQuestions": "[{\"title\": \"Find All The Lonely Nodes\", \"titleSlug\": \"find-all-the-lonely-nodes\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"202.8K\", \"totalSubmission\": \"331.4K\", \"totalAcceptedRaw\": 202765, \"totalSubmissionRaw\": 331353, \"acRate\": \"61.2%\"}",
        "hints": [
          "Don't think too much, this is an easy problem. Take some small tree as an example.",
          "Can a parent node use the values of its child nodes? How will you implement it?",
          "May be recursion and tree traversal can help you in implementing.",
          "What about postorder traversal, using values of left and right childs?"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "find-all-the-lonely-nodes",
          "title": "Find All The Lonely Nodes",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Don't think too much, this is an easy problem. Take some small tree as an example.",
        "Can a parent node use the values of its child nodes? How will you implement it?",
        "May be recursion and tree traversal can help you in implementing.",
        "What about postorder traversal, using values of left and right childs?"
      ],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "find-the-closest-palindrome": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "564",
        "title": "Find the Closest Palindrome",
        "titleSlug": "find-the-closest-palindrome",
        "content": "<p>Given a string <code>n</code> representing an integer, return <em>the closest integer (not including itself), which is a palindrome</em>. If there is a tie, return <em><strong>the smaller one</strong></em>.</p>\n\n<p>The closest is defined as the absolute difference minimized between two integers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = &quot;123&quot;\n<strong>Output:</strong> &quot;121&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = &quot;1&quot;\n<strong>Output:</strong> &quot;0&quot;\n<strong>Explanation:</strong> 0 and 2 are the closest palindromes but we return the smallest which is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n.length &lt;= 18</code></li>\n\t<li><code>n</code> consists of only digits.</li>\n\t<li><code>n</code> does not have leading zeros.</li>\n\t<li><code>n</code> is representing an integer in the range <code>[1, 10<sup>18</sup> - 1]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 723,
        "dislikes": 1403,
        "similarQuestions": "[{\"title\": \"Find Palindrome With Fixed Length\", \"titleSlug\": \"find-palindrome-with-fixed-length\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Next Palindrome Using Same Digits\", \"titleSlug\": \"next-palindrome-using-same-digits\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"41.9K\", \"totalSubmission\": \"190.6K\", \"totalAcceptedRaw\": 41850, \"totalSubmissionRaw\": 190608, \"acRate\": \"22.0%\"}",
        "hints": [
          "Will brute force work for this problem? Think of something else.",
          "Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible?",
          "Do we have to consider only left half or right half of the string or both?",
          "Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "find-palindrome-with-fixed-length",
          "title": "Find Palindrome With Fixed Length",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "next-palindrome-using-same-digits",
          "title": "Next Palindrome Using Same Digits",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Will brute force work for this problem? Think of something else.",
        "Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible?",
        "Do we have to consider only left half or right half of the string or both?",
        "Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "array-nesting": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "565",
        "title": "Array Nesting",
        "titleSlug": "array-nesting",
        "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code> where <code>nums</code> is a permutation of the numbers in the range <code>[0, n - 1]</code>.</p>\n\n<p>You should build a set <code>s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }</code> subjected to the following rule:</p>\n\n<ul>\n\t<li>The first element in <code>s[k]</code> starts with the selection of the element <code>nums[k]</code> of <code>index = k</code>.</li>\n\t<li>The next element in <code>s[k]</code> should be <code>nums[nums[k]]</code>, and then <code>nums[nums[nums[k]]]</code>, and so on.</li>\n\t<li>We stop adding right before a duplicate element occurs in <code>s[k]</code>.</li>\n</ul>\n\n<p>Return <em>the longest length of a set</em> <code>s[k]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,0,3,1,6,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt; nums.length</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2180,
        "dislikes": 151,
        "similarQuestions": "[{\"title\": \"Nested List Weight Sum\", \"titleSlug\": \"nested-list-weight-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten Nested List Iterator\", \"titleSlug\": \"flatten-nested-list-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Nested List Weight Sum II\", \"titleSlug\": \"nested-list-weight-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"127.1K\", \"totalSubmission\": \"225.7K\", \"totalAcceptedRaw\": 127145, \"totalSubmissionRaw\": 225747, \"acRate\": \"56.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "nested-list-weight-sum",
          "title": "Nested List Weight Sum",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "flatten-nested-list-iterator",
          "title": "Flatten Nested List Iterator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "nested-list-weight-sum-ii",
          "title": "Nested List Weight Sum II",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" }
      ]
    }
  },
  "reshape-the-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "566",
        "title": "Reshape the Matrix",
        "titleSlug": "reshape-the-matrix",
        "content": "<p>In MATLAB, there is a handy function called <code>reshape</code> which can reshape an <code>m x n</code> matrix into a new one with a different size <code>r x c</code> keeping its original data.</p>\n\n<p>You are given an <code>m x n</code> matrix <code>mat</code> and two integers <code>r</code> and <code>c</code> representing the number of rows and the number of columns of the wanted reshaped matrix.</p>\n\n<p>The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.</p>\n\n<p>If the <code>reshape</code> operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg\" style=\"width: 613px; height: 173px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,2],[3,4]], r = 1, c = 4\n<strong>Output:</strong> [[1,2,3,4]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg\" style=\"width: 453px; height: 173px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,2],[3,4]], r = 2, c = 4\n<strong>Output:</strong> [[1,2],[3,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= r, c &lt;= 300</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3423,
        "dislikes": 401,
        "similarQuestions": "[{\"title\": \"Convert 1D Array Into 2D Array\", \"titleSlug\": \"convert-1d-array-into-2d-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"365.7K\", \"totalSubmission\": \"580.4K\", \"totalAcceptedRaw\": 365703, \"totalSubmissionRaw\": 580373, \"acRate\": \"63.0%\"}",
        "hints": [
          "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
          "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
          "Try to use division and modulus to convert 1-d index into 2-d indices.",
          "M[i] =>  M[i/n][i%n] Will it result in right mapping? Take some example and check this formula."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "convert-1d-array-into-2d-array",
          "title": "Convert 1D Array Into 2D Array",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
        "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
        "Try to use division and modulus to convert 1-d index into 2-d indices.",
        "M[i] =>  M[i/n][i%n] Will it result in right mapping? Take some example and check this formula."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "permutation-in-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "567",
        "title": "Permutation in String",
        "titleSlug": "permutation-in-string",
        "content": "<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code><em> if </em><code>s2</code><em> contains a permutation of </em><code>s1</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>In other words, return <code>true</code> if one of <code>s1</code>&#39;s permutations is the substring of <code>s2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;eidbaooo&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s2 contains one permutation of s1 (&quot;ba&quot;).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;eidboaoo&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10928,
        "dislikes": 367,
        "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find All Anagrams in a String\", \"titleSlug\": \"find-all-anagrams-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"775.1K\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 775140, \"totalSubmissionRaw\": 1752831, \"acRate\": \"44.2%\"}",
        "hints": [
          "Obviously, brute force will result in TLE. Think of something else.",
          "How will you check whether one string is a permutation of another string?",
          "One way is to sort the string and then compare. But, Is there a better way?",
          "If one string is a permutation of another string then they must one common metric. What is that?",
          "Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies?",
          "What about hash table?  An array of size 26?"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-substring",
          "title": "Minimum Window Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-all-anagrams-in-a-string",
          "title": "Find All Anagrams in a String",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Obviously, brute force will result in TLE. Think of something else.",
        "How will you check whether one string is a permutation of another string?",
        "One way is to sort the string and then compare. But, Is there a better way?",
        "If one string is a permutation of another string then they must one common metric. What is that?",
        "Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies?",
        "What about hash table?  An array of size 26?"
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "maximum-vacation-days": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "568",
        "title": "Maximum Vacation Days",
        "titleSlug": "maximum-vacation-days",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 556,
        "dislikes": 110,
        "similarQuestions": "[{\"title\": \"Cheapest Flights Within K Stops\", \"titleSlug\": \"cheapest-flights-within-k-stops\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"36.9K\", \"totalSubmission\": \"81.3K\", \"totalAcceptedRaw\": 36941, \"totalSubmissionRaw\": 81337, \"acRate\": \"45.4%\"}",
        "hints": [
          "First try to understand the problem carefully and then take some example and solve it on a paper.",
          "Can you interpret the given input as a graph? Which graph traversal technique is suitable here?",
          "Can we use some space to avoid redundant function calls?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "cheapest-flights-within-k-stops",
          "title": "Cheapest Flights Within K Stops",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "First try to understand the problem carefully and then take some example and solve it on a paper.",
        "Can you interpret the given input as a graph? Which graph traversal technique is suitable here?",
        "Can we use some space to avoid redundant function calls?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "median-employee-salary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "569",
        "title": "Median Employee Salary",
        "titleSlug": "median-employee-salary",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 317,
        "dislikes": 150,
        "similarQuestions": "[{\"title\": \"Find Median Given Frequency of Numbers\", \"titleSlug\": \"find-median-given-frequency-of-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"37.7K\", \"totalSubmission\": \"57K\", \"totalAcceptedRaw\": 37678, \"totalSubmissionRaw\": 57028, \"acRate\": \"66.1%\"}",
        "hints": [
          "Still remember how to select the sum which group by one column?",
          "Try to think about how to get the median from a sorted list.",
          "How to get the median one item for odd number list while how to get the median two items for even number list, try to unify them."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "find-median-given-frequency-of-numbers",
          "title": "Find Median Given Frequency of Numbers",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Still remember how to select the sum which group by one column?",
        "Try to think about how to get the median from a sorted list.",
        "How to get the median one item for odd number list while how to get the median two items for even number list, try to unify them."
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "managers-with-at-least-5-direct-reports": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "570",
        "title": "Managers with at Least 5 Direct Reports",
        "titleSlug": "managers-with-at-least-5-direct-reports",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| department  | varchar |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the name of an employee, their department, and the id of their manager.\nIf managerId is null, then the employee does not have a manager.\nNo employee will be the manager of themself.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find managers with at least <strong>five direct reports</strong>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+-----+-------+------------+-----------+\n| id  | name  | department | managerId |\n+-----+-------+------------+-----------+\n| 101 | John  | A          | null      |\n| 102 | Dan   | A          | 101       |\n| 103 | James | A          | 101       |\n| 104 | Amy   | A          | 101       |\n| 105 | Anne  | A          | 101       |\n| 106 | Ron   | B          | 101       |\n+-----+-------+------------+-----------+\n<strong>Output:</strong> \n+------+\n| name |\n+------+\n| John |\n+------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 871,
        "dislikes": 92,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"213.7K\", \"totalSubmission\": \"404.8K\", \"totalAcceptedRaw\": 213679, \"totalSubmissionRaw\": 404817, \"acRate\": \"52.8%\"}",
        "hints": [
          "Try to get all the mangerIDs that have count bigger than 5",
          "Use the last hint's result as a table and do join with origin table at id equals to managerId",
          "This is a very good example to show the performance of SQL code. Try to work out other solutions and you may be surprised by running time difference.",
          "If your solution uses 'IN' function and runs more than 5 seconds, try to optimize it by using 'JOIN' instead."
        ]
      },
      "similar": [],
      "hints": [
        "Try to get all the mangerIDs that have count bigger than 5",
        "Use the last hint's result as a table and do join with origin table at id equals to managerId",
        "This is a very good example to show the performance of SQL code. Try to work out other solutions and you may be surprised by running time difference.",
        "If your solution uses 'IN' function and runs more than 5 seconds, try to optimize it by using 'JOIN' instead."
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "find-median-given-frequency-of-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "571",
        "title": "Find Median Given Frequency of Numbers",
        "titleSlug": "find-median-given-frequency-of-numbers",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 299,
        "dislikes": 77,
        "similarQuestions": "[{\"title\": \"Median Employee Salary\", \"titleSlug\": \"median-employee-salary\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"26.9K\", \"totalSubmission\": \"63.3K\", \"totalAcceptedRaw\": 26922, \"totalSubmissionRaw\": 63251, \"acRate\": \"42.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "median-employee-salary",
          "title": "Median Employee Salary",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "subtree-of-another-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "572",
        "title": "Subtree of Another Tree",
        "titleSlug": "subtree-of-another-tree",
        "content": "<p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of<code> subRoot</code> and <code>false</code> otherwise.</p>\n\n<p>A subtree of a binary tree <code>tree</code> is a tree that consists of a node in <code>tree</code> and all of this node&#39;s descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg\" style=\"width: 532px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> root = [3,4,5,1,2], subRoot = [4,1,2]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg\" style=\"width: 502px; height: 458px;\" />\n<pre>\n<strong>Input:</strong> root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the <code>root</code> tree is in the range <code>[1, 2000]</code>.</li>\n\t<li>The number of nodes in the <code>subRoot</code> tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7934,
        "dislikes": 463,
        "similarQuestions": "[{\"title\": \"Count Univalue Subtrees\", \"titleSlug\": \"count-univalue-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Subtree Sum\", \"titleSlug\": \"most-frequent-subtree-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "String Matching", "slug": "string-matching" },
          { "name": "Binary Tree", "slug": "binary-tree" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"772K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 772026, \"totalSubmissionRaw\": 1630499, \"acRate\": \"47.3%\"}",
        "hints": [
          "Which approach is better here- recursive or iterative?",
          "If recursive approach is better, can you write recursive function with its parameters?",
          "Two trees <b>s</b> and <b>t</b> are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae?",
          "Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "count-univalue-subtrees",
          "title": "Count Univalue Subtrees",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "most-frequent-subtree-sum",
          "title": "Most Frequent Subtree Sum",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Which approach is better here- recursive or iterative?",
        "If recursive approach is better, can you write recursive function with its parameters?",
        "Two trees <b>s</b> and <b>t</b> are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae?",
        "Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)"
      ],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "String Matching", "slug": "string-matching" },
        { "name": "Binary Tree", "slug": "binary-tree" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "squirrel-simulation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "573",
        "title": "Squirrel Simulation",
        "titleSlug": "squirrel-simulation",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 407,
        "dislikes": 39,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"22K\", \"totalSubmission\": \"38.6K\", \"totalAcceptedRaw\": 21988, \"totalSubmissionRaw\": 38574, \"acRate\": \"57.0%\"}",
        "hints": [
          "Will Brute force solution works here? What will be its complexity?",
          "Brute force definitely won't work here. Think of some simple solution. Take some example and make some observations.",
          "Will order of nuts traversed by squirrel is important or only first nut traversed by squirrel is important?",
          "Are there some paths which squirrel have to cover in any case? If yes, what are they?",
          "Did you notice only first nut traversed by squirrel matters? Obviously squirrel will choose first nut which will result in minimum distance."
        ]
      },
      "similar": [],
      "hints": [
        "Will Brute force solution works here? What will be its complexity?",
        "Brute force definitely won't work here. Think of some simple solution. Take some example and make some observations.",
        "Will order of nuts traversed by squirrel is important or only first nut traversed by squirrel is important?",
        "Are there some paths which squirrel have to cover in any case? If yes, what are they?",
        "Did you notice only first nut traversed by squirrel matters? Obviously squirrel will choose first nut which will result in minimum distance."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "winning-candidate": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "574",
        "title": "Winning Candidate",
        "titleSlug": "winning-candidate",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 165,
        "dislikes": 414,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"60.8K\", \"totalSubmission\": \"101.1K\", \"totalAcceptedRaw\": 60843, \"totalSubmissionRaw\": 101051, \"acRate\": \"60.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "distribute-candies": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "575",
        "title": "Distribute Candies",
        "titleSlug": "distribute-candies",
        "content": "<p>Alice has <code>n</code> candies, where the <code>i<sup>th</sup></code> candy is of type <code>candyType[i]</code>. Alice noticed that she started to gain weight, so she visited a doctor.</p>\n\n<p>The doctor advised Alice to only eat <code>n / 2</code> of the candies she has (<code>n</code> is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor&#39;s advice.</p>\n\n<p>Given the integer array <code>candyType</code> of length <code>n</code>, return <em>the <strong>maximum</strong> number of different types of candies she can eat if she only eats </em><code>n / 2</code><em> of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candyType = [1,1,2,2,3,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candyType = [1,1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candyType = [6,6,6,6]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == candyType.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>n</code>&nbsp;is even.</li>\n\t<li><code>-10<sup>5</sup> &lt;= candyType[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1451,
        "dislikes": 1330,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"266K\", \"totalSubmission\": \"395.6K\", \"totalAcceptedRaw\": 265955, \"totalSubmissionRaw\": 395635, \"acRate\": \"67.2%\"}",
        "hints": [
          "To maximize the number of kinds of candies, we should try to distribute candies such that sister will gain all kinds.",
          "What is the upper limit of the number of kinds of candies sister will gain? Remember candies are to distributed equally.",
          "Which data structure is the most suitable for finding the number of kinds of candies?",
          "Will hashset solves the problem? Inserting all candies kind in the hashset and then checking its size with upper limit."
        ]
      },
      "similar": [],
      "hints": [
        "To maximize the number of kinds of candies, we should try to distribute candies such that sister will gain all kinds.",
        "What is the upper limit of the number of kinds of candies sister will gain? Remember candies are to distributed equally.",
        "Which data structure is the most suitable for finding the number of kinds of candies?",
        "Will hashset solves the problem? Inserting all candies kind in the hashset and then checking its size with upper limit."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "out-of-boundary-paths": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "576",
        "title": "Out of Boundary Paths",
        "titleSlug": "out-of-boundary-paths",
        "content": "<p>There is an <code>m x n</code> grid with a ball. The ball is initially at the position <code>[startRow, startColumn]</code>. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply <strong>at most</strong> <code>maxMove</code> moves to the ball.</p>\n\n<p>Given the five integers <code>m</code>, <code>n</code>, <code>maxMove</code>, <code>startRow</code>, <code>startColumn</code>, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png\" style=\"width: 500px; height: 296px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png\" style=\"width: 500px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\n<strong>Output:</strong> 12\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>0 &lt;= maxMove &lt;= 50</code></li>\n\t<li><code>0 &lt;= startRow &lt; m</code></li>\n\t<li><code>0 &lt;= startColumn &lt; n</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3132,
        "dislikes": 234,
        "similarQuestions": "[{\"title\": \"Knight Probability in Chessboard\", \"titleSlug\": \"knight-probability-in-chessboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Execution of All Suffix Instructions Staying in a Grid\", \"titleSlug\": \"execution-of-all-suffix-instructions-staying-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"122.5K\", \"totalSubmission\": \"277K\", \"totalAcceptedRaw\": 122535, \"totalSubmissionRaw\": 277018, \"acRate\": \"44.2%\"}",
        "hints": [
          "Is traversing every path feasible? There are many possible paths for a small matrix. Try to optimize it.",
          "Can we use some space to store the number of paths and update them after every move?",
          "One obvious thing: the ball will go out of the boundary only by crossing it. Also, there is only one possible way the ball can go out of the boundary from the boundary cell except for corner cells. From the corner cell, the ball can go out in two different ways.\r\n\r\nCan you use this thing to solve the problem?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "knight-probability-in-chessboard",
          "title": "Knight Probability in Chessboard",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "execution-of-all-suffix-instructions-staying-in-a-grid",
          "title": "Execution of All Suffix Instructions Staying in a Grid",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Is traversing every path feasible? There are many possible paths for a small matrix. Try to optimize it.",
        "Can we use some space to store the number of paths and update them after every move?",
        "One obvious thing: the ball will go out of the boundary only by crossing it. Also, there is only one possible way the ball can go out of the boundary from the boundary cell except for corner cells. From the corner cell, the ball can go out in two different ways.\r\n\r\nCan you use this thing to solve the problem?"
      ],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "employee-bonus": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "577",
        "title": "Employee Bonus",
        "titleSlug": "employee-bonus",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| empId       | int     |\n| name        | varchar |\n| supervisor  | int     |\n| salary      | int     |\n+-------------+---------+\nempId is the column with unique values for this table.\nEach row of this table indicates the name and the ID of an employee in addition to their salary and the id of their manager.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Bonus</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| empId       | int  |\n| bonus       | int  |\n+-------------+------+\nempId is the column of unique values for this table.\nempId is a foreign key (reference column) to empId from the Employee table.\nEach row of this table contains the id of an employee and their respective bonus.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report the name and bonus amount of each employee with a bonus <strong>less than</strong> <code>1000</code>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+-------+--------+------------+--------+\n| empId | name   | supervisor | salary |\n+-------+--------+------------+--------+\n| 3     | Brad   | null       | 4000   |\n| 1     | John   | 3          | 1000   |\n| 2     | Dan    | 3          | 2000   |\n| 4     | Thomas | 3          | 4000   |\n+-------+--------+------------+--------+\nBonus table:\n+-------+-------+\n| empId | bonus |\n+-------+-------+\n| 2     | 500   |\n| 4     | 2000  |\n+-------+-------+\n<strong>Output:</strong> \n+------+-------+\n| name | bonus |\n+------+-------+\n| Brad | null  |\n| John | null  |\n| Dan  | 500   |\n+------+-------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 715,
        "dislikes": 184,
        "similarQuestions": "[{\"title\": \"Combine Two Tables\", \"titleSlug\": \"combine-two-tables\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"228.4K\", \"totalSubmission\": \"309.7K\", \"totalAcceptedRaw\": 228387, \"totalSubmissionRaw\": 309667, \"acRate\": \"73.8%\"}",
        "hints": [
          "If the EmpId in table Employee has no match in table Bonus, we consider that the corresponding bonus is null and null is smaller than 1000.",
          "Inner join is the default join, we can solve the mismatching problem by using outer join."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "combine-two-tables",
          "title": "Combine Two Tables",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "If the EmpId in table Employee has no match in table Bonus, we consider that the corresponding bonus is null and null is smaller than 1000.",
        "Inner join is the default join, we can solve the mismatching problem by using outer join."
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "get-highest-answer-rate-question": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "578",
        "title": "Get Highest Answer Rate Question",
        "titleSlug": "get-highest-answer-rate-question",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 122,
        "dislikes": 906,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"52.6K\", \"totalSubmission\": \"129.8K\", \"totalAcceptedRaw\": 52581, \"totalSubmissionRaw\": 129847, \"acRate\": \"40.5%\"}",
        "hints": [
          "Try to find all question ids by group",
          "Try to find each group answer number and show number.",
          "Rank all the rates (answer/(answer+show)) and return the max one"
        ]
      },
      "similar": [],
      "hints": [
        "Try to find all question ids by group",
        "Try to find each group answer number and show number.",
        "Rank all the rates (answer/(answer+show)) and return the max one"
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "find-cumulative-salary-of-an-employee": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "579",
        "title": "Find Cumulative Salary of an Employee",
        "titleSlug": "find-cumulative-salary-of-an-employee",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 229,
        "dislikes": 400,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"32.8K\", \"totalSubmission\": \"71.1K\", \"totalAcceptedRaw\": 32820, \"totalSubmissionRaw\": 71108, \"acRate\": \"46.2%\"}",
        "hints": [
          "Seem hard at first glance? Try to divide this problem into some sub-problems. \r\nThink about how to calculate the cumulative sum of one employee, how to get the cumulative sum for many employees, and how to except the most recent month of the result.",
          "Use the technique of self-join if you have only one table but to write a complex query.",
          "Still remember how to use the function `sum` and `max`?"
        ]
      },
      "similar": [],
      "hints": [
        "Seem hard at first glance? Try to divide this problem into some sub-problems. \r\nThink about how to calculate the cumulative sum of one employee, how to get the cumulative sum for many employees, and how to except the most recent month of the result.",
        "Use the technique of self-join if you have only one table but to write a complex query.",
        "Still remember how to use the function `sum` and `max`?"
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "count-student-number-in-departments": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "580",
        "title": "Count Student Number in Departments",
        "titleSlug": "count-student-number-in-departments",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 241,
        "dislikes": 35,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"64.2K\", \"totalSubmission\": \"109.2K\", \"totalAcceptedRaw\": 64154, \"totalSubmissionRaw\": 109181, \"acRate\": \"58.8%\"}",
        "hints": [
          "Still remember the difference between 'INNER JOIN' and 'OUTTER JOIN' in SQL?",
          "Do you know other expressions using the 'COUNT' function besides 'COUNT(*)'?"
        ]
      },
      "similar": [],
      "hints": [
        "Still remember the difference between 'INNER JOIN' and 'OUTTER JOIN' in SQL?",
        "Do you know other expressions using the 'COUNT' function besides 'COUNT(*)'?"
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "shortest-unsorted-continuous-subarray": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "581",
        "title": "Shortest Unsorted Continuous Subarray",
        "titleSlug": "shortest-unsorted-continuous-subarray",
        "content": "<p>Given an integer array <code>nums</code>, you need to find one <b>continuous subarray</b> such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.</p>\n\n<p>Return <em>the shortest such subarray and output its length</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,6,4,8,10,9,15]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Can you solve it in <code>O(n)</code> time complexity?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7627,
        "dislikes": 259,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"317.7K\", \"totalSubmission\": \"866.2K\", \"totalAcceptedRaw\": 317744, \"totalSubmissionRaw\": 866205, \"acRate\": \"36.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "kill-process": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "582",
        "title": "Kill Process",
        "titleSlug": "kill-process",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1090,
        "dislikes": 21,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"82.3K\", \"totalSubmission\": \"119.1K\", \"totalAcceptedRaw\": 82327, \"totalSubmissionRaw\": 119143, \"acRate\": \"69.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "delete-operation-for-two-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "583",
        "title": "Delete Operation for Two Strings",
        "titleSlug": "delete-operation-for-two-strings",
        "content": "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of <strong>steps</strong> required to make</em> <code>word1</code> <em>and</em> <code>word2</code> <em>the same</em>.</p>\n\n<p>In one <strong>step</strong>, you can delete exactly one character in either string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;sea&quot;, word2 = &quot;eat&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need one step to make &quot;sea&quot; to &quot;ea&quot; and another step to make &quot;eat&quot; to &quot;ea&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;leetcode&quot;, word2 = &quot;etco&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5582,
        "dislikes": 81,
        "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum ASCII Delete Sum for Two Strings\", \"titleSlug\": \"minimum-ascii-delete-sum-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subsequence\", \"titleSlug\": \"longest-common-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Make Three Strings Equal\", \"titleSlug\": \"make-three-strings-equal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"232.9K\", \"totalSubmission\": \"381K\", \"totalAcceptedRaw\": 232871, \"totalSubmissionRaw\": 381039, \"acRate\": \"61.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "edit-distance",
          "title": "Edit Distance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
          "title": "Minimum ASCII Delete Sum for Two Strings",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-common-subsequence",
          "title": "Longest Common Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "make-three-strings-equal",
          "title": "Make Three Strings Equal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "find-customer-referee": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "584",
        "title": "Find Customer Referee",
        "titleSlug": "find-customer-referee",
        "content": "<p>Table: <code>Customer</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| referee_id  | int     |\n+-------------+---------+\nIn SQL, id is the primary key column for this table.\nEach row of this table indicates the id of a customer, their name, and the id of the customer who referred them.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Find the names of the customer that are <strong>not referred by</strong> the customer with <code>id = 2</code>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCustomer table:\n+----+------+------------+\n| id | name | referee_id |\n+----+------+------------+\n| 1  | Will | null       |\n| 2  | Jane | null       |\n| 3  | Alex | 2          |\n| 4  | Bill | null       |\n| 5  | Zack | 1          |\n| 6  | Mark | 2          |\n+----+------+------------+\n<strong>Output:</strong> \n+------+\n| name |\n+------+\n| Will |\n| Jane |\n| Bill |\n| Zack |\n+------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1735,
        "dislikes": 335,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"599.9K\", \"totalSubmission\": \"870.7K\", \"totalAcceptedRaw\": 599905, \"totalSubmissionRaw\": 870705, \"acRate\": \"68.9%\"}",
        "hints": ["Be careful of the NULL value"]
      },
      "similar": [],
      "hints": ["Be careful of the NULL value"],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "investments-in-2016": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "585",
        "title": "Investments in 2016",
        "titleSlug": "investments-in-2016",
        "content": "<p>Table: <code>Insurance</code></p>\n\n<pre>\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| pid         | int   |\n| tiv_2015    | float |\n| tiv_2016    | float |\n| lat         | float |\n| lon         | float |\n+-------------+-------+\npid is the primary key (column with unique values) for this table.\nEach row of this table contains information about one policy where:\npid is the policyholder&#39;s policy ID.\ntiv_2015 is the total investment value in 2015 and tiv_2016 is the total investment value in 2016.\nlat is the latitude of the policy holder&#39;s city. It&#39;s guaranteed that lat is not NULL.\nlon is the longitude of the policy holder&#39;s city. It&#39;s guaranteed that lon is not NULL.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report the sum of all total investment values in 2016 <code>tiv_2016</code>, for all policyholders who:</p>\n\n<ul>\n\t<li>have the same <code>tiv_2015</code> value as one or more other policyholders, and</li>\n\t<li>are not located in the same city as any other policyholder (i.e., the (<code>lat, lon</code>) attribute pairs must be unique).</li>\n</ul>\n\n<p>Round <code>tiv_2016</code> to <strong>two decimal places</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nInsurance table:\n+-----+----------+----------+-----+-----+\n| pid | tiv_2015 | tiv_2016 | lat | lon |\n+-----+----------+----------+-----+-----+\n| 1   | 10       | 5        | 10  | 10  |\n| 2   | 20       | 20       | 20  | 20  |\n| 3   | 10       | 30       | 20  | 20  |\n| 4   | 10       | 40       | 40  | 40  |\n+-----+----------+----------+-----+-----+\n<strong>Output:</strong> \n+----------+\n| tiv_2016 |\n+----------+\n| 45.00    |\n+----------+\n<strong>Explanation:</strong> \nThe first record in the table, like the last record, meets both of the two criteria.\nThe tiv_2015 value 10 is the same as the third and fourth records, and its location is unique.\n\nThe second record does not meet any of the two criteria. Its tiv_2015 is not like any other policyholders and its location is the same as the third record, which makes the third record fail, too.\nSo, the result is the sum of tiv_2016 of the first and last record, which is 45.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 458,
        "dislikes": 409,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"75.8K\", \"totalSubmission\": \"161.2K\", \"totalAcceptedRaw\": 75774, \"totalSubmissionRaw\": 161217, \"acRate\": \"47.0%\"}",
        "hints": [
          "Make the (LAT, LON) a pair to represent the location information"
        ]
      },
      "similar": [],
      "hints": [
        "Make the (LAT, LON) a pair to represent the location information"
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "customer-placing-the-largest-number-of-orders": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "586",
        "title": "Customer Placing the Largest Number of Orders",
        "titleSlug": "customer-placing-the-largest-number-of-orders",
        "content": "<p>Table: <code>Orders</code></p>\n\n<pre>\n+-----------------+----------+\n| Column Name     | Type     |\n+-----------------+----------+\n| order_number    | int      |\n| customer_number | int      |\n+-----------------+----------+\norder_number is the primary key (column with unique values) for this table.\nThis table contains information about the order ID and the customer ID.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find the <code>customer_number</code> for the customer who has placed <strong>the largest number of orders</strong>.</p>\n\n<p>The test cases are generated so that <strong>exactly one customer</strong> will have placed more orders than any other customer.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nOrders table:\n+--------------+-----------------+\n| order_number | customer_number |\n+--------------+-----------------+\n| 1            | 1               |\n| 2            | 2               |\n| 3            | 3               |\n| 4            | 3               |\n+--------------+-----------------+\n<strong>Output:</strong> \n+-----------------+\n| customer_number |\n+-----------------+\n| 3               |\n+-----------------+\n<strong>Explanation:</strong> \nThe customer with number 3 has two orders, which is greater than either customer 1 or 2 because each of them only has one order. \nSo the result is customer_number 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if more than one customer has the largest number of orders, can you find all the <code>customer_number</code> in this case?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 934,
        "dislikes": 68,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"225.9K\", \"totalSubmission\": \"347.5K\", \"totalAcceptedRaw\": 225928, \"totalSubmissionRaw\": 347487, \"acRate\": \"65.0%\"}",
        "hints": [
          "MySQL uses a different expression to get the first records other than MSSQL's TOP expression."
        ]
      },
      "similar": [],
      "hints": [
        "MySQL uses a different expression to get the first records other than MSSQL's TOP expression."
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "erect-the-fence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "587",
        "title": "Erect the Fence",
        "titleSlug": "erect-the-fence",
        "content": "<p>You are given an array <code>trees</code> where <code>trees[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the location of a tree in the garden.</p>\n\n<p>Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if <strong>all the trees are enclosed</strong>.</p>\n\n<p>Return <em>the coordinates of trees that are exactly located on the fence perimeter</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/erect2-plane.jpg\" style=\"width: 400px; height: 393px;\" />\n<pre>\n<strong>Input:</strong> trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n<strong>Output:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]\n<strong>Explanation:</strong> All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/erect1-plane.jpg\" style=\"width: 400px; height: 393px;\" />\n<pre>\n<strong>Input:</strong> trees = [[1,2],[2,2],[4,2]]\n<strong>Output:</strong> [[4,2],[2,2],[1,2]]\n<strong>Explanation:</strong> The fence forms a line that passes through all the trees.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= trees.length &lt;= 3000</code></li>\n\t<li><code>trees[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>\n\t<li>All the given positions are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1416,
        "dislikes": 640,
        "similarQuestions": "[{\"title\": \"Erect the Fence II\", \"titleSlug\": \"erect-the-fence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sort the Students by Their Kth Score\", \"titleSlug\": \"sort-the-students-by-their-kth-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"55.7K\", \"totalSubmission\": \"107.5K\", \"totalAcceptedRaw\": 55747, \"totalSubmissionRaw\": 107496, \"acRate\": \"51.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "erect-the-fence-ii",
          "title": "Erect the Fence II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-the-students-by-their-kth-score",
          "title": "Sort the Students by Their Kth Score",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "design-in-memory-file-system": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "588",
        "title": "Design In-Memory File System",
        "titleSlug": "design-in-memory-file-system",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1429,
        "dislikes": 152,
        "similarQuestions": "[{\"title\": \"LRU Cache\", \"titleSlug\": \"lru-cache\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"LFU Cache\", \"titleSlug\": \"lfu-cache\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design Log Storage System\", \"titleSlug\": \"design-log-storage-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"94.4K\", \"totalSubmission\": \"195.2K\", \"totalAcceptedRaw\": 94370, \"totalSubmissionRaw\": 195244, \"acRate\": \"48.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "lru-cache",
          "title": "LRU Cache",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "lfu-cache",
          "title": "LFU Cache",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "design-log-storage-system",
          "title": "Design Log Storage System",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "n-ary-tree-preorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "589",
        "title": "N-ary Tree Preorder Traversal",
        "titleSlug": "n-ary-tree-preorder-traversal",
        "content": "<p>Given the <code>root</code> of an n-ary tree, return <em>the preorder traversal of its nodes&#39; values</em>.</p>\n\n<p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [1,3,5,6,2,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3076,
        "dislikes": 199,
        "similarQuestions": "[{\"title\": \"Binary Tree Preorder Traversal\", \"titleSlug\": \"binary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Level Order Traversal\", \"titleSlug\": \"n-ary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Postorder Traversal\", \"titleSlug\": \"n-ary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"414K\", \"totalSubmission\": \"549.9K\", \"totalAcceptedRaw\": 414035, \"totalSubmissionRaw\": 549882, \"acRate\": \"75.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-preorder-traversal",
          "title": "Binary Tree Preorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "n-ary-tree-level-order-traversal",
          "title": "N-ary Tree Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-ary-tree-postorder-traversal",
          "title": "N-ary Tree Postorder Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" }
      ]
    }
  },
  "n-ary-tree-postorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "590",
        "title": "N-ary Tree Postorder Traversal",
        "titleSlug": "n-ary-tree-postorder-traversal",
        "content": "<p>Given the <code>root</code> of an n-ary tree, return <em>the postorder traversal of its nodes&#39; values</em>.</p>\n\n<p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [5,6,3,2,4,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2284,
        "dislikes": 92,
        "similarQuestions": "[{\"title\": \"Binary Tree Postorder Traversal\", \"titleSlug\": \"binary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Level Order Traversal\", \"titleSlug\": \"n-ary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Preorder Traversal\", \"titleSlug\": \"n-ary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"243.8K\", \"totalSubmission\": \"313.9K\", \"totalAcceptedRaw\": 243750, \"totalSubmissionRaw\": 313850, \"acRate\": \"77.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-postorder-traversal",
          "title": "Binary Tree Postorder Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "n-ary-tree-level-order-traversal",
          "title": "N-ary Tree Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "n-ary-tree-preorder-traversal",
          "title": "N-ary Tree Preorder Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" }
      ]
    }
  },
  "tag-validator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "591",
        "title": "Tag Validator",
        "titleSlug": "tag-validator",
        "content": "<p>Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.</p>\n\n<p>A code snippet is valid if all the following rules hold:</p>\n\n<ol>\n\t<li>The code must be wrapped in a <b>valid closed tag</b>. Otherwise, the code is invalid.</li>\n\t<li>A <b>closed tag</b> (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is <b>valid</b> if and only if the TAG_NAME and TAG_CONTENT are valid.</li>\n\t<li>A <b>valid</b> <code>TAG_NAME</code> only contain <b>upper-case letters</b>, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is <b>invalid</b>.</li>\n\t<li>A <b>valid</b> <code>TAG_CONTENT</code> may contain other <b>valid closed tags</b>, <b>cdata</b> and any characters (see note1) <b>EXCEPT</b> unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is <b>invalid</b>.</li>\n\t<li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li>\n\t<li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>&gt;</code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>&gt;</code> should be parsed as TAG_NAME (not necessarily valid).</li>\n\t<li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the <b>first subsequent</b> <code>]]&gt;</code>.</li>\n\t<li><code>CDATA_CONTENT</code> may contain <b>any characters</b>. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as <b>regular characters</b>.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nThe code is wrapped in a closed tag : &lt;DIV&gt; and &lt;/DIV&gt;. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -&gt; <b>&quot;&lt;DIV&gt;&quot;</b>\nend_tag -&gt; <b>&quot;&lt;/DIV&gt;&quot;</b>\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -&gt; <b>&quot;&gt;&gt;  ![cdata[]] &quot;</b>\ncdata -&gt; <b>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</b>, where the CDATA_CONTENT is <b>&quot;&lt;div&gt;]&gt;&quot;</b>\ntext2 -&gt; <b>&quot;]]&gt;&gt;]&quot;</b>\nThe reason why start_tag is NOT <b>&quot;&lt;DIV&gt;&gt;&gt;&quot;</b> is because of the rule 6.\nThe reason why cdata is NOT <b>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</b> is because of the rule 7.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Unbalanced. If &quot;&lt;A&gt;&quot; is closed, then &quot;&lt;B&gt;&quot; must be unmatched, and vice versa.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= code.length &lt;= 500</code></li>\n\t<li><code>code</code> consists of English letters, digits, <code>&#39;&lt;&#39;</code>, <code>&#39;&gt;&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;!&#39;</code>, <code>&#39;[&#39;</code>, <code>&#39;]&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39; &#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 163,
        "dislikes": 637,
        "similarQuestions": "[{\"title\": \"Add Bold Tag in String\", \"titleSlug\": \"add-bold-tag-in-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"14K\", \"totalSubmission\": \"37.3K\", \"totalAcceptedRaw\": 14029, \"totalSubmissionRaw\": 37251, \"acRate\": \"37.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "add-bold-tag-in-string",
          "title": "Add Bold Tag in String",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "fraction-addition-and-subtraction": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "592",
        "title": "Fraction Addition and Subtraction",
        "titleSlug": "fraction-addition-and-subtraction",
        "content": "<p>Given a string <code>expression</code> representing an expression of fraction addition and subtraction, return the calculation result in string format.</p>\n\n<p>The final result should be an <a href=\"https://en.wikipedia.org/wiki/Irreducible_fraction\" target=\"_blank\">irreducible fraction</a>. If your final result is an integer, change it to the format of a fraction that has a denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;-1/2+1/2&quot;\n<strong>Output:</strong> &quot;0/1&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;-1/2+1/2+1/3&quot;\n<strong>Output:</strong> &quot;1/3&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;1/3-1/2&quot;\n<strong>Output:</strong> &quot;-1/6&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input string only contains <code>&#39;0&#39;</code> to <code>&#39;9&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code>. So does the output.</li>\n\t<li>Each fraction (input and output) has the format <code>&plusmn;numerator/denominator</code>. If the first input fraction or the output is positive, then <code>&#39;+&#39;</code> will be omitted.</li>\n\t<li>The input only contains valid <strong>irreducible fractions</strong>, where the <strong>numerator</strong> and <strong>denominator</strong> of each fraction will always be in the range <code>[1, 10]</code>. If the denominator is <code>1</code>, it means this fraction is actually an integer in a fraction format defined above.</li>\n\t<li>The number of given fractions will be in the range <code>[1, 10]</code>.</li>\n\t<li>The numerator and denominator of the <strong>final result</strong> are guaranteed to be valid and in the range of <strong>32-bit</strong> int.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 379,
        "dislikes": 502,
        "similarQuestions": "[{\"title\": \"Solve the Equation\", \"titleSlug\": \"solve-the-equation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"34.5K\", \"totalSubmission\": \"65.3K\", \"totalAcceptedRaw\": 34520, \"totalSubmissionRaw\": 65280, \"acRate\": \"52.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "solve-the-equation",
          "title": "Solve the Equation",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "valid-square": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "593",
        "title": "Valid Square",
        "titleSlug": "valid-square",
        "content": "<p>Given the coordinates of four points in 2D space <code>p1</code>, <code>p2</code>, <code>p3</code> and <code>p4</code>, return <code>true</code> <em>if the four points construct a square</em>.</p>\n\n<p>The coordinate of a point <code>p<sub>i</sub></code> is represented as <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The input is <strong>not</strong> given in any order.</p>\n\n<p>A <strong>valid square</strong> has four equal sides with positive length and four equal angles (90-degree angles).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>p1.length == p2.length == p3.length == p4.length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1010,
        "dislikes": 901,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"103.6K\", \"totalSubmission\": \"235.9K\", \"totalAcceptedRaw\": 103599, \"totalSubmissionRaw\": 235858, \"acRate\": \"43.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "longest-harmonious-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "594",
        "title": "Longest Harmonious Subsequence",
        "titleSlug": "longest-harmonious-subsequence",
        "content": "<p>We define a harmonious array as an array where the difference between its maximum value and its minimum value is <b>exactly</b> <code>1</code>.</p>\r\n\r\n<p>Given an integer array <code>nums</code>, return <em>the length of its longest harmonious subsequence among all its possible subsequences</em>.</p>\r\n\r\n<p>A <strong>subsequence</strong> of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,3,2,2,5,2,3,7]\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> The longest harmonious subsequence is [3,2,2,2,3].\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,2,3,4]\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,1,1,1]\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\r\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2067,
        "dislikes": 206,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"146.9K\", \"totalSubmission\": \"271K\", \"totalAcceptedRaw\": 146856, \"totalSubmissionRaw\": 271019, \"acRate\": \"54.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "big-countries": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "595",
        "title": "Big Countries",
        "titleSlug": "big-countries",
        "content": "<p>Table: <code>World</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| name        | varchar |\n| continent   | varchar |\n| area        | int     |\n| population  | int     |\n| gdp         | bigint  |\n+-------------+---------+\nname is the primary key (column with unique values) for this table.\nEach row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A country is <strong>big</strong> if:</p>\n\n<ul>\n\t<li>it has an area of at least&nbsp;three million (i.e., <code>3000000 km<sup>2</sup></code>), or</li>\n\t<li>it has a population of at least&nbsp;twenty-five million (i.e., <code>25000000</code>).</li>\n</ul>\n\n<p>Write a solution to find the name, population, and area of the <strong>big countries</strong>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name        | continent | area    | population | gdp          |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |\n| Albania     | Europe    | 28748   | 2831741    | 12960000000  |\n| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |\n| Andorra     | Europe    | 468     | 78115      | 3712000000   |\n| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |\n+-------------+-----------+---------+------------+--------------+\n<strong>Output:</strong> \n+-------------+------------+---------+\n| name        | population | area    |\n+-------------+------------+---------+\n| Afghanistan | 25500100   | 652230  |\n| Algeria     | 37100000   | 2381741 |\n+-------------+------------+---------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2442,
        "dislikes": 1273,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"926.7K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 926727, \"totalSubmissionRaw\": 1355747, \"acRate\": \"68.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "classes-more-than-5-students": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "596",
        "title": "Classes More Than 5 Students",
        "titleSlug": "classes-more-than-5-students",
        "content": "<p>Table: <code>Courses</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| student     | varchar |\n| class       | varchar |\n+-------------+---------+\n(student, class) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates the name of a student and the class in which they are enrolled.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find all the classes that have <strong>at least five students</strong>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCourses table:\n+---------+----------+\n| student | class    |\n+---------+----------+\n| A       | Math     |\n| B       | English  |\n| C       | Math     |\n| D       | Biology  |\n| E       | Math     |\n| F       | Computer |\n| G       | Math     |\n| H       | Math     |\n| I       | Math     |\n+---------+----------+\n<strong>Output:</strong> \n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\n<strong>Explanation:</strong> \n- Math has 6 students, so we include it.\n- English has 1 student, so we do not include it.\n- Biology has 1 student, so we do not include it.\n- Computer has 1 student, so we do not include it.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 948,
        "dislikes": 1068,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"335K\", \"totalSubmission\": \"639.5K\", \"totalAcceptedRaw\": 334999, \"totalSubmissionRaw\": 639524, \"acRate\": \"52.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "friend-requests-i-overall-acceptance-rate": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "597",
        "title": "Friend Requests I: Overall Acceptance Rate",
        "titleSlug": "friend-requests-i-overall-acceptance-rate",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 298,
        "dislikes": 758,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"72K\", \"totalSubmission\": \"171.2K\", \"totalAcceptedRaw\": 71952, \"totalSubmissionRaw\": 171174, \"acRate\": \"42.0%\"}",
        "hints": [
          "Still remember how to count the number of rows in a table?",
          "What is the keyword to filter the duplicated records in a table?"
        ]
      },
      "similar": [],
      "hints": [
        "Still remember how to count the number of rows in a table?",
        "What is the keyword to filter the duplicated records in a table?"
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "range-addition-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "598",
        "title": "Range Addition II",
        "titleSlug": "range-addition-ii",
        "content": "<p>You are given an <code>m x n</code> matrix <code>M</code> initialized with all <code>0</code>&#39;s and an array of operations <code>ops</code>, where <code>ops[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means <code>M[x][y]</code> should be incremented by one for all <code>0 &lt;= x &lt; a<sub>i</sub></code> and <code>0 &lt;= y &lt; b<sub>i</sub></code>.</p>\n\n<p>Count and return <em>the number of maximum integers in the matrix after performing all the operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg\" style=\"width: 750px; height: 176px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 3, ops = [[2,2],[3,3]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The maximum integer in M is 2, and there are four of it in M. So return 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 3, ops = []\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= ops.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>ops[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub> &lt;= m</code></li>\n\t<li><code>1 &lt;= b<sub>i</sub> &lt;= n</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 915,
        "dislikes": 951,
        "similarQuestions": "[{\"title\": \"Range Addition\", \"titleSlug\": \"range-addition\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Matrix After Queries\", \"titleSlug\": \"sum-of-matrix-after-queries\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"96.9K\", \"totalSubmission\": \"173.6K\", \"totalAcceptedRaw\": 96870, \"totalSubmissionRaw\": 173572, \"acRate\": \"55.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "range-addition",
          "title": "Range Addition",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sum-of-matrix-after-queries",
          "title": "Sum of Matrix After Queries",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "minimum-index-sum-of-two-lists": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "599",
        "title": "Minimum Index Sum of Two Lists",
        "titleSlug": "minimum-index-sum-of-two-lists",
        "content": "<p>Given two arrays of strings <code>list1</code> and <code>list2</code>, find the <strong>common strings with the least index sum</strong>.</p>\n\n<p>A <strong>common string</strong> is a string that appeared in both <code>list1</code> and <code>list2</code>.</p>\n\n<p>A <strong>common string with the least index sum</strong> is a common string such that if it appeared at <code>list1[i]</code> and <code>list2[j]</code> then <code>i + j</code> should be the minimum value among all the other <strong>common strings</strong>.</p>\n\n<p>Return <em>all the <strong>common strings with the least index sum</strong></em>. Return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;Shogun&quot;,&quot;Tapioca Express&quot;,&quot;Burger King&quot;,&quot;KFC&quot;], list2 = [&quot;Piatti&quot;,&quot;The Grill at Torrey Pines&quot;,&quot;Hungry Hunter Steakhouse&quot;,&quot;Shogun&quot;]\n<strong>Output:</strong> [&quot;Shogun&quot;]\n<strong>Explanation:</strong> The only common string is &quot;Shogun&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;Shogun&quot;,&quot;Tapioca Express&quot;,&quot;Burger King&quot;,&quot;KFC&quot;], list2 = [&quot;KFC&quot;,&quot;Shogun&quot;,&quot;Burger King&quot;]\n<strong>Output:</strong> [&quot;Shogun&quot;]\n<strong>Explanation:</strong> The common string with the least index sum is &quot;Shogun&quot; with index sum = (0 + 1) = 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> list1 = [&quot;happy&quot;,&quot;sad&quot;,&quot;good&quot;], list2 = [&quot;sad&quot;,&quot;happy&quot;,&quot;good&quot;]\n<strong>Output:</strong> [&quot;sad&quot;,&quot;happy&quot;]\n<strong>Explanation:</strong> There are three common strings:\n&quot;happy&quot; with index sum = (0 + 1) = 1.\n&quot;sad&quot; with index sum = (1 + 0) = 1.\n&quot;good&quot; with index sum = (2 + 2) = 4.\nThe strings with the least index sum are &quot;sad&quot; and &quot;happy&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= list1.length, list2.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= list1[i].length, list2[i].length &lt;= 30</code></li>\n\t<li><code>list1[i]</code> and <code>list2[i]</code> consist of spaces <code>&#39; &#39;</code> and English letters.</li>\n\t<li>All the strings of <code>list1</code> are <strong>unique</strong>.</li>\n\t<li>All the strings of <code>list2</code> are <strong>unique</strong>.</li>\n\t<li>There is at least a common string between <code>list1</code> and <code>list2</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1890,
        "dislikes": 388,
        "similarQuestions": "[{\"title\": \"Intersection of Two Linked Lists\", \"titleSlug\": \"intersection-of-two-linked-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"212.4K\", \"totalSubmission\": \"388.4K\", \"totalAcceptedRaw\": 212400, \"totalSubmissionRaw\": 388357, \"acRate\": \"54.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "intersection-of-two-linked-lists",
          "title": "Intersection of Two Linked Lists",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "non-negative-integers-without-consecutive-ones": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "600",
        "title": "Non-negative Integers without Consecutive Ones",
        "titleSlug": "non-negative-integers-without-consecutive-ones",
        "content": "<p>Given a positive integer <code>n</code>, return the number of the integers in the range <code>[0, n]</code> whose binary representations <strong>do not</strong> contain consecutive ones.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nHere are the non-negative integers &lt;= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1481,
        "dislikes": 129,
        "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber II\", \"titleSlug\": \"house-robber-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ones and Zeroes\", \"titleSlug\": \"ones-and-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"37.6K\", \"totalSubmission\": \"95.1K\", \"totalAcceptedRaw\": 37583, \"totalSubmissionRaw\": 95123, \"acRate\": \"39.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-ii",
          "title": "House Robber II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ones-and-zeroes",
          "title": "Ones and Zeroes",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "human-traffic-of-stadium": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "601",
        "title": "Human Traffic of Stadium",
        "titleSlug": "human-traffic-of-stadium",
        "content": "<p>Table: <code>Stadium</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the column with unique values for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nAs the id increases, the date increases as well.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to display the records with three or more rows with <strong>consecutive</strong> <code>id</code>&#39;s, and the number of people is greater than or equal to 100 for each.</p>\n\n<p>Return the result table ordered by <code>visit_date</code> in <strong>ascending order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n<strong>Output:</strong> \n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n<strong>Explanation:</strong> \nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has &gt;= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 636,
        "dislikes": 556,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"92K\", \"totalSubmission\": \"190.2K\", \"totalAcceptedRaw\": 92024, \"totalSubmissionRaw\": 190206, \"acRate\": \"48.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "friend-requests-ii-who-has-the-most-friends": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "602",
        "title": "Friend Requests II: Who Has the Most Friends",
        "titleSlug": "friend-requests-ii-who-has-the-most-friends",
        "content": "<p>Table: <code>RequestAccepted</code></p>\n\n<pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| requester_id   | int     |\n| accepter_id    | int     |\n| accept_date    | date    |\n+----------------+---------+\n(requester_id, accepter_id) is the primary key (combination of columns with unique values) for this table.\nThis table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find the people who have the most friends and the most friends number.</p>\n\n<p>The test cases are generated so that only one person has the most friends.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nRequestAccepted table:\n+--------------+-------------+-------------+\n| requester_id | accepter_id | accept_date |\n+--------------+-------------+-------------+\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n+--------------+-------------+-------------+\n<strong>Output:</strong> \n+----+-----+\n| id | num |\n+----+-----+\n| 3  | 3   |\n+----+-----+\n<strong>Explanation:</strong> \nThe person with id 3 is a friend of people 1, 2, and 4, so he has three friends in total, which is the most number than any others.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> In the real world, multiple people could have the same most number of friends. Could you find all these people in this case?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 551,
        "dislikes": 97,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"95.4K\", \"totalSubmission\": \"167.7K\", \"totalAcceptedRaw\": 95366, \"totalSubmissionRaw\": 167689, \"acRate\": \"56.9%\"}",
        "hints": [
          "Being friends is bidirectional. If you accept someone's adding friend request, both you and the other person will have one more friend."
        ]
      },
      "similar": [],
      "hints": [
        "Being friends is bidirectional. If you accept someone's adding friend request, both you and the other person will have one more friend."
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "consecutive-available-seats": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "603",
        "title": "Consecutive Available Seats",
        "titleSlug": "consecutive-available-seats",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 626,
        "dislikes": 69,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"80.8K\", \"totalSubmission\": \"121.9K\", \"totalAcceptedRaw\": 80794, \"totalSubmissionRaw\": 121913, \"acRate\": \"66.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "design-compressed-string-iterator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "604",
        "title": "Design Compressed String Iterator",
        "titleSlug": "design-compressed-string-iterator",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 431,
        "dislikes": 154,
        "similarQuestions": "[{\"title\": \"LRU Cache\", \"titleSlug\": \"lru-cache\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"String Compression\", \"titleSlug\": \"string-compression\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Iterator", "slug": "iterator" }
        ],
        "stats": "{\"totalAccepted\": \"31.8K\", \"totalSubmission\": \"80.4K\", \"totalAcceptedRaw\": 31845, \"totalSubmissionRaw\": 80382, \"acRate\": \"39.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "lru-cache",
          "title": "LRU Cache",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "string-compression",
          "title": "String Compression",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Iterator", "slug": "iterator" }
      ]
    }
  },
  "can-place-flowers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "605",
        "title": "Can Place Flowers",
        "titleSlug": "can-place-flowers",
        "content": "<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in <strong>adjacent</strong> plots.</p>\n\n<p>Given an integer array <code>flowerbed</code> containing <code>0</code>&#39;s and <code>1</code>&#39;s, where <code>0</code> means empty and <code>1</code> means not empty, and an integer <code>n</code>, return <code>true</code>&nbsp;<em>if</em> <code>n</code> <em>new flowers can be planted in the</em> <code>flowerbed</code> <em>without violating the no-adjacent-flowers rule and</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There are no two adjacent flowers in <code>flowerbed</code>.</li>\n\t<li><code>0 &lt;= n &lt;= flowerbed.length</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6145,
        "dislikes": 1089,
        "similarQuestions": "[{\"title\": \"Teemo Attacking\", \"titleSlug\": \"teemo-attacking\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Asteroid Collision\", \"titleSlug\": \"asteroid-collision\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"636.7K\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 636713, \"totalSubmissionRaw\": 2142529, \"acRate\": \"29.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "teemo-attacking",
          "title": "Teemo Attacking",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "asteroid-collision",
          "title": "Asteroid Collision",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "construct-string-from-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "606",
        "title": "Construct String from Binary Tree",
        "titleSlug": "construct-string-from-binary-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.</p>\n\n<p>Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/cons1-tree.jpg\" style=\"width: 292px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4]\n<strong>Output:</strong> &quot;1(2(4))(3)&quot;\n<strong>Explanation:</strong> Originally, it needs to be &quot;1(2(4)())(3()())&quot;, but you need to omit all the unnecessary empty parenthesis pairs. And it will be &quot;1(2(4))(3)&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/cons2-tree.jpg\" style=\"width: 207px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,4]\n<strong>Output:</strong> &quot;1(2()(4))(3)&quot;\n<strong>Explanation:</strong> Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3251,
        "dislikes": 3737,
        "similarQuestions": "[{\"title\": \"Construct Binary Tree from String\", \"titleSlug\": \"construct-binary-tree-from-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"307.1K\", \"totalSubmission\": \"445.8K\", \"totalAcceptedRaw\": 307105, \"totalSubmissionRaw\": 445844, \"acRate\": \"68.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "construct-binary-tree-from-string",
          "title": "Construct Binary Tree from String",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-duplicate-subtrees",
          "title": "Find Duplicate Subtrees",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "sales-person": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "607",
        "title": "Sales Person",
        "titleSlug": "sales-person",
        "content": "<p>Table: <code>SalesPerson</code></p>\n\n<pre>\n+-----------------+---------+\n| Column Name     | Type    |\n+-----------------+---------+\n| sales_id        | int     |\n| name            | varchar |\n| salary          | int     |\n| commission_rate | int     |\n| hire_date       | date    |\n+-----------------+---------+\nsales_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the name and the ID of a salesperson alongside their salary, commission rate, and hire date.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Company</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| com_id      | int     |\n| name        | varchar |\n| city        | varchar |\n+-------------+---------+\ncom_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the name and the ID of a company and the city in which the company is located.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Orders</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| order_id    | int  |\n| order_date  | date |\n| com_id      | int  |\n| sales_id    | int  |\n| amount      | int  |\n+-------------+------+\norder_id is the primary key (column with unique values) for this table.\ncom_id is a foreign key (reference column) to com_id from the Company table.\nsales_id is a foreign key (reference column) to sales_id from the SalesPerson table.\nEach row of this table contains information about one order. This includes the ID of the company, the ID of the salesperson, the date of the order, and the amount paid.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to find the names of all the salespersons who did not have any orders related to the company with the name <strong>&quot;RED&quot;</strong>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nSalesPerson table:\n+----------+------+--------+-----------------+------------+\n| sales_id | name | salary | commission_rate | hire_date  |\n+----------+------+--------+-----------------+------------+\n| 1        | John | 100000 | 6               | 4/1/2006   |\n| 2        | Amy  | 12000  | 5               | 5/1/2010   |\n| 3        | Mark | 65000  | 12              | 12/25/2008 |\n| 4        | Pam  | 25000  | 25              | 1/1/2005   |\n| 5        | Alex | 5000   | 10              | 2/3/2007   |\n+----------+------+--------+-----------------+------------+\nCompany table:\n+--------+--------+----------+\n| com_id | name   | city     |\n+--------+--------+----------+\n| 1      | RED    | Boston   |\n| 2      | ORANGE | New York |\n| 3      | YELLOW | Boston   |\n| 4      | GREEN  | Austin   |\n+--------+--------+----------+\nOrders table:\n+----------+------------+--------+----------+--------+\n| order_id | order_date | com_id | sales_id | amount |\n+----------+------------+--------+----------+--------+\n| 1        | 1/1/2014   | 3      | 4        | 10000  |\n| 2        | 2/1/2014   | 4      | 5        | 5000   |\n| 3        | 3/1/2014   | 1      | 1        | 50000  |\n| 4        | 4/1/2014   | 1      | 4        | 25000  |\n+----------+------------+--------+----------+--------+\n<strong>Output:</strong> \n+------+\n| name |\n+------+\n| Amy  |\n| Mark |\n| Alex |\n+------+\n<strong>Explanation:</strong> \nAccording to orders 3 and 4 in the Orders table, it is easy to tell that only salesperson John and Pam have sales to company RED, so we report all the other names in the table salesperson.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1100,
        "dislikes": 90,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"187.4K\", \"totalSubmission\": \"284.2K\", \"totalAcceptedRaw\": 187354, \"totalSubmissionRaw\": 284200, \"acRate\": \"65.9%\"}",
        "hints": [
          "You need to query who sold to company 'RED' first, then output the sales person who is not in the first query result."
        ]
      },
      "similar": [],
      "hints": [
        "You need to query who sold to company 'RED' first, then output the sales person who is not in the first query result."
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "tree-node": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "608",
        "title": "Tree Node",
        "titleSlug": "tree-node",
        "content": "<p>Table: <code>Tree</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| p_id        | int  |\n+-------------+------+\nid is the column with unique values for this table.\nEach row of this table contains information about the id of a node and the id of its parent node in a tree.\nThe given structure is always a valid tree.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Each node in the tree can be one of three types:</p>\n\n<ul>\n\t<li><strong>&quot;Leaf&quot;</strong>: if the node is a leaf node.</li>\n\t<li><strong>&quot;Root&quot;</strong>: if the node is the root of the tree.</li>\n\t<li><strong>&quot;Inner&quot;</strong>: If the node is neither a leaf node nor a root node.</li>\n</ul>\n\n<p>Write a solution to report the type of each node in the tree.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/22/tree1.jpg\" style=\"width: 304px; height: 224px;\" />\n<pre>\n<strong>Input:</strong> \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\n<strong>Output:</strong> \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Inner |\n| 3  | Leaf  |\n| 4  | Leaf  |\n| 5  | Leaf  |\n+----+-------+\n<strong>Explanation:</strong> \nNode 1 is the root node because its parent node is null and it has child nodes 2 and 3.\nNode 2 is an inner node because it has parent node 1 and child node 4 and 5.\nNodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/22/tree2.jpg\" style=\"width: 64px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n+----+------+\n<strong>Output:</strong> \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n+----+-------+\n<strong>Explanation:</strong> If there is only one node on the tree, you only need to output its root attributes.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1190,
        "dislikes": 124,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"144.8K\", \"totalSubmission\": \"202.2K\", \"totalAcceptedRaw\": 144838, \"totalSubmissionRaw\": 202207, \"acRate\": \"71.6%\"}",
        "hints": [
          "You can judge the node type by querying whether the node's id shows up in p_id column and whether the node's p_id is null."
        ]
      },
      "similar": [],
      "hints": [
        "You can judge the node type by querying whether the node's id shows up in p_id column and whether the node's p_id is null."
      ],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "find-duplicate-file-in-system": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "609",
        "title": "Find Duplicate File in System",
        "titleSlug": "find-duplicate-file-in-system",
        "content": "<p>Given a list <code>paths</code> of directory info, including the directory path, and all the files with contents in this directory, return <em>all the duplicate files in the file system in terms of their paths</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>A group of duplicate files consists of at least two files that have the same content.</p>\n\n<p>A single directory info string in the input list has the following format:</p>\n\n<ul>\n\t<li><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></li>\n</ul>\n\n<p>It means there are <code>n</code> files <code>(f1.txt, f2.txt ... fn.txt)</code> with content <code>(f1_content, f2_content ... fn_content)</code> respectively in the directory &quot;<code>root/d1/d2/.../dm&quot;</code>. Note that <code>n &gt;= 1</code> and <code>m &gt;= 0</code>. If <code>m = 0</code>, it means the directory is just the root directory.</p>\n\n<p>The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p>\n\n<ul>\n\t<li><code>&quot;directory_path/file_name.txt&quot;</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\n<strong>Output:</strong> [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\n<strong>Output:</strong> [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= paths[i].length &lt;= 3000</code></li>\n\t<li><code>1 &lt;= sum(paths[i].length) &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>paths[i]</code> consist of English letters, digits, <code>&#39;/&#39;</code>, <code>&#39;.&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>\n\t<li>You may assume no files or directories share the same name in the same directory.</li>\n\t<li>You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Imagine you are given a real file system, how will you search files? DFS or BFS?</li>\n\t<li>If the file content is very large (GB level), how will you modify your solution?</li>\n\t<li>If you can only read the file by 1kb each time, how will you modify your solution?</li>\n\t<li>What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?</li>\n\t<li>How to make sure the duplicated files you find are not false positive?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1483,
        "dislikes": 1644,
        "similarQuestions": "[{\"title\": \"Delete Duplicate Folders in System\", \"titleSlug\": \"delete-duplicate-folders-in-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"148.8K\", \"totalSubmission\": \"220.1K\", \"totalAcceptedRaw\": 148815, \"totalSubmissionRaw\": 220078, \"acRate\": \"67.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "delete-duplicate-folders-in-system",
          "title": "Delete Duplicate Folders in System",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "triangle-judgement": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "610",
        "title": "Triangle Judgement",
        "titleSlug": "triangle-judgement",
        "content": "<p>Table: <code>Triangle</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| x           | int  |\n| y           | int  |\n| z           | int  |\n+-------------+------+\nIn SQL, (x, y, z) is the primary key column for this table.\nEach row of this table contains the lengths of three line segments.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Report for every three line segments whether they can form a triangle.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nTriangle table:\n+----+----+----+\n| x  | y  | z  |\n+----+----+----+\n| 13 | 15 | 30 |\n| 10 | 20 | 15 |\n+----+----+----+\n<strong>Output:</strong> \n+----+----+----+----------+\n| x  | y  | z  | triangle |\n+----+----+----+----------+\n| 13 | 15 | 30 | No       |\n| 10 | 20 | 15 | Yes      |\n+----+----+----+----------+\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 507,
        "dislikes": 133,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"125.2K\", \"totalSubmission\": \"177.3K\", \"totalAcceptedRaw\": 125217, \"totalSubmissionRaw\": 177262, \"acRate\": \"70.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "valid-triangle-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "611",
        "title": "Valid Triangle Number",
        "titleSlug": "valid-triangle-number",
        "content": "<p>Given an integer array <code>nums</code>, return <em>the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,3,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,3,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3678,
        "dislikes": 206,
        "similarQuestions": "[{\"title\": \"3Sum Smaller\", \"titleSlug\": \"3sum-smaller\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Polygon With the Largest Perimeter\", \"titleSlug\": \"find-polygon-with-the-largest-perimeter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"184K\", \"totalSubmission\": \"361.8K\", \"totalAcceptedRaw\": 184033, \"totalSubmissionRaw\": 361799, \"acRate\": \"50.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "3sum-smaller",
          "title": "3Sum Smaller",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-polygon-with-the-largest-perimeter",
          "title": "Find Polygon With the Largest Perimeter",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "shortest-distance-in-a-plane": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "612",
        "title": "Shortest Distance in a Plane",
        "titleSlug": "shortest-distance-in-a-plane",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 215,
        "dislikes": 70,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"39K\", \"totalSubmission\": \"63.1K\", \"totalAcceptedRaw\": 39016, \"totalSubmissionRaw\": 63115, \"acRate\": \"61.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "shortest-distance-in-a-line": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "613",
        "title": "Shortest Distance in a Line",
        "titleSlug": "shortest-distance-in-a-line",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 314,
        "dislikes": 40,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"67.7K\", \"totalSubmission\": \"84.3K\", \"totalAcceptedRaw\": 67673, \"totalSubmissionRaw\": 84257, \"acRate\": \"80.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "second-degree-follower": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "614",
        "title": "Second Degree Follower",
        "titleSlug": "second-degree-follower",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 154,
        "dislikes": 742,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"50.4K\", \"totalSubmission\": \"132.4K\", \"totalAcceptedRaw\": 50388, \"totalSubmissionRaw\": 132407, \"acRate\": \"38.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "average-salary-departments-vs-company": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "615",
        "title": "Average Salary: Departments VS Company",
        "titleSlug": "average-salary-departments-vs-company",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 232,
        "dislikes": 73,
        "similarQuestions": "[{\"title\": \"Countries You Can Safely Invest In\", \"titleSlug\": \"countries-you-can-safely-invest-in\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"34.2K\", \"totalSubmission\": \"61K\", \"totalAcceptedRaw\": 34197, \"totalSubmissionRaw\": 61009, \"acRate\": \"56.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "countries-you-can-safely-invest-in",
          "title": "Countries You Can Safely Invest In",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "add-bold-tag-in-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "616",
        "title": "Add Bold Tag in String",
        "titleSlug": "add-bold-tag-in-string",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1045,
        "dislikes": 184,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Tag Validator\", \"titleSlug\": \"tag-validator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" },
          { "name": "String Matching", "slug": "string-matching" }
        ],
        "stats": "{\"totalAccepted\": \"87.3K\", \"totalSubmission\": \"176.7K\", \"totalAcceptedRaw\": 87325, \"totalSubmissionRaw\": 176696, \"acRate\": \"49.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "tag-validator",
          "title": "Tag Validator",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" },
        { "name": "String Matching", "slug": "string-matching" }
      ]
    }
  },
  "merge-two-binary-trees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "617",
        "title": "Merge Two Binary Trees",
        "titleSlug": "merge-two-binary-trees",
        "content": "<p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p>\n\n<p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p>\n\n<p>Return <em>the merged tree</em>.</p>\n\n<p><strong>Note:</strong> The merging process must start from the root nodes of both trees.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/05/merge.jpg\" style=\"width: 600px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n<strong>Output:</strong> [3,4,5,5,4,null,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [1], root2 = [1,2]\n<strong>Output:</strong> [2,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both trees is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8606,
        "dislikes": 287,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"735.4K\", \"totalSubmission\": \"932.8K\", \"totalAcceptedRaw\": 735433, \"totalSubmissionRaw\": 932842, \"acRate\": \"78.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "students-report-by-geography": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "618",
        "title": "Students Report By Geography",
        "titleSlug": "students-report-by-geography",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 178,
        "dislikes": 169,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"22.5K\", \"totalSubmission\": \"35.3K\", \"totalAcceptedRaw\": 22517, \"totalSubmissionRaw\": 35343, \"acRate\": \"63.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "biggest-single-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "619",
        "title": "Biggest Single Number",
        "titleSlug": "biggest-single-number",
        "content": "<p>Table: <code>MyNumbers</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| num         | int  |\n+-------------+------+\nThis table may contain duplicates (In other words, there is no primary key for this table in SQL).\nEach row of this table contains an integer.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A <strong>single number</strong> is a number that appeared only once in the <code>MyNumbers</code> table.</p>\n\n<p>Find the largest <strong>single number</strong>. If there is no <strong>single number</strong>, report <code>null</code>.</p>\n\n<p>The result format is in the following example.</p>\n<ptable> </ptable>\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 3   |\n| 3   |\n| 1   |\n| 4   |\n| 5   |\n| 6   |\n+-----+\n<strong>Output:</strong> \n+-----+\n| num |\n+-----+\n| 6   |\n+-----+\n<strong>Explanation:</strong> The single numbers are 1, 4, 5, and 6.\nSince 6 is the largest single number, we return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 7   |\n| 7   |\n| 3   |\n| 3   |\n| 3   |\n+-----+\n<strong>Output:</strong> \n+------+\n| num  |\n+------+\n| null |\n+------+\n<strong>Explanation:</strong> There are no single numbers in the input table so we return null.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 516,
        "dislikes": 173,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"136K\", \"totalSubmission\": \"232.6K\", \"totalAcceptedRaw\": 136017, \"totalSubmissionRaw\": 232580, \"acRate\": \"58.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "not-boring-movies": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "620",
        "title": "Not Boring Movies",
        "titleSlug": "not-boring-movies",
        "content": "<p>Table: <code>Cinema</code></p>\n\n<pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| id             | int      |\n| movie          | varchar  |\n| description    | varchar  |\n| rating         | float    |\n+----------------+----------+\nid is the primary key (column with unique values) for this table.\nEach row contains information about the name of a movie, its genre, and its rating.\nrating is a 2 decimal places float in the range [0, 10]\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report the movies with an odd-numbered ID and a description that is not <code>&quot;boring&quot;</code>.</p>\n\n<p>Return the result table ordered by <code>rating</code> <strong>in descending order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+\n<strong>Output:</strong> \n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+\n<strong>Explanation:</strong> \nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1000,
        "dislikes": 537,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"357K\", \"totalSubmission\": \"489.7K\", \"totalAcceptedRaw\": 357019, \"totalSubmissionRaw\": 489701, \"acRate\": \"72.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "task-scheduler": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "621",
        "title": "Task Scheduler",
        "titleSlug": "task-scheduler",
        "content": "<p>Given a characters array <code>tasks</code>, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.</p>\n\n<p>However, there is a non-negative integer&nbsp;<code>n</code> that represents the cooldown period between&nbsp;two <b>same tasks</b>&nbsp;(the same letter in the array), that is that there must be at least <code>n</code> units of time between any two same tasks.</p>\n\n<p>Return <em>the least number of units of times that the CPU will take to finish all the given tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 0\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> On this case any permutation of size 6 would work since n = 0.\n[&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]\n[&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;]\n[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]\n...\nAnd so on.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n = 2\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= task.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tasks[i]</code> is upper-case English letter.</li>\n\t<li>The integer <code>n</code> is in the range <code>[0, 100]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9215,
        "dislikes": 1904,
        "similarQuestions": "[{\"title\": \"Rearrange String k Distance Apart\", \"titleSlug\": \"rearrange-string-k-distance-apart\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Reorganize String\", \"titleSlug\": \"reorganize-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Weeks for Which You Can Work\", \"titleSlug\": \"maximum-number-of-weeks-for-which-you-can-work\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Minimum Time to Finish All Jobs II\", \"titleSlug\": \"find-minimum-time-to-finish-all-jobs-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Task Scheduler II\", \"titleSlug\": \"task-scheduler-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"490.8K\", \"totalSubmission\": \"848.1K\", \"totalAcceptedRaw\": 490809, \"totalSubmissionRaw\": 848072, \"acRate\": \"57.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "rearrange-string-k-distance-apart",
          "title": "Rearrange String k Distance Apart",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "reorganize-string",
          "title": "Reorganize String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-number-of-weeks-for-which-you-can-work",
          "title": "Maximum Number of Weeks for Which You Can Work",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-minimum-time-to-finish-all-jobs-ii",
          "title": "Find Minimum Time to Finish All Jobs II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "task-scheduler-ii",
          "title": "Task Scheduler II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "design-circular-queue": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "622",
        "title": "Design Circular Queue",
        "titleSlug": "design-circular-queue",
        "content": "<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</p>\n\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\n\n<p>Implement the <code>MyCircularQueue</code> class:</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code> Initializes the object with the size of the queue to be <code>k</code>.</li>\n\t<li><code>int Front()</code> Gets the front item from the queue. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>int Rear()</code> Gets the last item from the queue. If the queue is empty, return <code>-1</code>.</li>\n\t<li><code>boolean enQueue(int value)</code> Inserts an element into the circular queue. Return <code>true</code> if the operation is successful.</li>\n\t<li><code>boolean deQueue()</code> Deletes an element from the circular queue. Return <code>true</code> if the operation is successful.</li>\n\t<li><code>boolean isEmpty()</code> Checks whether the circular queue is empty or not.</li>\n\t<li><code>boolean isFull()</code> Checks whether the circular queue is full or not.</li>\n</ul>\n\n<p>You must solve the problem without using the built-in queue data structure in your programming language.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCircularQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;, &quot;isFull&quot;, &quot;deQueue&quot;, &quot;enQueue&quot;, &quot;Rear&quot;]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\n<strong>Output</strong>\n[null, true, true, true, false, 3, true, true, true, 4]\n\n<strong>Explanation</strong>\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 1000</code></li>\n\t<li><code>0 &lt;= value &lt;= 1000</code></li>\n\t<li>At most <code>3000</code> calls will be made to&nbsp;<code>enQueue</code>, <code>deQueue</code>,&nbsp;<code>Front</code>,&nbsp;<code>Rear</code>,&nbsp;<code>isEmpty</code>, and&nbsp;<code>isFull</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3415,
        "dislikes": 267,
        "similarQuestions": "[{\"title\": \"Design Circular Deque\", \"titleSlug\": \"design-circular-deque\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Front Middle Back Queue\", \"titleSlug\": \"design-front-middle-back-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" }
        ],
        "stats": "{\"totalAccepted\": \"294.3K\", \"totalSubmission\": \"573.4K\", \"totalAcceptedRaw\": 294332, \"totalSubmissionRaw\": 573418, \"acRate\": \"51.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "design-circular-deque",
          "title": "Design Circular Deque",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "design-front-middle-back-queue",
          "title": "Design Front Middle Back Queue",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" }
      ]
    }
  },
  "add-one-row-to-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "623",
        "title": "Add One Row to Tree",
        "titleSlug": "add-one-row-to-tree",
        "content": "<p>Given the <code>root</code> of a binary tree and two integers <code>val</code> and <code>depth</code>, add a row of nodes with value <code>val</code> at the given depth <code>depth</code>.</p>\n\n<p>Note that the <code>root</code> node is at depth <code>1</code>.</p>\n\n<p>The adding rule is:</p>\n\n<ul>\n\t<li>Given the integer <code>depth</code>, for each not null tree node <code>cur</code> at the depth <code>depth - 1</code>, create two tree nodes with value <code>val</code> as <code>cur</code>&#39;s left subtree root and right subtree root.</li>\n\t<li><code>cur</code>&#39;s original left subtree should be the left subtree of the new left subtree root.</li>\n\t<li><code>cur</code>&#39;s original right subtree should be the right subtree of the new right subtree root.</li>\n\t<li>If <code>depth == 1</code> that means there is no depth <code>depth - 1</code> at all, then create a tree node with value <code>val</code> as the new root of the whole original tree, and the original tree is the new root&#39;s left subtree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg\" style=\"width: 500px; height: 231px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,6,3,1,5], val = 1, depth = 2\n<strong>Output:</strong> [4,1,1,2,null,null,6,3,1,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg\" style=\"width: 500px; height: 277px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,null,3,1], val = 1, depth = 3\n<strong>Output:</strong> [4,2,null,1,1,3,null,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li>The depth of the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= depth &lt;= the depth of tree + 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2945,
        "dislikes": 228,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"158.8K\", \"totalSubmission\": \"266.7K\", \"totalAcceptedRaw\": 158850, \"totalSubmissionRaw\": 266708, \"acRate\": \"59.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "maximum-distance-in-arrays": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "624",
        "title": "Maximum Distance in Arrays",
        "titleSlug": "maximum-distance-in-arrays",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 744,
        "dislikes": 70,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"46.9K\", \"totalSubmission\": \"110.6K\", \"totalAcceptedRaw\": 46897, \"totalSubmissionRaw\": 110631, \"acRate\": \"42.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "minimum-factorization": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "625",
        "title": "Minimum Factorization",
        "titleSlug": "minimum-factorization",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 125,
        "dislikes": 111,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"11.1K\", \"totalSubmission\": \"33K\", \"totalAcceptedRaw\": 11084, \"totalSubmissionRaw\": 33049, \"acRate\": \"33.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "exchange-seats": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "626",
        "title": "Exchange Seats",
        "titleSlug": "exchange-seats",
        "content": "<p>Table: <code>Seat</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| student     | varchar |\n+-------------+---------+\nid is the primary key (unique value) column for this table.\nEach row of this table indicates the name and the ID of a student.\nid is a continuous increment.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.</p>\n\n<p>Return the result table ordered by <code>id</code> <strong>in ascending order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nSeat table:\n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Abbot   |\n| 2  | Doris   |\n| 3  | Emerson |\n| 4  | Green   |\n| 5  | Jeames  |\n+----+---------+\n<strong>Output:</strong> \n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Doris   |\n| 2  | Abbot   |\n| 3  | Green   |\n| 4  | Emerson |\n| 5  | Jeames  |\n+----+---------+\n<strong>Explanation:</strong> \nNote that if the number of students is odd, there is no need to change the last one&#39;s seat.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1289,
        "dislikes": 569,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"175.3K\", \"totalSubmission\": \"255.5K\", \"totalAcceptedRaw\": 175263, \"totalSubmissionRaw\": 255500, \"acRate\": \"68.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "swap-salary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "627",
        "title": "Swap Salary",
        "titleSlug": "swap-salary",
        "content": "<p>Table: <code>Salary</code></p>\n\n<pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| name        | varchar  |\n| sex         | ENUM     |\n| salary      | int      |\n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe sex column is ENUM (category) value of type (&#39;m&#39;, &#39;f&#39;).\nThe table contains information about an employee.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to swap all <code>&#39;f&#39;</code> and <code>&#39;m&#39;</code> values (i.e., change all <code>&#39;f&#39;</code> values to <code>&#39;m&#39;</code> and vice versa) with a <strong>single update statement</strong> and no intermediate temporary tables.</p>\n\n<p>Note that you must write a single update statement, <strong>do not</strong> write any select statement for this problem.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nSalary table:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n+----+------+-----+--------+\n<strong>Output:</strong> \n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n+----+------+-----+--------+\n<strong>Explanation:</strong> \n(1, A) and (3, C) were changed from &#39;m&#39; to &#39;f&#39;.\n(2, B) and (4, D) were changed from &#39;f&#39; to &#39;m&#39;.\n</pre>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1686,
        "dislikes": 562,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Database", "slug": "database" }],
        "stats": "{\"totalAccepted\": \"387.8K\", \"totalSubmission\": \"467.1K\", \"totalAcceptedRaw\": 387822, \"totalSubmissionRaw\": 467142, \"acRate\": \"83.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Database", "slug": "database" }]
    }
  },
  "maximum-product-of-three-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "628",
        "title": "Maximum Product of Three Numbers",
        "titleSlug": "maximum-product-of-three-numbers",
        "content": "<p>Given an integer array <code>nums</code>, <em>find three numbers whose product is maximum and return the maximum product</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 6\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 24\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,-2,-3]\n<strong>Output:</strong> -6\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;=&nbsp;10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4068,
        "dislikes": 654,
        "similarQuestions": "[{\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"296.8K\", \"totalSubmission\": \"656.3K\", \"totalAcceptedRaw\": 296792, \"totalSubmissionRaw\": 656258, \"acRate\": \"45.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-subarray",
          "title": "Maximum Product Subarray",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "k-inverse-pairs-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "629",
        "title": "K Inverse Pairs Array",
        "titleSlug": "k-inverse-pairs-array",
        "content": "<p>For an integer array <code>nums</code>, an <strong>inverse pair</strong> is a pair of integers <code>[i, j]</code> where <code>0 &lt;= i &lt; j &lt; nums.length</code> and <code>nums[i] &gt; nums[j]</code>.</p>\n\n<p>Given two integers n and k, return the number of different arrays consist of numbers from <code>1</code> to <code>n</code> such that there are exactly <code>k</code> <strong>inverse pairs</strong>. Since the answer can be huge, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 0\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= k &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1979,
        "dislikes": 220,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"60.2K\", \"totalSubmission\": \"141.4K\", \"totalAcceptedRaw\": 60219, \"totalSubmissionRaw\": 141410, \"acRate\": \"42.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "course-schedule-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "630",
        "title": "Course Schedule III",
        "titleSlug": "course-schedule-iii",
        "content": "<p>There are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. You are given an array <code>courses</code> where <code>courses[i] = [duration<sub>i</sub>, lastDay<sub>i</sub>]</code> indicate that the <code>i<sup>th</sup></code> course should be taken <b>continuously</b> for <code>duration<sub>i</sub></code> days and must be finished before or on <code>lastDay<sub>i</sub></code>.</p>\n\n<p>You will start on the <code>1<sup>st</sup></code> day and you cannot take two or more courses simultaneously.</p>\n\n<p>Return <em>the maximum number of courses that you can take</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\n<strong>Output:</strong> 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1<sup>st</sup> course, it costs 100 days so you will finish it on the 100<sup>th</sup> day, and ready to take the next course on the 101<sup>st</sup> day.\nSecond, take the 3<sup>rd</sup> course, it costs 1000 days so you will finish it on the 1100<sup>th</sup> day, and ready to take the next course on the 1101<sup>st</sup> day. \nThird, take the 2<sup>nd</sup> course, it costs 200 days so you will finish it on the 1300<sup>th</sup> day. \nThe 4<sup>th</sup> course cannot be taken now, since you will finish it on the 3300<sup>th</sup> day, which exceeds the closed date.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[1,2]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[3,2],[4,3]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= courses.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= duration<sub>i</sub>, lastDay<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3700,
        "dislikes": 96,
        "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Parallel Courses III\", \"titleSlug\": \"parallel-courses-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"107.9K\", \"totalSubmission\": \"268.9K\", \"totalAcceptedRaw\": 107877, \"totalSubmissionRaw\": 268929, \"acRate\": \"40.1%\"}",
        "hints": [
          "During iteration, say I want to add the current course, currentTotalTime being total time of all courses taken till now, but adding the current course might exceed my deadline or it doesn\u2019t.</br></br>\r\n\r\n1. If it doesn\u2019t, then I have added one new course. Increment the currentTotalTime with duration of current course.",
          "2. If it exceeds deadline, I can swap current course with current courses that has biggest duration.</br>\r\n* No harm done and I might have just reduced the currentTotalTime, right? </br>\r\n* What preprocessing do I need to do on my course processing order so that this swap is always legal?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule",
          "title": "Course Schedule",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "course-schedule-ii",
          "title": "Course Schedule II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "parallel-courses-iii",
          "title": "Parallel Courses III",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "During iteration, say I want to add the current course, currentTotalTime being total time of all courses taken till now, but adding the current course might exceed my deadline or it doesn\u2019t.</br></br>\r\n\r\n1. If it doesn\u2019t, then I have added one new course. Increment the currentTotalTime with duration of current course.",
        "2. If it exceeds deadline, I can swap current course with current courses that has biggest duration.</br>\r\n* No harm done and I might have just reduced the currentTotalTime, right? </br>\r\n* What preprocessing do I need to do on my course processing order so that this swap is always legal?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "design-excel-sum-formula": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "631",
        "title": "Design Excel Sum Formula",
        "titleSlug": "design-excel-sum-formula",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 226,
        "dislikes": 265,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Design", "slug": "design" },
          { "name": "Topological Sort", "slug": "topological-sort" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"15.4K\", \"totalSubmission\": \"35.2K\", \"totalAcceptedRaw\": 15358, \"totalSubmissionRaw\": 35219, \"acRate\": \"43.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Design", "slug": "design" },
        { "name": "Topological Sort", "slug": "topological-sort" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "smallest-range-covering-elements-from-k-lists": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "632",
        "title": "Smallest Range Covering Elements from K Lists",
        "titleSlug": "smallest-range-covering-elements-from-k-lists",
        "content": "<p>You have <code>k</code> lists of sorted integers in <strong>non-decreasing&nbsp;order</strong>. Find the <b>smallest</b> range that includes at least one number from each of the <code>k</code> lists.</p>\n\n<p>We define the range <code>[a, b]</code> is smaller than range <code>[c, d]</code> if <code>b - a &lt; d - c</code> <strong>or</strong> <code>a &lt; c</code> if <code>b - a == d - c</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\n<strong>Output:</strong> [20,24]\n<strong>Explanation: </strong>\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[1,2,3],[1,2,3],[1,2,3]]\n<strong>Output:</strong> [1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == k</code></li>\n\t<li><code>1 &lt;= k &lt;= 3500</code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 50</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code>&nbsp;is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3310,
        "dislikes": 61,
        "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"97.6K\", \"totalSubmission\": \"157.3K\", \"totalAcceptedRaw\": 97644, \"totalSubmissionRaw\": 157298, \"acRate\": \"62.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-substring",
          "title": "Minimum Window Substring",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "sum-of-square-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "633",
        "title": "Sum of Square Numbers",
        "titleSlug": "sum-of-square-numbers",
        "content": "<p>Given a non-negative integer <code>c</code>, decide whether there&#39;re two integers <code>a</code> and <code>b</code> such that <code>a<sup>2</sup> + b<sup>2</sup> = c</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> c = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 1 * 1 + 2 * 2 = 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> c = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= c &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2453,
        "dislikes": 536,
        "similarQuestions": "[{\"title\": \"Valid Perfect Square\", \"titleSlug\": \"valid-perfect-square\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sum of Squares of Special Elements \", \"titleSlug\": \"sum-of-squares-of-special-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"189.1K\", \"totalSubmission\": \"555.5K\", \"totalAcceptedRaw\": 189054, \"totalSubmissionRaw\": 555471, \"acRate\": \"34.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-perfect-square",
          "title": "Valid Perfect Square",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sum-of-squares-of-special-elements",
          "title": "Sum of Squares of Special Elements ",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "find-the-derangement-of-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "634",
        "title": "Find the Derangement of An Array",
        "titleSlug": "find-the-derangement-of-an-array",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 217,
        "dislikes": 162,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"10.9K\", \"totalSubmission\": \"26K\", \"totalAcceptedRaw\": 10893, \"totalSubmissionRaw\": 25976, \"acRate\": \"41.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "design-log-storage-system": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "635",
        "title": "Design Log Storage System",
        "titleSlug": "design-log-storage-system",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 466,
        "dislikes": 207,
        "similarQuestions": "[{\"title\": \"Design In-Memory File System\", \"titleSlug\": \"design-in-memory-file-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"34.3K\", \"totalSubmission\": \"55.5K\", \"totalAcceptedRaw\": 34306, \"totalSubmissionRaw\": 55541, \"acRate\": \"61.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "design-in-memory-file-system",
          "title": "Design In-Memory File System",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "exclusive-time-of-functions": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "636",
        "title": "Exclusive Time of Functions",
        "titleSlug": "exclusive-time-of-functions",
        "content": "<p>On a <strong>single-threaded</strong> CPU, we execute a program containing <code>n</code> functions. Each function has a unique ID between <code>0</code> and <code>n-1</code>.</p>\n\n<p>Function calls are <strong>stored in a <a href=\"https://en.wikipedia.org/wiki/Call_stack\">call stack</a></strong>: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is <strong>the current function being executed</strong>. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.</p>\n\n<p>You are given a list <code>logs</code>, where <code>logs[i]</code> represents the <code>i<sup>th</sup></code> log message formatted as a string <code>&quot;{function_id}:{&quot;start&quot; | &quot;end&quot;}:{timestamp}&quot;</code>. For example, <code>&quot;0:start:3&quot;</code> means a function call with function ID <code>0</code> <strong>started at the beginning</strong> of timestamp <code>3</code>, and <code>&quot;1:end:2&quot;</code> means a function call with function ID <code>1</code> <strong>ended at the end</strong> of timestamp <code>2</code>. Note that a function can be called <b>multiple times, possibly recursively</b>.</p>\n\n<p>A function&#39;s <strong>exclusive time</strong> is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for <code>2</code> time units and another call executing for <code>1</code> time unit, the <strong>exclusive time</strong> is <code>2 + 1 = 3</code>.</p>\n\n<p>Return <em>the <strong>exclusive time</strong> of each function in an array, where the value at the </em><code>i<sup>th</sup></code><em> index represents the exclusive time for the function with ID </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/05/diag1b.png\" style=\"width: 550px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]\n<strong>Output:</strong> [3,4]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;0:start:6&quot;,&quot;0:end:6&quot;,&quot;0:end:7&quot;]\n<strong>Output:</strong> [8]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:6&quot;,&quot;1:end:6&quot;,&quot;0:end:7&quot;]\n<strong>Output:</strong> [7,1]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= function_id &lt; n</code></li>\n\t<li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li>\n\t<li>No two start events will happen at the same timestamp.</li>\n\t<li>No two end events will happen at the same timestamp.</li>\n\t<li>Each function has an <code>&quot;end&quot;</code> log for each <code>&quot;start&quot;</code> log.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1864,
        "dislikes": 2665,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"199.3K\", \"totalSubmission\": \"322.9K\", \"totalAcceptedRaw\": 199276, \"totalSubmissionRaw\": 322941, \"acRate\": \"61.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "average-of-levels-in-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "637",
        "title": "Average of Levels in Binary Tree",
        "titleSlug": "average-of-levels-in-binary-tree",
        "content": "Given the <code>root</code> of a binary tree, return <em>the average value of the nodes on each level in the form of an array</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg\" style=\"width: 292px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,15,7]\n<strong>Output:</strong> [3.00000,14.50000,11.00000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5091,
        "dislikes": 313,
        "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Level Order Traversal II\", \"titleSlug\": \"binary-tree-level-order-traversal-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"455K\", \"totalSubmission\": \"630.6K\", \"totalAcceptedRaw\": 455045, \"totalSubmissionRaw\": 630590, \"acRate\": \"72.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal",
          "title": "Binary Tree Level Order Traversal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "binary-tree-level-order-traversal-ii",
          "title": "Binary Tree Level Order Traversal II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "shopping-offers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "638",
        "title": "Shopping Offers",
        "titleSlug": "shopping-offers",
        "content": "<p>In LeetCode Store, there are <code>n</code> items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.</p>\n\n<p>You are given an integer array <code>price</code> where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> item, and an integer array <code>needs</code> where <code>needs[i]</code> is the number of pieces of the <code>i<sup>th</sup></code> item you want to buy.</p>\n\n<p>You are also given an array <code>special</code> where <code>special[i]</code> is of size <code>n + 1</code> where <code>special[i][j]</code> is the number of pieces of the <code>j<sup>th</sup></code> item in the <code>i<sup>th</sup></code> offer and <code>special[i][n]</code> (i.e., the last integer in the array) is the price of the <code>i<sup>th</sup></code> offer.</p>\n\n<p>Return <em>the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers</em>. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == price.length == needs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 6</code></li>\n\t<li><code>0 &lt;= price[i], needs[i] &lt;= 10</code></li>\n\t<li><code>1 &lt;= special.length &lt;= 100</code></li>\n\t<li><code>special[i].length == n + 1</code></li>\n\t<li><code>0 &lt;= special[i][j] &lt;= 50</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1435,
        "dislikes": 738,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Memoization", "slug": "memoization" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"57.4K\", \"totalSubmission\": \"109.7K\", \"totalAcceptedRaw\": 57356, \"totalSubmissionRaw\": 109706, \"acRate\": \"52.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Memoization", "slug": "memoization" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "decode-ways-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "639",
        "title": "Decode Ways II",
        "titleSlug": "decode-ways-ii",
        "content": "<p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p>\n\n<pre>\n&#39;A&#39; -&gt; &quot;1&quot;\n&#39;B&#39; -&gt; &quot;2&quot;\n...\n&#39;Z&#39; -&gt; &quot;26&quot;\n</pre>\n\n<p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>&quot;11106&quot;</code> can be mapped into:</p>\n\n<ul>\n\t<li><code>&quot;AAJF&quot;</code> with the grouping <code>(1 1 10 6)</code></li>\n\t<li><code>&quot;KJF&quot;</code> with the grouping <code>(11 10 6)</code></li>\n</ul>\n\n<p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>&quot;06&quot;</code> cannot be mapped into <code>&#39;F&#39;</code> since <code>&quot;6&quot;</code> is different from <code>&quot;06&quot;</code>.</p>\n\n<p><strong>In addition</strong> to the mapping above, an encoded message may contain the <code>&#39;*&#39;</code> character, which can represent any digit from <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code> (<code>&#39;0&#39;</code> is excluded). For example, the encoded message <code>&quot;1*&quot;</code> may represent any of the encoded messages <code>&quot;11&quot;</code>, <code>&quot;12&quot;</code>, <code>&quot;13&quot;</code>, <code>&quot;14&quot;</code>, <code>&quot;15&quot;</code>, <code>&quot;16&quot;</code>, <code>&quot;17&quot;</code>, <code>&quot;18&quot;</code>, or <code>&quot;19&quot;</code>. Decoding <code>&quot;1*&quot;</code> is equivalent to decoding <strong>any</strong> of the encoded messages it can represent.</p>\n\n<p>Given a string <code>s</code> consisting of digits and <code>&#39;*&#39;</code> characters, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;*&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The encoded message can represent any of the encoded messages &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, or &quot;9&quot;.\nEach of these can be decoded to the strings &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, and &quot;I&quot; respectively.\nHence, there are a total of 9 ways to decode &quot;*&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1*&quot;\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> The encoded message can represent any of the encoded messages &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;, &quot;16&quot;, &quot;17&quot;, &quot;18&quot;, or &quot;19&quot;.\nEach of these encoded messages have 2 ways to be decoded (e.g. &quot;11&quot; can be decoded to &quot;AA&quot; or &quot;K&quot;).\nHence, there are a total of 9 * 2 = 18 ways to decode &quot;1*&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2*&quot;\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The encoded message can represent any of the encoded messages &quot;21&quot;, &quot;22&quot;, &quot;23&quot;, &quot;24&quot;, &quot;25&quot;, &quot;26&quot;, &quot;27&quot;, &quot;28&quot;, or &quot;29&quot;.\n&quot;21&quot;, &quot;22&quot;, &quot;23&quot;, &quot;24&quot;, &quot;25&quot;, and &quot;26&quot; have 2 ways of being decoded, but &quot;27&quot;, &quot;28&quot;, and &quot;29&quot; only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode &quot;2*&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is a digit or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1520,
        "dislikes": 814,
        "similarQuestions": "[{\"title\": \"Decode Ways\", \"titleSlug\": \"decode-ways\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Separate Numbers\", \"titleSlug\": \"number-of-ways-to-separate-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Divide a Long Corridor\", \"titleSlug\": \"number-of-ways-to-divide-a-long-corridor\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"71.8K\", \"totalSubmission\": \"234.9K\", \"totalAcceptedRaw\": 71799, \"totalSubmissionRaw\": 234933, \"acRate\": \"30.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "decode-ways",
          "title": "Decode Ways",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-ways-to-separate-numbers",
          "title": "Number of Ways to Separate Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-ways-to-divide-a-long-corridor",
          "title": "Number of Ways to Divide a Long Corridor",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "solve-the-equation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "640",
        "title": "Solve the Equation",
        "titleSlug": "solve-the-equation",
        "content": "<p>Solve a given equation and return the value of <code>&#39;x&#39;</code> in the form of a string <code>&quot;x=#value&quot;</code>. The equation contains only <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code> operation, the variable <code>&#39;x&#39;</code> and its coefficient. You should return <code>&quot;No solution&quot;</code> if there is no solution for the equation, or <code>&quot;Infinite solutions&quot;</code> if there are infinite solutions for the equation.</p>\n\n<p>If there is exactly one solution for the equation, we ensure that the value of <code>&#39;x&#39;</code> is an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> equation = &quot;x+5-3+x=6+x-2&quot;\n<strong>Output:</strong> &quot;x=2&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> equation = &quot;x=x&quot;\n<strong>Output:</strong> &quot;Infinite solutions&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> equation = &quot;2x=x&quot;\n<strong>Output:</strong> &quot;x=0&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= equation.length &lt;= 1000</code></li>\n\t<li><code>equation</code> has exactly one <code>&#39;=&#39;</code>.</li>\n\t<li><code>equation</code> consists of integers with an absolute value in the range <code>[0, 100]</code> without any leading zeros, and the variable <code>&#39;x&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 472,
        "dislikes": 822,
        "similarQuestions": "[{\"title\": \"Fraction Addition and Subtraction\", \"titleSlug\": \"fraction-addition-and-subtraction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimize Result by Adding Parentheses to Expression\", \"titleSlug\": \"minimize-result-by-adding-parentheses-to-expression\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"38.1K\", \"totalSubmission\": \"87.3K\", \"totalAcceptedRaw\": 38056, \"totalSubmissionRaw\": 87265, \"acRate\": \"43.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "fraction-addition-and-subtraction",
          "title": "Fraction Addition and Subtraction",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimize-result-by-adding-parentheses-to-expression",
          "title": "Minimize Result by Adding Parentheses to Expression",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "design-circular-deque": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "641",
        "title": "Design Circular Deque",
        "titleSlug": "design-circular-deque",
        "content": "<p>Design your implementation of the circular double-ended queue (deque).</p>\n\n<p>Implement the <code>MyCircularDeque</code> class:</p>\n\n<ul>\n\t<li><code>MyCircularDeque(int k)</code> Initializes the deque with a maximum size of <code>k</code>.</li>\n\t<li><code>boolean insertFront()</code> Adds an item at the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>boolean insertLast()</code> Adds an item at the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>boolean deleteFront()</code> Deletes an item from the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>boolean deleteLast()</code> Deletes an item from the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li>\n\t<li><code>int getFront()</code> Returns the front item from the Deque. Returns <code>-1</code> if the deque is empty.</li>\n\t<li><code>int getRear()</code> Returns the last item from Deque. Returns <code>-1</code> if the deque is empty.</li>\n\t<li><code>boolean isEmpty()</code> Returns <code>true</code> if the deque is empty, or <code>false</code> otherwise.</li>\n\t<li><code>boolean isFull()</code> Returns <code>true</code> if the deque is full, or <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCircularDeque&quot;, &quot;insertLast&quot;, &quot;insertLast&quot;, &quot;insertFront&quot;, &quot;insertFront&quot;, &quot;getRear&quot;, &quot;isFull&quot;, &quot;deleteLast&quot;, &quot;insertFront&quot;, &quot;getFront&quot;]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\n<strong>Output</strong>\n[null, true, true, true, false, 2, true, true, true, 4]\n\n<strong>Explanation</strong>\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 1000</code></li>\n\t<li><code>0 &lt;= value &lt;= 1000</code></li>\n\t<li>At most <code>2000</code> calls will be made to <code>insertFront</code>, <code>insertLast</code>, <code>deleteFront</code>, <code>deleteLast</code>, <code>getFront</code>, <code>getRear</code>, <code>isEmpty</code>, <code>isFull</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1126,
        "dislikes": 74,
        "similarQuestions": "[{\"title\": \"Design Circular Queue\", \"titleSlug\": \"design-circular-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Front Middle Back Queue\", \"titleSlug\": \"design-front-middle-back-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Queue", "slug": "queue" }
        ],
        "stats": "{\"totalAccepted\": \"64.4K\", \"totalSubmission\": \"113.5K\", \"totalAcceptedRaw\": 64397, \"totalSubmissionRaw\": 113543, \"acRate\": \"56.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "design-circular-queue",
          "title": "Design Circular Queue",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "design-front-middle-back-queue",
          "title": "Design Front Middle Back Queue",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Queue", "slug": "queue" }
      ]
    }
  },
  "design-search-autocomplete-system": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "642",
        "title": "Design Search Autocomplete System",
        "titleSlug": "design-search-autocomplete-system",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 2060,
        "dislikes": 152,
        "similarQuestions": "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Data Stream", "slug": "data-stream" }
        ],
        "stats": "{\"totalAccepted\": \"135.8K\", \"totalSubmission\": \"278.6K\", \"totalAcceptedRaw\": 135812, \"totalSubmissionRaw\": 278630, \"acRate\": \"48.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "implement-trie-prefix-tree",
          "title": "Implement Trie (Prefix Tree)",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Data Stream", "slug": "data-stream" }
      ]
    }
  },
  "maximum-average-subarray-i": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "643",
        "title": "Maximum Average Subarray I",
        "titleSlug": "maximum-average-subarray-i",
        "content": "<p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p>\n\n<p>Find a contiguous subarray whose <strong>length is equal to</strong> <code>k</code> that has the maximum average value and return <em>this value</em>. Any answer with a calculation error less than <code>10<sup>-5</sup></code> will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,12,-5,-6,50,3], k = 4\n<strong>Output:</strong> 12.75000\n<strong>Explanation:</strong> Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5], k = 1\n<strong>Output:</strong> 5.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3229,
        "dislikes": 268,
        "similarQuestions": "[{\"title\": \"Maximum Average Subarray II\", \"titleSlug\": \"maximum-average-subarray-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"353.7K\", \"totalSubmission\": \"819.2K\", \"totalAcceptedRaw\": 353680, \"totalSubmissionRaw\": 819243, \"acRate\": \"43.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-average-subarray-ii",
          "title": "Maximum Average Subarray II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-radius-subarray-averages",
          "title": "K Radius Subarray Averages",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "maximum-average-subarray-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "644",
        "title": "Maximum Average Subarray II",
        "titleSlug": "maximum-average-subarray-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 608,
        "dislikes": 69,
        "similarQuestions": "[{\"title\": \"Maximum Average Subarray I\", \"titleSlug\": \"maximum-average-subarray-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"19.8K\", \"totalSubmission\": \"54.3K\", \"totalAcceptedRaw\": 19778, \"totalSubmissionRaw\": 54253, \"acRate\": \"36.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-average-subarray-i",
          "title": "Maximum Average Subarray I",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "set-mismatch": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "645",
        "title": "Set Mismatch",
        "titleSlug": "set-mismatch",
        "content": "<p>You have a set of integers <code>s</code>, which originally contains all the numbers from <code>1</code> to <code>n</code>. Unfortunately, due to some error, one of the numbers in <code>s</code> got duplicated to another number in the set, which results in <strong>repetition of one</strong> number and <strong>loss of another</strong> number.</p>\n\n<p>You are given an integer array <code>nums</code> representing the data status of this set after the error.</p>\n\n<p>Find the number that occurs twice and the number that is missing and return <em>them in the form of an array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,2,4]\n<strong>Output:</strong> [2,3]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> [1,2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3969,
        "dislikes": 926,
        "similarQuestions": "[{\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"296.4K\", \"totalSubmission\": \"698.2K\", \"totalAcceptedRaw\": 296414, \"totalSubmissionRaw\": 698226, \"acRate\": \"42.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-duplicate-number",
          "title": "Find the Duplicate Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "maximum-length-of-pair-chain": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "646",
        "title": "Maximum Length of Pair Chain",
        "titleSlug": "maximum-length-of-pair-chain",
        "content": "<p>You are given an array of <code>n</code> pairs <code>pairs</code> where <code>pairs[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> and <code>left<sub>i</sub> &lt; right<sub>i</sub></code>.</p>\n\n<p>A pair <code>p2 = [c, d]</code> <strong>follows</strong> a pair <code>p1 = [a, b]</code> if <code>b &lt; c</code>. A <strong>chain</strong> of pairs can be formed in this fashion.</p>\n\n<p>Return <em>the length longest chain which can be formed</em>.</p>\n\n<p>You do not need to use up all the given intervals. You can select pairs in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3],[3,4]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest chain is [1,2] -&gt; [3,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[7,8],[4,5]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest chain is [1,2] -&gt; [4,5] -&gt; [7,8].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == pairs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4435,
        "dislikes": 129,
        "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-decreasing Subsequences\", \"titleSlug\": \"non-decreasing-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Non-decreasing Subarray From Two Arrays\", \"titleSlug\": \"longest-non-decreasing-subarray-from-two-arrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"219.1K\", \"totalSubmission\": \"367.7K\", \"totalAcceptedRaw\": 219110, \"totalSubmissionRaw\": 367654, \"acRate\": \"59.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-increasing-subsequence",
          "title": "Longest Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "non-decreasing-subsequences",
          "title": "Non-decreasing Subsequences",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-non-decreasing-subarray-from-two-arrays",
          "title": "Longest Non-decreasing Subarray From Two Arrays",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "palindromic-substrings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "647",
        "title": "Palindromic Substrings",
        "titleSlug": "palindromic-substrings",
        "content": "<p>Given a string <code>s</code>, return <em>the number of <strong>palindromic substrings</strong> in it</em>.</p>\n\n<p>A string is a <strong>palindrome</strong> when it reads the same backward as forward.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaa&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9864,
        "dislikes": 208,
        "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Palindromic Subsequence\", \"titleSlug\": \"longest-palindromic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"655.2K\", \"totalSubmission\": \"961.1K\", \"totalAcceptedRaw\": 655191, \"totalSubmissionRaw\": 961104, \"acRate\": \"68.2%\"}",
        "hints": [
          "How can we reuse a previously computed palindrome to compute a larger palindrome?",
          "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
          "Complexity based hint:</br>\r\nIf we use brute force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-substring",
          "title": "Longest Palindromic Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-subsequence",
          "title": "Longest Palindromic Subsequence",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "How can we reuse a previously computed palindrome to compute a larger palindrome?",
        "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
        "Complexity based hint:</br>\r\nIf we use brute force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation?"
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "replace-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "648",
        "title": "Replace Words",
        "titleSlug": "replace-words",
        "content": "<p>In English, we have a concept called <strong>root</strong>, which can be followed by some other word to form another longer word - let&#39;s call this word <strong>successor</strong>. For example, when the <strong>root</strong> <code>&quot;an&quot;</code> is followed by the <strong>successor</strong> word <code>&quot;other&quot;</code>, we can form a new word <code>&quot;another&quot;</code>.</p>\n\n<p>Given a <code>dictionary</code> consisting of many <strong>roots</strong> and a <code>sentence</code> consisting of words separated by spaces, replace all the <strong>successors</strong> in the sentence with the <strong>root</strong> forming it. If a <strong>successor</strong> can be replaced by more than one <strong>root</strong>, replace it with the <strong>root</strong> that has <strong>the shortest length</strong>.</p>\n\n<p>Return <em>the <code>sentence</code></em> after the replacement.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dictionary = [&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;\n<strong>Output:</strong> &quot;the cat was rat by the bat&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], sentence = &quot;aadsfasf absbs bbab cadsfafs&quot;\n<strong>Output:</strong> &quot;a a b c&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>\n\t<li><code>dictionary[i]</code> consists of only lower-case letters.</li>\n\t<li><code>1 &lt;= sentence.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>sentence</code> consists of only lower-case letters and spaces.</li>\n\t<li>The number of words in <code>sentence</code> is in the range <code>[1, 1000]</code></li>\n\t<li>The length of each word in <code>sentence</code> is in the range <code>[1, 1000]</code></li>\n\t<li>Every two consecutive words in <code>sentence</code> will be separated by exactly one space.</li>\n\t<li><code>sentence</code> does not have leading or trailing spaces.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2181,
        "dislikes": 172,
        "similarQuestions": "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"130.8K\", \"totalSubmission\": \"208.4K\", \"totalAcceptedRaw\": 130801, \"totalSubmissionRaw\": 208424, \"acRate\": \"62.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "implement-trie-prefix-tree",
          "title": "Implement Trie (Prefix Tree)",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "dota2-senate": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "649",
        "title": "Dota2 Senate",
        "titleSlug": "dota2-senate",
        "content": "<p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p>\n\n<p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <strong>one</strong> of the two rights:</p>\n\n<ul>\n\t<li><strong>Ban one senator&#39;s right:</strong> A senator can make another senator lose all his rights in this and all the following rounds.</li>\n\t<li><strong>Announce the victory:</strong> If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li>\n</ul>\n\n<p>Given a string <code>senate</code> representing each senator&#39;s party belonging. The character <code>&#39;R&#39;</code> and <code>&#39;D&#39;</code> represent the Radiant party and the Dire party. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.</p>\n\n<p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p>\n\n<p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be <code>&quot;Radiant&quot;</code> or <code>&quot;Dire&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> senate = &quot;RD&quot;\n<strong>Output:</strong> &quot;Radiant&quot;\n<strong>Explanation:</strong> \nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in round 1. \nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> senate = &quot;RDD&quot;\n<strong>Output:</strong> &quot;Dire&quot;\n<strong>Explanation:</strong> \nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in round 1. \nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator&#39;s right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == senate.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>senate[i]</code> is either <code>&#39;R&#39;</code> or <code>&#39;D&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2129,
        "dislikes": 1646,
        "similarQuestions": "[{\"title\": \"Teemo Attacking\", \"titleSlug\": \"teemo-attacking\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Queue", "slug": "queue" }
        ],
        "stats": "{\"totalAccepted\": \"116.5K\", \"totalSubmission\": \"245.1K\", \"totalAcceptedRaw\": 116519, \"totalSubmissionRaw\": 245077, \"acRate\": \"47.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "teemo-attacking",
          "title": "Teemo Attacking",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Queue", "slug": "queue" }
      ]
    }
  },
  "2-keys-keyboard": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "650",
        "title": "2 Keys Keyboard",
        "titleSlug": "2-keys-keyboard",
        "content": "<p>There is only one character <code>&#39;A&#39;</code> on the screen of a notepad. You can perform one of two operations on this notepad for each step:</p>\n\n<ul>\n\t<li>Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).</li>\n\t<li>Paste: You can paste the characters which are copied last time.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the minimum number of operations to get the character</em> <code>&#39;A&#39;</code> <em>exactly</em> <code>n</code> <em>times on the screen</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Initially, we have one character &#39;A&#39;.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get &#39;AA&#39;.\nIn step 3, we use Paste operation to get &#39;AAA&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3404,
        "dislikes": 203,
        "similarQuestions": "[{\"title\": \"4 Keys Keyboard\", \"titleSlug\": \"4-keys-keyboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Broken Calculator\", \"titleSlug\": \"broken-calculator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Value After Replacing With Sum of Prime Factors\", \"titleSlug\": \"smallest-value-after-replacing-with-sum-of-prime-factors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Distinct Prime Factors of Product of Array\", \"titleSlug\": \"distinct-prime-factors-of-product-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"127.6K\", \"totalSubmission\": \"236.9K\", \"totalAcceptedRaw\": 127638, \"totalSubmissionRaw\": 236949, \"acRate\": \"53.9%\"}",
        "hints": [
          "How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "4-keys-keyboard",
          "title": "4 Keys Keyboard",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "broken-calculator",
          "title": "Broken Calculator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-value-after-replacing-with-sum-of-prime-factors",
          "title": "Smallest Value After Replacing With Sum of Prime Factors",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "distinct-prime-factors-of-product-of-array",
          "title": "Distinct Prime Factors of Product of Array",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "4-keys-keyboard": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "651",
        "title": "4 Keys Keyboard",
        "titleSlug": "4-keys-keyboard",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 691,
        "dislikes": 90,
        "similarQuestions": "[{\"title\": \"2 Keys Keyboard\", \"titleSlug\": \"2-keys-keyboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"28.4K\", \"totalSubmission\": \"50.6K\", \"totalAcceptedRaw\": 28391, \"totalSubmissionRaw\": 50613, \"acRate\": \"56.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "2-keys-keyboard",
          "title": "2 Keys Keyboard",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "find-duplicate-subtrees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "652",
        "title": "Find Duplicate Subtrees",
        "titleSlug": "find-duplicate-subtrees",
        "content": "<p>Given the <code>root</code>&nbsp;of a binary tree, return all <strong>duplicate subtrees</strong>.</p>\n\n<p>For each kind of duplicate subtrees, you only need to return the root node of any <b>one</b> of them.</p>\n\n<p>Two trees are <strong>duplicate</strong> if they have the <strong>same structure</strong> with the <strong>same node values</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e1.jpg\" style=\"width: 450px; height: 354px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,null,2,4,null,null,4]\n<strong>Output:</strong> [[2,4],[4]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e2.jpg\" style=\"width: 321px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/16/e33.jpg\" style=\"width: 450px; height: 303px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2,3,null,3,null]\n<strong>Output:</strong> [[2,3],[3]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the tree will be in the range <code>[1, 5000]</code></li>\n\t<li><code>-200 &lt;= Node.val &lt;= 200</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5663,
        "dislikes": 448,
        "similarQuestions": "[{\"title\": \"Serialize and Deserialize Binary Tree\", \"titleSlug\": \"serialize-and-deserialize-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize BST\", \"titleSlug\": \"serialize-and-deserialize-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Construct String from Binary Tree\", \"titleSlug\": \"construct-string-from-binary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Delete Duplicate Folders in System\", \"titleSlug\": \"delete-duplicate-folders-in-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"250.1K\", \"totalSubmission\": \"422.1K\", \"totalAcceptedRaw\": 250120, \"totalSubmissionRaw\": 422091, \"acRate\": \"59.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "serialize-and-deserialize-binary-tree",
          "title": "Serialize and Deserialize Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "serialize-and-deserialize-bst",
          "title": "Serialize and Deserialize BST",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "construct-string-from-binary-tree",
          "title": "Construct String from Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "delete-duplicate-folders-in-system",
          "title": "Delete Duplicate Folders in System",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "two-sum-iv-input-is-a-bst": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "653",
        "title": "Two Sum IV - Input is a BST",
        "titleSlug": "two-sum-iv-input-is-a-bst",
        "content": "<p>Given the <code>root</code> of a binary search tree and an integer <code>k</code>, return <code>true</code> <em>if there exist two elements in the BST such that their sum is equal to</em> <code>k</code>, <em>or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg\" style=\"width: 400px; height: 229px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], k = 9\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_2.jpg\" style=\"width: 400px; height: 229px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], k = 28\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>root</code> is guaranteed to be a <strong>valid</strong> binary search tree.</li>\n\t<li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 6519,
        "dislikes": 256,
        "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum II - Input Array Is Sorted\", \"titleSlug\": \"two-sum-ii-input-array-is-sorted\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum III - Data structure design\", \"titleSlug\": \"two-sum-iii-data-structure-design\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum BSTs\", \"titleSlug\": \"two-sum-bsts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"505.7K\", \"totalSubmission\": \"827.3K\", \"totalAcceptedRaw\": 505677, \"totalSubmissionRaw\": 827261, \"acRate\": \"61.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum",
          "title": "Two Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "two-sum-ii-input-array-is-sorted",
          "title": "Two Sum II - Input Array Is Sorted",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-iii-data-structure-design",
          "title": "Two Sum III - Data structure design",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "two-sum-bsts",
          "title": "Two Sum BSTs",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "maximum-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "654",
        "title": "Maximum Binary Tree",
        "titleSlug": "maximum-binary-tree",
        "content": "<p>You are given an integer array <code>nums</code> with no duplicates. A <strong>maximum binary tree</strong> can be built recursively from <code>nums</code> using the following algorithm:</p>\n\n<ol>\n\t<li>Create a root node whose value is the maximum value in <code>nums</code>.</li>\n\t<li>Recursively build the left subtree on the <strong>subarray prefix</strong> to the <strong>left</strong> of the maximum value.</li>\n\t<li>Recursively build the right subtree on the <strong>subarray suffix</strong> to the <strong>right</strong> of the maximum value.</li>\n</ol>\n\n<p>Return <em>the <strong>maximum binary tree</strong> built from </em><code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg\" style=\"width: 302px; height: 421px;\" />\n<pre>\n<strong>Input:</strong> nums = [3,2,1,6,0,5]\n<strong>Output:</strong> [6,3,5,null,2,0,null,null,1]\n<strong>Explanation:</strong> The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg\" style=\"width: 182px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> [3,null,2,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>All integers in <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5076,
        "dislikes": 330,
        "similarQuestions": "[{\"title\": \"Maximum Binary Tree II\", \"titleSlug\": \"maximum-binary-tree-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"277.7K\", \"totalSubmission\": \"326K\", \"totalAcceptedRaw\": 277680, \"totalSubmissionRaw\": 326017, \"acRate\": \"85.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-binary-tree-ii",
          "title": "Maximum Binary Tree II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "print-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "655",
        "title": "Print Binary Tree",
        "titleSlug": "print-binary-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, construct a <strong>0-indexed</strong> <code>m x n</code> string matrix <code>res</code> that represents a <strong>formatted layout</strong> of the tree. The formatted layout matrix should be constructed using the following rules:</p>\n\n<ul>\n\t<li>The <strong>height</strong> of the tree is <code>height</code>&nbsp;and the number of rows <code>m</code> should be equal to <code>height + 1</code>.</li>\n\t<li>The number of columns <code>n</code> should be equal to <code>2<sup>height+1</sup> - 1</code>.</li>\n\t<li>Place the <strong>root node</strong> in the <strong>middle</strong> of the <strong>top row</strong> (more formally, at location <code>res[0][(n-1)/2]</code>).</li>\n\t<li>For each node that has been placed in the matrix at position <code>res[r][c]</code>, place its <strong>left child</strong> at <code>res[r+1][c-2<sup>height-r-1</sup>]</code> and its <strong>right child</strong> at <code>res[r+1][c+2<sup>height-r-1</sup>]</code>.</li>\n\t<li>Continue this process until all the nodes in the tree have been placed.</li>\n\t<li>Any empty cells should contain the empty string <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p>Return <em>the constructed matrix </em><code>res</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/print1-tree.jpg\" style=\"width: 141px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> \n[[&quot;&quot;,&quot;1&quot;,&quot;&quot;],\n&nbsp;[&quot;2&quot;,&quot;&quot;,&quot;&quot;]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/print2-tree.jpg\" style=\"width: 207px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,4]\n<strong>Output:</strong> \n[[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],\n&nbsp;[&quot;&quot;,&quot;2&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;3&quot;,&quot;&quot;],\n&nbsp;[&quot;&quot;,&quot;&quot;,&quot;4&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 2<sup>10</sup>]</code>.</li>\n\t<li><code>-99 &lt;= Node.val &lt;= 99</code></li>\n\t<li>The depth of the tree will be in the range <code>[1, 10]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 444,
        "dislikes": 423,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"63.8K\", \"totalSubmission\": \"101.6K\", \"totalAcceptedRaw\": 63841, \"totalSubmissionRaw\": 101574, \"acRate\": \"62.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "coin-path": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "656",
        "title": "Coin Path",
        "titleSlug": "coin-path",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 244,
        "dislikes": 109,
        "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber II\", \"titleSlug\": \"house-robber-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"13.9K\", \"totalSubmission\": \"43.3K\", \"totalAcceptedRaw\": 13855, \"totalSubmissionRaw\": 43309, \"acRate\": \"32.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber-ii",
          "title": "House Robber II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "robot-return-to-origin": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "657",
        "title": "Robot Return to Origin",
        "titleSlug": "robot-return-to-origin",
        "content": "<p>There is a robot starting at the position <code>(0, 0)</code>, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at </strong><code>(0, 0)</code> after it completes its moves.</p>\n\n<p>You are given a string <code>moves</code> that represents the move sequence of the robot where <code>moves[i]</code> represents its <code>i<sup>th</sup></code> move. Valid moves are <code>&#39;R&#39;</code> (right), <code>&#39;L&#39;</code> (left), <code>&#39;U&#39;</code> (up), and <code>&#39;D&#39;</code> (down).</p>\n\n<p>Return <code>true</code><em> if the robot returns to the origin after it finishes all of its moves, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p><strong>Note</strong>: The way that the robot is &quot;facing&quot; is irrelevant. <code>&#39;R&#39;</code> will always make the robot move to the right once, <code>&#39;L&#39;</code> will always make it move left, etc. Also, assume that the magnitude of the robot&#39;s movement is the same for each move.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;UD&quot;\n<strong>Output:</strong> true\n<strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;LL&quot;\n<strong>Output:</strong> false\n<strong>Explanation</strong>: The robot moves left twice. It ends up two &quot;moves&quot; to the left of the origin. We return false because it is not at the origin at the end of its moves.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= moves.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>moves</code> only contains the characters <code>&#39;U&#39;</code>, <code>&#39;D&#39;</code>, <code>&#39;L&#39;</code> and <code>&#39;R&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2341,
        "dislikes": 739,
        "similarQuestions": "[{\"title\": \"Number of Provinces\", \"titleSlug\": \"number-of-provinces\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Execution of All Suffix Instructions Staying in a Grid\", \"titleSlug\": \"execution-of-all-suffix-instructions-staying-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Furthest Point From Origin\", \"titleSlug\": \"furthest-point-from-origin\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"405K\", \"totalSubmission\": \"536K\", \"totalAcceptedRaw\": 405020, \"totalSubmissionRaw\": 536042, \"acRate\": \"75.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-provinces",
          "title": "Number of Provinces",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "execution-of-all-suffix-instructions-staying-in-a-grid",
          "title": "Execution of All Suffix Instructions Staying in a Grid",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "furthest-point-from-origin",
          "title": "Furthest Point From Origin",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "find-k-closest-elements": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "658",
        "title": "Find K Closest Elements",
        "titleSlug": "find-k-closest-elements",
        "content": "<p>Given a <strong>sorted</strong> integer array <code>arr</code>, two integers <code>k</code> and <code>x</code>, return the <code>k</code> closest integers to <code>x</code> in the array. The result should also be sorted in ascending order.</p>\n\n<p>An integer <code>a</code> is closer to <code>x</code> than an integer <code>b</code> if:</p>\n\n<ul>\n\t<li><code>|a - x| &lt; |b - x|</code>, or</li>\n\t<li><code>|a - x| == |b - x|</code> and <code>a &lt; b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> arr = [1,2,3,4,5], k = 4, x = 3\n<strong>Output:</strong> [1,2,3,4]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> arr = [1,2,3,4,5], k = 4, x = -1\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= arr.length</code></li>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>arr</code> is sorted in <strong>ascending</strong> order.</li>\n\t<li><code>-10<sup>4</sup> &lt;= arr[i], x &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7822,
        "dislikes": 632,
        "similarQuestions": "[{\"title\": \"Guess Number Higher or Lower\", \"titleSlug\": \"guess-number-higher-or-lower\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Guess Number Higher or Lower II\", \"titleSlug\": \"guess-number-higher-or-lower-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Closest Number to Zero\", \"titleSlug\": \"find-closest-number-to-zero\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"494.3K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 494285, \"totalSubmissionRaw\": 1049938, \"acRate\": \"47.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "guess-number-higher-or-lower",
          "title": "Guess Number Higher or Lower",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "guess-number-higher-or-lower-ii",
          "title": "Guess Number Higher or Lower II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-k-th-smallest-pair-distance",
          "title": "Find K-th Smallest Pair Distance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-closest-number-to-zero",
          "title": "Find Closest Number to Zero",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "split-array-into-consecutive-subsequences": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "659",
        "title": "Split Array into Consecutive Subsequences",
        "titleSlug": "split-array-into-consecutive-subsequences",
        "content": "<p>You are given an integer array <code>nums</code> that is <strong>sorted in non-decreasing order</strong>.</p>\n\n<p>Determine if it is possible to split <code>nums</code> into <strong>one or more subsequences</strong> such that <strong>both</strong> of the following conditions are true:</p>\n\n<ul>\n\t<li>Each subsequence is a <strong>consecutive increasing sequence</strong> (i.e. each integer is <strong>exactly one</strong> more than the previous integer).</li>\n\t<li>All subsequences have a length of <code>3</code><strong> or more</strong>.</li>\n</ul>\n\n<p>Return <code>true</code><em> if you can split </em><code>nums</code><em> according to the above conditions, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subsequence</strong> of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., <code>[1,3,5]</code> is a subsequence of <code>[<u>1</u>,2,<u>3</u>,4,<u>5</u>]</code> while <code>[1,3,2]</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> nums can be split into the following subsequences:\n[<strong><u>1</u></strong>,<strong><u>2</u></strong>,<strong><u>3</u></strong>,3,4,5] --&gt; 1, 2, 3\n[1,2,3,<strong><u>3</u></strong>,<strong><u>4</u></strong>,<strong><u>5</u></strong>] --&gt; 3, 4, 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,3,4,4,5,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> nums can be split into the following subsequences:\n[<strong><u>1</u></strong>,<strong><u>2</u></strong>,<strong><u>3</u></strong>,3,<strong><u>4</u></strong>,4,<strong><u>5</u></strong>,5] --&gt; 1, 2, 3, 4, 5\n[1,2,3,<strong><u>3</u></strong>,4,<strong><u>4</u></strong>,5,<strong><u>5</u></strong>] --&gt; 3, 4, 5\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,4,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4344,
        "dislikes": 794,
        "similarQuestions": "[{\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Divide Array in Sets of K Consecutive Numbers\", \"titleSlug\": \"divide-array-in-sets-of-k-consecutive-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"127.4K\", \"totalSubmission\": \"250.2K\", \"totalAcceptedRaw\": 127449, \"totalSubmissionRaw\": 250157, \"acRate\": \"50.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "top-k-frequent-elements",
          "title": "Top K Frequent Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "divide-array-in-sets-of-k-consecutive-numbers",
          "title": "Divide Array in Sets of K Consecutive Numbers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "remove-9": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "660",
        "title": "Remove 9",
        "titleSlug": "remove-9",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 161,
        "dislikes": 203,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"10.6K\", \"totalSubmission\": \"18.5K\", \"totalAcceptedRaw\": 10600, \"totalSubmissionRaw\": 18465, \"acRate\": \"57.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "image-smoother": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "661",
        "title": "Image Smoother",
        "titleSlug": "image-smoother",
        "content": "<p>An <strong>image smoother</strong> is a filter of the size <code>3 x 3</code> that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg\" style=\"width: 493px; height: 493px;\" />\n<p>Given an <code>m x n</code> integer matrix <code>img</code> representing the grayscale of an image, return <em>the image after applying the smoother on each cell of it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg\" style=\"width: 613px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> img = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> [[0,0,0],[0,0,0],[0,0,0]]\n<strong>Explanation:</strong>\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg\" style=\"width: 613px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> img = [[100,200,100],[200,50,200],[100,200,100]]\n<strong>Output:</strong> [[137,141,137],[141,138,141],[137,141,137]]\n<strong>Explanation:</strong>\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == img.length</code></li>\n\t<li><code>n == img[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= img[i][j] &lt;= 255</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1063,
        "dislikes": 2861,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"156.1K\", \"totalSubmission\": \"233.3K\", \"totalAcceptedRaw\": 156057, \"totalSubmissionRaw\": 233304, \"acRate\": \"66.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "maximum-width-of-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "662",
        "title": "Maximum Width of Binary Tree",
        "titleSlug": "maximum-width-of-binary-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the <strong>maximum width</strong> of the given tree</em>.</p>\n\n<p>The <strong>maximum width</strong> of a tree is the maximum <strong>width</strong> among all levels.</p>\n\n<p>The <strong>width</strong> of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p>\n\n<p>It is <strong>guaranteed</strong> that the answer will in the range of a <strong>32-bit</strong> signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg\" style=\"width: 359px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5,3,null,9]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The maximum width exists in the third level with length 4 (5,3,null,9).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg\" style=\"width: 442px; height: 422px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5,null,null,9,6,null,7]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg\" style=\"width: 289px; height: 299px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The maximum width exists in the second level with length 2 (3,2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8374,
        "dislikes": 1160,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"347.1K\", \"totalSubmission\": \"811K\", \"totalAcceptedRaw\": 347143, \"totalSubmissionRaw\": 811036, \"acRate\": \"42.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "equal-tree-partition": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "663",
        "title": "Equal Tree Partition",
        "titleSlug": "equal-tree-partition",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 481,
        "dislikes": 37,
        "similarQuestions": "[{\"title\": \"Create Components With Same Value\", \"titleSlug\": \"create-components-with-same-value\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"30.4K\", \"totalSubmission\": \"73.4K\", \"totalAcceptedRaw\": 30425, \"totalSubmissionRaw\": 73391, \"acRate\": \"41.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "create-components-with-same-value",
          "title": "Create Components With Same Value",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "strange-printer": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "664",
        "title": "Strange Printer",
        "titleSlug": "strange-printer",
        "content": "<p>There is a strange printer with the following two special properties:</p>\n\n<ul>\n\t<li>The printer can only print a sequence of <strong>the same character</strong> each time.</li>\n\t<li>At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.</li>\n</ul>\n\n<p>Given a string <code>s</code>, return <em>the minimum number of turns the printer needed to print it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabbb&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Print &quot;aaa&quot; first and then print &quot;bbb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Print &quot;aaa&quot; first and then print &quot;b&quot; from the second place of the string, which will cover the existing character &#39;a&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2161,
        "dislikes": 208,
        "similarQuestions": "[{\"title\": \"Remove Boxes\", \"titleSlug\": \"remove-boxes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Strange Printer II\", \"titleSlug\": \"strange-printer-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"71.7K\", \"totalSubmission\": \"130.3K\", \"totalAcceptedRaw\": 71651, \"totalSubmissionRaw\": 130332, \"acRate\": \"55.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "remove-boxes",
          "title": "Remove Boxes",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "strange-printer-ii",
          "title": "Strange Printer II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "non-decreasing-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "665",
        "title": "Non-decreasing Array",
        "titleSlug": "non-decreasing-array",
        "content": "<p>Given an array <code>nums</code> with <code>n</code> integers, your task is to check if it could become non-decreasing by modifying <strong>at most one element</strong>.</p>\n\n<p>We define an array is non-decreasing if <code>nums[i] &lt;= nums[i + 1]</code> holds for every <code>i</code> (<strong>0-based</strong>) such that (<code>0 &lt;= i &lt;= n - 2</code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You could modify the first 4 to 1 to get a non-decreasing array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,1]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You cannot get a non-decreasing array by modifying at most one element.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5622,
        "dislikes": 768,
        "similarQuestions": "[{\"title\": \"Make Array Non-decreasing or Non-increasing\", \"titleSlug\": \"make-array-non-decreasing-or-non-increasing\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Good Days to Rob the Bank\", \"titleSlug\": \"find-good-days-to-rob-the-bank\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"254.6K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 254640, \"totalSubmissionRaw\": 1037625, \"acRate\": \"24.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "make-array-non-decreasing-or-non-increasing",
          "title": "Make Array Non-decreasing or Non-increasing",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-good-days-to-rob-the-bank",
          "title": "Find Good Days to Rob the Bank",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "path-sum-iv": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "666",
        "title": "Path Sum IV",
        "titleSlug": "path-sum-iv",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 374,
        "dislikes": 477,
        "similarQuestions": "[{\"title\": \"Path Sum\", \"titleSlug\": \"path-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Path Sum II\", \"titleSlug\": \"path-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Binary Tree Maximum Path Sum\", \"titleSlug\": \"binary-tree-maximum-path-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Path Sum III\", \"titleSlug\": \"path-sum-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"27.9K\", \"totalSubmission\": \"46.1K\", \"totalAcceptedRaw\": 27900, \"totalSubmissionRaw\": 46113, \"acRate\": \"60.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "path-sum",
          "title": "Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-ii",
          "title": "Path Sum II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "binary-tree-maximum-path-sum",
          "title": "Binary Tree Maximum Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iii",
          "title": "Path Sum III",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "beautiful-arrangement-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "667",
        "title": "Beautiful Arrangement II",
        "titleSlug": "beautiful-arrangement-ii",
        "content": "<p>Given two integers <code>n</code> and <code>k</code>, construct a list <code>answer</code> that contains <code>n</code> different positive integers ranging from <code>1</code> to <code>n</code> and obeys the following requirement:</p>\n\n<ul>\n\t<li>Suppose this list is <code>answer =&nbsp;[a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>]</code>, then the list <code>[|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|]</code> has exactly <code>k</code> distinct integers.</li>\n</ul>\n\n<p>Return <em>the list</em> <code>answer</code>. If there multiple valid answers, return <strong>any of them</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> [1,2,3]\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 2\n<strong>Output:</strong> [1,3,2]\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt; n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 778,
        "dislikes": 1044,
        "similarQuestions": "[{\"title\": \"Beautiful Arrangement\", \"titleSlug\": \"beautiful-arrangement\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"52.6K\", \"totalSubmission\": \"87.5K\", \"totalAcceptedRaw\": 52569, \"totalSubmissionRaw\": 87489, \"acRate\": \"60.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "beautiful-arrangement",
          "title": "Beautiful Arrangement",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "kth-smallest-number-in-multiplication-table": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "668",
        "title": "Kth Smallest Number in Multiplication Table",
        "titleSlug": "kth-smallest-number-in-multiplication-table",
        "content": "<p>Nearly everyone has used the <a href=\"https://en.wikipedia.org/wiki/Multiplication_table\" target=\"_blank\">Multiplication Table</a>. The multiplication table of size <code>m x n</code> is an integer matrix <code>mat</code> where <code>mat[i][j] == i * j</code> (<strong>1-indexed</strong>).</p>\n\n<p>Given three integers <code>m</code>, <code>n</code>, and <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> smallest element in the </em><code>m x n</code><em> multiplication table</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/02/multtable1-grid.jpg\" style=\"width: 500px; height: 254px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 3, k = 5\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The 5<sup>th</sup> smallest number is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/02/multtable2-grid.jpg\" style=\"width: 493px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 3, k = 6\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The 6<sup>th</sup> smallest number is 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= m * n</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2077,
        "dislikes": 55,
        "similarQuestions": "[{\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest Prime Fraction\", \"titleSlug\": \"k-th-smallest-prime-fraction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Eat All Grains\", \"titleSlug\": \"minimum-time-to-eat-all-grains\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"60.7K\", \"totalSubmission\": \"117.8K\", \"totalAcceptedRaw\": 60662, \"totalSubmissionRaw\": 117786, \"acRate\": \"51.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
          "title": "Kth Smallest Element in a Sorted Matrix",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-k-th-smallest-pair-distance",
          "title": "Find K-th Smallest Pair Distance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-th-smallest-prime-fraction",
          "title": "K-th Smallest Prime Fraction",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-time-to-eat-all-grains",
          "title": "Minimum Time to Eat All Grains",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "trim-a-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "669",
        "title": "Trim a Binary Search Tree",
        "titleSlug": "trim-a-binary-search-tree",
        "content": "<p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should <strong>not</strong> change the relative structure of the elements that will remain in the tree (i.e., any node&#39;s descendant should remain a descendant). It can be proven that there is a <strong>unique answer</strong>.</p>\n\n<p>Return <em>the root of the trimmed binary search tree</em>. Note that the root may change depending on the given bounds.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg\" style=\"width: 450px; height: 126px;\" />\n<pre>\n<strong>Input:</strong> root = [1,0,2], low = 1, high = 2\n<strong>Output:</strong> [1,null,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg\" style=\"width: 450px; height: 277px;\" />\n<pre>\n<strong>Input:</strong> root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n<strong>Output:</strong> [3,2,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The value of each node in the tree is <strong>unique</strong>.</li>\n\t<li><code>root</code> is guaranteed to be a valid binary search tree.</li>\n\t<li><code>0 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5679,
        "dislikes": 251,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"282.1K\", \"totalSubmission\": \"425.7K\", \"totalAcceptedRaw\": 282126, \"totalSubmissionRaw\": 425672, \"acRate\": \"66.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "maximum-swap": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "670",
        "title": "Maximum Swap",
        "titleSlug": "maximum-swap",
        "content": "<p>You are given an integer <code>num</code>. You can swap two digits at most once to get the maximum valued number.</p>\n\n<p>Return <em>the maximum valued number you can get</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 2736\n<strong>Output:</strong> 7236\n<strong>Explanation:</strong> Swap the number 2 and the number 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 9973\n<strong>Output:</strong> 9973\n<strong>Explanation:</strong> No swap.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3261,
        "dislikes": 185,
        "similarQuestions": "[{\"title\": \"Create Maximum Number\", \"titleSlug\": \"create-maximum-number\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"221K\", \"totalSubmission\": \"458.6K\", \"totalAcceptedRaw\": 220997, \"totalSubmissionRaw\": 458581, \"acRate\": \"48.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "create-maximum-number",
          "title": "Create Maximum Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "second-minimum-node-in-a-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "671",
        "title": "Second Minimum Node In a Binary Tree",
        "titleSlug": "second-minimum-node-in-a-binary-tree",
        "content": "<p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node&#39;s value is the smaller value among its two sub-nodes. More formally, the property&nbsp;<code>root.val = min(root.left.val, root.right.val)</code>&nbsp;always holds.</p>\n\n<p>Given such a binary tree, you need to output the <b>second minimum</b> value in the set made of all the nodes&#39; value in the whole tree.</p>\n\n<p>If no such second minimum value exists, output -1 instead.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg\" style=\"width: 431px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,5,null,null,5,7]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The smallest value is 2, the second smallest value is 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg\" style=\"width: 321px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The smallest value is 2, but there isn&#39;t any second smallest value.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 25]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>root.val == min(root.left.val, root.right.val)</code>&nbsp;for each internal node of the tree.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1773,
        "dislikes": 1842,
        "similarQuestions": "[{\"title\": \"Kth Smallest Element in a BST\", \"titleSlug\": \"kth-smallest-element-in-a-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"182.5K\", \"totalSubmission\": \"411.5K\", \"totalAcceptedRaw\": 182452, \"totalSubmissionRaw\": 411472, \"acRate\": \"44.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "kth-smallest-element-in-a-bst",
          "title": "Kth Smallest Element in a BST",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "bulb-switcher-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "672",
        "title": "Bulb Switcher II",
        "titleSlug": "bulb-switcher-ii",
        "content": "<p>There is a room with <code>n</code> bulbs labeled from <code>1</code> to <code>n</code> that all are turned on initially, and <strong>four buttons</strong> on the wall. Each of the four buttons has a different functionality where:</p>\n\n<ul>\n\t<li><strong>Button 1:</strong> Flips the status of all the bulbs.</li>\n\t<li><strong>Button 2:</strong> Flips the status of all the bulbs with even labels (i.e., <code>2, 4, ...</code>).</li>\n\t<li><strong>Button 3:</strong> Flips the status of all the bulbs with odd labels (i.e., <code>1, 3, ...</code>).</li>\n\t<li><strong>Button 4:</strong> Flips the status of all the bulbs with a label <code>j = 3k + 1</code> where <code>k = 0, 1, 2, ...</code> (i.e., <code>1, 4, 7, 10, ...</code>).</li>\n</ul>\n\n<p>You must make <strong>exactly</strong> <code>presses</code> button presses in total. For each press, you may pick <strong>any</strong> of the four buttons to press.</p>\n\n<p>Given the two integers <code>n</code> and <code>presses</code>, return <em>the number of <strong>different possible statuses</strong> after performing all </em><code>presses</code><em> button presses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, presses = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, presses = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, presses = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= presses &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 141,
        "dislikes": 207,
        "similarQuestions": "[{\"title\": \"Bulb Switcher\", \"titleSlug\": \"bulb-switcher\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Times Binary String Is Prefix-Aligned\", \"titleSlug\": \"number-of-times-binary-string-is-prefix-aligned\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"21.6K\", \"totalSubmission\": \"42.9K\", \"totalAcceptedRaw\": 21581, \"totalSubmissionRaw\": 42935, \"acRate\": \"50.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "bulb-switcher",
          "title": "Bulb Switcher",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-times-binary-string-is-prefix-aligned",
          "title": "Number of Times Binary String Is Prefix-Aligned",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "number-of-longest-increasing-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "673",
        "title": "Number of Longest Increasing Subsequence",
        "titleSlug": "number-of-longest-increasing-subsequence",
        "content": "<p>Given an integer array&nbsp;<code>nums</code>, return <em>the number of longest increasing subsequences.</em></p>\n\n<p><strong>Notice</strong> that the sequence has to be <strong>strictly</strong> increasing.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,4,7]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6538,
        "dislikes": 259,
        "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Continuous Increasing Subsequence\", \"titleSlug\": \"longest-continuous-increasing-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence II\", \"titleSlug\": \"longest-increasing-subsequence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Segment Tree", "slug": "segment-tree" }
        ],
        "stats": "{\"totalAccepted\": \"215K\", \"totalSubmission\": \"450.6K\", \"totalAcceptedRaw\": 215035, \"totalSubmissionRaw\": 450596, \"acRate\": \"47.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-increasing-subsequence",
          "title": "Longest Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "longest-continuous-increasing-subsequence",
          "title": "Longest Continuous Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-increasing-subsequence-ii",
          "title": "Longest Increasing Subsequence II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Segment Tree", "slug": "segment-tree" }
      ]
    }
  },
  "longest-continuous-increasing-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "674",
        "title": "Longest Continuous Increasing Subsequence",
        "titleSlug": "longest-continuous-increasing-subsequence",
        "content": "<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest <strong>continuous increasing subsequence</strong> (i.e. subarray)</em>. The subsequence must be <strong>strictly</strong> increasing.</p>\n\n<p>A <strong>continuous increasing subsequence</strong> is defined by two indices <code>l</code> and <code>r</code> (<code>l &lt; r</code>) such that it is <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> and for each <code>l &lt;= i &lt; r</code>, <code>nums[i] &lt; nums[i + 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,4,7]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2297,
        "dislikes": 178,
        "similarQuestions": "[{\"title\": \"Number of Longest Increasing Subsequence\", \"titleSlug\": \"number-of-longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Window Subsequence\", \"titleSlug\": \"minimum-window-subsequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence II\", \"titleSlug\": \"longest-increasing-subsequence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"249.1K\", \"totalSubmission\": \"499.6K\", \"totalAcceptedRaw\": 249131, \"totalSubmissionRaw\": 499581, \"acRate\": \"49.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-longest-increasing-subsequence",
          "title": "Number of Longest Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-subsequence",
          "title": "Minimum Window Subsequence",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-increasing-subsequence-ii",
          "title": "Longest Increasing Subsequence II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "cut-off-trees-for-golf-event": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "675",
        "title": "Cut Off Trees for Golf Event",
        "titleSlug": "cut-off-trees-for-golf-event",
        "content": "<p>You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an <code>m x n</code> matrix. In this matrix:</p>\n\n<ul>\n\t<li><code>0</code> means the cell cannot be walked through.</li>\n\t<li><code>1</code> represents an empty cell that can be walked through.</li>\n\t<li>A number greater than <code>1</code> represents a tree in a cell that can be walked through, and this number is the tree&#39;s height.</li>\n</ul>\n\n<p>In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.</p>\n\n<p>You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes <code>1</code> (an empty cell).</p>\n\n<p>Starting from the point <code>(0, 0)</code>, return <em>the minimum steps you need to walk to cut off all the trees</em>. If you cannot cut off all the trees, return <code>-1</code>.</p>\n\n<p><strong>Note:</strong> The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> forest = [[1,2,3],[0,0,4],[7,6,5]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> forest = [[1,2,3],[0,0,0],[7,6,5]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The trees in the bottom row cannot be accessed as the middle row is blocked.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> forest = [[2,3,4],[0,0,5],[8,7,6]]\n<strong>Output:</strong> 6\n<b>Explanation:</b> You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == forest.length</code></li>\n\t<li><code>n == forest[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>0 &lt;= forest[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>Heights of all trees are <strong>distinct</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1186,
        "dislikes": 661,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"65.8K\", \"totalSubmission\": \"192.5K\", \"totalAcceptedRaw\": 65761, \"totalSubmissionRaw\": 192515, \"acRate\": \"34.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "implement-magic-dictionary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "676",
        "title": "Implement Magic Dictionary",
        "titleSlug": "implement-magic-dictionary",
        "content": "<p>Design a data structure that is initialized with a list of <strong>different</strong> words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.</p>\n\n<p>Implement the&nbsp;<code>MagicDictionary</code>&nbsp;class:</p>\n\n<ul>\n\t<li><code>MagicDictionary()</code>&nbsp;Initializes the object.</li>\n\t<li><code>void buildDict(String[]&nbsp;dictionary)</code>&nbsp;Sets the data structure&nbsp;with an array of distinct strings <code>dictionary</code>.</li>\n\t<li><code>bool search(String searchWord)</code> Returns <code>true</code> if you can change <strong>exactly one character</strong> in <code>searchWord</code> to match any string in the data structure, otherwise returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MagicDictionary&quot;, &quot;buildDict&quot;, &quot;search&quot;, &quot;search&quot;, &quot;search&quot;, &quot;search&quot;]\n[[], [[&quot;hello&quot;, &quot;leetcode&quot;]], [&quot;hello&quot;], [&quot;hhllo&quot;], [&quot;hell&quot;], [&quot;leetcoded&quot;]]\n<strong>Output</strong>\n[null, null, false, true, false, false]\n\n<strong>Explanation</strong>\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([&quot;hello&quot;, &quot;leetcode&quot;]);\nmagicDictionary.search(&quot;hello&quot;); // return False\nmagicDictionary.search(&quot;hhllo&quot;); // We can change the second &#39;h&#39; to &#39;e&#39; to match &quot;hello&quot; so we return True\nmagicDictionary.search(&quot;hell&quot;); // return False\nmagicDictionary.search(&quot;leetcoded&quot;); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;dictionary.length &lt;= 100</code></li>\n\t<li><code>1 &lt;=&nbsp;dictionary[i].length &lt;= 100</code></li>\n\t<li><code>dictionary[i]</code> consists of only lower-case English letters.</li>\n\t<li>All the strings in&nbsp;<code>dictionary</code>&nbsp;are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;=&nbsp;searchWord.length &lt;= 100</code></li>\n\t<li><code>searchWord</code>&nbsp;consists of only lower-case English letters.</li>\n\t<li><code>buildDict</code>&nbsp;will be called only once before <code>search</code>.</li>\n\t<li>At most <code>100</code> calls will be made to <code>search</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1359,
        "dislikes": 203,
        "similarQuestions": "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Word in Dictionary\", \"titleSlug\": \"longest-word-in-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"77.7K\", \"totalSubmission\": \"135.9K\", \"totalAcceptedRaw\": 77655, \"totalSubmissionRaw\": 135931, \"acRate\": \"57.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "implement-trie-prefix-tree",
          "title": "Implement Trie (Prefix Tree)",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-word-in-dictionary",
          "title": "Longest Word in Dictionary",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "map-sum-pairs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "677",
        "title": "Map Sum Pairs",
        "titleSlug": "map-sum-pairs",
        "content": "<p>Design a map that allows you to do the following:</p>\n\n<ul>\n\t<li>Maps a string key to a given value.</li>\n\t<li>Returns the sum of the values that have a key with a prefix equal to a given string.</li>\n</ul>\n\n<p>Implement the <code>MapSum</code> class:</p>\n\n<ul>\n\t<li><code>MapSum()</code> Initializes the <code>MapSum</code> object.</li>\n\t<li><code>void insert(String key, int val)</code> Inserts the <code>key-val</code> pair into the map. If the <code>key</code> already existed, the original <code>key-value</code> pair will be overridden to the new one.</li>\n\t<li><code>int sum(string prefix)</code> Returns the sum of all the pairs&#39; value whose <code>key</code> starts with the <code>prefix</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MapSum&quot;, &quot;insert&quot;, &quot;sum&quot;, &quot;insert&quot;, &quot;sum&quot;]\n[[], [&quot;apple&quot;, 3], [&quot;ap&quot;], [&quot;app&quot;, 2], [&quot;ap&quot;]]\n<strong>Output</strong>\n[null, null, 3, null, 5]\n\n<strong>Explanation</strong>\nMapSum mapSum = new MapSum();\nmapSum.insert(&quot;apple&quot;, 3);  \nmapSum.sum(&quot;ap&quot;);           // return 3 (<u>ap</u>ple = 3)\nmapSum.insert(&quot;app&quot;, 2);    \nmapSum.sum(&quot;ap&quot;);           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li>\n\t<li><code>key</code> and <code>prefix</code> consist of only lowercase English letters.</li>\n\t<li><code>1 &lt;= val &lt;= 1000</code></li>\n\t<li>At most <code>50</code> calls will be made to <code>insert</code> and <code>sum</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1605,
        "dislikes": 147,
        "similarQuestions": "[{\"title\": \"Sort the Jumbled Numbers\", \"titleSlug\": \"sort-the-jumbled-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Prefix Scores of Strings\", \"titleSlug\": \"sum-of-prefix-scores-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"111K\", \"totalSubmission\": \"195.8K\", \"totalAcceptedRaw\": 110972, \"totalSubmissionRaw\": 195826, \"acRate\": \"56.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "sort-the-jumbled-numbers",
          "title": "Sort the Jumbled Numbers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sum-of-prefix-scores-of-strings",
          "title": "Sum of Prefix Scores of Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "valid-parenthesis-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "678",
        "title": "Valid Parenthesis String",
        "titleSlug": "valid-parenthesis-string",
        "content": "<p>Given a string <code>s</code> containing only three types of characters: <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code> and <code>&#39;*&#39;</code>, return <code>true</code> <em>if</em> <code>s</code> <em>is <strong>valid</strong></em>.</p>\n\n<p>The following rules define a <strong>valid</strong> string:</p>\n\n<ul>\n\t<li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li>\n\t<li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li>\n\t<li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li>\n\t<li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"()\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"(*)\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"(*))\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5029,
        "dislikes": 128,
        "similarQuestions": "[{\"title\": \"Special Binary String\", \"titleSlug\": \"special-binary-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if a Parentheses String Can Be Valid\", \"titleSlug\": \"check-if-a-parentheses-string-can-be-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"238.1K\", \"totalSubmission\": \"687.5K\", \"totalAcceptedRaw\": 238127, \"totalSubmissionRaw\": 687510, \"acRate\": \"34.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "special-binary-string",
          "title": "Special Binary String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "check-if-a-parentheses-string-can-be-valid",
          "title": "Check if a Parentheses String Can Be Valid",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "24-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "679",
        "title": "24 Game",
        "titleSlug": "24-game",
        "content": "<p>You are given an integer array <code>cards</code> of length <code>4</code>. You have four cards, each containing a number in the range <code>[1, 9]</code>. You should arrange the numbers on these cards in a mathematical expression using the operators <code>[&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;]</code> and the parentheses <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code> to get the value 24.</p>\n\n<p>You are restricted with the following rules:</p>\n\n<ul>\n\t<li>The division operator <code>&#39;/&#39;</code> represents real division, not integer division.\n\n\t<ul>\n\t\t<li>For example, <code>4 / (1 - 2 / 3) = 4 / (1 / 3) = 12</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Every operation done is between two numbers. In particular, we cannot use <code>&#39;-&#39;</code> as a unary operator.\n\t<ul>\n\t\t<li>For example, if <code>cards = [1, 1, 1, 1]</code>, the expression <code>&quot;-1 - 1 - 1 - 1&quot;</code> is <strong>not allowed</strong>.</li>\n\t</ul>\n\t</li>\n\t<li>You cannot concatenate numbers together\n\t<ul>\n\t\t<li>For example, if <code>cards = [1, 2, 1, 2]</code>, the expression <code>&quot;12 + 12&quot;</code> is not valid.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <code>true</code> if you can get such expression that evaluates to <code>24</code>, and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [4,1,8,7]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> (8-4) * (7-1) = 24\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [1,2,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>cards.length == 4</code></li>\n\t<li><code>1 &lt;= cards[i] &lt;= 9</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1436,
        "dislikes": 246,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"75K\", \"totalSubmission\": \"152.3K\", \"totalAcceptedRaw\": 74980, \"totalSubmissionRaw\": 152346, \"acRate\": \"49.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "valid-palindrome-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "680",
        "title": "Valid Palindrome II",
        "titleSlug": "valid-palindrome-ii",
        "content": "<p>Given a string <code>s</code>, return <code>true</code> <em>if the </em><code>s</code><em> can be palindrome after deleting <strong>at most one</strong> character from it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abca&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You could delete the character &#39;c&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7927,
        "dislikes": 410,
        "similarQuestions": "[{\"title\": \"Valid Palindrome\", \"titleSlug\": \"valid-palindrome\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome III\", \"titleSlug\": \"valid-palindrome-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome IV\", \"titleSlug\": \"valid-palindrome-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"672.6K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 672564, \"totalSubmissionRaw\": 1681343, \"acRate\": \"40.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-palindrome",
          "title": "Valid Palindrome",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "valid-palindrome-iii",
          "title": "Valid Palindrome III",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "valid-palindrome-iv",
          "title": "Valid Palindrome IV",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "next-closest-time": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "681",
        "title": "Next Closest Time",
        "titleSlug": "next-closest-time",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 716,
        "dislikes": 1053,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Enumeration", "slug": "enumeration" }
        ],
        "stats": "{\"totalAccepted\": \"104.9K\", \"totalSubmission\": \"225.8K\", \"totalAcceptedRaw\": 104922, \"totalSubmissionRaw\": 225826, \"acRate\": \"46.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Enumeration", "slug": "enumeration" }
      ]
    }
  },
  "baseball-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "682",
        "title": "Baseball Game",
        "titleSlug": "baseball-game",
        "content": "<p>You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.</p>\n\n<p>You are given a list of strings <code>operations</code>, where <code>operations[i]</code> is the <code>i<sup>th</sup></code> operation you must apply to the record and is one of the following:</p>\n\n<ul>\n\t<li>An integer <code>x</code>.\n\n\t<ul>\n\t\t<li>Record a new score of <code>x</code>.</li>\n\t</ul>\n\t</li>\n\t<li><code>&#39;+&#39;</code>.\n\t<ul>\n\t\t<li>Record a new score that is the sum of the previous two scores.</li>\n\t</ul>\n\t</li>\n\t<li><code>&#39;D&#39;</code>.\n\t<ul>\n\t\t<li>Record a new score that is the double of the previous score.</li>\n\t</ul>\n\t</li>\n\t<li><code>&#39;C&#39;</code>.\n\t<ul>\n\t\t<li>Invalidate the previous score, removing it from the record.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the sum of all the scores on the record after applying all the operations</em>.</p>\n\n<p>The test cases are generated such that the answer and all intermediate calculations fit in a <strong>32-bit</strong> integer and that all operations are valid.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]\n<strong>Output:</strong> 30\n<strong>Explanation:</strong>\n&quot;5&quot; - Add 5 to the record, record is now [5].\n&quot;2&quot; - Add 2 to the record, record is now [5, 2].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [5].\n&quot;D&quot; - Add 2 * 5 = 10 to the record, record is now [5, 10].\n&quot;+&quot; - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]\n<strong>Output:</strong> 27\n<strong>Explanation:</strong>\n&quot;5&quot; - Add 5 to the record, record is now [5].\n&quot;-2&quot; - Add -2 to the record, record is now [5, -2].\n&quot;4&quot; - Add 4 to the record, record is now [5, -2, 4].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [5, -2].\n&quot;D&quot; - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n&quot;9&quot; - Add 9 to the record, record is now [5, -2, -4, 9].\n&quot;+&quot; - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n&quot;+&quot; - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ops = [&quot;1&quot;,&quot;C&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\n&quot;1&quot; - Add 1 to the record, record is now [1].\n&quot;C&quot; - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= operations.length &lt;= 1000</code></li>\n\t<li><code>operations[i]</code> is <code>&quot;C&quot;</code>, <code>&quot;D&quot;</code>, <code>&quot;+&quot;</code>, or a string representing an integer in the range <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code>.</li>\n\t<li>For operation <code>&quot;+&quot;</code>, there will always be at least two previous scores on the record.</li>\n\t<li>For operations <code>&quot;C&quot;</code> and <code>&quot;D&quot;</code>, there will always be at least one previous score on the record.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2674,
        "dislikes": 1866,
        "similarQuestions": "[{\"title\": \"Crawler Log Folder\", \"titleSlug\": \"crawler-log-folder\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"309.1K\", \"totalSubmission\": \"409.7K\", \"totalAcceptedRaw\": 309128, \"totalSubmissionRaw\": 409667, \"acRate\": \"75.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "crawler-log-folder",
          "title": "Crawler Log Folder",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "k-empty-slots": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "683",
        "title": "K Empty Slots",
        "titleSlug": "k-empty-slots",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 790,
        "dislikes": 689,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"60.3K\", \"totalSubmission\": \"162.9K\", \"totalAcceptedRaw\": 60315, \"totalSubmissionRaw\": 162929, \"acRate\": \"37.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Indexed Tree", "slug": "binary-indexed-tree" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "redundant-connection": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "684",
        "title": "Redundant Connection",
        "titleSlug": "redundant-connection",
        "content": "<p>In this problem, a tree is an <strong>undirected graph</strong> that is connected and has no cycles.</p>\n\n<p>You are given a graph that started as a tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>, with one additional edge added. The added edge has two <strong>different</strong> vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed. The graph is represented as an array <code>edges</code> of length <code>n</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the graph.</p>\n\n<p>Return <em>an edge that can be removed so that the resulting graph is a tree of </em><code>n</code><em> nodes</em>. If there are multiple answers, return the answer that occurs last in the input.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> edges = [[1,2],[1,3],[2,3]]\n<strong>Output:</strong> [2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg\" style=\"width: 382px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\n<strong>Output:</strong> [1,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 1000</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= edges.length</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no repeated edges.</li>\n\t<li>The given graph is connected.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5926,
        "dislikes": 380,
        "similarQuestions": "[{\"title\": \"Redundant Connection II\", \"titleSlug\": \"redundant-connection-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Accounts Merge\", \"titleSlug\": \"accounts-merge\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Employees to Be Invited to a Meeting\", \"titleSlug\": \"maximum-employees-to-be-invited-to-a-meeting\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Shortest Cycle in a Graph\", \"titleSlug\": \"shortest-cycle-in-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"325.1K\", \"totalSubmission\": \"519.1K\", \"totalAcceptedRaw\": 325094, \"totalSubmissionRaw\": 519146, \"acRate\": \"62.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "redundant-connection-ii",
          "title": "Redundant Connection II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "accounts-merge",
          "title": "Accounts Merge",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-employees-to-be-invited-to-a-meeting",
          "title": "Maximum Employees to Be Invited to a Meeting",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "shortest-cycle-in-a-graph",
          "title": "Shortest Cycle in a Graph",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "redundant-connection-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "685",
        "title": "Redundant Connection II",
        "titleSlug": "redundant-connection-ii",
        "content": "<p>In this problem, a rooted tree is a <b>directed</b> graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.</p>\n\n<p>The given input is a directed graph that started as a rooted tree with <code>n</code> nodes (with distinct values from <code>1</code> to <code>n</code>), with one additional directed edge added. The added edge has two different vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed.</p>\n\n<p>The resulting graph is given as a 2D-array of <code>edges</code>. Each element of <code>edges</code> is a pair <code>[u<sub>i</sub>, v<sub>i</sub>]</code> that represents a <b>directed</b> edge connecting nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, where <code>u<sub>i</sub></code> is a parent of child <code>v<sub>i</sub></code>.</p>\n\n<p>Return <em>an edge that can be removed so that the resulting graph is a rooted tree of</em> <code>n</code> <em>nodes</em>. If there are multiple answers, return the answer that occurs last in the given 2D-array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/graph1.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> edges = [[1,2],[1,3],[2,3]]\n<strong>Output:</strong> [2,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/20/graph2.jpg\" style=\"width: 222px; height: 382px;\" />\n<pre>\n<strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\n<strong>Output:</strong> [4,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 1000</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2252,
        "dislikes": 309,
        "similarQuestions": "[{\"title\": \"Redundant Connection\", \"titleSlug\": \"redundant-connection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"66.7K\", \"totalSubmission\": \"194.8K\", \"totalAcceptedRaw\": 66737, \"totalSubmissionRaw\": 194769, \"acRate\": \"34.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "redundant-connection",
          "title": "Redundant Connection",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "repeated-string-match": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "686",
        "title": "Repeated String Match",
        "titleSlug": "repeated-string-match",
        "content": "<p>Given two strings <code>a</code> and <code>b</code>, return <em>the minimum number of times you should repeat string </em><code>a</code><em> so that string</em> <code>b</code> <em>is a substring of it</em>. If it is impossible for <code>b</code>\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of <code>a</code> after repeating it, return <code>-1</code>.</p>\n\n<p><strong>Notice:</strong> string <code>&quot;abc&quot;</code> repeated 0 times is <code>&quot;&quot;</code>, repeated 1 time is <code>&quot;abc&quot;</code> and repeated 2 times is <code>&quot;abcabc&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;abcd&quot;, b = &quot;cdabcdab&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We return 3 because by repeating a three times &quot;ab<strong>cdabcdab</strong>cd&quot;, b is a substring of it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;a&quot;, b = &quot;aa&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2415,
        "dislikes": 970,
        "similarQuestions": "[{\"title\": \"Repeated Substring Pattern\", \"titleSlug\": \"repeated-substring-pattern\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "String Matching", "slug": "string-matching" }
        ],
        "stats": "{\"totalAccepted\": \"155.7K\", \"totalSubmission\": \"450.4K\", \"totalAcceptedRaw\": 155728, \"totalSubmissionRaw\": 450439, \"acRate\": \"34.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "repeated-substring-pattern",
          "title": "Repeated Substring Pattern",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "String Matching", "slug": "string-matching" }
      ]
    }
  },
  "longest-univalue-path": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "687",
        "title": "Longest Univalue Path",
        "titleSlug": "longest-univalue-path",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the length of the longest path, where each node in the path has the same value</em>. This path may or may not pass through the root.</p>\n\n<p><strong>The length of the path</strong> between two nodes is represented by the number of edges between them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg\" style=\"width: 450px; height: 238px;\" />\n<pre>\n<strong>Input:</strong> root = [5,4,5,1,1,null,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The shown image shows that the longest path of the same value (i.e. 5).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg\" style=\"width: 450px; height: 238px;\" />\n<pre>\n<strong>Input:</strong> root = [1,4,5,4,4,null,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The shown image shows that the longest path of the same value (i.e. 4).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>The depth of the tree will not exceed <code>1000</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4120,
        "dislikes": 663,
        "similarQuestions": "[{\"title\": \"Binary Tree Maximum Path Sum\", \"titleSlug\": \"binary-tree-maximum-path-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Univalue Subtrees\", \"titleSlug\": \"count-univalue-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum III\", \"titleSlug\": \"path-sum-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Path With Different Adjacent Characters\", \"titleSlug\": \"longest-path-with-different-adjacent-characters\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"172.9K\", \"totalSubmission\": \"422.1K\", \"totalAcceptedRaw\": 172899, \"totalSubmissionRaw\": 422111, \"acRate\": \"41.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "binary-tree-maximum-path-sum",
          "title": "Binary Tree Maximum Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-univalue-subtrees",
          "title": "Count Univalue Subtrees",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "path-sum-iii",
          "title": "Path Sum III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-path-with-different-adjacent-characters",
          "title": "Longest Path With Different Adjacent Characters",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "knight-probability-in-chessboard": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "688",
        "title": "Knight Probability in Chessboard",
        "titleSlug": "knight-probability-in-chessboard",
        "content": "<p>On an <code>n x n</code> chessboard, a knight starts at the cell <code>(row, column)</code> and attempts to make exactly <code>k</code> moves. The rows and columns are <strong>0-indexed</strong>, so the top-left cell is <code>(0, 0)</code>, and the bottom-right cell is <code>(n - 1, n - 1)</code>.</p>\n\n<p>A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.</p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/knight.png\" style=\"width: 300px; height: 300px;\" />\n<p>Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.</p>\n\n<p>The knight continues moving until it has made exactly <code>k</code> moves or has moved off the chessboard.</p>\n\n<p>Return <em>the probability that the knight remains on the board after it has stopped moving</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 2, row = 0, column = 0\n<strong>Output:</strong> 0.06250\n<strong>Explanation:</strong> There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 0, row = 0, column = 0\n<strong>Output:</strong> 1.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 25</code></li>\n\t<li><code>0 &lt;= k &lt;= 100</code></li>\n\t<li><code>0 &lt;= row, column &lt;= n - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3738,
        "dislikes": 452,
        "similarQuestions": "[{\"title\": \"Out of Boundary Paths\", \"titleSlug\": \"out-of-boundary-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"148.7K\", \"totalSubmission\": \"264.7K\", \"totalAcceptedRaw\": 148671, \"totalSubmissionRaw\": 264705, \"acRate\": \"56.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "out-of-boundary-paths",
          "title": "Out of Boundary Paths",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "maximum-sum-of-3-non-overlapping-subarrays": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "689",
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "titleSlug": "maximum-sum-of-3-non-overlapping-subarrays",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, find three non-overlapping subarrays of length <code>k</code> with maximum sum and return them.</p>\n\n<p>Return the result as a list of indices representing the starting position of each interval (<strong>0-indexed</strong>). If there are multiple answers, return the lexicographically smallest one.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,6,7,5,1], k = 2\n<strong>Output:</strong> [0,3,5]\n<strong>Explanation:</strong> Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,1,2,1,2,1], k = 2\n<strong>Output:</strong> [0,2,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;&nbsp;2<sup>16</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= floor(nums.length / 3)</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1918,
        "dislikes": 109,
        "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock III\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"71K\", \"totalSubmission\": \"143.9K\", \"totalAcceptedRaw\": 71030, \"totalSubmissionRaw\": 143878, \"acRate\": \"49.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "best-time-to-buy-and-sell-stock-iii",
          "title": "Best Time to Buy and Sell Stock III",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "employee-importance": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "690",
        "title": "Employee Importance",
        "titleSlug": "employee-importance",
        "content": "<p>You have a data structure of employee information, including the employee&#39;s unique ID, importance value, and direct subordinates&#39; IDs.</p>\n\n<p>You are given an array of employees <code>employees</code> where:</p>\n\n<ul>\n\t<li><code>employees[i].id</code> is the ID of the <code>i<sup>th</sup></code> employee.</li>\n\t<li><code>employees[i].importance</code> is the importance value of the <code>i<sup>th</sup></code> employee.</li>\n\t<li><code>employees[i].subordinates</code> is a list of the IDs of the direct subordinates of the <code>i<sup>th</sup></code> employee.</li>\n</ul>\n\n<p>Given an integer <code>id</code> that represents an employee&#39;s ID, return <em>the <strong>total</strong> importance value of this employee and all their direct and indirect subordinates</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/31/emp1-tree.jpg\" style=\"width: 400px; height: 258px;\" />\n<pre>\n<strong>Input:</strong> employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/31/emp2-tree.jpg\" style=\"width: 362px; height: 361px;\" />\n<pre>\n<strong>Input:</strong> employees = [[1,2,[5]],[5,-3,[]]], id = 5\n<strong>Output:</strong> -3\n<strong>Explanation:</strong> Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= employees.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= employees[i].id &lt;= 2000</code></li>\n\t<li>All <code>employees[i].id</code> are <strong>unique</strong>.</li>\n\t<li><code>-100 &lt;= employees[i].importance &lt;= 100</code></li>\n\t<li>One employee has at most one direct leader and may have several subordinates.</li>\n\t<li>The IDs in <code>employees[i].subordinates</code> are valid IDs.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2014,
        "dislikes": 1326,
        "similarQuestions": "[{\"title\": \"Nested List Weight Sum\", \"titleSlug\": \"nested-list-weight-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"203K\", \"totalSubmission\": \"306.1K\", \"totalAcceptedRaw\": 203023, \"totalSubmissionRaw\": 306051, \"acRate\": \"66.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "nested-list-weight-sum",
          "title": "Nested List Weight Sum",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "stickers-to-spell-word": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "691",
        "title": "Stickers to Spell Word",
        "titleSlug": "stickers-to-spell-word",
        "content": "<p>We are given <code>n</code> different types of <code>stickers</code>. Each sticker has a lowercase English word on it.</p>\n\n<p>You would like to spell out the given string <code>target</code> by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.</p>\n\n<p>Return <em>the minimum number of stickers that you need to spell out </em><code>target</code>. If the task is impossible, return <code>-1</code>.</p>\n\n<p><strong>Note:</strong> In all test cases, all words were chosen randomly from the <code>1000</code> most common US English words, and <code>target</code> was chosen as a concatenation of two random words.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stickers = [&quot;with&quot;,&quot;example&quot;,&quot;science&quot;], target = &quot;thehat&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nWe can use 2 &quot;with&quot; stickers, and 1 &quot;example&quot; sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target &quot;thehat&quot;.\nAlso, this is the minimum number of stickers necessary to form the target string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stickers = [&quot;notice&quot;,&quot;possible&quot;], target = &quot;basicbasic&quot;\n<strong>Output:</strong> -1\nExplanation:\nWe cannot form the target &quot;basicbasic&quot; from cutting letters from the given stickers.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == stickers.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= stickers[i].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= target.length &lt;= 15</code></li>\n\t<li><code>stickers[i]</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1129,
        "dislikes": 87,
        "similarQuestions": "[{\"title\": \"Ransom Note\", \"titleSlug\": \"ransom-note\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"51.1K\", \"totalSubmission\": \"108.1K\", \"totalAcceptedRaw\": 51116, \"totalSubmissionRaw\": 108051, \"acRate\": \"47.3%\"}",
        "hints": [
          "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "ransom-note",
          "title": "Ransom Note",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "top-k-frequent-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "692",
        "title": "Top K Frequent Words",
        "titleSlug": "top-k-frequent-words",
        "content": "<p>Given an array of strings <code>words</code> and an integer <code>k</code>, return <em>the </em><code>k</code><em> most frequent strings</em>.</p>\n\n<p>Return the answer <strong>sorted</strong> by <strong>the frequency</strong> from highest to lowest. Sort the words with the same frequency by their <strong>lexicographical order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;i&quot;,&quot;love&quot;,&quot;leetcode&quot;,&quot;i&quot;,&quot;love&quot;,&quot;coding&quot;], k = 2\n<strong>Output:</strong> [&quot;i&quot;,&quot;love&quot;]\n<strong>Explanation:</strong> &quot;i&quot; and &quot;love&quot; are the two most frequent words.\nNote that &quot;i&quot; comes before &quot;love&quot; due to a lower alphabetical order.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;the&quot;,&quot;day&quot;,&quot;is&quot;,&quot;sunny&quot;,&quot;the&quot;,&quot;the&quot;,&quot;the&quot;,&quot;sunny&quot;,&quot;is&quot;,&quot;is&quot;], k = 4\n<strong>Output:</strong> [&quot;the&quot;,&quot;is&quot;,&quot;sunny&quot;,&quot;day&quot;]\n<strong>Explanation:</strong> &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; and &quot;day&quot; are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li><code>k</code> is in the range <code>[1, The number of <strong>unique</strong> words[i]]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Could you solve it in <code>O(n log(k))</code> time and <code>O(n)</code> extra space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7464,
        "dislikes": 340,
        "similarQuestions": "[{\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Features by Popularity\", \"titleSlug\": \"sort-features-by-popularity\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sender With Largest Word Count\", \"titleSlug\": \"sender-with-largest-word-count\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Pairs in Array\", \"titleSlug\": \"maximum-number-of-pairs-in-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Bucket Sort", "slug": "bucket-sort" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"587.4K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 587359, \"totalSubmissionRaw\": 1018297, \"acRate\": \"57.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "top-k-frequent-elements",
          "title": "Top K Frequent Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-closest-points-to-origin",
          "title": "K Closest Points to Origin",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sort-features-by-popularity",
          "title": "Sort Features by Popularity",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sender-with-largest-word-count",
          "title": "Sender With Largest Word Count",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-number-of-pairs-in-array",
          "title": "Maximum Number of Pairs in Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Bucket Sort", "slug": "bucket-sort" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "binary-number-with-alternating-bits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "693",
        "title": "Binary Number with Alternating Bits",
        "titleSlug": "binary-number-with-alternating-bits",
        "content": "<p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The binary representation of 5 is: 101\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The binary representation of 7 is: 111.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The binary representation of 11 is: 1011.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1313,
        "dislikes": 110,
        "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"126.1K\", \"totalSubmission\": \"203.2K\", \"totalAcceptedRaw\": 126079, \"totalSubmissionRaw\": 203238, \"acRate\": \"62.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-1-bits",
          "title": "Number of 1 Bits",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "number-of-distinct-islands": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "694",
        "title": "Number of Distinct Islands",
        "titleSlug": "number-of-distinct-islands",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 2180,
        "dislikes": 136,
        "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Distinct Islands II\", \"titleSlug\": \"number-of-distinct-islands-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Sub Islands\", \"titleSlug\": \"count-sub-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"157.6K\", \"totalSubmission\": \"258K\", \"totalAcceptedRaw\": 157583, \"totalSubmissionRaw\": 258016, \"acRate\": \"61.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-islands",
          "title": "Number of Islands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-distinct-islands-ii",
          "title": "Number of Distinct Islands II",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-sub-islands",
          "title": "Count Sub Islands",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "max-area-of-island": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "695",
        "title": "Max Area of Island",
        "titleSlug": "max-area-of-island",
        "content": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>. An island is a group of <code>1</code>&#39;s (representing land) connected <strong>4-directionally</strong> (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>\n\n<p>The <strong>area</strong> of an island is the number of cells with a value <code>1</code> in the island.</p>\n\n<p>Return <em>the maximum <strong>area</strong> of an island in </em><code>grid</code>. If there is no island, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg\" style=\"width: 500px; height: 310px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The answer is not 11, because the island must be connected 4-directionally.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,0,0,0,0,0,0,0]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9695,
        "dislikes": 198,
        "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Island Perimeter\", \"titleSlug\": \"island-perimeter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Largest Submatrix With Rearrangements\", \"titleSlug\": \"largest-submatrix-with-rearrangements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Detonate the Maximum Bombs\", \"titleSlug\": \"detonate-the-maximum-bombs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"797K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 797013, \"totalSubmissionRaw\": 1109523, \"acRate\": \"71.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-islands",
          "title": "Number of Islands",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "island-perimeter",
          "title": "Island Perimeter",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "largest-submatrix-with-rearrangements",
          "title": "Largest Submatrix With Rearrangements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "detonate-the-maximum-bombs",
          "title": "Detonate the Maximum Bombs",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "count-binary-substrings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "696",
        "title": "Count Binary Substrings",
        "titleSlug": "count-binary-substrings",
        "content": "<p>Given a binary string <code>s</code>, return the number of non-empty substrings that have the same number of <code>0</code>&#39;s and <code>1</code>&#39;s, and all the <code>0</code>&#39;s and all the <code>1</code>&#39;s in these substrings are grouped consecutively.</p>\n\n<p>Substrings that occur multiple times are counted the number of times they occur.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00110011&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 substrings that have equal number of consecutive 1&#39;s and 0&#39;s: &quot;0011&quot;, &quot;01&quot;, &quot;1100&quot;, &quot;10&quot;, &quot;0011&quot;, and &quot;01&quot;.\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, &quot;00110011&quot; is not a valid substring because all the 0&#39;s (and 1&#39;s) are not grouped together.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10101&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 substrings: &quot;10&quot;, &quot;01&quot;, &quot;10&quot;, &quot;01&quot; that have equal number of consecutive 1&#39;s and 0&#39;s.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3884,
        "dislikes": 842,
        "similarQuestions": "[{\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Substrings With Fixed Ratio\", \"titleSlug\": \"number-of-substrings-with-fixed-ratio\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"199.7K\", \"totalSubmission\": \"304.8K\", \"totalAcceptedRaw\": 199720, \"totalSubmissionRaw\": 304829, \"acRate\": \"65.5%\"}",
        "hints": [
          "How many valid binary substrings exist in \"000111\", and how many in \"11100\"?  What about \"00011100\"?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "encode-and-decode-strings",
          "title": "Encode and Decode Strings",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-substrings-with-fixed-ratio",
          "title": "Number of Substrings With Fixed Ratio",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "How many valid binary substrings exist in \"000111\", and how many in \"11100\"?  What about \"00011100\"?"
      ],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "degree-of-an-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "697",
        "title": "Degree of an Array",
        "titleSlug": "degree-of-an-array",
        "content": "<p>Given a non-empty array of non-negative integers <code>nums</code>, the <b>degree</b> of this array is defined as the maximum frequency of any one of its elements.</p>\n\n<p>Your task is to find the smallest possible length of a (contiguous) subarray of <code>nums</code>, that has the same degree as <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3,1,4,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code> will be between 1 and 50,000.</li>\n\t<li><code>nums[i]</code> will be an integer between 0 and 49,999.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2941,
        "dislikes": 1683,
        "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"200.8K\", \"totalSubmission\": \"356.8K\", \"totalAcceptedRaw\": 200835, \"totalSubmissionRaw\": 356836, \"acRate\": \"56.3%\"}",
        "hints": [
          "Say 5 is the only element that occurs the most number of times - for example, nums = [1, 5, 2, 3, 5, 4, 5, 6].  What is the answer?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-subarray",
          "title": "Maximum Subarray",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Say 5 is the only element that occurs the most number of times - for example, nums = [1, 5, 2, 3, 5, 4, 5, 6].  What is the answer?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "partition-to-k-equal-sum-subsets": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "698",
        "title": "Partition to K Equal Sum Subsets",
        "titleSlug": "partition-to-k-equal-sum-subsets",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if it is possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,2,3,5,2,1], k = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], k = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>The frequency of each element is in the range <code>[1, 4]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6956,
        "dislikes": 491,
        "similarQuestions": "[{\"title\": \"Partition Equal Subset Sum\", \"titleSlug\": \"partition-equal-subset-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Ways to Partition an Array\", \"titleSlug\": \"maximum-number-of-ways-to-partition-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Rows Covered by Columns\", \"titleSlug\": \"maximum-rows-covered-by-columns\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Memoization", "slug": "memoization" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"256.2K\", \"totalSubmission\": \"662.2K\", \"totalAcceptedRaw\": 256184, \"totalSubmissionRaw\": 662225, \"acRate\": \"38.7%\"}",
        "hints": [
          "We can figure out what target each subset must sum to.  Then, let's recursively search, where at each call to our function, we choose which of k subsets the next value will join."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "partition-equal-subset-sum",
          "title": "Partition Equal Subset Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "fair-distribution-of-cookies",
          "title": "Fair Distribution of Cookies",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-ways-to-partition-an-array",
          "title": "Maximum Number of Ways to Partition an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-rows-covered-by-columns",
          "title": "Maximum Rows Covered by Columns",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "We can figure out what target each subset must sum to.  Then, let's recursively search, where at each call to our function, we choose which of k subsets the next value will join."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Memoization", "slug": "memoization" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "falling-squares": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "699",
        "title": "Falling Squares",
        "titleSlug": "falling-squares",
        "content": "<p>There are several squares being dropped onto the X-axis of a 2D plane.</p>\n\n<p>You are given a 2D integer array <code>positions</code> where <code>positions[i] = [left<sub>i</sub>, sideLength<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> square with a side length of <code>sideLength<sub>i</sub></code> that is dropped with its left edge aligned with X-coordinate <code>left<sub>i</sub></code>.</p>\n\n<p>Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands <strong>on the top side of another square</strong> or <strong>on the X-axis</strong>. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.</p>\n\n<p>After each square is dropped, you must record the <strong>height of the current tallest stack of squares</strong>.</p>\n\n<p>Return <em>an integer array </em><code>ans</code><em> where </em><code>ans[i]</code><em> represents the height described above after dropping the </em><code>i<sup>th</sup></code><em> square</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/fallingsq1-plane.jpg\" style=\"width: 500px; height: 505px;\" />\n<pre>\n<strong>Input:</strong> positions = [[1,2],[2,3],[6,1]]\n<strong>Output:</strong> [2,5,5]\n<strong>Explanation:</strong>\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> positions = [[100,100],[200,100]]\n<strong>Output:</strong> [100,100]\n<strong>Explanation:</strong>\nAfter the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of [100, 100].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positions.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= left<sub>i</sub> &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= sideLength<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 616,
        "dislikes": 73,
        "similarQuestions": "[{\"title\": \"The Skyline Problem\", \"titleSlug\": \"the-skyline-problem\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"25.1K\", \"totalSubmission\": \"56K\", \"totalAcceptedRaw\": 25072, \"totalSubmissionRaw\": 56006, \"acRate\": \"44.8%\"}",
        "hints": [
          "If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?"
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "the-skyline-problem",
          "title": "The Skyline Problem",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "search-in-a-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "700",
        "title": "Search in a Binary Search Tree",
        "titleSlug": "search-in-a-binary-search-tree",
        "content": "<p>You are given the <code>root</code> of a binary search tree (BST) and an integer <code>val</code>.</p>\n\n<p>Find the node in the BST that the node&#39;s value equals <code>val</code> and return the subtree rooted with that node. If such a node does not exist, return <code>null</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3], val = 2\n<strong>Output:</strong> [2,1,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3], val = 5\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>7</sup></code></li>\n\t<li><code>root</code> is a binary search tree.</li>\n\t<li><code>1 &lt;= val &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5710,
        "dislikes": 181,
        "similarQuestions": "[{\"title\": \"Closest Binary Search Tree Value\", \"titleSlug\": \"closest-binary-search-tree-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Insert into a Binary Search Tree\", \"titleSlug\": \"insert-into-a-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Nodes Queries in a Binary Search Tree\", \"titleSlug\": \"closest-nodes-queries-in-a-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"773.7K\", \"totalSubmission\": \"978.7K\", \"totalAcceptedRaw\": 773694, \"totalSubmissionRaw\": 978687, \"acRate\": \"79.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "closest-binary-search-tree-value",
          "title": "Closest Binary Search Tree Value",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "insert-into-a-binary-search-tree",
          "title": "Insert into a Binary Search Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
          "title": "Closest Nodes Queries in a Binary Search Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "insert-into-a-binary-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "701",
        "title": "Insert into a Binary Search Tree",
        "titleSlug": "insert-into-a-binary-search-tree",
        "content": "<p>You are given the <code>root</code> node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return <em>the root node of the BST after the insertion</em>. It is <strong>guaranteed</strong> that the new value does not exist in the original BST.</p>\n\n<p><strong>Notice</strong>&nbsp;that there may exist&nbsp;multiple valid ways for the&nbsp;insertion, as long as the tree remains a BST after insertion. You can return <strong>any of them</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg\" style=\"width: 752px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3], val = 5\n<strong>Output:</strong> [4,2,7,1,3,5]\n<strong>Explanation:</strong> Another accepted tree is:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/bst.jpg\" style=\"width: 352px; height: 301px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [40,20,60,10,30,50,70], val = 25\n<strong>Output:</strong> [40,20,60,10,30,50,70,null,null,25]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n<strong>Output:</strong> [4,2,7,1,3,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in&nbsp;the tree will be in the range <code>[0,&nbsp;10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>8</sup> &lt;= Node.val &lt;= 10<sup>8</sup></code></li>\n\t<li>All the values <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>-10<sup>8</sup> &lt;= val &lt;= 10<sup>8</sup></code></li>\n\t<li>It&#39;s <strong>guaranteed</strong> that <code>val</code> does not exist in the original BST.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5581,
        "dislikes": 164,
        "similarQuestions": "[{\"title\": \"Search in a Binary Search Tree\", \"titleSlug\": \"search-in-a-binary-search-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"480.4K\", \"totalSubmission\": \"650.1K\", \"totalAcceptedRaw\": 480447, \"totalSubmissionRaw\": 650112, \"acRate\": \"73.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "search-in-a-binary-search-tree",
          "title": "Search in a Binary Search Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "search-in-a-sorted-array-of-unknown-size": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "702",
        "title": "Search in a Sorted Array of Unknown Size",
        "titleSlug": "search-in-a-sorted-array-of-unknown-size",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 891,
        "dislikes": 46,
        "similarQuestions": "[{\"title\": \"Binary Search\", \"titleSlug\": \"binary-search\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find the Index of the Large Integer\", \"titleSlug\": \"find-the-index-of-the-large-integer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Interactive", "slug": "interactive" }
        ],
        "stats": "{\"totalAccepted\": \"93.3K\", \"totalSubmission\": \"129.9K\", \"totalAcceptedRaw\": 93322, \"totalSubmissionRaw\": 129898, \"acRate\": \"71.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-search",
          "title": "Binary Search",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-the-index-of-the-large-integer",
          "title": "Find the Index of the Large Integer",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Interactive", "slug": "interactive" }
      ]
    }
  },
  "kth-largest-element-in-a-stream": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "703",
        "title": "Kth Largest Element in a Stream",
        "titleSlug": "kth-largest-element-in-a-stream",
        "content": "<p>Design a class to find the <code>k<sup>th</sup></code> largest element in a stream. Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p>\n\n<p>Implement <code>KthLargest</code> class:</p>\n\n<ul>\n\t<li><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer <code>k</code> and the stream of integers <code>nums</code>.</li>\n\t<li><code>int add(int val)</code> Appends the integer <code>val</code> to the stream and returns the element representing the <code>k<sup>th</sup></code> largest element in the stream.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;KthLargest&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n<strong>Output</strong>\n[null, 4, 5, 5, 8, 8]\n\n<strong>Explanation</strong>\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>.</li>\n\t<li>It is guaranteed that there will be at least <code>k</code> elements in the array when you search for the <code>k<sup>th</sup></code> element.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 5222,
        "dislikes": 3285,
        "similarQuestions": "[{\"title\": \"Kth Largest Element in an Array\", \"titleSlug\": \"kth-largest-element-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Finding MK Average\", \"titleSlug\": \"finding-mk-average\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sequentially Ordinal Rank Tracker\", \"titleSlug\": \"sequentially-ordinal-rank-tracker\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Design", "slug": "design" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Binary Tree", "slug": "binary-tree" },
          { "name": "Data Stream", "slug": "data-stream" }
        ],
        "stats": "{\"totalAccepted\": \"488.4K\", \"totalSubmission\": \"862.6K\", \"totalAcceptedRaw\": 488353, \"totalSubmissionRaw\": 862579, \"acRate\": \"56.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "kth-largest-element-in-an-array",
          "title": "Kth Largest Element in an Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "finding-mk-average",
          "title": "Finding MK Average",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "sequentially-ordinal-rank-tracker",
          "title": "Sequentially Ordinal Rank Tracker",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Design", "slug": "design" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Binary Tree", "slug": "binary-tree" },
        { "name": "Data Stream", "slug": "data-stream" }
      ]
    }
  },
  "binary-search": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "704",
        "title": "Binary Search",
        "titleSlug": "binary-search",
        "content": "<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 9 exists in nums and its index is 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 2 does not exist in nums so return -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup></code></li>\n\t<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted in ascending order.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 11286,
        "dislikes": 231,
        "similarQuestions": "[{\"title\": \"Search in a Sorted Array of Unknown Size\", \"titleSlug\": \"search-in-a-sorted-array-of-unknown-size\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Count of Positive Integer and Negative Integer\", \"titleSlug\": \"maximum-count-of-positive-integer-and-negative-integer\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"3.8M\", \"totalAcceptedRaw\": 2152036, \"totalSubmissionRaw\": 3780142, \"acRate\": \"56.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "search-in-a-sorted-array-of-unknown-size",
          "title": "Search in a Sorted Array of Unknown Size",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "maximum-count-of-positive-integer-and-negative-integer",
          "title": "Maximum Count of Positive Integer and Negative Integer",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "design-hashset": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "705",
        "title": "Design HashSet",
        "titleSlug": "design-hashset",
        "content": "<p>Design a HashSet without using any built-in hash table libraries.</p>\n\n<p>Implement <code>MyHashSet</code> class:</p>\n\n<ul>\n\t<li><code>void add(key)</code> Inserts the value <code>key</code> into the HashSet.</li>\n\t<li><code>bool contains(key)</code> Returns whether the value <code>key</code> exists in the HashSet or not.</li>\n\t<li><code>void remove(key)</code> Removes the value <code>key</code> in the HashSet. If <code>key</code> does not exist in the HashSet, do nothing.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyHashSet&quot;, &quot;add&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;contains&quot;, &quot;add&quot;, &quot;contains&quot;, &quot;remove&quot;, &quot;contains&quot;]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\n<strong>Output</strong>\n[null, null, null, true, false, null, true, null, false]\n\n<strong>Explanation</strong>\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>, <code>remove</code>, and <code>contains</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3678,
        "dislikes": 298,
        "similarQuestions": "[{\"title\": \"Design HashMap\", \"titleSlug\": \"design-hashmap\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Design Skiplist\", \"titleSlug\": \"design-skiplist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"385.5K\", \"totalSubmission\": \"574.7K\", \"totalAcceptedRaw\": 385537, \"totalSubmissionRaw\": 574748, \"acRate\": \"67.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "design-hashmap",
          "title": "Design HashMap",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "design-skiplist",
          "title": "Design Skiplist",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "design-hashmap": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "706",
        "title": "Design HashMap",
        "titleSlug": "design-hashmap",
        "content": "<p>Design a HashMap without using any built-in hash table libraries.</p>\n\n<p>Implement the <code>MyHashMap</code> class:</p>\n\n<ul>\n\t<li><code>MyHashMap()</code> initializes the object with an empty map.</li>\n\t<li><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the <code>key</code> already exists in the map, update the corresponding <code>value</code>.</li>\n\t<li><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</li>\n\t<li><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyHashMap&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;remove&quot;, &quot;get&quot;]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n<strong>Output</strong>\n[null, null, null, 1, -1, null, 1, null, -1]\n\n<strong>Explanation</strong>\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4985,
        "dislikes": 447,
        "similarQuestions": "[{\"title\": \"Design HashSet\", \"titleSlug\": \"design-hashset\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Design Skiplist\", \"titleSlug\": \"design-skiplist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"546.6K\", \"totalSubmission\": \"829.8K\", \"totalAcceptedRaw\": 546615, \"totalSubmissionRaw\": 829799, \"acRate\": \"65.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "design-hashset",
          "title": "Design HashSet",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "design-skiplist",
          "title": "Design Skiplist",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "design-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "707",
        "title": "Design Linked List",
        "titleSlug": "design-linked-list",
        "content": "<p>Design your implementation of the linked list. You can choose to use a singly or doubly linked list.<br />\nA node in a singly linked list should have two attributes: <code>val</code> and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code> is a pointer/reference to the next node.<br />\nIf you want to use the doubly linked list, you will need one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are <strong>0-indexed</strong>.</p>\n\n<p>Implement the <code>MyLinkedList</code> class:</p>\n\n<ul>\n\t<li><code>MyLinkedList()</code> Initializes the <code>MyLinkedList</code> object.</li>\n\t<li><code>int get(int index)</code> Get the value of the <code>index<sup>th</sup></code> node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n\t<li><code>void addAtHead(int val)</code> Add a node of value <code>val</code> before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n\t<li><code>void addAtTail(int val)</code> Append a node of value <code>val</code> as the last element of the linked list.</li>\n\t<li><code>void addAtIndex(int index, int val)</code> Add a node of value <code>val</code> before the <code>index<sup>th</sup></code> node in the linked list. If <code>index</code> equals the length of the linked list, the node will be appended to the end of the linked list. If <code>index</code> is greater than the length, the node <strong>will not be inserted</strong>.</li>\n\t<li><code>void deleteAtIndex(int index)</code> Delete the <code>index<sup>th</sup></code> node in the linked list, if the index is valid.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]\n[[], [1], [3], [1, 2], [1], [1], [1]]\n<strong>Output</strong>\n[null, null, null, null, 2, null, 3]\n\n<strong>Explanation</strong>\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1-&gt;2-&gt;3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1-&gt;3\nmyLinkedList.get(1);              // return 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= index, val &lt;= 1000</code></li>\n\t<li>Please do not use the built-in LinkedList library.</li>\n\t<li>At most <code>2000</code> calls will be made to <code>get</code>, <code>addAtHead</code>, <code>addAtTail</code>, <code>addAtIndex</code> and <code>deleteAtIndex</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2505,
        "dislikes": 1562,
        "similarQuestions": "[{\"title\": \"Design Skiplist\", \"titleSlug\": \"design-skiplist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Design", "slug": "design" }
        ],
        "stats": "{\"totalAccepted\": \"300.1K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 300125, \"totalSubmissionRaw\": 1071746, \"acRate\": \"28.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "design-skiplist",
          "title": "Design Skiplist",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Design", "slug": "design" }
      ]
    }
  },
  "insert-into-a-sorted-circular-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "708",
        "title": "Insert into a Sorted Circular Linked List",
        "titleSlug": "insert-into-a-sorted-circular-linked-list",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1144,
        "dislikes": 738,
        "similarQuestions": "[{\"title\": \"Insertion Sort List\", \"titleSlug\": \"insertion-sort-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Linked List", "slug": "linked-list" }],
        "stats": "{\"totalAccepted\": \"147.2K\", \"totalSubmission\": \"417K\", \"totalAcceptedRaw\": 147223, \"totalSubmissionRaw\": 416999, \"acRate\": \"35.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "insertion-sort-list",
          "title": "Insertion Sort List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Linked List", "slug": "linked-list" }]
    }
  },
  "to-lower-case": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "709",
        "title": "To Lower Case",
        "titleSlug": "to-lower-case",
        "content": "<p>Given a string <code>s</code>, return <em>the string after replacing every uppercase letter with the same lowercase letter</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Hello&quot;\n<strong>Output:</strong> &quot;hello&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;here&quot;\n<strong>Output:</strong> &quot;here&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LOVELY&quot;\n<strong>Output:</strong> &quot;lovely&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of printable ASCII characters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1761,
        "dislikes": 2753,
        "similarQuestions": "[{\"title\": \"Capitalize the Title\", \"titleSlug\": \"capitalize-the-title\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"477K\", \"totalSubmission\": \"575K\", \"totalAcceptedRaw\": 477001, \"totalSubmissionRaw\": 574993, \"acRate\": \"83.0%\"}",
        "hints": [
          "Most languages support lowercase conversion for a string data type. However, that is certainly not the purpose of the problem. Think about how the implementation of the lowercase function call can be done easily.",
          "<b>Think ASCII!</b>",
          "Think about the different capital letters and their ASCII codes and how that relates to their lowercase counterparts. Does there seem to be any pattern there? Any mathematical relationship that we can use?"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "capitalize-the-title",
          "title": "Capitalize the Title",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Most languages support lowercase conversion for a string data type. However, that is certainly not the purpose of the problem. Think about how the implementation of the lowercase function call can be done easily.",
        "<b>Think ASCII!</b>",
        "Think about the different capital letters and their ASCII codes and how that relates to their lowercase counterparts. Does there seem to be any pattern there? Any mathematical relationship that we can use?"
      ],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "random-pick-with-blacklist": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "710",
        "title": "Random Pick with Blacklist",
        "titleSlug": "random-pick-with-blacklist",
        "content": "<p>You are given an integer <code>n</code> and an array of <strong>unique</strong> integers <code>blacklist</code>. Design an algorithm to pick a random integer in the range <code>[0, n - 1]</code> that is <strong>not</strong> in <code>blacklist</code>. Any integer that is in the mentioned range and not in <code>blacklist</code> should be <strong>equally likely</strong> to be returned.</p>\n\n<p>Optimize your algorithm such that it minimizes the number of calls to the <strong>built-in</strong> random function of your language.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int n, int[] blacklist)</code> Initializes the object with the integer <code>n</code> and the blacklisted integers <code>blacklist</code>.</li>\n\t<li><code>int pick()</code> Returns a random integer in the range <code>[0, n - 1]</code> and not in <code>blacklist</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, 0, 4, 1, 6, 1, 0, 4]\n\n<strong>Explanation</strong>\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= blacklist.length &lt;= min(10<sup>5</sup>, n - 1)</code></li>\n\t<li><code>0 &lt;= blacklist[i] &lt; n</code></li>\n\t<li>All the values of <code>blacklist</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 837,
        "dislikes": 118,
        "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Weight\", \"titleSlug\": \"random-pick-with-weight\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Unique Binary String\", \"titleSlug\": \"find-unique-binary-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Randomized", "slug": "randomized" }
        ],
        "stats": "{\"totalAccepted\": \"40K\", \"totalSubmission\": \"120K\", \"totalAcceptedRaw\": 40023, \"totalSubmissionRaw\": 120012, \"acRate\": \"33.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "random-pick-index",
          "title": "Random Pick Index",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "random-pick-with-weight",
          "title": "Random Pick with Weight",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-unique-binary-string",
          "title": "Find Unique Binary String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Randomized", "slug": "randomized" }
      ]
    }
  },
  "number-of-distinct-islands-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "711",
        "title": "Number of Distinct Islands II",
        "titleSlug": "number-of-distinct-islands-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 257,
        "dislikes": 262,
        "similarQuestions": "[{\"title\": \"Number of Distinct Islands\", \"titleSlug\": \"number-of-distinct-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"10.5K\", \"totalSubmission\": \"20K\", \"totalAcceptedRaw\": 10526, \"totalSubmissionRaw\": 19959, \"acRate\": \"52.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-distinct-islands",
          "title": "Number of Distinct Islands",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "minimum-ascii-delete-sum-for-two-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "712",
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
        "content": "<p>Given two strings <code>s1</code> and&nbsp;<code>s2</code>, return <em>the lowest <strong>ASCII</strong> sum of deleted characters to make two strings equal</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;sea&quot;, s2 = &quot;eat&quot;\n<strong>Output:</strong> 231\n<strong>Explanation:</strong> Deleting &quot;s&quot; from &quot;sea&quot; adds the ASCII value of &quot;s&quot; (115) to the sum.\nDeleting &quot;t&quot; from &quot;eat&quot; adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;delete&quot;, s2 = &quot;leet&quot;\n<strong>Output:</strong> 403\n<strong>Explanation:</strong> Deleting &quot;dee&quot; from &quot;delete&quot; to turn the string into &quot;let&quot;,\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting &quot;e&quot; from &quot;leet&quot; adds 101[e] to the sum.\nAt the end, both strings are equal to &quot;let&quot;, and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into &quot;lee&quot; or &quot;eet&quot;, we would get answers of 433 or 417, which are higher.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3895,
        "dislikes": 103,
        "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Delete Operation for Two Strings\", \"titleSlug\": \"delete-operation-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"137.1K\", \"totalSubmission\": \"211K\", \"totalAcceptedRaw\": 137121, \"totalSubmissionRaw\": 211040, \"acRate\": \"65.0%\"}",
        "hints": ["Let dp(i, j) be the answer for inputs s1[i:] and s2[j:]."]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "edit-distance",
          "title": "Edit Distance",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-increasing-subsequence",
          "title": "Longest Increasing Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "delete-operation-for-two-strings",
          "title": "Delete Operation for Two Strings",
          "isPaidOnly": false
        }
      ],
      "hints": ["Let dp(i, j) be the answer for inputs s1[i:] and s2[j:]."],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "subarray-product-less-than-k": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "713",
        "title": "Subarray Product Less Than K",
        "titleSlug": "subarray-product-less-than-k",
        "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than </em><code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,5,2,6], k = 100\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], k = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5907,
        "dislikes": 185,
        "similarQuestions": "[{\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum Less Than K\", \"titleSlug\": \"two-sum-less-than-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Smooth Descent Periods of a Stock\", \"titleSlug\": \"number-of-smooth-descent-periods-of-a-stock\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Subarrays With Score Less Than K\", \"titleSlug\": \"count-subarrays-with-score-less-than-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"260K\", \"totalSubmission\": \"554.9K\", \"totalAcceptedRaw\": 260034, \"totalSubmissionRaw\": 554917, \"acRate\": \"46.9%\"}",
        "hints": [
          "For each j, let opt(j) be the smallest i so that nums[i] * nums[i+1] * ... * nums[j] is less than k.  opt is an increasing function."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-product-subarray",
          "title": "Maximum Product Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-size-subarray-sum-equals-k",
          "title": "Maximum Size Subarray Sum Equals k",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-sum-equals-k",
          "title": "Subarray Sum Equals K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "two-sum-less-than-k",
          "title": "Two Sum Less Than K",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-smooth-descent-periods-of-a-stock",
          "title": "Number of Smooth Descent Periods of a Stock",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-subarrays-with-score-less-than-k",
          "title": "Count Subarrays With Score Less Than K",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "For each j, let opt(j) be the smallest i so that nums[i] * nums[i+1] * ... * nums[j] is less than k.  opt is an increasing function."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "best-time-to-buy-and-sell-stock-with-transaction-fee": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "714",
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>fee</code> representing a transaction fee.</p>\n\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</li>\n\t<li>The transaction fee is only charged once for each stock purchase and sale.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,3,2,8,4,9], fee = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,3,7,5,10,3], fee = 3\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= prices[i] &lt; 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= fee &lt; 5 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6889,
        "dislikes": 196,
        "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock II\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"329.9K\", \"totalSubmission\": \"483.7K\", \"totalAcceptedRaw\": 329866, \"totalSubmissionRaw\": 483652, \"acRate\": \"68.2%\"}",
        "hints": [
          "Consider the first K stock prices.  At the end, the only legal states are that you don't own a share of stock, or that you do.  Calculate the most profit you could have under each of these two cases."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "best-time-to-buy-and-sell-stock-ii",
          "title": "Best Time to Buy and Sell Stock II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Consider the first K stock prices.  At the end, the only legal states are that you don't own a share of stock, or that you do.  Calculate the most profit you could have under each of these two cases."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "range-module": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "715",
        "title": "Range Module",
        "titleSlug": "range-module",
        "content": "<p>A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as <strong>half-open intervals</strong> and query about them.</p>\n\n<p>A <strong>half-open interval</strong> <code>[left, right)</code> denotes all the real numbers <code>x</code> where <code>left &lt;= x &lt; right</code>.</p>\n\n<p>Implement the <code>RangeModule</code> class:</p>\n\n<ul>\n\t<li><code>RangeModule()</code> Initializes the object of the data structure.</li>\n\t<li><code>void addRange(int left, int right)</code> Adds the <strong>half-open interval</strong> <code>[left, right)</code>, tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval <code>[left, right)</code> that are not already tracked.</li>\n\t<li><code>boolean queryRange(int left, int right)</code> Returns <code>true</code> if every real number in the interval <code>[left, right)</code> is currently being tracked, and <code>false</code> otherwise.</li>\n\t<li><code>void removeRange(int left, int right)</code> Stops tracking every real number currently being tracked in the <strong>half-open interval</strong> <code>[left, right)</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RangeModule&quot;, &quot;addRange&quot;, &quot;removeRange&quot;, &quot;queryRange&quot;, &quot;queryRange&quot;, &quot;queryRange&quot;]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\n<strong>Output</strong>\n[null, null, null, true, false, true]\n\n<strong>Explanation</strong>\nRangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left &lt; right &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>addRange</code>, <code>queryRange</code>, and <code>removeRange</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1394,
        "dislikes": 115,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Insert Interval\", \"titleSlug\": \"insert-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Data Stream as Disjoint Intervals\", \"titleSlug\": \"data-stream-as-disjoint-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Design", "slug": "design" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"65.4K\", \"totalSubmission\": \"147.4K\", \"totalAcceptedRaw\": 65426, \"totalSubmissionRaw\": 147430, \"acRate\": \"44.4%\"}",
        "hints": [
          "Maintain a sorted set of disjoint intervals.  addRange and removeRange can be performed with time complexity linear to the size of this set; queryRange can be performed with time complexity logarithmic to the size of this set."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "insert-interval",
          "title": "Insert Interval",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "data-stream-as-disjoint-intervals",
          "title": "Data Stream as Disjoint Intervals",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Maintain a sorted set of disjoint intervals.  addRange and removeRange can be performed with time complexity linear to the size of this set; queryRange can be performed with time complexity logarithmic to the size of this set."
      ],
      "relatedTopics": [
        { "name": "Design", "slug": "design" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "max-stack": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "716",
        "title": "Max Stack",
        "titleSlug": "max-stack",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1873,
        "dislikes": 503,
        "similarQuestions": "[{\"title\": \"Min Stack\", \"titleSlug\": \"min-stack\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Design", "slug": "design" },
          { "name": "Doubly-Linked List", "slug": "doubly-linked-list" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"145.6K\", \"totalSubmission\": \"323.2K\", \"totalAcceptedRaw\": 145639, \"totalSubmissionRaw\": 323242, \"acRate\": \"45.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "min-stack",
          "title": "Min Stack",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Design", "slug": "design" },
        { "name": "Doubly-Linked List", "slug": "doubly-linked-list" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "1-bit-and-2-bit-characters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "717",
        "title": "1-bit and 2-bit Characters",
        "titleSlug": "1-bit-and-2-bit-characters",
        "content": "<p>We have two special characters:</p>\n\n<ul>\n\t<li>The first character can be represented by one bit <code>0</code>.</li>\n\t<li>The second character can be represented by two bits (<code>10</code> or <code>11</code>).</li>\n</ul>\n\n<p>Given a binary array <code>bits</code> that ends with <code>0</code>, return <code>true</code> if the last character must be a one-bit character.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> bits = [1,0,0]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> bits = [1,1,1,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bits.length &lt;= 1000</code></li>\n\t<li><code>bits[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 847,
        "dislikes": 2064,
        "similarQuestions": "[{\"title\": \"Gray Code\", \"titleSlug\": \"gray-code\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"126.9K\", \"totalSubmission\": \"280.9K\", \"totalAcceptedRaw\": 126900, \"totalSubmissionRaw\": 280899, \"acRate\": \"45.2%\"}",
        "hints": [
          "Keep track of where the next character starts.  At the end, you want to know if you started on the last bit."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "gray-code",
          "title": "Gray Code",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Keep track of where the next character starts.  At the end, you want to know if you started on the last bit."
      ],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "maximum-length-of-repeated-subarray": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "718",
        "title": "Maximum Length of Repeated Subarray",
        "titleSlug": "maximum-length-of-repeated-subarray",
        "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>the maximum length of a subarray that appears in <strong>both</strong> arrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The repeated subarray with maximum length is [3,2,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The repeated subarray with maximum length is [0,0,0,0,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6614,
        "dislikes": 162,
        "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subpath\", \"titleSlug\": \"longest-common-subpath\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Rolling Hash", "slug": "rolling-hash" },
          { "name": "Hash Function", "slug": "hash-function" }
        ],
        "stats": "{\"totalAccepted\": \"286.1K\", \"totalSubmission\": \"561.1K\", \"totalAcceptedRaw\": 286110, \"totalSubmissionRaw\": 561081, \"acRate\": \"51.0%\"}",
        "hints": [
          "Use dynamic programming.  dp[i][j] will be the longest common prefix of A[i:] and B[j:].",
          "The answer is max(dp[i][j]) over all i, j."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-size-subarray-sum",
          "title": "Minimum Size Subarray Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "longest-common-subpath",
          "title": "Longest Common Subpath",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Use dynamic programming.  dp[i][j] will be the longest common prefix of A[i:] and B[j:].",
        "The answer is max(dp[i][j]) over all i, j."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Rolling Hash", "slug": "rolling-hash" },
        { "name": "Hash Function", "slug": "hash-function" }
      ]
    }
  },
  "find-k-th-smallest-pair-distance": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "719",
        "title": "Find K-th Smallest Pair Distance",
        "titleSlug": "find-k-th-smallest-pair-distance",
        "content": "<p>The <strong>distance of a pair</strong> of integers <code>a</code> and <code>b</code> is defined as the absolute difference between <code>a</code> and <code>b</code>.</p>\n\n<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest <strong>distance among all the pairs</strong></em> <code>nums[i]</code> <em>and</em> <code>nums[j]</code> <em>where</em> <code>0 &lt;= i &lt; j &lt; nums.length</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1], k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Here are all the pairs:\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\nThen the 1<sup>st</sup> smallest distance pair is (1,1), and its distance is 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,6,1], k = 3\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n * (n - 1) / 2</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2872,
        "dislikes": 87,
        "similarQuestions": "[{\"title\": \"Find K Pairs with Smallest Sums\", \"titleSlug\": \"find-k-pairs-with-smallest-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find K Closest Elements\", \"titleSlug\": \"find-k-closest-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K-th Smallest Prime Fraction\", \"titleSlug\": \"k-th-smallest-prime-fraction\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"84.1K\", \"totalSubmission\": \"224.6K\", \"totalAcceptedRaw\": 84079, \"totalSubmissionRaw\": 224612, \"acRate\": \"37.4%\"}",
        "hints": [
          "Binary search for the answer.  How can you check how many pairs have distance <= X?"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "find-k-pairs-with-smallest-sums",
          "title": "Find K Pairs with Smallest Sums",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
          "title": "Kth Smallest Element in a Sorted Matrix",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-k-closest-elements",
          "title": "Find K Closest Elements",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "kth-smallest-number-in-multiplication-table",
          "title": "Kth Smallest Number in Multiplication Table",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "k-th-smallest-prime-fraction",
          "title": "K-th Smallest Prime Fraction",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Binary search for the answer.  How can you check how many pairs have distance <= X?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "longest-word-in-dictionary": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "720",
        "title": "Longest Word in Dictionary",
        "titleSlug": "longest-word-in-dictionary",
        "content": "<p>Given an array of strings <code>words</code> representing an English Dictionary, return <em>the longest word in</em> <code>words</code> <em>that can be built one character at a time by other words in</em> <code>words</code>.</p>\n\n<p>If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.</p>\n\n<p>Note that the word should be built from left to right with each additional character being added to the end of a previous word.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;,&quot;world&quot;]\n<strong>Output:</strong> &quot;world&quot;\n<strong>Explanation:</strong> The word &quot;world&quot; can be built one character at a time by &quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, and &quot;worl&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;banana&quot;,&quot;app&quot;,&quot;appl&quot;,&quot;ap&quot;,&quot;apply&quot;,&quot;apple&quot;]\n<strong>Output:</strong> &quot;apple&quot;\n<strong>Explanation:</strong> Both &quot;apply&quot; and &quot;apple&quot; can be built from other words in the dictionary. However, &quot;apple&quot; is lexicographically smaller than &quot;apply&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1886,
        "dislikes": 1470,
        "similarQuestions": "[{\"title\": \"Longest Word in Dictionary through Deleting\", \"titleSlug\": \"longest-word-in-dictionary-through-deleting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Implement Magic Dictionary\", \"titleSlug\": \"implement-magic-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Word With All Prefixes\", \"titleSlug\": \"longest-word-with-all-prefixes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"144.8K\", \"totalSubmission\": \"277.5K\", \"totalAcceptedRaw\": 144838, \"totalSubmissionRaw\": 277461, \"acRate\": \"52.2%\"}",
        "hints": [
          "For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-word-in-dictionary-through-deleting",
          "title": "Longest Word in Dictionary through Deleting",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "implement-magic-dictionary",
          "title": "Implement Magic Dictionary",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-word-with-all-prefixes",
          "title": "Longest Word With All Prefixes",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "accounts-merge": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "721",
        "title": "Accounts Merge",
        "titleSlug": "accounts-merge",
        "content": "<p>Given a list of <code>accounts</code> where each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a name, and the rest of the elements are <strong>emails</strong> representing emails of the account.</p>\n\n<p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p>\n\n<p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails <strong>in sorted order</strong>. The accounts themselves can be returned in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> accounts = [[&quot;John&quot;,&quot;johnsmith@mail.com&quot;,&quot;john_newyork@mail.com&quot;],[&quot;John&quot;,&quot;johnsmith@mail.com&quot;,&quot;john00@mail.com&quot;],[&quot;Mary&quot;,&quot;mary@mail.com&quot;],[&quot;John&quot;,&quot;johnnybravo@mail.com&quot;]]\n<strong>Output:</strong> [[&quot;John&quot;,&quot;john00@mail.com&quot;,&quot;john_newyork@mail.com&quot;,&quot;johnsmith@mail.com&quot;],[&quot;Mary&quot;,&quot;mary@mail.com&quot;],[&quot;John&quot;,&quot;johnnybravo@mail.com&quot;]]\n<strong>Explanation:</strong>\nThe first and second John&#39;s are the same person as they have the common email &quot;johnsmith@mail.com&quot;.\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [[&#39;Mary&#39;, &#39;mary@mail.com&#39;], [&#39;John&#39;, &#39;johnnybravo@mail.com&#39;], \n[&#39;John&#39;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;]] would still be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> accounts = [[&quot;Gabe&quot;,&quot;Gabe0@m.co&quot;,&quot;Gabe3@m.co&quot;,&quot;Gabe1@m.co&quot;],[&quot;Kevin&quot;,&quot;Kevin3@m.co&quot;,&quot;Kevin5@m.co&quot;,&quot;Kevin0@m.co&quot;],[&quot;Ethan&quot;,&quot;Ethan5@m.co&quot;,&quot;Ethan4@m.co&quot;,&quot;Ethan0@m.co&quot;],[&quot;Hanzo&quot;,&quot;Hanzo3@m.co&quot;,&quot;Hanzo1@m.co&quot;,&quot;Hanzo0@m.co&quot;],[&quot;Fern&quot;,&quot;Fern5@m.co&quot;,&quot;Fern1@m.co&quot;,&quot;Fern0@m.co&quot;]]\n<strong>Output:</strong> [[&quot;Ethan&quot;,&quot;Ethan0@m.co&quot;,&quot;Ethan4@m.co&quot;,&quot;Ethan5@m.co&quot;],[&quot;Gabe&quot;,&quot;Gabe0@m.co&quot;,&quot;Gabe1@m.co&quot;,&quot;Gabe3@m.co&quot;],[&quot;Hanzo&quot;,&quot;Hanzo0@m.co&quot;,&quot;Hanzo1@m.co&quot;,&quot;Hanzo3@m.co&quot;],[&quot;Kevin&quot;,&quot;Kevin0@m.co&quot;,&quot;Kevin3@m.co&quot;,&quot;Kevin5@m.co&quot;],[&quot;Fern&quot;,&quot;Fern0@m.co&quot;,&quot;Fern1@m.co&quot;,&quot;Fern5@m.co&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= accounts.length &lt;= 1000</code></li>\n\t<li><code>2 &lt;= accounts[i].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= accounts[i][j].length &lt;= 30</code></li>\n\t<li><code>accounts[i][0]</code> consists of English letters.</li>\n\t<li><code>accounts[i][j] (for j &gt; 0)</code> is a valid email.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 6386,
        "dislikes": 1089,
        "similarQuestions": "[{\"title\": \"Redundant Connection\", \"titleSlug\": \"redundant-connection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity\", \"titleSlug\": \"sentence-similarity\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity II\", \"titleSlug\": \"sentence-similarity-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"352.4K\", \"totalSubmission\": \"621K\", \"totalAcceptedRaw\": 352401, \"totalSubmissionRaw\": 621003, \"acRate\": \"56.7%\"}",
        "hints": [
          "For every pair of emails in the same account, draw an edge between those emails.  The problem is about enumerating the connected components of this graph."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "redundant-connection",
          "title": "Redundant Connection",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sentence-similarity",
          "title": "Sentence Similarity",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sentence-similarity-ii",
          "title": "Sentence Similarity II",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "For every pair of emails in the same account, draw an edge between those emails.  The problem is about enumerating the connected components of this graph."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "remove-comments": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "722",
        "title": "Remove Comments",
        "titleSlug": "remove-comments",
        "content": "<p>Given a C++ program, remove comments from it. The program source is an array of strings <code>source</code> where <code>source[i]</code> is the <code>i<sup>th</sup></code> line of the source code. This represents the result of splitting the original source code string by the newline character <code>&#39;\\n&#39;</code>.</p>\n\n<p>In C++, there are two types of comments, line comments, and block comments.</p>\n\n<ul>\n\t<li>The string <code>&quot;//&quot;</code> denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.</li>\n\t<li>The string <code>&quot;/*&quot;</code> denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of <code>&quot;*/&quot;</code> should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string <code>&quot;/*/&quot;</code> does not yet end the block comment, as the ending would be overlapping the beginning.</li>\n</ul>\n\n<p>The first effective comment takes precedence over others.</p>\n\n<ul>\n\t<li>For example, if the string <code>&quot;//&quot;</code> occurs in a block comment, it is ignored.</li>\n\t<li>Similarly, if the string <code>&quot;/*&quot;</code> occurs in a line or block comment, it is also ignored.</li>\n</ul>\n\n<p>If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.</p>\n\n<p>There will be no control characters, single quote, or double quote characters.</p>\n\n<ul>\n\t<li>For example, <code>source = &quot;string s = &quot;/* Not a comment. */&quot;;&quot;</code> will not be a test case.</li>\n</ul>\n\n<p>Also, nothing else such as defines or macros will interfere with the comments.</p>\n\n<p>It is guaranteed that every open block comment will eventually be closed, so <code>&quot;/*&quot;</code> outside of a line or block comment always starts a new comment.</p>\n\n<p>Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details.</p>\n\n<p>After removing the comments from the source code, return <em>the source code in the same format</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = [&quot;/*Test program */&quot;, &quot;int main()&quot;, &quot;{ &quot;, &quot;  // variable declaration &quot;, &quot;int a, b, c;&quot;, &quot;/* This is a test&quot;, &quot;   multiline  &quot;, &quot;   comment for &quot;, &quot;   testing */&quot;, &quot;a = b + c;&quot;, &quot;}&quot;]\n<strong>Output:</strong> [&quot;int main()&quot;,&quot;{ &quot;,&quot;  &quot;,&quot;int a, b, c;&quot;,&quot;a = b + c;&quot;,&quot;}&quot;]\n<strong>Explanation:</strong> The line by line code is visualized as below:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = [&quot;a/*comment&quot;, &quot;line&quot;, &quot;more_comment*/b&quot;]\n<strong>Output:</strong> [&quot;ab&quot;]\n<strong>Explanation:</strong> The original source string is &quot;a/*comment\\nline\\nmore_comment*/b&quot;, where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string &quot;ab&quot;, which when delimited by newline characters becomes [&quot;ab&quot;].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= source.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= source[i].length &lt;= 80</code></li>\n\t<li><code>source[i]</code> consists of printable <strong>ASCII</strong> characters.</li>\n\t<li>Every open block comment is eventually closed.</li>\n\t<li>There are no single-quote or&nbsp;double-quote in the input.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 684,
        "dislikes": 1770,
        "similarQuestions": "[{\"title\": \"Mini Parser\", \"titleSlug\": \"mini-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ternary Expression Parser\", \"titleSlug\": \"ternary-expression-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"68.6K\", \"totalSubmission\": \"178.7K\", \"totalAcceptedRaw\": 68633, \"totalSubmissionRaw\": 178688, \"acRate\": \"38.4%\"}",
        "hints": [
          "Carefully parse each line according to the following rules:\r\n\r\n* If we start a block comment and we aren't in a block, then we will skip over the next two characters and change our state to be in a block.\r\n\r\n* If we end a block comment and we are in a block, then we will skip over the next two characters and change our state to be *not* in a block.\r\n\r\n* If we start a line comment and we aren't in a block, then we will ignore the rest of the line.\r\n\r\n* If we aren't in a block comment (and it wasn't the start of a comment), we will record the character we are at.\r\n\r\n* At the end of each line, if we aren't in a block, we will record the line."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "mini-parser",
          "title": "Mini Parser",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "ternary-expression-parser",
          "title": "Ternary Expression Parser",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Carefully parse each line according to the following rules:\r\n\r\n* If we start a block comment and we aren't in a block, then we will skip over the next two characters and change our state to be in a block.\r\n\r\n* If we end a block comment and we are in a block, then we will skip over the next two characters and change our state to be *not* in a block.\r\n\r\n* If we start a line comment and we aren't in a block, then we will ignore the rest of the line.\r\n\r\n* If we aren't in a block comment (and it wasn't the start of a comment), we will record the character we are at.\r\n\r\n* At the end of each line, if we aren't in a block, we will record the line."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "candy-crush": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "723",
        "title": "Candy Crush",
        "titleSlug": "candy-crush",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1000,
        "dislikes": 520,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"70.3K\", \"totalSubmission\": \"91.5K\", \"totalAcceptedRaw\": 70340, \"totalSubmissionRaw\": 91493, \"acRate\": \"76.9%\"}",
        "hints": [
          "Carefully perform the \"crush\" and \"gravity\" steps.  In the crush step, flag each candy that should be removed, then go through and crush each flagged candy.  In the gravity step, collect the candy in each column and then rewrite the column appropriately.  Do these steps repeatedly until there's no work left to do."
        ]
      },
      "similar": [],
      "hints": [
        "Carefully perform the \"crush\" and \"gravity\" steps.  In the crush step, flag each candy that should be removed, then go through and crush each flagged candy.  In the gravity step, collect the candy in each column and then rewrite the column appropriately.  Do these steps repeatedly until there's no work left to do."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "find-pivot-index": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "724",
        "title": "Find Pivot Index",
        "titleSlug": "find-pivot-index",
        "content": "<p>Given an array of integers <code>nums</code>, calculate the <strong>pivot index</strong> of this array.</p>\n\n<p>The <strong>pivot index</strong> is the index where the sum of all the numbers <strong>strictly</strong> to the left of the index is equal to the sum of all the numbers <strong>strictly</strong> to the index&#39;s right.</p>\n\n<p>If the index is on the left edge of the array, then the left sum is <code>0</code> because there are no elements to the left. This also applies to the right edge of the array.</p>\n\n<p>Return <em>the <strong>leftmost pivot index</strong></em>. If no such index exists, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,7,3,6,5,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nThere is no index that satisfies the conditions in the problem statement.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as&nbsp;1991:&nbsp;<a href=\"https://leetcode.com/problems/find-the-middle-index-in-array/\" target=\"_blank\">https://leetcode.com/problems/find-the-middle-index-in-array/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7987,
        "dislikes": 810,
        "similarQuestions": "[{\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Middle Index in Array\", \"titleSlug\": \"find-the-middle-index-in-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Split Array\", \"titleSlug\": \"number-of-ways-to-split-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Sum Score of Array\", \"titleSlug\": \"maximum-sum-score-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Left and Right Sum Differences\", \"titleSlug\": \"left-and-right-sum-differences\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"985.9K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 985878, \"totalSubmissionRaw\": 1741245, \"acRate\": \"56.6%\"}",
        "hints": [
          "Create an array sumLeft where sumLeft[i] is the sum of all the numbers to the left of index i.",
          "Create an array sumRight where sumRight[i] is the sum of all the numbers to the right of index i.",
          "For each index i, check if sumLeft[i] equals sumRight[i] return i. If no i found, return -1."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "subarray-sum-equals-k",
          "title": "Subarray Sum Equals K",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "find-the-middle-index-in-array",
          "title": "Find the Middle Index in Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-split-array",
          "title": "Number of Ways to Split Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-sum-score-of-array",
          "title": "Maximum Sum Score of Array",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "left-and-right-sum-differences",
          "title": "Left and Right Sum Differences",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Create an array sumLeft where sumLeft[i] is the sum of all the numbers to the left of index i.",
        "Create an array sumRight where sumRight[i] is the sum of all the numbers to the right of index i.",
        "For each index i, check if sumLeft[i] equals sumRight[i] return i. If no i found, return -1."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "split-linked-list-in-parts": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "725",
        "title": "Split Linked List in Parts",
        "titleSlug": "split-linked-list-in-parts",
        "content": "<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, split the linked list into <code>k</code> consecutive linked list parts.</p>\n\n<p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.</p>\n\n<p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p>\n\n<p>Return <em>an array of the </em><code>k</code><em> parts</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg\" style=\"width: 400px; height: 134px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3], k = 5\n<strong>Output:</strong> [[1],[2],[3],[],[]]\n<strong>Explanation:</strong>\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg\" style=\"width: 600px; height: 60px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10], k = 3\n<strong>Output:</strong> [[1,2,3,4],[5,6,7],[8,9,10]]\n<strong>Explanation:</strong>\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 1000]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3811,
        "dislikes": 305,
        "similarQuestions": "[{\"title\": \"Rotate List\", \"titleSlug\": \"rotate-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Odd Even Linked List\", \"titleSlug\": \"odd-even-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split a Circular Linked List\", \"titleSlug\": \"split-a-circular-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Linked List", "slug": "linked-list" }],
        "stats": "{\"totalAccepted\": \"189.2K\", \"totalSubmission\": \"296.4K\", \"totalAcceptedRaw\": 189238, \"totalSubmissionRaw\": 296365, \"acRate\": \"63.9%\"}",
        "hints": [
          "If there are N nodes in the list, and k parts, then every part has N/k elements, except the first N%k parts have an extra one."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "rotate-list",
          "title": "Rotate List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "odd-even-linked-list",
          "title": "Odd Even Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "split-a-circular-linked-list",
          "title": "Split a Circular Linked List",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "If there are N nodes in the list, and k parts, then every part has N/k elements, except the first N%k parts have an extra one."
      ],
      "relatedTopics": [{ "name": "Linked List", "slug": "linked-list" }]
    }
  },
  "number-of-atoms": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "726",
        "title": "Number of Atoms",
        "titleSlug": "number-of-atoms",
        "content": "<p>Given a string <code>formula</code> representing a chemical formula, return <em>the count of each atom</em>.</p>\n\n<p>The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p>\n\n<p>One or more digits representing that element&#39;s count may follow if the count is greater than <code>1</code>. If the count is <code>1</code>, no digits will follow.</p>\n\n<ul>\n\t<li>For example, <code>&quot;H2O&quot;</code> and <code>&quot;H2O2&quot;</code> are possible, but <code>&quot;H1O2&quot;</code> is impossible.</li>\n</ul>\n\n<p>Two formulas are concatenated together to produce another formula.</p>\n\n<ul>\n\t<li>For example, <code>&quot;H2O2He3Mg4&quot;</code> is also a formula.</li>\n</ul>\n\n<p>A formula placed in parentheses, and a count (optionally added) is also a formula.</p>\n\n<ul>\n\t<li>For example, <code>&quot;(H2O2)&quot;</code> and <code>&quot;(H2O2)3&quot;</code> are formulas.</li>\n</ul>\n\n<p>Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than <code>1</code>), followed by the second name (in sorted order), followed by its count (if that count is more than <code>1</code>), and so on.</p>\n\n<p>The test cases are generated so that all the values in the output fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;H2O&quot;\n<strong>Output:</strong> &quot;H2O&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;O&#39;: 1}.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;Mg(OH)2&quot;\n<strong>Output:</strong> &quot;H2MgO2&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;K4(ON(SO3)2)2&quot;\n<strong>Output:</strong> &quot;K4N2O14S4&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= formula.length &lt;= 1000</code></li>\n\t<li><code>formula</code> consists of English letters, digits, <code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.</li>\n\t<li><code>formula</code> is always valid.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1231,
        "dislikes": 283,
        "similarQuestions": "[{\"title\": \"Decode String\", \"titleSlug\": \"decode-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Encode String with Shortest Length\", \"titleSlug\": \"encode-string-with-shortest-length\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Parse Lisp Expression\", \"titleSlug\": \"parse-lisp-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"57.1K\", \"totalSubmission\": \"108.4K\", \"totalAcceptedRaw\": 57062, \"totalSubmissionRaw\": 108442, \"acRate\": \"52.6%\"}",
        "hints": [
          "To parse formula[i:], when we see a `'('`, we will parse recursively whatever is inside the brackets (up to the correct closing ending bracket) and add it to our count, multiplying by the following multiplicity if there is one.\r\n\r\nOtherwise, we should see an uppercase character: we will parse the rest of the letters to get the name, and add that (plus the multiplicity if there is one.)"
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "decode-string",
          "title": "Decode String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "encode-string-with-shortest-length",
          "title": "Encode String with Shortest Length",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "parse-lisp-expression",
          "title": "Parse Lisp Expression",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "To parse formula[i:], when we see a `'('`, we will parse recursively whatever is inside the brackets (up to the correct closing ending bracket) and add it to our count, multiplying by the following multiplicity if there is one.\r\n\r\nOtherwise, we should see an uppercase character: we will parse the rest of the letters to get the name, and add that (plus the multiplicity if there is one.)"
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "minimum-window-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "727",
        "title": "Minimum Window Subsequence",
        "titleSlug": "minimum-window-subsequence",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1435,
        "dislikes": 87,
        "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Continuous Increasing Subsequence\", \"titleSlug\": \"longest-continuous-increasing-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Sliding Window", "slug": "sliding-window" }
        ],
        "stats": "{\"totalAccepted\": \"87.9K\", \"totalSubmission\": \"203.3K\", \"totalAcceptedRaw\": 87897, \"totalSubmissionRaw\": 203287, \"acRate\": \"43.2%\"}",
        "hints": [
          "Let dp[j][e] = s be the largest index for which S[s:e+1] has T[:j] as a substring."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-window-substring",
          "title": "Minimum Window Substring",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "longest-continuous-increasing-subsequence",
          "title": "Longest Continuous Increasing Subsequence",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Let dp[j][e] = s be the largest index for which S[s:e+1] has T[:j] as a substring."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Sliding Window", "slug": "sliding-window" }
      ]
    }
  },
  "self-dividing-numbers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "728",
        "title": "Self Dividing Numbers",
        "titleSlug": "self-dividing-numbers",
        "content": "<p>A <strong>self-dividing number</strong> is a number that is divisible by every digit it contains.</p>\n\n<ul>\n\t<li>For example, <code>128</code> is <strong>a self-dividing number</strong> because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.</li>\n</ul>\n\n<p>A <strong>self-dividing number</strong> is not allowed to contain the digit zero.</p>\n\n<p>Given two integers <code>left</code> and <code>right</code>, return <em>a list of all the <strong>self-dividing numbers</strong> in the range</em> <code>[left, right]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> left = 1, right = 22\n<strong>Output:</strong> [1,2,3,4,5,6,7,8,9,11,12,15,22]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> left = 47, right = 85\n<strong>Output:</strong> [48,55,66,77]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left &lt;= right &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1713,
        "dislikes": 368,
        "similarQuestions": "[{\"title\": \"Perfect Number\", \"titleSlug\": \"perfect-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Check if Number Has Equal Digit Count and Digit Value\", \"titleSlug\": \"check-if-number-has-equal-digit-count-and-digit-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count the Digits That Divide a Number\", \"titleSlug\": \"count-the-digits-that-divide-a-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"229.1K\", \"totalSubmission\": \"292.8K\", \"totalAcceptedRaw\": 229115, \"totalSubmissionRaw\": 292762, \"acRate\": \"78.3%\"}",
        "hints": [
          "For each number in the range, check whether it is self dividing by converting that number to a character array (or string in Python), then checking that each digit is nonzero and divides the original number."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "perfect-number",
          "title": "Perfect Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-number-has-equal-digit-count-and-digit-value",
          "title": "Check if Number Has Equal Digit Count and Digit Value",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-the-digits-that-divide-a-number",
          "title": "Count the Digits That Divide a Number",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "For each number in the range, check whether it is self dividing by converting that number to a character array (or string in Python), then checking that each digit is nonzero and divides the original number."
      ],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "my-calendar-i": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "729",
        "title": "My Calendar I",
        "titleSlug": "my-calendar-i",
        "content": "<p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a <strong>double booking</strong>.</p>\n\n<p>A <strong>double booking</strong> happens when two events have some non-empty intersection (i.e., some moment is common to both events.).</p>\n\n<p>The event can be represented as a pair of integers <code>start</code> and <code>end</code> that represents a booking on the half-open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\n\n<p>Implement the <code>MyCalendar</code> class:</p>\n\n<ul>\n\t<li><code>MyCalendar()</code> Initializes the calendar object.</li>\n\t<li><code>boolean book(int start, int end)</code> Returns <code>true</code> if the event can be added to the calendar successfully without causing a <strong>double booking</strong>. Otherwise, return <code>false</code> and do not add the event to the calendar.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCalendar&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;]\n[[], [10, 20], [15, 25], [20, 30]]\n<strong>Output</strong>\n[null, true, false, true]\n\n<strong>Explanation</strong>\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>1000</code> calls will be made to <code>book</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4108,
        "dislikes": 106,
        "similarQuestions": "[{\"title\": \"My Calendar II\", \"titleSlug\": \"my-calendar-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"My Calendar III\", \"titleSlug\": \"my-calendar-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Determine if Two Events Have Conflict\", \"titleSlug\": \"determine-if-two-events-have-conflict\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"270.6K\", \"totalSubmission\": \"478.3K\", \"totalAcceptedRaw\": 270595, \"totalSubmissionRaw\": 478337, \"acRate\": \"56.6%\"}",
        "hints": [
          "Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "my-calendar-ii",
          "title": "My Calendar II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "my-calendar-iii",
          "title": "My Calendar III",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "determine-if-two-events-have-conflict",
          "title": "Determine if Two Events Have Conflict",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added."
      ],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "count-different-palindromic-subsequences": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "730",
        "title": "Count Different Palindromic Subsequences",
        "titleSlug": "count-different-palindromic-subsequences",
        "content": "<p>Given a string s, return <em>the number of different non-empty palindromic subsequences in</em> <code>s</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A subsequence of a string is obtained by deleting zero or more characters from the string.</p>\n\n<p>A sequence is palindromic if it is equal to the sequence reversed.</p>\n\n<p>Two sequences <code>a<sub>1</sub>, a<sub>2</sub>, ...</code> and <code>b<sub>1</sub>, b<sub>2</sub>, ...</code> are different if there is some <code>i</code> for which <code>a<sub>i</sub> != b<sub>i</sub></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bccb&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The 6 different non-empty palindromic subsequences are &#39;b&#39;, &#39;c&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;bcb&#39;, &#39;bccb&#39;.\nNote that &#39;bcb&#39; is counted only once, even though it occurs twice.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba&quot;\n<strong>Output:</strong> 104860361\n<strong>Explanation:</strong> There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10<sup>9</sup> + 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>, or <code>&#39;d&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1873,
        "dislikes": 95,
        "similarQuestions": "[{\"title\": \"Longest Palindromic Subsequence\", \"titleSlug\": \"longest-palindromic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Palindromic Subsequences\", \"titleSlug\": \"count-palindromic-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"35.3K\", \"totalSubmission\": \"78.4K\", \"totalAcceptedRaw\": 35272, \"totalSubmissionRaw\": 78379, \"acRate\": \"45.0%\"}",
        "hints": [
          "Let dp(i, j) be the answer for the string T = S[i:j+1] including the empty sequence. The answer is the number of unique characters in T, plus palindromes of the form \"a_a\", \"b_b\", \"c_c\", and \"d_d\", where \"_\" represents zero or more characters."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-palindromic-subsequence",
          "title": "Longest Palindromic Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-palindromic-subsequences",
          "title": "Count Palindromic Subsequences",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Let dp(i, j) be the answer for the string T = S[i:j+1] including the empty sequence. The answer is the number of unique characters in T, plus palindromes of the form \"a_a\", \"b_b\", \"c_c\", and \"d_d\", where \"_\" represents zero or more characters."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "my-calendar-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "731",
        "title": "My Calendar II",
        "titleSlug": "my-calendar-ii",
        "content": "<p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a <strong>triple booking</strong>.</p>\n\n<p>A <strong>triple booking</strong> happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).</p>\n\n<p>The event can be represented as a pair of integers <code>start</code> and <code>end</code> that represents a booking on the half-open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\n\n<p>Implement the <code>MyCalendarTwo</code> class:</p>\n\n<ul>\n\t<li><code>MyCalendarTwo()</code> Initializes the calendar object.</li>\n\t<li><code>boolean book(int start, int end)</code> Returns <code>true</code> if the event can be added to the calendar successfully without causing a <strong>triple booking</strong>. Otherwise, return <code>false</code> and do not add the event to the calendar.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCalendarTwo&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\n<strong>Output</strong>\n[null, true, true, true, false, true, true]\n\n<strong>Explanation</strong>\nMyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked. \nmyCalendarTwo.book(50, 60); // return True, The event can be booked. \nmyCalendarTwo.book(10, 40); // return True, The event can be double booked. \nmyCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>1000</code> calls will be made to <code>book</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1685,
        "dislikes": 145,
        "similarQuestions": "[{\"title\": \"My Calendar I\", \"titleSlug\": \"my-calendar-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"My Calendar III\", \"titleSlug\": \"my-calendar-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"96K\", \"totalSubmission\": \"173.8K\", \"totalAcceptedRaw\": 96000, \"totalSubmissionRaw\": 173750, \"acRate\": \"55.3%\"}",
        "hints": [
          "Store two sorted lists of intervals: one list will be all times that are at least single booked, and another list will be all times that are definitely double booked.  If none of the double bookings conflict, then the booking will succeed, and you should update your single and double bookings accordingly."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "my-calendar-i",
          "title": "My Calendar I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "my-calendar-iii",
          "title": "My Calendar III",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Store two sorted lists of intervals: one list will be all times that are at least single booked, and another list will be all times that are definitely double booked.  If none of the double bookings conflict, then the booking will succeed, and you should update your single and double bookings accordingly."
      ],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "my-calendar-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "732",
        "title": "My Calendar III",
        "titleSlug": "my-calendar-iii",
        "content": "<p>A <code>k</code>-booking happens when <code>k</code> events have some non-empty intersection (i.e., there is some time that is common to all <code>k</code> events.)</p>\n\n<p>You are given some events <code>[startTime, endTime)</code>, after each given event, return an integer <code>k</code> representing the maximum <code>k</code>-booking between all the previous events.</p>\n\n<p>Implement the <code>MyCalendarThree</code> class:</p>\n\n<ul>\n\t<li><code>MyCalendarThree()</code> Initializes the object.</li>\n\t<li><code>int book(int startTime, int endTime)</code> Returns an integer <code>k</code> representing the largest integer such that there exists a <code>k</code>-booking in the calendar.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyCalendarThree&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\n<strong>Output</strong>\n[null, 1, 1, 2, 3, 3, 3]\n\n<strong>Explanation</strong>\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1\nmyCalendarThree.book(50, 60); // return 1\nmyCalendarThree.book(10, 40); // return 2\nmyCalendarThree.book(5, 15); // return 3\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= startTime &lt; endTime &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>400</code> calls will be made to <code>book</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1914,
        "dislikes": 262,
        "similarQuestions": "[{\"title\": \"My Calendar I\", \"titleSlug\": \"my-calendar-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"My Calendar II\", \"titleSlug\": \"my-calendar-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Integers in Intervals\", \"titleSlug\": \"count-integers-in-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Design", "slug": "design" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"87.6K\", \"totalSubmission\": \"122.5K\", \"totalAcceptedRaw\": 87625, \"totalSubmissionRaw\": 122456, \"acRate\": \"71.6%\"}",
        "hints": [
          "Treat each interval [start, end) as two events \"start\" and \"end\", and process them in sorted order."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "my-calendar-i",
          "title": "My Calendar I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "my-calendar-ii",
          "title": "My Calendar II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "count-integers-in-intervals",
          "title": "Count Integers in Intervals",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Treat each interval [start, end) as two events \"start\" and \"end\", and process them in sorted order."
      ],
      "relatedTopics": [
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Design", "slug": "design" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "flood-fill": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "733",
        "title": "Flood Fill",
        "titleSlug": "flood-fill",
        "content": "<p>An image is represented by an <code>m x n</code> integer grid <code>image</code> where <code>image[i][j]</code> represents the pixel value of the image.</p>\n\n<p>You are also given three integers <code>sr</code>, <code>sc</code>, and <code>color</code>. You should perform a <strong>flood fill</strong> on the image starting from the pixel <code>image[sr][sc]</code>.</p>\n\n<p>To perform a <strong>flood fill</strong>, consider the starting pixel, plus any pixels connected <strong>4-directionally</strong> to the starting pixel of the same color as the starting pixel, plus any pixels connected <strong>4-directionally</strong> to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with <code>color</code>.</p>\n\n<p>Return <em>the modified image after performing the flood fill</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg\" style=\"width: 613px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\n<strong>Output:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>Explanation:</strong> From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\n<strong>Output:</strong> [[0,0,0],[0,0,0]]\n<strong>Explanation:</strong> The starting pixel is already colored 0, so no changes are made to the image.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == image.length</code></li>\n\t<li><code>n == image[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>0 &lt;= image[i][j], color &lt; 2<sup>16</sup></code></li>\n\t<li><code>0 &lt;= sr &lt; m</code></li>\n\t<li><code>0 &lt;= sc &lt; n</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 8053,
        "dislikes": 806,
        "similarQuestions": "[{\"title\": \"Island Perimeter\", \"titleSlug\": \"island-perimeter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"831.1K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 831077, \"totalSubmissionRaw\": 1310858, \"acRate\": \"63.4%\"}",
        "hints": [
          "Write a recursive function that paints the pixel if it's the correct color, then recurses on neighboring pixels."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "island-perimeter",
          "title": "Island Perimeter",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Write a recursive function that paints the pixel if it's the correct color, then recurses on neighboring pixels."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "sentence-similarity": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "734",
        "title": "Sentence Similarity",
        "titleSlug": "sentence-similarity",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 34,
        "dislikes": 46,
        "similarQuestions": "[{\"title\": \"Number of Provinces\", \"titleSlug\": \"number-of-provinces\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Accounts Merge\", \"titleSlug\": \"accounts-merge\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity II\", \"titleSlug\": \"sentence-similarity-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"64.3K\", \"totalSubmission\": \"145.6K\", \"totalAcceptedRaw\": 64299, \"totalSubmissionRaw\": 145560, \"acRate\": \"44.2%\"}",
        "hints": [
          "Two words w1 and w2 are similar if and only if w1 == w2, (w1, w2) was a pair, or (w2, w1) was a pair."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-provinces",
          "title": "Number of Provinces",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "accounts-merge",
          "title": "Accounts Merge",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "sentence-similarity-ii",
          "title": "Sentence Similarity II",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Two words w1 and w2 are similar if and only if w1 == w2, (w1, w2) was a pair, or (w2, w1) was a pair."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "asteroid-collision": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "735",
        "title": "Asteroid Collision",
        "titleSlug": "asteroid-collision",
        "content": "<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p>\n\n<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>\n\n<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [5,10,-5]\n<strong>Output:</strong> [5,10]\n<strong>Explanation:</strong> The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [8,-8]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The 8 and -8 collide exploding each other.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [10,2,-5]\n<strong>Output:</strong> [10]\n<strong>Explanation:</strong> The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= asteroids.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li>\n\t<li><code>asteroids[i] != 0</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7412,
        "dislikes": 896,
        "similarQuestions": "[{\"title\": \"Can Place Flowers\", \"titleSlug\": \"can-place-flowers\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Destroying Asteroids\", \"titleSlug\": \"destroying-asteroids\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Collisions on a Road\", \"titleSlug\": \"count-collisions-on-a-road\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Robot Collisions\", \"titleSlug\": \"robot-collisions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"432K\", \"totalSubmission\": \"962.7K\", \"totalAcceptedRaw\": 432043, \"totalSubmissionRaw\": 962665, \"acRate\": \"44.9%\"}",
        "hints": [
          "Say a row of asteroids is stable.  What happens when a new asteroid is added on the right?"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "can-place-flowers",
          "title": "Can Place Flowers",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "destroying-asteroids",
          "title": "Destroying Asteroids",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-collisions-on-a-road",
          "title": "Count Collisions on a Road",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "robot-collisions",
          "title": "Robot Collisions",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Say a row of asteroids is stable.  What happens when a new asteroid is added on the right?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "parse-lisp-expression": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "736",
        "title": "Parse Lisp Expression",
        "titleSlug": "parse-lisp-expression",
        "content": "<p>You are given a string expression representing a Lisp-like expression to return the integer value of.</p>\n\n<p>The syntax for these expressions is given as follows.</p>\n\n<ul>\n\t<li>An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.</li>\n\t<li>(An integer could be positive or negative.)</li>\n\t<li>A let expression takes the form <code>&quot;(let v<sub>1</sub> e<sub>1</sub> v<sub>2</sub> e<sub>2</sub> ... v<sub>n</sub> e<sub>n</sub> expr)&quot;</code>, where let is always the string <code>&quot;let&quot;</code>, then there are one or more pairs of alternating variables and expressions, meaning that the first variable <code>v<sub>1</sub></code> is assigned the value of the expression <code>e<sub>1</sub></code>, the second variable <code>v<sub>2</sub></code> is assigned the value of the expression <code>e<sub>2</sub></code>, and so on sequentially; and then the value of this let expression is the value of the expression <code>expr</code>.</li>\n\t<li>An add expression takes the form <code>&quot;(add e<sub>1</sub> e<sub>2</sub>)&quot;</code> where add is always the string <code>&quot;add&quot;</code>, there are always two expressions <code>e<sub>1</sub></code>, <code>e<sub>2</sub></code> and the result is the addition of the evaluation of <code>e<sub>1</sub></code> and the evaluation of <code>e<sub>2</sub></code>.</li>\n\t<li>A mult expression takes the form <code>&quot;(mult e<sub>1</sub> e<sub>2</sub>)&quot;</code> where mult is always the string <code>&quot;mult&quot;</code>, there are always two expressions <code>e<sub>1</sub></code>, <code>e<sub>2</sub></code> and the result is the multiplication of the evaluation of e1 and the evaluation of e2.</li>\n\t<li>For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names <code>&quot;add&quot;</code>, <code>&quot;let&quot;</code>, and <code>&quot;mult&quot;</code> are protected and will never be used as variable names.</li>\n\t<li>Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(let x 2 (mult x (let x 3 y 4 (add x y))))&quot;\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(let x 3 x 2 x)&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Assignment in let statements is processed sequentially.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(let x 1 y 2 x (add x y) (add x y))&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 2000</code></li>\n\t<li>There are no leading or trailing spaces in <code>expression</code>.</li>\n\t<li>All tokens are separated by a single space in <code>expression</code>.</li>\n\t<li>The answer and all intermediate calculations of that answer are guaranteed to fit in a <strong>32-bit</strong> integer.</li>\n\t<li>The expression is guaranteed to be legal and evaluate to an integer.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 465,
        "dislikes": 351,
        "similarQuestions": "[{\"title\": \"Ternary Expression Parser\", \"titleSlug\": \"ternary-expression-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Atoms\", \"titleSlug\": \"number-of-atoms\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator IV\", \"titleSlug\": \"basic-calculator-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"21.3K\", \"totalSubmission\": \"41.3K\", \"totalAcceptedRaw\": 21296, \"totalSubmissionRaw\": 41308, \"acRate\": \"51.6%\"}",
        "hints": [
          "* If the expression starts with a digit or '-', it's an integer: return it.\r\n\r\n* If the expression starts with a letter, it's a variable.  Recall it by checking the current scope in reverse order.\r\n\r\n* Otherwise, group the tokens (variables or expressions) within this expression by counting the \"balance\" `bal` of the occurrences of `'('` minus the number of occurrences of `')'`.  When the balance is zero, we have ended a token.  For example, `(add 1 (add 2 3))` should have tokens `'1'` and `'(add 2 3)'`.\r\n\r\n* For add and mult expressions, evaluate each token and return the addition or multiplication of them.\r\n\r\n* For let expressions, evaluate each expression sequentially and assign it to the variable in the current scope, then return the evaluation of the final expression."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "ternary-expression-parser",
          "title": "Ternary Expression Parser",
          "isPaidOnly": true
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-atoms",
          "title": "Number of Atoms",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator-iv",
          "title": "Basic Calculator IV",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "* If the expression starts with a digit or '-', it's an integer: return it.\r\n\r\n* If the expression starts with a letter, it's a variable.  Recall it by checking the current scope in reverse order.\r\n\r\n* Otherwise, group the tokens (variables or expressions) within this expression by counting the \"balance\" `bal` of the occurrences of `'('` minus the number of occurrences of `')'`.  When the balance is zero, we have ended a token.  For example, `(add 1 (add 2 3))` should have tokens `'1'` and `'(add 2 3)'`.\r\n\r\n* For add and mult expressions, evaluate each token and return the addition or multiplication of them.\r\n\r\n* For let expressions, evaluate each expression sequentially and assign it to the variable in the current scope, then return the evaluation of the final expression."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "sentence-similarity-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "737",
        "title": "Sentence Similarity II",
        "titleSlug": "sentence-similarity-ii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 821,
        "dislikes": 43,
        "similarQuestions": "[{\"title\": \"Number of Provinces\", \"titleSlug\": \"number-of-provinces\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Accounts Merge\", \"titleSlug\": \"accounts-merge\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sentence Similarity\", \"titleSlug\": \"sentence-similarity\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" }
        ],
        "stats": "{\"totalAccepted\": \"68.1K\", \"totalSubmission\": \"137.5K\", \"totalAcceptedRaw\": 68075, \"totalSubmissionRaw\": 137478, \"acRate\": \"49.5%\"}",
        "hints": [
          "Consider the graphs where each pair in \"pairs\" is an edge.  Two words are similar if they are the same, or are in the same connected component of this graph."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-provinces",
          "title": "Number of Provinces",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "accounts-merge",
          "title": "Accounts Merge",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "sentence-similarity",
          "title": "Sentence Similarity",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Consider the graphs where each pair in \"pairs\" is an edge.  Two words are similar if they are the same, or are in the same connected component of this graph."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" }
      ]
    }
  },
  "monotone-increasing-digits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "738",
        "title": "Monotone Increasing Digits",
        "titleSlug": "monotone-increasing-digits",
        "content": "<p>An integer has <strong>monotone increasing digits</strong> if and only if each pair of adjacent digits <code>x</code> and <code>y</code> satisfy <code>x &lt;= y</code>.</p>\n\n<p>Given an integer <code>n</code>, return <em>the largest number that is less than or equal to </em><code>n</code><em> with <strong>monotone increasing digits</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1234\n<strong>Output:</strong> 1234\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 332\n<strong>Output:</strong> 299\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1279,
        "dislikes": 103,
        "similarQuestions": "[{\"title\": \"Remove K Digits\", \"titleSlug\": \"remove-k-digits\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"49.9K\", \"totalSubmission\": \"104.6K\", \"totalAcceptedRaw\": 49872, \"totalSubmissionRaw\": 104594, \"acRate\": \"47.7%\"}",
        "hints": [
          "Build the answer digit by digit, adding the largest possible one that would make the number still less than or equal to N."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "remove-k-digits",
          "title": "Remove K Digits",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Build the answer digit by digit, adding the largest possible one that would make the number still less than or equal to N."
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "daily-temperatures": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "739",
        "title": "Daily Temperatures",
        "titleSlug": "daily-temperatures",
        "content": "<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73]\n<strong>Output:</strong> [1,1,4,2,1,1,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,40,50,60]\n<strong>Output:</strong> [1,1,1,0]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,60,90]\n<strong>Output:</strong> [1,1,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 12057,
        "dislikes": 272,
        "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Online Stock Span\", \"titleSlug\": \"online-stock-span\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"765.8K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 765807, \"totalSubmissionRaw\": 1161761, \"acRate\": \"65.9%\"}",
        "hints": [
          "If the temperature is say, 70 today, then in the future a warmer temperature must be either 71, 72, 73, ..., 99, or 100.  We could remember when all of them occur next."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "next-greater-element-i",
          "title": "Next Greater Element I",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "online-stock-span",
          "title": "Online Stock Span",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "If the temperature is say, 70 today, then in the future a warmer temperature must be either 71, 72, 73, ..., 99, or 100.  We could remember when all of them occur next."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "delete-and-earn": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "740",
        "title": "Delete and Earn",
        "titleSlug": "delete-and-earn",
        "content": "<p>You are given an integer array <code>nums</code>. You want to maximize the number of points you get by performing the following operation any number of times:</p>\n\n<ul>\n\t<li>Pick any <code>nums[i]</code> and delete it to earn <code>nums[i]</code> points. Afterwards, you must delete <b>every</b> element equal to <code>nums[i] - 1</code> and <strong>every</strong> element equal to <code>nums[i] + 1</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum number of points</strong> you can earn by applying the above operation some number of times</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,3,3,3,4]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2&#39;s and 4&#39;s are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7288,
        "dislikes": 366,
        "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"316.5K\", \"totalSubmission\": \"559.6K\", \"totalAcceptedRaw\": 316468, \"totalSubmissionRaw\": 559589, \"acRate\": \"56.6%\"}",
        "hints": [
          "If you take a number, you might as well take them all.  Keep track of what the value is of the subset of the input with maximum M when you either take or don't take M."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "house-robber",
          "title": "House Robber",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "If you take a number, you might as well take them all.  Keep track of what the value is of the subset of the input with maximum M when you either take or don't take M."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "cherry-pickup": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "741",
        "title": "Cherry Pickup",
        "titleSlug": "cherry-pickup",
        "content": "<p>You are given an <code>n x n</code> <code>grid</code> representing a field of cherries, each cell is one of three possible integers.</p>\n\n<ul>\n\t<li><code>0</code> means the cell is empty, so you can pass through,</li>\n\t<li><code>1</code> means the cell contains a cherry that you can pick up and pass through, or</li>\n\t<li><code>-1</code> means the cell contains a thorn that blocks your way.</li>\n</ul>\n\n<p>Return <em>the maximum number of cherries you can collect by following the rules below</em>:</p>\n\n<ul>\n\t<li>Starting at the position <code>(0, 0)</code> and reaching <code>(n - 1, n - 1)</code> by moving right or down through valid path cells (cells with value <code>0</code> or <code>1</code>).</li>\n\t<li>After reaching <code>(n - 1, n - 1)</code>, returning to <code>(0, 0)</code> by moving left or up through valid path cells.</li>\n\t<li>When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell <code>0</code>.</li>\n\t<li>If there is no valid path between <code>(0, 0)</code> and <code>(n - 1, n - 1)</code>, then no cherries can be collected.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/grid.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,-1],[1,0,-1],[1,1,1]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>grid[i][j]</code> is <code>-1</code>, <code>0</code>, or <code>1</code>.</li>\n\t<li><code>grid[0][0] != -1</code></li>\n\t<li><code>grid[n - 1][n - 1] != -1</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4087,
        "dislikes": 148,
        "similarQuestions": "[{\"title\": \"Minimum Path Sum\", \"titleSlug\": \"minimum-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Dungeon Game\", \"titleSlug\": \"dungeon-game\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Path Quality of a Graph\", \"titleSlug\": \"maximum-path-quality-of-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Paths in Matrix Whose Sum Is Divisible by K\", \"titleSlug\": \"paths-in-matrix-whose-sum-is-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"74K\", \"totalSubmission\": \"202.1K\", \"totalAcceptedRaw\": 74039, \"totalSubmissionRaw\": 202082, \"acRate\": \"36.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-path-sum",
          "title": "Minimum Path Sum",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "dungeon-game",
          "title": "Dungeon Game",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-path-quality-of-a-graph",
          "title": "Maximum Path Quality of a Graph",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
          "title": "Paths in Matrix Whose Sum Is Divisible by K",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "closest-leaf-in-a-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "742",
        "title": "Closest Leaf in a Binary Tree",
        "titleSlug": "closest-leaf-in-a-binary-tree",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 851,
        "dislikes": 174,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"44.9K\", \"totalSubmission\": \"97.2K\", \"totalAcceptedRaw\": 44853, \"totalSubmissionRaw\": 97197, \"acRate\": \"46.1%\"}",
        "hints": [
          "Convert the tree to a general graph, and do a breadth-first search.  Alternatively, find the closest leaf for every node on the path from root to target."
        ]
      },
      "similar": [],
      "hints": [
        "Convert the tree to a general graph, and do a breadth-first search.  Alternatively, find the closest leaf for every node on the path from root to target."
      ],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "network-delay-time": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "743",
        "title": "Network Delay Time",
        "titleSlug": "network-delay-time",
        "content": "<p>You are given a network of <code>n</code> nodes, labeled from <code>1</code> to <code>n</code>. You are also given <code>times</code>, a list of travel times as directed edges <code>times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)</code>, where <code>u<sub>i</sub></code> is the source node, <code>v<sub>i</sub></code> is the target node, and <code>w<sub>i</sub></code> is the time it takes for a signal to travel from source to target.</p>\n\n<p>We will send a signal from a given node <code>k</code>. Return <em>the <strong>minimum</strong> time it takes for all the</em> <code>n</code> <em>nodes to receive the signal</em>. If it is impossible for all the <code>n</code> nodes to receive the signal, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png\" style=\"width: 217px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> times = [[1,2,1]], n = 2, k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> times = [[1,2,1]], n = 2, k = 2\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= times.length &lt;= 6000</code></li>\n\t<li><code>times[i].length == 3</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>0 &lt;= w<sub>i</sub> &lt;= 100</code></li>\n\t<li>All the pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are <strong>unique</strong>. (i.e., no multiple edges.)</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7135,
        "dislikes": 349,
        "similarQuestions": "[{\"title\": \"The Time When the Network Becomes Idle\", \"titleSlug\": \"the-time-when-the-network-becomes-idle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Second Minimum Time to Reach Destination\", \"titleSlug\": \"second-minimum-time-to-reach-destination\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Shortest Path", "slug": "shortest-path" }
        ],
        "stats": "{\"totalAccepted\": \"445.8K\", \"totalSubmission\": \"838.3K\", \"totalAcceptedRaw\": 445775, \"totalSubmissionRaw\": 838313, \"acRate\": \"53.2%\"}",
        "hints": [
          "We visit each node at some time, and if that time is better than the fastest time we've reached this node, we travel along outgoing edges in sorted order.  Alternatively, we could use Dijkstra's algorithm."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "the-time-when-the-network-becomes-idle",
          "title": "The Time When the Network Becomes Idle",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "second-minimum-time-to-reach-destination",
          "title": "Second Minimum Time to Reach Destination",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "We visit each node at some time, and if that time is better than the fastest time we've reached this node, we travel along outgoing edges in sorted order.  Alternatively, we could use Dijkstra's algorithm."
      ],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Shortest Path", "slug": "shortest-path" }
      ]
    }
  },
  "find-smallest-letter-greater-than-target": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "744",
        "title": "Find Smallest Letter Greater Than Target",
        "titleSlug": "find-smallest-letter-greater-than-target",
        "content": "<p>You are given an array of characters <code>letters</code> that is sorted in <strong>non-decreasing order</strong>, and a character <code>target</code>. There are <strong>at least two different</strong> characters in <code>letters</code>.</p>\n\n<p>Return <em>the smallest character in </em><code>letters</code><em> that is lexicographically greater than </em><code>target</code>. If such a character does not exist, return the first character in <code>letters</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;a&quot;\n<strong>Output:</strong> &quot;c&quot;\n<strong>Explanation:</strong> The smallest character that is lexicographically greater than &#39;a&#39; in letters is &#39;c&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;c&quot;\n<strong>Output:</strong> &quot;f&quot;\n<strong>Explanation:</strong> The smallest character that is lexicographically greater than &#39;c&#39; in letters is &#39;f&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> letters = [&quot;x&quot;,&quot;x&quot;,&quot;y&quot;,&quot;y&quot;], target = &quot;z&quot;\n<strong>Output:</strong> &quot;x&quot;\n<strong>Explanation:</strong> There are no characters in letters that is lexicographically greater than &#39;z&#39; so we return letters[0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= letters.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>letters[i]</code> is a lowercase English letter.</li>\n\t<li><code>letters</code> is sorted in <strong>non-decreasing</strong> order.</li>\n\t<li><code>letters</code> contains at least two different characters.</li>\n\t<li><code>target</code> is a lowercase English letter.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4254,
        "dislikes": 2176,
        "similarQuestions": "[{\"title\": \"Count Elements With Strictly Smaller and Greater Elements \", \"titleSlug\": \"count-elements-with-strictly-smaller-and-greater-elements\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"442.3K\", \"totalSubmission\": \"858.6K\", \"totalAcceptedRaw\": 442321, \"totalSubmissionRaw\": 858612, \"acRate\": \"51.5%\"}",
        "hints": [
          "Try to find whether each of 26 next letters are in the given string array."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "count-elements-with-strictly-smaller-and-greater-elements",
          "title": "Count Elements With Strictly Smaller and Greater Elements ",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Try to find whether each of 26 next letters are in the given string array."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "prefix-and-suffix-search": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "745",
        "title": "Prefix and Suffix Search",
        "titleSlug": "prefix-and-suffix-search",
        "content": "<p>Design a special dictionary that searches the words in it by a prefix and a suffix.</p>\n\n<p>Implement the <code>WordFilter</code> class:</p>\n\n<ul>\n\t<li><code>WordFilter(string[] words)</code> Initializes the object with the <code>words</code> in the dictionary.</li>\n\t<li><code>f(string pref, string suff)</code> Returns <em>the index of the word in the dictionary,</em> which has the prefix <code>pref</code> and the suffix <code>suff</code>. If there is more than one valid index, return <strong>the largest</strong> of them. If there is no such word in the dictionary, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordFilter&quot;, &quot;f&quot;]\n[[[&quot;apple&quot;]], [&quot;a&quot;, &quot;e&quot;]]\n<strong>Output</strong>\n[null, 0]\n<strong>Explanation</strong>\nWordFilter wordFilter = new WordFilter([&quot;apple&quot;]);\nwordFilter.f(&quot;a&quot;, &quot;e&quot;); // return 0, because the word at index 0 has prefix = &quot;a&quot; and suffix = &quot;e&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= pref.length, suff.length &lt;= 7</code></li>\n\t<li><code>words[i]</code>, <code>pref</code> and <code>suff</code> consist of lowercase English letters only.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to the function <code>f</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2241,
        "dislikes": 478,
        "similarQuestions": "[{\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Design", "slug": "design" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"93.4K\", \"totalSubmission\": \"227.6K\", \"totalAcceptedRaw\": 93354, \"totalSubmissionRaw\": 227555, \"acRate\": \"41.0%\"}",
        "hints": [
          "Take \"apple\" as an example, we will insert add \"apple{apple\", \"pple{apple\", \"ple{apple\", \"le{apple\", \"e{apple\", \"{apple\" into the Trie Tree.",
          "If the query is: prefix = \"app\", suffix = \"le\", we can find it by querying our trie for\r\n\"le { app\".",
          "We use '{' because in ASCii Table, '{' is next to 'z', so we just need to create new TrieNode[27] instead of 26. Also, compared with traditional Trie, we add the attribute weight in class TrieNode.\r\nYou can still choose any different character."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "design-add-and-search-words-data-structure",
          "title": "Design Add and Search Words Data Structure",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Take \"apple\" as an example, we will insert add \"apple{apple\", \"pple{apple\", \"ple{apple\", \"le{apple\", \"e{apple\", \"{apple\" into the Trie Tree.",
        "If the query is: prefix = \"app\", suffix = \"le\", we can find it by querying our trie for\r\n\"le { app\".",
        "We use '{' because in ASCii Table, '{' is next to 'z', so we just need to create new TrieNode[27] instead of 26. Also, compared with traditional Trie, we add the attribute weight in class TrieNode.\r\nYou can still choose any different character."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Design", "slug": "design" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "min-cost-climbing-stairs": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "746",
        "title": "Min Cost Climbing Stairs",
        "titleSlug": "min-cost-climbing-stairs",
        "content": "<p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>i<sup>th</sup></code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p>\n\n<p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p>\n\n<p>Return <em>the minimum cost to reach the top of the floor</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [10,<u>15</u>,20]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [<u>1</u>,100,<u>1</u>,1,<u>1</u>,100,<u>1</u>,<u>1</u>,100,<u>1</u>]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= cost.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= cost[i] &lt;= 999</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 11015,
        "dislikes": 1672,
        "similarQuestions": "[{\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 1059093, \"totalSubmissionRaw\": 1623055, \"acRate\": \"65.3%\"}",
        "hints": [
          "Build an array dp where dp[i] is the minimum cost to climb to the top starting from the ith staircase.",
          "Assuming we have n staircase labeled from 0 to n - 1 and assuming the top is n, then dp[n] = 0, marking that if you are at the top, the cost is 0.",
          "Now, looping from n - 1 to 0, the dp[i] = cost[i] + min(dp[i + 1], dp[i + 2]). The answer will be the minimum of dp[0] and dp[1]"
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "climbing-stairs",
          "title": "Climbing Stairs",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Build an array dp where dp[i] is the minimum cost to climb to the top starting from the ith staircase.",
        "Assuming we have n staircase labeled from 0 to n - 1 and assuming the top is n, then dp[n] = 0, marking that if you are at the top, the cost is 0.",
        "Now, looping from n - 1 to 0, the dp[i] = cost[i] + min(dp[i + 1], dp[i + 2]). The answer will be the minimum of dp[0] and dp[1]"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "largest-number-at-least-twice-of-others": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "747",
        "title": "Largest Number At Least Twice of Others",
        "titleSlug": "largest-number-at-least-twice-of-others",
        "content": "<p>You are given an integer array <code>nums</code> where the largest integer is <strong>unique</strong>.</p>\n\n<p>Determine whether the largest element in the array is <strong>at least twice</strong> as much as every other number in the array. If it is, return <em>the <strong>index</strong> of the largest element, or return </em><code>-1</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,6,1,0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 4 is less than twice the value of 3, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n\t<li>The largest element in <code>nums</code> is unique.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1153,
        "dislikes": 880,
        "similarQuestions": "[{\"title\": \"Keep Multiplying Found Values by Two\", \"titleSlug\": \"keep-multiplying-found-values-by-two\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Largest Number After Digit Swaps by Parity\", \"titleSlug\": \"largest-number-after-digit-swaps-by-parity\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"228.7K\", \"totalSubmission\": \"474.1K\", \"totalAcceptedRaw\": 228736, \"totalSubmissionRaw\": 474077, \"acRate\": \"48.2%\"}",
        "hints": [
          "Scan through the array to find the unique largest element `m`, keeping track of it's index `maxIndex`.\r\n\r\nScan through the array again.  If we find some `x != m` with `m < 2*x`, we should return `-1`.\r\n\r\nOtherwise, we should return `maxIndex`."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "keep-multiplying-found-values-by-two",
          "title": "Keep Multiplying Found Values by Two",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "largest-number-after-digit-swaps-by-parity",
          "title": "Largest Number After Digit Swaps by Parity",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Scan through the array to find the unique largest element `m`, keeping track of it's index `maxIndex`.\r\n\r\nScan through the array again.  If we find some `x != m` with `m < 2*x`, we should return `-1`.\r\n\r\nOtherwise, we should return `maxIndex`."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "shortest-completing-word": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "748",
        "title": "Shortest Completing Word",
        "titleSlug": "shortest-completing-word",
        "content": "<p>Given a string <code>licensePlate</code> and an array of strings <code>words</code>, find the <strong>shortest completing</strong> word in <code>words</code>.</p>\n\n<p>A <strong>completing</strong> word is a word that <strong>contains all the letters</strong> in <code>licensePlate</code>. <strong>Ignore numbers and spaces</strong> in <code>licensePlate</code>, and treat letters as <strong>case insensitive</strong>. If a letter appears more than once in <code>licensePlate</code>, then it must appear in the word the same number of times or more.</p>\n\n<p>For example, if <code>licensePlate</code><code> = &quot;aBc 12c&quot;</code>, then it contains letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code> (ignoring case), and <code>&#39;c&#39;</code> twice. Possible <strong>completing</strong> words are <code>&quot;abccdef&quot;</code>, <code>&quot;caaacab&quot;</code>, and <code>&quot;cbca&quot;</code>.</p>\n\n<p>Return <em>the shortest <strong>completing</strong> word in </em><code>words</code><em>.</em> It is guaranteed an answer exists. If there are multiple shortest <strong>completing</strong> words, return the <strong>first</strong> one that occurs in <code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;,&quot;steps&quot;,&quot;stripe&quot;,&quot;stepple&quot;]\n<strong>Output:</strong> &quot;steps&quot;\n<strong>Explanation:</strong> licensePlate contains letters &#39;s&#39;, &#39;p&#39;, &#39;s&#39; (ignoring case), and &#39;t&#39;.\n&quot;step&quot; contains &#39;t&#39; and &#39;p&#39;, but only contains 1 &#39;s&#39;.\n&quot;steps&quot; contains &#39;t&#39;, &#39;p&#39;, and both &#39;s&#39; characters.\n&quot;stripe&quot; is missing an &#39;s&#39;.\n&quot;stepple&quot; is missing an &#39;s&#39;.\nSince &quot;steps&quot; is the only word containing all the letters, that is the answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;,&quot;pest&quot;,&quot;stew&quot;,&quot;show&quot;]\n<strong>Output:</strong> &quot;pest&quot;\n<strong>Explanation:</strong> licensePlate only contains the letter &#39;s&#39;. All the words contain &#39;s&#39;, but among these &quot;pest&quot;, &quot;stew&quot;, and &quot;show&quot; are shortest. The answer is &quot;pest&quot; because it is the word that appears earliest of the 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= licensePlate.length &lt;= 7</code></li>\n\t<li><code>licensePlate</code> contains digits, letters (uppercase or lowercase), or space <code>&#39; &#39;</code>.</li>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 15</code></li>\n\t<li><code>words[i]</code> consists of lower case English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 518,
        "dislikes": 1079,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"69.4K\", \"totalSubmission\": \"116.7K\", \"totalAcceptedRaw\": 69416, \"totalSubmissionRaw\": 116713, \"acRate\": \"59.5%\"}",
        "hints": [
          "Count only the letters (possibly converted to lowercase) of each word.  If a word is shorter and the count of each letter is at least the count of that letter in the licensePlate, it is the best answer we've seen yet."
        ]
      },
      "similar": [],
      "hints": [
        "Count only the letters (possibly converted to lowercase) of each word.  If a word is shorter and the count of each letter is at least the count of that letter in the licensePlate, it is the best answer we've seen yet."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "contain-virus": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "749",
        "title": "Contain Virus",
        "titleSlug": "contain-virus",
        "content": "<p>A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.</p>\n\n<p>The world is modeled as an <code>m x n</code> binary grid <code>isInfected</code>, where <code>isInfected[i][j] == 0</code> represents uninfected cells, and <code>isInfected[i][j] == 1</code> represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two <strong>4-directionally</strong> adjacent cells, on the shared boundary.</p>\n\n<p>Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There <strong>will never be a tie</strong>.</p>\n\n<p>Return <em>the number of walls used to quarantine all the infected regions</em>. If the world will become fully infected, return the number of walls used.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/01/virus11-grid.jpg\" style=\"width: 500px; height: 255px;\" />\n<pre>\n<strong>Input:</strong> isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/01/virus12edited-grid.jpg\" style=\"width: 500px; height: 257px;\" />\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/01/virus13edited-grid.jpg\" style=\"width: 500px; height: 261px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/01/virus2-grid.jpg\" style=\"width: 653px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> isInfected = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The region on the left only builds two new walls.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;isInfected.length</code></li>\n\t<li><code>n ==&nbsp;isInfected[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>isInfected[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li>There is always a contiguous viral region throughout the described process that will <strong>infect strictly more uncontaminated squares</strong> in the next round.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 374,
        "dislikes": 452,
        "similarQuestions": "[{\"title\": \"Count the Number of Infection Sequences\", \"titleSlug\": \"count-the-number-of-infection-sequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"11.6K\", \"totalSubmission\": \"22.9K\", \"totalAcceptedRaw\": 11647, \"totalSubmissionRaw\": 22905, \"acRate\": \"50.8%\"}",
        "hints": [
          "The implementation is long - we want to perfrom the following steps:\r\n\r\n* Find all viral regions (connected components), additionally for each region keeping track of the frontier (neighboring uncontaminated cells), and the perimeter of the region.\r\n\r\n* Disinfect the most viral region, adding it's perimeter to the answer.\r\n\r\n* Spread the virus in the remaining regions outward by 1 square."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-the-number-of-infection-sequences",
          "title": "Count the Number of Infection Sequences",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The implementation is long - we want to perfrom the following steps:\r\n\r\n* Find all viral regions (connected components), additionally for each region keeping track of the frontier (neighboring uncontaminated cells), and the perimeter of the region.\r\n\r\n* Disinfect the most viral region, adding it's perimeter to the answer.\r\n\r\n* Spread the virus in the remaining regions outward by 1 square."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "number-of-corner-rectangles": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "750",
        "title": "Number Of Corner Rectangles",
        "titleSlug": "number-of-corner-rectangles",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 613,
        "dislikes": 91,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"38K\", \"totalSubmission\": \"56.2K\", \"totalAcceptedRaw\": 37997, \"totalSubmissionRaw\": 56159, \"acRate\": \"67.7%\"}",
        "hints": [
          "For each pair of 1s in the new row (say at `new_row[i]` and `new_row[j]`), we could create more rectangles where that pair forms the base.  The number of new rectangles is the number of times some previous row had `row[i] = row[j] = 1`."
        ]
      },
      "similar": [],
      "hints": [
        "For each pair of 1s in the new row (say at `new_row[i]` and `new_row[j]`), we could create more rectangles where that pair forms the base.  The number of new rectangles is the number of times some previous row had `row[i] = row[j] = 1`."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "ip-to-cidr": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "751",
        "title": "IP to CIDR",
        "titleSlug": "ip-to-cidr",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 76,
        "dislikes": 298,
        "similarQuestions": "[{\"title\": \"Restore IP Addresses\", \"titleSlug\": \"restore-ip-addresses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Validate IP Address\", \"titleSlug\": \"validate-ip-address\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"21.9K\", \"totalSubmission\": \"40.1K\", \"totalAcceptedRaw\": 21851, \"totalSubmissionRaw\": 40094, \"acRate\": \"54.5%\"}",
        "hints": [
          "Convert the ip addresses to and from (long) integers.  You want to know what is the most addresses you can put in this block starting from the \"start\" ip, up to n.  It is the smallest between the lowest bit of start and the highest bit of n.  Then, repeat this process with a new start and n."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "restore-ip-addresses",
          "title": "Restore IP Addresses",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "validate-ip-address",
          "title": "Validate IP Address",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Convert the ip addresses to and from (long) integers.  You want to know what is the most addresses you can put in this block starting from the \"start\" ip, up to n.  It is the smallest between the lowest bit of start and the highest bit of n.  Then, repeat this process with a new start and n."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "open-the-lock": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "752",
        "title": "Open the Lock",
        "titleSlug": "open-the-lock",
        "content": "<p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code>. The wheels can rotate freely and wrap around: for example we can turn <code>&#39;9&#39;</code> to be <code>&#39;0&#39;</code>, or <code>&#39;0&#39;</code> to be <code>&#39;9&#39;</code>. Each move consists of turning one wheel one slot.</p>\n\n<p>The lock initially starts at <code>&#39;0000&#39;</code>, a string representing the state of the 4 wheels.</p>\n\n<p>You are given a list of <code>deadends</code> dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p>\n\n<p>Given a <code>target</code> representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nA sequence of valid moves would be &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;.\nNote that a sequence like &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end &quot;0102&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn the last wheel in reverse to move from &quot;0000&quot; -&gt; &quot;0009&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We cannot reach the target without getting stuck.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= deadends.length &lt;= 500</code></li>\n\t<li><code>deadends[i].length == 4</code></li>\n\t<li><code>target.length == 4</code></li>\n\t<li>target <strong>will not be</strong> in the list <code>deadends</code>.</li>\n\t<li><code>target</code> and <code>deadends[i]</code> consist of digits only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3845,
        "dislikes": 144,
        "similarQuestions": "[{\"title\": \"Reachable Nodes With Restrictions\", \"titleSlug\": \"reachable-nodes-with-restrictions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"219.2K\", \"totalSubmission\": \"392.1K\", \"totalAcceptedRaw\": 219168, \"totalSubmissionRaw\": 392134, \"acRate\": \"55.9%\"}",
        "hints": [
          "We can think of this problem as a shortest path problem on a graph: there are `10000` nodes (strings `'0000'` to `'9999'`), and there is an edge between two nodes if they differ in one digit, that digit differs by 1 (wrapping around, so `'0'` and `'9'` differ by 1), and if *both* nodes are not in `deadends`."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "reachable-nodes-with-restrictions",
          "title": "Reachable Nodes With Restrictions",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "We can think of this problem as a shortest path problem on a graph: there are `10000` nodes (strings `'0000'` to `'9999'`), and there is an edge between two nodes if they differ in one digit, that digit differs by 1 (wrapping around, so `'0'` and `'9'` differ by 1), and if *both* nodes are not in `deadends`."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "cracking-the-safe": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "753",
        "title": "Cracking the Safe",
        "titleSlug": "cracking-the-safe",
        "content": "<p>There is a safe protected by a password. The password is a sequence of <code>n</code> digits where each digit can be in the range <code>[0, k - 1]</code>.</p>\n\n<p>The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the <strong>most recent </strong><code>n</code><strong> digits</strong> that were entered each time you type a digit.</p>\n\n<ul>\n\t<li>For example, the correct password is <code>&quot;345&quot;</code> and you enter in <code>&quot;012345&quot;</code>:\n\n\t<ul>\n\t\t<li>After typing <code>0</code>, the most recent <code>3</code> digits is <code>&quot;0&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>1</code>, the most recent <code>3</code> digits is <code>&quot;01&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>2</code>, the most recent <code>3</code> digits is <code>&quot;012&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>3</code>, the most recent <code>3</code> digits is <code>&quot;123&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>4</code>, the most recent <code>3</code> digits is <code>&quot;234&quot;</code>, which is incorrect.</li>\n\t\t<li>After typing <code>5</code>, the most recent <code>3</code> digits is <code>&quot;345&quot;</code>, which is correct and the safe unlocks.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>any string of <strong>minimum length</strong> that will unlock the safe <strong>at some point</strong> of entering it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 2\n<strong>Output:</strong> &quot;10&quot;\n<strong>Explanation:</strong> The password is a single digit, so enter each digit. &quot;01&quot; would also unlock the safe.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 2\n<strong>Output:</strong> &quot;01100&quot;\n<strong>Explanation:</strong> For each possible password:\n- &quot;00&quot; is typed in starting from the 4<sup>th</sup> digit.\n- &quot;01&quot; is typed in starting from the 1<sup>st</sup> digit.\n- &quot;10&quot; is typed in starting from the 3<sup>rd</sup> digit.\n- &quot;11&quot; is typed in starting from the 2<sup>nd</sup> digit.\nThus &quot;01100&quot; will unlock the safe. &quot;10011&quot;, and &quot;11001&quot; would also unlock the safe.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 4</code></li>\n\t<li><code>1 &lt;= k &lt;= 10</code></li>\n\t<li><code>1 &lt;= k<sup>n</sup> &lt;= 4096</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 517,
        "dislikes": 83,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Eulerian Circuit", "slug": "eulerian-circuit" }
        ],
        "stats": "{\"totalAccepted\": \"56.3K\", \"totalSubmission\": \"99.7K\", \"totalAcceptedRaw\": 56327, \"totalSubmissionRaw\": 99741, \"acRate\": \"56.5%\"}",
        "hints": [
          "We can think of this problem as the problem of finding an Euler path (a path visiting every edge exactly once) on the following graph: there are $$k^{n-1}$$ nodes with each node having $$k$$ edges.  It turns out this graph always has an Eulerian circuit (path starting where it ends.)\r\n\r\nWe should visit each node in \"post-order\" so as to not get stuck in the graph prematurely."
        ]
      },
      "similar": [],
      "hints": [
        "We can think of this problem as the problem of finding an Euler path (a path visiting every edge exactly once) on the following graph: there are $$k^{n-1}$$ nodes with each node having $$k$$ edges.  It turns out this graph always has an Eulerian circuit (path starting where it ends.)\r\n\r\nWe should visit each node in \"post-order\" so as to not get stuck in the graph prematurely."
      ],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Eulerian Circuit", "slug": "eulerian-circuit" }
      ]
    }
  },
  "reach-a-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "754",
        "title": "Reach a Number",
        "titleSlug": "reach-a-number",
        "content": "<p>You are standing at position <code>0</code> on an infinite number line. There is a destination at position <code>target</code>.</p>\n\n<p>You can make some number of moves <code>numMoves</code> so that:</p>\n\n<ul>\n\t<li>On each move, you can either go left or right.</li>\n\t<li>During the <code>i<sup>th</sup></code> move (starting from <code>i == 1</code> to <code>i == numMoves</code>), you take <code>i</code> steps in the chosen direction.</li>\n</ul>\n\n<p>Given the integer <code>target</code>, return <em>the <strong>minimum</strong> number of moves required (i.e., the minimum </em><code>numMoves</code><em>) to reach the destination</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nOn the 1<sup>st</sup> move, we step from 0 to 1 (1 step).\nOn the 2<sup>nd</sup> move, we step from 1 to -1 (2 steps).\nOn the 3<sup>rd</sup> move, we step from -1 to 2 (3 steps).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOn the 1<sup>st</sup> move, we step from 0 to 1 (1 step).\nOn the 2<sup>nd</sup> move, we step from 1 to 3 (2 steps).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>target != 0</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1738,
        "dislikes": 780,
        "similarQuestions": "[{\"title\": \"Number of Ways to Reach a Position After Exactly k Steps\", \"titleSlug\": \"number-of-ways-to-reach-a-position-after-exactly-k-steps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"51.2K\", \"totalSubmission\": \"119.2K\", \"totalAcceptedRaw\": 51151, \"totalSubmissionRaw\": 119159, \"acRate\": \"42.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
          "title": "Number of Ways to Reach a Position After Exactly k Steps",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "pour-water": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "755",
        "title": "Pour Water",
        "titleSlug": "pour-water",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 292,
        "dislikes": 748,
        "similarQuestions": "[{\"title\": \"Trapping Rain Water\", \"titleSlug\": \"trapping-rain-water\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"36.5K\", \"totalSubmission\": \"78.2K\", \"totalAcceptedRaw\": 36453, \"totalSubmissionRaw\": 78154, \"acRate\": \"46.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "trapping-rain-water",
          "title": "Trapping Rain Water",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "pyramid-transition-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "756",
        "title": "Pyramid Transition Matrix",
        "titleSlug": "pyramid-transition-matrix",
        "content": "<p>You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains <strong>one less block</strong> than the row beneath it and is centered on top.</p>\n\n<p>To make the pyramid aesthetically pleasing, there are only specific <strong>triangular patterns</strong> that are allowed. A triangular pattern consists of a <strong>single block</strong> stacked on top of <strong>two blocks</strong>. The patterns are given&nbsp;as a list of&nbsp;three-letter strings <code>allowed</code>, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ABC&quot;</code> represents a triangular pattern with a <code>&#39;C&#39;</code> block stacked on top of an <code>&#39;A&#39;</code> (left) and <code>&#39;B&#39;</code> (right) block. Note that this is different from <code>&quot;BAC&quot;</code> where <code>&#39;B&#39;</code> is on the left bottom and <code>&#39;A&#39;</code> is on the right bottom.</li>\n</ul>\n\n<p>You start with a bottom row of blocks <code>bottom</code>, given as a single string, that you <strong>must</strong> use as the base of the pyramid.</p>\n\n<p>Given <code>bottom</code> and <code>allowed</code>, return <code>true</code><em> if you can build the pyramid all the way to the top such that <strong>every triangular pattern</strong> in the pyramid is in </em><code>allowed</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/26/pyramid1-grid.jpg\" style=\"width: 600px; height: 232px;\" />\n<pre>\n<strong>Input:</strong> bottom = &quot;BCD&quot;, allowed = [&quot;BCC&quot;,&quot;CDE&quot;,&quot;CEA&quot;,&quot;FFF&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build &quot;CE&quot; on level 2 and then build &quot;A&quot; on level 1.\nThere are three triangular patterns in the pyramid, which are &quot;BCC&quot;, &quot;CDE&quot;, and &quot;CEA&quot;. All are allowed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/26/pyramid2-grid.jpg\" style=\"width: 600px; height: 359px;\" />\n<pre>\n<strong>Input:</strong> bottom = &quot;AAAA&quot;, allowed = [&quot;AAB&quot;,&quot;AAC&quot;,&quot;BCD&quot;,&quot;BBE&quot;,&quot;DEF&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= bottom.length &lt;= 6</code></li>\n\t<li><code>0 &lt;= allowed.length &lt;= 216</code></li>\n\t<li><code>allowed[i].length == 3</code></li>\n\t<li>The letters in all input strings are from the set <code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;}</code>.</li>\n\t<li>All the values of <code>allowed</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 516,
        "dislikes": 474,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"31.8K\", \"totalSubmission\": \"60.7K\", \"totalAcceptedRaw\": 31841, \"totalSubmissionRaw\": 60671, \"acRate\": \"52.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "set-intersection-size-at-least-two": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "757",
        "title": "Set Intersection Size At Least Two",
        "titleSlug": "set-intersection-size-at-least-two",
        "content": "<p>You are given a 2D integer array <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents all the integers from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> inclusively.</p>\n\n<p>A <strong>containing set</strong> is an array <code>nums</code> where each interval from <code>intervals</code> has <strong>at least two</strong> integers in <code>nums</code>.</p>\n\n<ul>\n\t<li>For example, if <code>intervals = [[1,3], [3,7], [8,9]]</code>, then <code>[1,2,4,7,8,9]</code> and <code>[2,3,4,8,9]</code> are <strong>containing sets</strong>.</li>\n</ul>\n\n<p>Return <em>the minimum possible size of a containing set</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[3,7],[8,9]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[1,4],[2,5],[3,5]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[2,4],[4,5]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 3000</code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 687,
        "dislikes": 81,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"21.7K\", \"totalSubmission\": \"49.2K\", \"totalAcceptedRaw\": 21652, \"totalSubmissionRaw\": 49216, \"acRate\": \"44.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "bold-words-in-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "758",
        "title": "Bold Words in String",
        "titleSlug": "bold-words-in-string",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 262,
        "dislikes": 123,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" },
          { "name": "String Matching", "slug": "string-matching" }
        ],
        "stats": "{\"totalAccepted\": \"18.5K\", \"totalSubmission\": \"36.1K\", \"totalAcceptedRaw\": 18471, \"totalSubmissionRaw\": 36086, \"acRate\": \"51.2%\"}",
        "hints": [
          "First, determine which letters are bold and store that information in mask[i] = if i-th character is bold.\r\nThen, insert the tags at the beginning and end of groups.  The start of a group is if and only if (mask[i] and (i == 0 or not mask[i-1])), and the end of a group is similar."
        ]
      },
      "similar": [],
      "hints": [
        "First, determine which letters are bold and store that information in mask[i] = if i-th character is bold.\r\nThen, insert the tags at the beginning and end of groups.  The start of a group is if and only if (mask[i] and (i == 0 or not mask[i-1])), and the end of a group is similar."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" },
        { "name": "String Matching", "slug": "string-matching" }
      ]
    }
  },
  "employee-free-time": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "759",
        "title": "Employee Free Time",
        "titleSlug": "employee-free-time",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1845,
        "dislikes": 124,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Interval List Intersections\", \"titleSlug\": \"interval-list-intersections\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"141.3K\", \"totalSubmission\": \"196.5K\", \"totalAcceptedRaw\": 141323, \"totalSubmissionRaw\": 196477, \"acRate\": \"71.9%\"}",
        "hints": [
          "Take all the intervals and do an \"events\" (or \"line sweep\") approach - an event of (x, OPEN) increases the number of active intervals, while (x, CLOSE) decreases it.\r\n\r\nProcessing in sorted order from left to right, if the number of active intervals is zero, then you crossed a region of common free time."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "interval-list-intersections",
          "title": "Interval List Intersections",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Take all the intervals and do an \"events\" (or \"line sweep\") approach - an event of (x, OPEN) increases the number of active intervals, while (x, CLOSE) decreases it.\r\n\r\nProcessing in sorted order from left to right, if the number of active intervals is zero, then you crossed a region of common free time."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "find-anagram-mappings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "760",
        "title": "Find Anagram Mappings",
        "titleSlug": "find-anagram-mappings",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 603,
        "dislikes": 230,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"98.5K\", \"totalSubmission\": \"117.9K\", \"totalAcceptedRaw\": 98465, \"totalSubmissionRaw\": 117878, \"acRate\": \"83.5%\"}",
        "hints": [
          "Create a hashmap so that D[x] = i  whenever B[i] = x.  Then, the answer is [D[x] for x in A]."
        ]
      },
      "similar": [],
      "hints": [
        "Create a hashmap so that D[x] = i  whenever B[i] = x.  Then, the answer is [D[x] for x in A]."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "special-binary-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "761",
        "title": "Special Binary String",
        "titleSlug": "special-binary-string",
        "content": "<p><strong>Special binary strings</strong> are binary strings with the following two properties:</p>\n\n<ul>\n\t<li>The number of <code>0</code>&#39;s is equal to the number of <code>1</code>&#39;s.</li>\n\t<li>Every prefix of the binary string has at least as many <code>1</code>&#39;s as <code>0</code>&#39;s.</li>\n</ul>\n\n<p>You are given a <strong>special binary</strong> string <code>s</code>.</p>\n\n<p>A move consists of choosing two consecutive, non-empty, special substrings of <code>s</code>, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.</p>\n\n<p>Return <em>the lexicographically largest resulting string possible after applying the mentioned operations on the string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;11011000&quot;\n<strong>Output:</strong> &quot;11100100&quot;\n<strong>Explanation:</strong> The strings &quot;10&quot; [occuring at s[1]] and &quot;1100&quot; [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10&quot;\n<strong>Output:</strong> &quot;10&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>s</code> is a special binary string.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 682,
        "dislikes": 206,
        "similarQuestions": "[{\"title\": \"Valid Parenthesis String\", \"titleSlug\": \"valid-parenthesis-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Good Binary Strings\", \"titleSlug\": \"number-of-good-binary-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"16.3K\", \"totalSubmission\": \"26.8K\", \"totalAcceptedRaw\": 16294, \"totalSubmissionRaw\": 26785, \"acRate\": \"60.8%\"}",
        "hints": [
          "Draw a line from (x, y) to (x+1, y+1) if we see a \"1\", else to (x+1, y-1).\r\nA special substring is just a line that starts and ends at the same y-coordinate, and that is the lowest y-coordinate reached.\r\nCall a mountain a special substring with no special prefixes - ie. only at the beginning and end is the lowest y-coordinate reached.\r\nIf F is the answer function, and S has mountain decomposition M1,M2,M3,...,Mk,  then the answer is:\r\nreverse_sorted(F(M1), F(M2), ..., F(Mk)).\r\nHowever, you'll also need to deal with the case that S is a mountain, such as 11011000 -> 11100100."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "valid-parenthesis-string",
          "title": "Valid Parenthesis String",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-good-binary-strings",
          "title": "Number of Good Binary Strings",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Draw a line from (x, y) to (x+1, y+1) if we see a \"1\", else to (x+1, y-1).\r\nA special substring is just a line that starts and ends at the same y-coordinate, and that is the lowest y-coordinate reached.\r\nCall a mountain a special substring with no special prefixes - ie. only at the beginning and end is the lowest y-coordinate reached.\r\nIf F is the answer function, and S has mountain decomposition M1,M2,M3,...,Mk,  then the answer is:\r\nreverse_sorted(F(M1), F(M2), ..., F(Mk)).\r\nHowever, you'll also need to deal with the case that S is a mountain, such as 11011000 -> 11100100."
      ],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "prime-number-of-set-bits-in-binary-representation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "762",
        "title": "Prime Number of Set Bits in Binary Representation",
        "titleSlug": "prime-number-of-set-bits-in-binary-representation",
        "content": "<p>Given two integers <code>left</code> and <code>right</code>, return <em>the <strong>count</strong> of numbers in the <strong>inclusive</strong> range </em><code>[left, right]</code><em> having a <strong>prime number of set bits</strong> in their binary representation</em>.</p>\n\n<p>Recall that the <strong>number of set bits</strong> an integer has is the number of <code>1</code>&#39;s present when written in binary.</p>\n\n<ul>\n\t<li>For example, <code>21</code> written in binary is <code>10101</code>, which has <code>3</code> set bits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 6, right = 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n6  -&gt; 110 (2 set bits, 2 is prime)\n7  -&gt; 111 (3 set bits, 3 is prime)\n8  -&gt; 1000 (1 set bit, 1 is not prime)\n9  -&gt; 1001 (2 set bits, 2 is prime)\n10 -&gt; 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 10, right = 15\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\n10 -&gt; 1010 (2 set bits, 2 is prime)\n11 -&gt; 1011 (3 set bits, 3 is prime)\n12 -&gt; 1100 (2 set bits, 2 is prime)\n13 -&gt; 1101 (3 set bits, 3 is prime)\n14 -&gt; 1110 (3 set bits, 3 is prime)\n15 -&gt; 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left &lt;= right &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= right - left &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 685,
        "dislikes": 508,
        "similarQuestions": "[{\"title\": \"Number of 1 Bits\", \"titleSlug\": \"number-of-1-bits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"91.5K\", \"totalSubmission\": \"132.8K\", \"totalAcceptedRaw\": 91531, \"totalSubmissionRaw\": 132836, \"acRate\": \"68.9%\"}",
        "hints": [
          "Write a helper function to count the number of set bits in a number, then check whether the number of set bits is 2, 3, 5, 7, 11, 13, 17 or 19."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "number-of-1-bits",
          "title": "Number of 1 Bits",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Write a helper function to count the number of set bits in a number, then check whether the number of set bits is 2, 3, 5, 7, 11, 13, 17 or 19."
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "partition-labels": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "763",
        "title": "Partition Labels",
        "titleSlug": "partition-labels",
        "content": "<p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part.</p>\n\n<p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p>\n\n<p>Return <em>a list of integers representing the size of these parts</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababcbacadefegdehijhklij&quot;\n<strong>Output:</strong> [9,7,8]\n<strong>Explanation:</strong>\nThe partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.\nThis is a partition so that each letter appears in at most one part.\nA partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits s into less parts.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eccbbbbdec&quot;\n<strong>Output:</strong> [10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10059,
        "dislikes": 373,
        "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Optimal Partition of String\", \"titleSlug\": \"optimal-partition-of-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"506.5K\", \"totalSubmission\": \"634.8K\", \"totalAcceptedRaw\": 506498, \"totalSubmissionRaw\": 634800, \"acRate\": \"79.8%\"}",
        "hints": [
          "Try to greedily choose the smallest partition that includes the first letter.  If you have something like \"abaccbdeffed\", then you might need to add b.  You can use an map like \"last['b'] = 5\" to help you expand the width of your partition."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-intervals",
          "title": "Merge Intervals",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "optimal-partition-of-string",
          "title": "Optimal Partition of String",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Try to greedily choose the smallest partition that includes the first letter.  If you have something like \"abaccbdeffed\", then you might need to add b.  You can use an map like \"last['b'] = 5\" to help you expand the width of your partition."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "largest-plus-sign": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "764",
        "title": "Largest Plus Sign",
        "titleSlug": "largest-plus-sign",
        "content": "<p>You are given an integer <code>n</code>. You have an <code>n x n</code> binary grid <code>grid</code> with all values initially <code>1</code>&#39;s except for some indices given in the array <code>mines</code>. The <code>i<sup>th</sup></code> element of the array <code>mines</code> is defined as <code>mines[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> where <code>grid[x<sub>i</sub>][y<sub>i</sub>] == 0</code>.</p>\n\n<p>Return <em>the order of the largest <strong>axis-aligned</strong> plus sign of </em>1<em>&#39;s contained in </em><code>grid</code>. If there is none, return <code>0</code>.</p>\n\n<p>An <strong>axis-aligned plus sign</strong> of <code>1</code>&#39;s of order <code>k</code> has some center <code>grid[r][c] == 1</code> along with four arms of length <code>k - 1</code> going up, down, left, and right, and made of <code>1</code>&#39;s. Note that there could be <code>0</code>&#39;s or <code>1</code>&#39;s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for <code>1</code>&#39;s.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/plus1-grid.jpg\" style=\"width: 404px; height: 405px;\" />\n<pre>\n<strong>Input:</strong> n = 5, mines = [[4,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/plus2-grid.jpg\" style=\"width: 84px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> n = 1, mines = [[0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no plus sign, so return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= mines.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; n</code></li>\n\t<li>All the pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1419,
        "dislikes": 223,
        "similarQuestions": "[{\"title\": \"Maximal Square\", \"titleSlug\": \"maximal-square\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"56.3K\", \"totalSubmission\": \"116.9K\", \"totalAcceptedRaw\": 56338, \"totalSubmissionRaw\": 116901, \"acRate\": \"48.2%\"}",
        "hints": [
          "For each direction such as \"left\", find left[r][c] = the number of 1s you will see before a zero starting at r, c and walking left.  You can find this in N^2 time with a dp.  The largest plus sign at r, c is just the minimum of left[r][c], up[r][c] etc."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximal-square",
          "title": "Maximal Square",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "For each direction such as \"left\", find left[r][c] = the number of 1s you will see before a zero starting at r, c and walking left.  You can find this in N^2 time with a dp.  The largest plus sign at r, c is just the minimum of left[r][c], up[r][c] etc."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "couples-holding-hands": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "765",
        "title": "Couples Holding Hands",
        "titleSlug": "couples-holding-hands",
        "content": "<p>There are <code>n</code> couples sitting in <code>2n</code> seats arranged in a row and want to hold hands.</p>\n\n<p>The people and seats are represented by an integer array <code>row</code> where <code>row[i]</code> is the ID of the person sitting in the <code>i<sup>th</sup></code> seat. The couples are numbered in order, the first couple being <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so on with the last couple being <code>(2n - 2, 2n - 1)</code>.</p>\n\n<p>Return <em>the minimum number of swaps so that every couple is sitting side by side</em>. A swap consists of choosing any two people, then they stand up and switch seats.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> row = [0,2,1,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We only need to swap the second (row[1]) and third (row[2]) person.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> row = [3,2,0,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All couples are already seated side by side.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2n == row.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 30</code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>0 &lt;= row[i] &lt; 2n</code></li>\n\t<li>All the elements of <code>row</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2261,
        "dislikes": 116,
        "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Missing Number\", \"titleSlug\": \"missing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"K-Similar Strings\", \"titleSlug\": \"k-similar-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"57.7K\", \"totalSubmission\": \"101.3K\", \"totalAcceptedRaw\": 57716, \"totalSubmissionRaw\": 101340, \"acRate\": \"57.0%\"}",
        "hints": [
          "Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "first-missing-positive",
          "title": "First Missing Positive",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "missing-number",
          "title": "Missing Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "k-similar-strings",
          "title": "K-Similar Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner."
      ],
      "relatedTopics": [
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "toeplitz-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "766",
        "title": "Toeplitz Matrix",
        "titleSlug": "toeplitz-matrix",
        "content": "<p>Given an <code>m x n</code> <code>matrix</code>, return&nbsp;<em><code>true</code>&nbsp;if the matrix is Toeplitz. Otherwise, return <code>false</code>.</em></p>\n\n<p>A matrix is <strong>Toeplitz</strong> if every diagonal from top-left to bottom-right has the same elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nIn the above grid, the&nbsp;diagonals are:\n&quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;.\nIn each diagonal all elements are the same, so the answer is True.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2],[2,2]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nThe diagonal &quot;[1, 2]&quot; has different elements.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 20</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 99</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the <code>matrix</code> is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?</li>\n\t<li>What if the <code>matrix</code> is so large that you can only load up a partial row into the memory at once?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3445,
        "dislikes": 162,
        "similarQuestions": "[{\"title\": \"Valid Word Square\", \"titleSlug\": \"valid-word-square\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"303.5K\", \"totalSubmission\": \"442.1K\", \"totalAcceptedRaw\": 303494, \"totalSubmissionRaw\": 442054, \"acRate\": \"68.7%\"}",
        "hints": [
          "Check whether each value is equal to the value of it's top-left neighbor."
        ]
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "valid-word-square",
          "title": "Valid Word Square",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "Check whether each value is equal to the value of it's top-left neighbor."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "reorganize-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "767",
        "title": "Reorganize String",
        "titleSlug": "reorganize-string",
        "content": "<p>Given a string <code>s</code>, rearrange the characters of <code>s</code> so that any two adjacent characters are not the same.</p>\n\n<p>Return <em>any possible rearrangement of</em> <code>s</code> <em>or return</em> <code>&quot;&quot;</code> <em>if not possible</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aab\"\n<strong>Output:</strong> \"aba\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"aaab\"\n<strong>Output:</strong> \"\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8201,
        "dislikes": 240,
        "similarQuestions": "[{\"title\": \"Rearrange String k Distance Apart\", \"titleSlug\": \"rearrange-string-k-distance-apart\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Task Scheduler\", \"titleSlug\": \"task-scheduler\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Happy String\", \"titleSlug\": \"longest-happy-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"356.3K\", \"totalSubmission\": \"655.3K\", \"totalAcceptedRaw\": 356283, \"totalSubmissionRaw\": 655307, \"acRate\": \"54.4%\"}",
        "hints": ["Alternate placing the most common letters."]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "rearrange-string-k-distance-apart",
          "title": "Rearrange String k Distance Apart",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "task-scheduler",
          "title": "Task Scheduler",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "longest-happy-string",
          "title": "Longest Happy String",
          "isPaidOnly": false
        }
      ],
      "hints": ["Alternate placing the most common letters."],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "max-chunks-to-make-sorted-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "768",
        "title": "Max Chunks To Make Sorted II",
        "titleSlug": "max-chunks-to-make-sorted-ii",
        "content": "<p>You are given an integer array <code>arr</code>.</p>\n\n<p>We split <code>arr</code> into some number of <strong>chunks</strong> (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.</p>\n\n<p>Return <em>the largest number of chunks we can make to sort the array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [5,4,3,2,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn&#39;t sorted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,1,3,4,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1786,
        "dislikes": 51,
        "similarQuestions": "[{\"title\": \"Max Chunks To Make Sorted\", \"titleSlug\": \"max-chunks-to-make-sorted\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"59.2K\", \"totalSubmission\": \"111.7K\", \"totalAcceptedRaw\": 59161, \"totalSubmissionRaw\": 111740, \"acRate\": \"52.9%\"}",
        "hints": [
          "Each k for which some permutation of arr[:k] is equal to sorted(arr)[:k] is where we should cut each chunk."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "max-chunks-to-make-sorted",
          "title": "Max Chunks To Make Sorted",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Each k for which some permutation of arr[:k] is equal to sorted(arr)[:k] is where we should cut each chunk."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "max-chunks-to-make-sorted": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "769",
        "title": "Max Chunks To Make Sorted",
        "titleSlug": "max-chunks-to-make-sorted",
        "content": "<p>You are given an integer array <code>arr</code> of length <code>n</code> that represents a permutation of the integers in the range <code>[0, n - 1]</code>.</p>\n\n<p>We split <code>arr</code> into some number of <strong>chunks</strong> (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.</p>\n\n<p>Return <em>the largest number of chunks we can make to sort the array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [4,3,2,1,0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn&#39;t sorted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,0,2,3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == arr.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>0 &lt;= arr[i] &lt; n</code></li>\n\t<li>All the elements of <code>arr</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2740,
        "dislikes": 230,
        "similarQuestions": "[{\"title\": \"Max Chunks To Make Sorted II\", \"titleSlug\": \"max-chunks-to-make-sorted-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"99.6K\", \"totalSubmission\": \"170.8K\", \"totalAcceptedRaw\": 99557, \"totalSubmissionRaw\": 170833, \"acRate\": \"58.3%\"}",
        "hints": [
          "The first chunk can be found as the smallest k for which A[:k+1] == [0, 1, 2, ...k]; then we repeat this process."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "max-chunks-to-make-sorted-ii",
          "title": "Max Chunks To Make Sorted II",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "The first chunk can be found as the smallest k for which A[:k+1] == [0, 1, 2, ...k]; then we repeat this process."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "basic-calculator-iv": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "770",
        "title": "Basic Calculator IV",
        "titleSlug": "basic-calculator-iv",
        "content": "<p>Given an expression such as <code>expression = &quot;e + 8 - a + 5&quot;</code> and an evaluation map such as <code>{&quot;e&quot;: 1}</code> (given in terms of <code>evalvars = [&quot;e&quot;]</code> and <code>evalints = [1]</code>), return a list of tokens representing the simplified expression, such as <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\n\n<ul>\n\t<li>An expression alternates chunks and symbols, with a space separating each chunk and symbol.</li>\n\t<li>A chunk is either an expression in parentheses, a variable, or a non-negative integer.</li>\n\t<li>A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like <code>&quot;2x&quot;</code> or <code>&quot;-x&quot;</code>.</li>\n</ul>\n\n<p>Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.</p>\n\n<ul>\n\t<li>For example, <code>expression = &quot;1 + 2 * 3&quot;</code> has an answer of <code>[&quot;7&quot;]</code>.</li>\n</ul>\n\n<p>The format of the output is as follows:</p>\n\n<ul>\n\t<li>For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n\t<ul>\n\t\t<li>For example, we would never write a term like <code>&quot;b*a*c&quot;</code>, only <code>&quot;a*b*c&quot;</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\t<ul>\n\t\t<li>For example, <code>&quot;a*a*b*c&quot;</code> has degree <code>4</code>.</li>\n\t</ul>\n\t</li>\n\t<li>The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.</li>\n\t<li>An example of a well-formatted answer is <code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>.</li>\n\t<li>Terms (including constant terms) with coefficient <code>0</code> are not included.\n\t<ul>\n\t\t<li>For example, an expression of <code>&quot;0&quot;</code> has an output of <code>[]</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><strong>Note:</strong> You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\n<strong>Output:</strong> [&quot;-1*a&quot;,&quot;14&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;e - 8 + temperature - pressure&quot;, evalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\n<strong>Output:</strong> [&quot;-1*pressure&quot;,&quot;5&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\n<strong>Output:</strong> [&quot;1*e*e&quot;,&quot;-64&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 250</code></li>\n\t<li><code>expression</code> consists of lowercase English letters, digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39; &#39;</code>.</li>\n\t<li><code>expression</code> does not contain any leading or trailing spaces.</li>\n\t<li>All the tokens in <code>expression</code> are separated by a single space.</li>\n\t<li><code>0 &lt;= evalvars.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= evalvars[i].length &lt;= 20</code></li>\n\t<li><code>evalvars[i]</code> consists of lowercase English letters.</li>\n\t<li><code>evalints.length == evalvars.length</code></li>\n\t<li><code>-100 &lt;= evalints[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 157,
        "dislikes": 1388,
        "similarQuestions": "[{\"title\": \"Parse Lisp Expression\", \"titleSlug\": \"parse-lisp-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator III\", \"titleSlug\": \"basic-calculator-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"9.9K\", \"totalSubmission\": \"18K\", \"totalAcceptedRaw\": 9881, \"totalSubmissionRaw\": 17967, \"acRate\": \"55.0%\"}",
        "hints": [
          "One way is with a Polynomial class.  For example,\r\n\r\n* `Poly:add(this, that)` returns the result of `this + that`.\r\n* `Poly:sub(this, that)` returns the result of `this - that`.\r\n* `Poly:mul(this, that)` returns the result of `this * that`.\r\n* `Poly:evaluate(this, evalmap)` returns the polynomial after replacing all free variables with constants as specified by `evalmap`.\r\n* `Poly:toList(this)` returns the polynomial in the correct output format.\r\n\r\n* `Solution::combine(left, right, symbol)` returns the result of applying the binary operator represented by `symbol` to `left` and `right`.\r\n* `Solution::make(expr)` makes a new `Poly` represented by either the constant or free variable specified by `expr`.\r\n* `Solution::parse(expr)` parses an expression into a new `Poly`."
        ]
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "parse-lisp-expression",
          "title": "Parse Lisp Expression",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator-iii",
          "title": "Basic Calculator III",
          "isPaidOnly": true
        }
      ],
      "hints": [
        "One way is with a Polynomial class.  For example,\r\n\r\n* `Poly:add(this, that)` returns the result of `this + that`.\r\n* `Poly:sub(this, that)` returns the result of `this - that`.\r\n* `Poly:mul(this, that)` returns the result of `this * that`.\r\n* `Poly:evaluate(this, evalmap)` returns the polynomial after replacing all free variables with constants as specified by `evalmap`.\r\n* `Poly:toList(this)` returns the polynomial in the correct output format.\r\n\r\n* `Solution::combine(left, right, symbol)` returns the result of applying the binary operator represented by `symbol` to `left` and `right`.\r\n* `Solution::make(expr)` makes a new `Poly` represented by either the constant or free variable specified by `expr`.\r\n* `Solution::parse(expr)` parses an expression into a new `Poly`."
      ],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "jewels-and-stones": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "771",
        "title": "Jewels and Stones",
        "titleSlug": "jewels-and-stones",
        "content": "<p>You&#39;re given strings <code>jewels</code> representing the types of stones that are jewels, and <code>stones</code> representing the stones you have. Each character in <code>stones</code> is a type of stone you have. You want to know how many of the stones you have are also jewels.</p>\n\n<p>Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> jewels = \"aA\", stones = \"aAAbbbb\"\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> jewels = \"z\", stones = \"ZZ\"\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;jewels.length, stones.length &lt;= 50</code></li>\n\t<li><code>jewels</code> and <code>stones</code> consist of only English letters.</li>\n\t<li>All the characters of&nbsp;<code>jewels</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4933,
        "dislikes": 575,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"969.9K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 969916, \"totalSubmissionRaw\": 1097463, \"acRate\": \"88.4%\"}",
        "hints": ["For each stone, check if it is a jewel."]
      },
      "similar": [],
      "hints": ["For each stone, check if it is a jewel."],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "basic-calculator-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "772",
        "title": "Basic Calculator III",
        "titleSlug": "basic-calculator-iii",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 1095,
        "dislikes": 282,
        "similarQuestions": "[{\"title\": \"Basic Calculator\", \"titleSlug\": \"basic-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator II\", \"titleSlug\": \"basic-calculator-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Basic Calculator IV\", \"titleSlug\": \"basic-calculator-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Build Binary Expression Tree From Infix Expression\", \"titleSlug\": \"build-binary-expression-tree-from-infix-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"116.5K\", \"totalSubmission\": \"233.7K\", \"totalAcceptedRaw\": 116517, \"totalSubmissionRaw\": 233677, \"acRate\": \"49.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator",
          "title": "Basic Calculator",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "basic-calculator-ii",
          "title": "Basic Calculator II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "basic-calculator-iv",
          "title": "Basic Calculator IV",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "build-binary-expression-tree-from-infix-expression",
          "title": "Build Binary Expression Tree From Infix Expression",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "sliding-puzzle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "773",
        "title": "Sliding Puzzle",
        "titleSlug": "sliding-puzzle",
        "content": "<p>On an <code>2 x 3</code> board, there are five tiles labeled from <code>1</code> to <code>5</code>, and an empty square represented by <code>0</code>. A <strong>move</strong> consists of choosing <code>0</code> and a 4-directionally adjacent number and swapping it.</p>\n\n<p>The state of the board is solved if and only if the board is <code>[[1,2,3],[4,5,0]]</code>.</p>\n\n<p>Given the puzzle board <code>board</code>, return <em>the least number of moves required so that the state of the board is solved</em>. If it is impossible for the state of the board to be solved, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,2,3],[4,0,5]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Swap the 0 and the 5 in one move.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,2,3],[5,4,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No number of moves will make the board solved.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[4,1,2],[5,0,3]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 2</code></li>\n\t<li><code>board[i].length == 3</code></li>\n\t<li><code>0 &lt;= board[i][j] &lt;= 5</code></li>\n\t<li>Each value <code>board[i][j]</code> is <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1973,
        "dislikes": 49,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"90.6K\", \"totalSubmission\": \"140.4K\", \"totalAcceptedRaw\": 90605, \"totalSubmissionRaw\": 140438, \"acRate\": \"64.5%\"}",
        "hints": [
          "Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move."
        ]
      },
      "similar": [],
      "hints": [
        "Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "minimize-max-distance-to-gas-station": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "774",
        "title": "Minimize Max Distance to Gas Station",
        "titleSlug": "minimize-max-distance-to-gas-station",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 662,
        "dislikes": 94,
        "similarQuestions": "[{\"title\": \"Koko Eating Bananas\", \"titleSlug\": \"koko-eating-bananas\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"29.4K\", \"totalSubmission\": \"56.5K\", \"totalAcceptedRaw\": 29388, \"totalSubmissionRaw\": 56539, \"acRate\": \"52.0%\"}",
        "hints": [
          "Use a binary search.  We'll binary search the monotone function \"possible(D) = can we use K or less gas stations to ensure each adjacent distance between gas stations is at most D?\""
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "koko-eating-bananas",
          "title": "Koko Eating Bananas",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Use a binary search.  We'll binary search the monotone function \"possible(D) = can we use K or less gas stations to ensure each adjacent distance between gas stations is at most D?\""
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "global-and-local-inversions": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "775",
        "title": "Global and Local Inversions",
        "titleSlug": "global-and-local-inversions",
        "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code> which represents a permutation of all the integers in the range <code>[0, n - 1]</code>.</p>\n\n<p>The number of <strong>global inversions</strong> is the number of the different pairs <code>(i, j)</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; n</code></li>\n\t<li><code>nums[i] &gt; nums[j]</code></li>\n</ul>\n\n<p>The number of <strong>local inversions</strong> is the number of indices <code>i</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; n - 1</code></li>\n\t<li><code>nums[i] &gt; nums[i + 1]</code></li>\n</ul>\n\n<p>Return <code>true</code> <em>if the number of <strong>global inversions</strong> is equal to the number of <strong>local inversions</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is 1 global inversion and 1 local inversion.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There are 2 global inversions and 1 local inversion.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt; n</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is a permutation of all the numbers in the range <code>[0, n - 1]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1767,
        "dislikes": 366,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"71.1K\", \"totalSubmission\": \"166.8K\", \"totalAcceptedRaw\": 71077, \"totalSubmissionRaw\": 166812, \"acRate\": \"42.6%\"}",
        "hints": [
          "Where can the 0 be placed in an ideal permutation?  What about the 1?"
        ]
      },
      "similar": [],
      "hints": [
        "Where can the 0 be placed in an ideal permutation?  What about the 1?"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "split-bst": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "776",
        "title": "Split BST",
        "titleSlug": "split-bst",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1000,
        "dislikes": 101,
        "similarQuestions": "[{\"title\": \"Delete Node in a BST\", \"titleSlug\": \"delete-node-in-a-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Recursion", "slug": "recursion" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"104.2K\", \"totalSubmission\": \"125.7K\", \"totalAcceptedRaw\": 104247, \"totalSubmissionRaw\": 125659, \"acRate\": \"83.0%\"}",
        "hints": [
          "Use recursion.  If root.val <= V, you split root.right into two halves, then join it's left half back on root.right."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "delete-node-in-a-bst",
          "title": "Delete Node in a BST",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Use recursion.  If root.val <= V, you split root.right into two halves, then join it's left half back on root.right."
      ],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Recursion", "slug": "recursion" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "swap-adjacent-in-lr-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "777",
        "title": "Swap Adjacent in LR String",
        "titleSlug": "swap-adjacent-in-lr-string",
        "content": "<p>In a string composed of <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;X&#39;</code> characters, like <code>&quot;RXXLRXRXL&quot;</code>, a move consists of either replacing one occurrence of <code>&quot;XL&quot;</code> with <code>&quot;LX&quot;</code>, or replacing one occurrence of <code>&quot;RX&quot;</code> with <code>&quot;XR&quot;</code>. Given the starting string <code>start</code> and the ending string <code>end</code>, return <code>True</code> if and only if there exists a sequence of moves to transform one string to the other.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can transform start to end following these steps:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;X&quot;, end = &quot;L&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= start.length&nbsp;&lt;= 10<sup>4</sup></code></li>\n\t<li><code>start.length == end.length</code></li>\n\t<li>Both <code>start</code> and <code>end</code> will only consist of characters in <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and&nbsp;<code>&#39;X&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1178,
        "dislikes": 919,
        "similarQuestions": "[{\"title\": \"Move Pieces to Obtain a String\", \"titleSlug\": \"move-pieces-to-obtain-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"73.8K\", \"totalSubmission\": \"200.5K\", \"totalAcceptedRaw\": 73760, \"totalSubmissionRaw\": 200483, \"acRate\": \"36.8%\"}",
        "hints": [
          "Think of the L and R's as people on a horizontal line, where X is a space.  The people can't cross each other, and also you can't go from XRX to RXX."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "move-pieces-to-obtain-a-string",
          "title": "Move Pieces to Obtain a String",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Think of the L and R's as people on a horizontal line, where X is a space.  The people can't cross each other, and also you can't go from XRX to RXX."
      ],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "swim-in-rising-water": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "778",
        "title": "Swim in Rising Water",
        "titleSlug": "swim-in-rising-water",
        "content": "<p>You are given an <code>n x n</code> integer matrix <code>grid</code> where each value <code>grid[i][j]</code> represents the elevation at that point <code>(i, j)</code>.</p>\n\n<p>The rain starts to fall. At time <code>t</code>, the depth of the water everywhere is <code>t</code>. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most <code>t</code>. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.</p>\n\n<p>Return <em>the least time until you can reach the bottom right square </em><code>(n - 1, n - 1)</code><em> if you start at the top left square </em><code>(0, 0)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/swim1-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,2],[1,3]]\n<strong>Output:</strong> 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/swim2-grid-1.jpg\" style=\"width: 404px; height: 405px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;&nbsp;n<sup>2</sup></code></li>\n\t<li>Each value <code>grid[i][j]</code> is <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3461,
        "dislikes": 228,
        "similarQuestions": "[{\"title\": \"Path With Minimum Effort\", \"titleSlug\": \"path-with-minimum-effort\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"143K\", \"totalSubmission\": \"236.7K\", \"totalAcceptedRaw\": 142966, \"totalSubmissionRaw\": 236715, \"acRate\": \"60.4%\"}",
        "hints": [
          "Use either Dijkstra's, or binary search for the best time T for which you can reach the end if you only step on squares at most T."
        ]
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "path-with-minimum-effort",
          "title": "Path With Minimum Effort",
          "isPaidOnly": false
        }
      ],
      "hints": [
        "Use either Dijkstra's, or binary search for the best time T for which you can reach the end if you only step on squares at most T."
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "k-th-symbol-in-grammar": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "779",
        "title": "K-th Symbol in Grammar",
        "titleSlug": "k-th-symbol-in-grammar",
        "content": "<p>We build a table of <code>n</code> rows (<strong>1-indexed</strong>). We start by writing <code>0</code> in the <code>1<sup>st</sup></code> row. Now in every subsequent row, we look at the previous row and replace each occurrence of <code>0</code> with <code>01</code>, and each occurrence of <code>1</code> with <code>10</code>.</p>\n\n<ul>\n\t<li>For example, for <code>n = 3</code>, the <code>1<sup>st</sup></code> row is <code>0</code>, the <code>2<sup>nd</sup></code> row is <code>01</code>, and the <code>3<sup>rd</sup></code> row is <code>0110</code>.</li>\n</ul>\n\n<p>Given two integer <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> (<strong>1-indexed</strong>) symbol in the <code>n<sup>th</sup></code> row of a table of <code>n</code> rows.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> row 1: <u>0</u>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> \nrow 1: 0\nrow 2: <u>0</u>1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nrow 1: 0\nrow 2: 0<u>1</u>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n\t<li><code>1 &lt;= k &lt;= 2<sup>n - 1</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3660,
        "dislikes": 379,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Recursion", "slug": "recursion" }
        ],
        "stats": "{\"totalAccepted\": \"189.7K\", \"totalSubmission\": \"410.2K\", \"totalAcceptedRaw\": 189686, \"totalSubmissionRaw\": 410209, \"acRate\": \"46.2%\"}",
        "hints": [
          "Try to represent the current (N, K) in terms of some (N-1, prevK).  What is prevK ?"
        ]
      },
      "similar": [],
      "hints": [
        "Try to represent the current (N, K) in terms of some (N-1, prevK).  What is prevK ?"
      ],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Recursion", "slug": "recursion" }
      ]
    }
  },
  "reaching-points": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "780",
        "title": "Reaching Points",
        "titleSlug": "reaching-points",
        "content": "<p>Given four integers <code>sx</code>, <code>sy</code>, <code>tx</code>, and <code>ty</code>, return <code>true</code><em> if it is possible to convert the point </em><code>(sx, sy)</code><em> to the point </em><code>(tx, ty)</code> <em>through some operations</em><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>The allowed operation on some point <code>(x, y)</code> is to convert it to either <code>(x, x + y)</code> or <code>(x + y, y)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sx = 1, sy = 1, tx = 3, ty = 5\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -&gt; (1, 2)\n(1, 2) -&gt; (3, 2)\n(3, 2) -&gt; (3, 5)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sx = 1, sy = 1, tx = 2, ty = 2\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sx = 1, sy = 1, tx = 1, ty = 1\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sx, sy, tx, ty &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1438,
        "dislikes": 222,
        "similarQuestions": "[{\"title\": \"Number of Ways to Reach a Position After Exactly k Steps\", \"titleSlug\": \"number-of-ways-to-reach-a-position-after-exactly-k-steps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if Point Is Reachable\", \"titleSlug\": \"check-if-point-is-reachable\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Determine if a Cell Is Reachable at a Given Time\", \"titleSlug\": \"determine-if-a-cell-is-reachable-at-a-given-time\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"62K\", \"totalSubmission\": \"188.6K\", \"totalAcceptedRaw\": 62031, \"totalSubmissionRaw\": 188625, \"acRate\": \"32.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
          "title": "Number of Ways to Reach a Position After Exactly k Steps",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "check-if-point-is-reachable",
          "title": "Check if Point Is Reachable",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "determine-if-a-cell-is-reachable-at-a-given-time",
          "title": "Determine if a Cell Is Reachable at a Given Time",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "rabbits-in-forest": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "781",
        "title": "Rabbits in Forest",
        "titleSlug": "rabbits-in-forest",
        "content": "<p>There is a forest with an unknown number of rabbits. We asked n rabbits <strong>&quot;How many rabbits have the same color as you?&quot;</strong> and collected the answers in an integer array <code>answers</code> where <code>answers[i]</code> is the answer of the <code>i<sup>th</sup></code> rabbit.</p>\n\n<p>Given the array <code>answers</code>, return <em>the minimum number of rabbits that could be in the forest</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> answers = [1,1,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nThe two rabbits that answered &quot;1&quot; could both be the same color, say red.\nThe rabbit that answered &quot;2&quot; can&#39;t be red or the answers would be inconsistent.\nSay the rabbit that answered &quot;2&quot; was blue.\nThen there should be 2 other blue rabbits in the forest that didn&#39;t answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn&#39;t.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> answers = [10,10,10]\n<strong>Output:</strong> 11\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= answers.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= answers[i] &lt; 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1235,
        "dislikes": 581,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Math", "slug": "math" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"52.5K\", \"totalSubmission\": \"97.7K\", \"totalAcceptedRaw\": 52542, \"totalSubmissionRaw\": 97669, \"acRate\": \"53.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Math", "slug": "math" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "transform-to-chessboard": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "782",
        "title": "Transform to Chessboard",
        "titleSlug": "transform-to-chessboard",
        "content": "<p>You are given an <code>n x n</code> binary grid <code>board</code>. In each move, you can swap any two rows with each other, or any two columns with each other.</p>\n\n<p>Return <em>the minimum number of moves to transform the board into a <strong>chessboard board</strong></em>. If the task is impossible, return <code>-1</code>.</p>\n\n<p>A <strong>chessboard board</strong> is a board where no <code>0</code>&#39;s and no <code>1</code>&#39;s are 4-directionally adjacent.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard1-grid.jpg\" style=\"width: 500px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard2-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1],[1,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Also note that the board with 0 in the top left corner, is also a valid chessboard.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard3-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,0],[1,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No matter what sequence of moves you make, you cannot end with a valid chessboard.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 30</code></li>\n\t<li><code>board[i][j]</code> is either&nbsp;<code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 347,
        "dislikes": 307,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"16.7K\", \"totalSubmission\": \"32.7K\", \"totalAcceptedRaw\": 16714, \"totalSubmissionRaw\": 32670, \"acRate\": \"51.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "minimum-distance-between-bst-nodes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "783",
        "title": "Minimum Distance Between BST Nodes",
        "titleSlug": "minimum-distance-between-bst-nodes",
        "content": "<p>Given the <code>root</code> of a Binary Search Tree (BST), return <em>the minimum difference between the values of any two different nodes in the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg\" style=\"width: 292px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,6,1,3]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg\" style=\"width: 282px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,0,48,null,null,12,49]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 530: <a href=\"https://leetcode.com/problems/minimum-absolute-difference-in-bst/\" target=\"_blank\">https://leetcode.com/problems/minimum-absolute-difference-in-bst/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3403,
        "dislikes": 411,
        "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"237.1K\", \"totalSubmission\": \"398.5K\", \"totalAcceptedRaw\": 237073, \"totalSubmissionRaw\": 398473, \"acRate\": \"59.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "binary-tree-inorder-traversal",
          "title": "Binary Tree Inorder Traversal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "letter-case-permutation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "784",
        "title": "Letter Case Permutation",
        "titleSlug": "letter-case-permutation",
        "content": "<p>Given a string <code>s</code>, you&nbsp;can transform every letter individually to be lowercase or uppercase to create another string.</p>\n\n<p>Return <em>a list of all possible strings we could create</em>. Return the output in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a1b2&quot;\n<strong>Output:</strong> [&quot;a1b2&quot;,&quot;a1B2&quot;,&quot;A1b2&quot;,&quot;A1B2&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3z4&quot;\n<strong>Output:</strong> [&quot;3z4&quot;,&quot;3Z4&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 12</code></li>\n\t<li><code>s</code> consists of lowercase English letters, uppercase English letters, and digits.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4548,
        "dislikes": 153,
        "similarQuestions": "[{\"title\": \"Subsets\", \"titleSlug\": \"subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Brace Expansion\", \"titleSlug\": \"brace-expansion\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"289.4K\", \"totalSubmission\": \"390.8K\", \"totalAcceptedRaw\": 289448, \"totalSubmissionRaw\": 390782, \"acRate\": \"74.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "subsets",
          "title": "Subsets",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "brace-expansion",
          "title": "Brace Expansion",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "is-graph-bipartite": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "785",
        "title": "Is Graph Bipartite?",
        "titleSlug": "is-graph-bipartite",
        "content": "<p>There is an <strong>undirected</strong> graph with <code>n</code> nodes, where each node is numbered between <code>0</code> and <code>n - 1</code>. You are given a 2D array <code>graph</code>, where <code>graph[u]</code> is an array of nodes that node <code>u</code> is adjacent to. More formally, for each <code>v</code> in <code>graph[u]</code>, there is an undirected edge between node <code>u</code> and node <code>v</code>. The graph has the following properties:</p>\n\n<ul>\n\t<li>There are no self-edges (<code>graph[u]</code> does not contain <code>u</code>).</li>\n\t<li>There are no parallel edges (<code>graph[u]</code> does not contain duplicate values).</li>\n\t<li>If <code>v</code> is in <code>graph[u]</code>, then <code>u</code> is in <code>graph[v]</code> (the graph is undirected).</li>\n\t<li>The graph may not be connected, meaning there may be two nodes <code>u</code> and <code>v</code> such that there is no path between them.</li>\n</ul>\n\n<p>A graph is <strong>bipartite</strong> if the nodes can be partitioned into two independent sets <code>A</code> and <code>B</code> such that <strong>every</strong> edge in the graph connects a node in set <code>A</code> and a node in set <code>B</code>.</p>\n\n<p>Return <code>true</code><em> if and only if it is <strong>bipartite</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,3],[0,2],[1,3],[0,2]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can partition the nodes into two sets: {0, 2} and {1, 3}.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>graph.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= graph[u].length &lt; n</code></li>\n\t<li><code>0 &lt;= graph[u][i] &lt;= n - 1</code></li>\n\t<li><code>graph[u]</code>&nbsp;does not contain&nbsp;<code>u</code>.</li>\n\t<li>All the values of <code>graph[u]</code> are <strong>unique</strong>.</li>\n\t<li>If <code>graph[u]</code> contains <code>v</code>, then <code>graph[v]</code> contains <code>u</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7923,
        "dislikes": 358,
        "similarQuestions": "[{\"title\": \"Divide Nodes Into the Maximum Number of Groups\", \"titleSlug\": \"divide-nodes-into-the-maximum-number-of-groups\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"514.8K\", \"totalSubmission\": \"932.1K\", \"totalAcceptedRaw\": 514793, \"totalSubmissionRaw\": 932067, \"acRate\": \"55.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "divide-nodes-into-the-maximum-number-of-groups",
          "title": "Divide Nodes Into the Maximum Number of Groups",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "k-th-smallest-prime-fraction": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "786",
        "title": "K-th Smallest Prime Fraction",
        "titleSlug": "k-th-smallest-prime-fraction",
        "content": "<p>You are given a sorted integer array <code>arr</code> containing <code>1</code> and <strong>prime</strong> numbers, where all the integers of <code>arr</code> are unique. You are also given an integer <code>k</code>.</p>\n\n<p>For every <code>i</code> and <code>j</code> where <code>0 &lt;= i &lt; j &lt; arr.length</code>, we consider the fraction <code>arr[i] / arr[j]</code>.</p>\n\n<p>Return <em>the</em> <code>k<sup>th</sup></code> <em>smallest fraction considered</em>. Return your answer as an array of integers of size <code>2</code>, where <code>answer[0] == arr[i]</code> and <code>answer[1] == arr[j]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,5], k = 3\n<strong>Output:</strong> [2,5]\n<strong>Explanation:</strong> The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,7], k = 1\n<strong>Output:</strong> [1,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>arr[0] == 1</code></li>\n\t<li><code>arr[i]</code> is a <strong>prime</strong> number for <code>i &gt; 0</code>.</li>\n\t<li>All the numbers of <code>arr</code> are <strong>unique</strong> and sorted in <strong>strictly increasing</strong> order.</li>\n\t<li><code>1 &lt;= k &lt;= arr.length * (arr.length - 1) / 2</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Can you solve the problem with better than <code>O(n<sup>2</sup>)</code> complexity?",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1227,
        "dislikes": 51,
        "similarQuestions": "[{\"title\": \"Kth Smallest Element in a Sorted Matrix\", \"titleSlug\": \"kth-smallest-element-in-a-sorted-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Smallest Number in Multiplication Table\", \"titleSlug\": \"kth-smallest-number-in-multiplication-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"40.2K\", \"totalSubmission\": \"75.4K\", \"totalAcceptedRaw\": 40186, \"totalSubmissionRaw\": 75445, \"acRate\": \"53.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
          "title": "Kth Smallest Element in a Sorted Matrix",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "kth-smallest-number-in-multiplication-table",
          "title": "Kth Smallest Number in Multiplication Table",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-k-th-smallest-pair-distance",
          "title": "Find K-th Smallest Pair Distance",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "cheapest-flights-within-k-stops": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "787",
        "title": "Cheapest Flights Within K Stops",
        "titleSlug": "cheapest-flights-within-k-stops",
        "content": "<p>There are <code>n</code> cities connected by some number of flights. You are given an array <code>flights</code> where <code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code> indicates that there is a flight from city <code>from<sub>i</sub></code> to city <code>to<sub>i</sub></code> with cost <code>price<sub>i</sub></code>.</p>\n\n<p>You are also given three integers <code>src</code>, <code>dst</code>, and <code>k</code>, return <em><strong>the cheapest price</strong> from </em><code>src</code><em> to </em><code>dst</code><em> with at most </em><code>k</code><em> stops. </em>If there is no such route, return<em> </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png\" style=\"width: 332px; height: 392px;\" />\n<pre>\n<strong>Input:</strong> n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\n<strong>Output:</strong> 700\n<strong>Explanation:</strong>\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png\" style=\"width: 332px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\n<strong>Output:</strong> 200\n<strong>Explanation:</strong>\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png\" style=\"width: 332px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\n<strong>Output:</strong> 500\n<strong>Explanation:</strong>\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li>\n\t<li><code>flights[i].length == 3</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li>\n\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\n\t<li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>There will not be any multiple flights between two cities.</li>\n\t<li><code>0 &lt;= src, dst, k &lt; n</code></li>\n\t<li><code>src != dst</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 8945,
        "dislikes": 366,
        "similarQuestions": "[{\"title\": \"Maximum Vacation Days\", \"titleSlug\": \"maximum-vacation-days\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Reach City With Discounts\", \"titleSlug\": \"minimum-cost-to-reach-city-with-discounts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Shortest Path", "slug": "shortest-path" }
        ],
        "stats": "{\"totalAccepted\": \"434.4K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 434399, \"totalSubmissionRaw\": 1161647, \"acRate\": \"37.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-vacation-days",
          "title": "Maximum Vacation Days",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-cost-to-reach-city-with-discounts",
          "title": "Minimum Cost to Reach City With Discounts",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Shortest Path", "slug": "shortest-path" }
      ]
    }
  },
  "rotated-digits": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "788",
        "title": "Rotated Digits",
        "titleSlug": "rotated-digits",
        "content": "<p>An integer <code>x</code> is a <strong>good</strong> if after rotating each digit individually by 180 degrees, we get a valid number that is different from <code>x</code>. Each digit must be rotated - we cannot choose to leave it alone.</p>\n\n<p>A number is valid if each digit remains a digit after rotation. For example:</p>\n\n<ul>\n\t<li><code>0</code>, <code>1</code>, and <code>8</code> rotate to themselves,</li>\n\t<li><code>2</code> and <code>5</code> rotate to each other (in this case they are rotated in a different direction, in other words, <code>2</code> or <code>5</code> gets mirrored),</li>\n\t<li><code>6</code> and <code>9</code> rotate to each other, and</li>\n\t<li>the rest of the numbers do not rotate to any other number and become invalid.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the number of <strong>good</strong> integers in the range </em><code>[1, n]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 730,
        "dislikes": 1905,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"102.5K\", \"totalSubmission\": \"181.6K\", \"totalAcceptedRaw\": 102464, \"totalSubmissionRaw\": 181556, \"acRate\": \"56.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "escape-the-ghosts": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "789",
        "title": "Escape The Ghosts",
        "titleSlug": "escape-the-ghosts",
        "content": "<p>You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point <code>[0, 0]</code>, and you are given a destination point <code>target = [x<sub>target</sub>, y<sub>target</sub>]</code> that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array <code>ghosts</code>, where <code>ghosts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the starting position of the <code>i<sup>th</sup></code> ghost. All inputs are <strong>integral coordinates</strong>.</p>\n\n<p>Each turn, you and all the ghosts may independently choose to either <strong>move 1 unit</strong> in any of the four cardinal directions: north, east, south, or west, or <strong>stay still</strong>. All actions happen <strong>simultaneously</strong>.</p>\n\n<p>You escape if and only if you can reach the target <strong>before</strong> any ghost reaches you. If you reach any square (including the target) at the <strong>same time</strong> as a ghost, it <strong>does not</strong> count as an escape.</p>\n\n<p>Return <code>true</code><em> if it is possible to escape regardless of how the ghosts move, otherwise return </em><code>false</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[1,0],[0,3]], target = [0,1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[1,0]], target = [2,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ghosts = [[2,0]], target = [1,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The ghost can reach the target at the same time as you.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ghosts.length &lt;= 100</code></li>\n\t<li><code>ghosts[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>There can be <strong>multiple ghosts</strong> in the same location.</li>\n\t<li><code>target.length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>target</sub>, y<sub>target</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 272,
        "dislikes": 26,
        "similarQuestions": "[{\"title\": \"Cat and Mouse II\", \"titleSlug\": \"cat-and-mouse-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" }
        ],
        "stats": "{\"totalAccepted\": \"27.8K\", \"totalSubmission\": \"45.3K\", \"totalAcceptedRaw\": 27818, \"totalSubmissionRaw\": 45314, \"acRate\": \"61.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "cat-and-mouse-ii",
          "title": "Cat and Mouse II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" }
      ]
    }
  },
  "domino-and-tromino-tiling": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "790",
        "title": "Domino and Tromino Tiling",
        "titleSlug": "domino-and-tromino-tiling",
        "content": "<p>You have two types of tiles: a <code>2 x 1</code> domino shape and a tromino shape. You may rotate these shapes.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg\" style=\"width: 362px; height: 195px;\" />\n<p>Given an integer n, return <em>the number of ways to tile an</em> <code>2 x n</code> <em>board</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/15/lc-domino1.jpg\" style=\"width: 500px; height: 226px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The five different ways are show above.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3266,
        "dislikes": 1044,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"117K\", \"totalSubmission\": \"228.6K\", \"totalAcceptedRaw\": 117020, \"totalSubmissionRaw\": 228571, \"acRate\": \"51.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "custom-sort-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "791",
        "title": "Custom Sort String",
        "titleSlug": "custom-sort-string",
        "content": "<p>You are given two strings order and s. All the characters of <code>order</code> are <strong>unique</strong> and were sorted in some custom order previously.</p>\n\n<p>Permute the characters of <code>s</code> so that they match the order that <code>order</code> was sorted. More specifically, if a character <code>x</code> occurs before a character <code>y</code> in <code>order</code>, then <code>x</code> should occur before <code>y</code> in the permuted string.</p>\n\n<p>Return <em>any permutation of </em><code>s</code><em> that satisfies this property</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> order = &quot;cba&quot;, s = &quot;abcd&quot;\n<strong>Output:</strong> &quot;cbad&quot;\n<strong>Explanation:</strong> \n&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in order, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. \nSince &quot;d&quot; does not appear in order, it can be at any position in the returned string. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> order = &quot;cbafg&quot;, s = &quot;abcd&quot;\n<strong>Output:</strong> &quot;cbad&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= order.length &lt;= 26</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>order</code> and <code>s</code> consist of lowercase English letters.</li>\n\t<li>All the characters of <code>order</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2774,
        "dislikes": 337,
        "similarQuestions": "[{\"title\": \"Sort the Students by Their Kth Score\", \"titleSlug\": \"sort-the-students-by-their-kth-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"247.1K\", \"totalSubmission\": \"355.9K\", \"totalAcceptedRaw\": 247071, \"totalSubmissionRaw\": 355860, \"acRate\": \"69.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "sort-the-students-by-their-kth-score",
          "title": "Sort the Students by Their Kth Score",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "number-of-matching-subsequences": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "792",
        "title": "Number of Matching Subsequences",
        "titleSlug": "number-of-matching-subsequences",
        "content": "<p>Given a string <code>s</code> and an array of strings <code>words</code>, return <em>the number of</em> <code>words[i]</code> <em>that is a subsequence of</em> <code>s</code>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcde&quot;, words = [&quot;a&quot;,&quot;bb&quot;,&quot;acd&quot;,&quot;ace&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three strings in words that are a subsequence of s: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dsahjpjauf&quot;, words = [&quot;ahjpjau&quot;,&quot;ja&quot;,&quot;ahbwzgqnuk&quot;,&quot;tnmlanowax&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 50</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5383,
        "dislikes": 229,
        "similarQuestions": "[{\"title\": \"Is Subsequence\", \"titleSlug\": \"is-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Shortest Way to Form String\", \"titleSlug\": \"shortest-way-to-form-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Vowel Substrings of a String\", \"titleSlug\": \"count-vowel-substrings-of-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Trie", "slug": "trie" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"222.5K\", \"totalSubmission\": \"434.6K\", \"totalAcceptedRaw\": 222519, \"totalSubmissionRaw\": 434607, \"acRate\": \"51.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "is-subsequence",
          "title": "Is Subsequence",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shortest-way-to-form-string",
          "title": "Shortest Way to Form String",
          "isPaidOnly": true
        },
        {
          "difficulty": "Easy",
          "titleSlug": "count-vowel-substrings-of-a-string",
          "title": "Count Vowel Substrings of a String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Trie", "slug": "trie" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "preimage-size-of-factorial-zeroes-function": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "793",
        "title": "Preimage Size of Factorial Zeroes Function",
        "titleSlug": "preimage-size-of-factorial-zeroes-function",
        "content": "<p>Let <code>f(x)</code> be the number of zeroes at the end of <code>x!</code>. Recall that <code>x! = 1 * 2 * 3 * ... * x</code> and by convention, <code>0! = 1</code>.</p>\n\n<ul>\n\t<li>For example, <code>f(3) = 0</code> because <code>3! = 6</code> has no zeroes at the end, while <code>f(11) = 2</code> because <code>11! = 39916800</code> has two zeroes at the end.</li>\n</ul>\n\n<p>Given an integer <code>k</code>, return the number of non-negative integers <code>x</code> have the property that <code>f(x) = k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 0\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 5\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no x such that x! ends in k = 5 zeroes.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 419,
        "dislikes": 93,
        "similarQuestions": "[{\"title\": \"Factorial Trailing Zeroes\", \"titleSlug\": \"factorial-trailing-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"17.1K\", \"totalSubmission\": \"39.2K\", \"totalAcceptedRaw\": 17135, \"totalSubmissionRaw\": 39207, \"acRate\": \"43.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "factorial-trailing-zeroes",
          "title": "Factorial Trailing Zeroes",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "valid-tic-tac-toe-state": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "794",
        "title": "Valid Tic-Tac-Toe State",
        "titleSlug": "valid-tic-tac-toe-state",
        "content": "<p>Given a Tic-Tac-Toe board as a string array <code>board</code>, return <code>true</code> if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.</p>\n\n<p>The board is a <code>3 x 3</code> array that consists of characters <code>&#39; &#39;</code>, <code>&#39;X&#39;</code>, and <code>&#39;O&#39;</code>. The <code>&#39; &#39;</code> character represents an empty square.</p>\n\n<p>Here are the rules of Tic-Tac-Toe:</p>\n\n<ul>\n\t<li>Players take turns placing characters into empty squares <code>&#39; &#39;</code>.</li>\n\t<li>The first player always places <code>&#39;X&#39;</code> characters, while the second player always places <code>&#39;O&#39;</code> characters.</li>\n\t<li><code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> characters are always placed into empty squares, never filled ones.</li>\n\t<li>The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.</li>\n\t<li>The game also ends if all squares are non-empty.</li>\n\t<li>No more moves can be played if the game is over.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/15/tictactoe1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> board = [&quot;O  &quot;,&quot;   &quot;,&quot;   &quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The first player always plays &quot;X&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/15/tictactoe2-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> board = [&quot;XOX&quot;,&quot; X &quot;,&quot;   &quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Players take turns making moves.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/15/tictactoe4-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> board = [&quot;XOX&quot;,&quot;O O&quot;,&quot;XOX&quot;]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 3</code></li>\n\t<li><code>board[i].length == 3</code></li>\n\t<li><code>board[i][j]</code> is either <code>&#39;X&#39;</code>, <code>&#39;O&#39;</code>, or <code>&#39; &#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 536,
        "dislikes": 1133,
        "similarQuestions": "[{\"title\": \"Design Tic-Tac-Toe\", \"titleSlug\": \"design-tic-tac-toe\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"56.5K\", \"totalSubmission\": \"162.1K\", \"totalAcceptedRaw\": 56469, \"totalSubmissionRaw\": 162071, \"acRate\": \"34.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "design-tic-tac-toe",
          "title": "Design Tic-Tac-Toe",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "number-of-subarrays-with-bounded-maximum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "795",
        "title": "Number of Subarrays with Bounded Maximum",
        "titleSlug": "number-of-subarrays-with-bounded-maximum",
        "content": "<p>Given an integer array <code>nums</code> and two integers <code>left</code> and <code>right</code>, return <em>the number of contiguous non-empty <strong>subarrays</strong> such that the value of the maximum array element in that subarray is in the range </em><code>[left, right]</code>.</p>\n\n<p>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,4,3], left = 2, right = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three subarrays that meet the requirements: [2], [2, 1], [3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,9,2,5,6], left = 2, right = 8\n<strong>Output:</strong> 7\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= left &lt;= right &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2229,
        "dislikes": 114,
        "similarQuestions": "[{\"title\": \"Count Subarrays With Median K\", \"titleSlug\": \"count-subarrays-with-median-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"66.4K\", \"totalSubmission\": \"125.1K\", \"totalAcceptedRaw\": 66365, \"totalSubmissionRaw\": 125123, \"acRate\": \"53.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "count-subarrays-with-median-k",
          "title": "Count Subarrays With Median K",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "rotate-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "796",
        "title": "Rotate String",
        "titleSlug": "rotate-string",
        "content": "<p>Given two strings <code>s</code> and <code>goal</code>, return <code>true</code> <em>if and only if</em> <code>s</code> <em>can become</em> <code>goal</code> <em>after some number of <strong>shifts</strong> on</em> <code>s</code>.</p>\n\n<p>A <strong>shift</strong> on <code>s</code> consists of moving the leftmost character of <code>s</code> to the rightmost position.</p>\n\n<ul>\n\t<li>For example, if <code>s = &quot;abcde&quot;</code>, then it will be <code>&quot;bcdea&quot;</code> after one shift.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"abcde\", goal = \"cdeab\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcde\", goal = \"abced\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, goal.length &lt;= 100</code></li>\n\t<li><code>s</code> and <code>goal</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3383,
        "dislikes": 129,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "String Matching", "slug": "string-matching" }
        ],
        "stats": "{\"totalAccepted\": \"265.9K\", \"totalSubmission\": \"466.1K\", \"totalAcceptedRaw\": 265884, \"totalSubmissionRaw\": 466125, \"acRate\": \"57.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "String Matching", "slug": "string-matching" }
      ]
    }
  },
  "all-paths-from-source-to-target": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "797",
        "title": "All Paths From Source to Target",
        "titleSlug": "all-paths-from-source-to-target",
        "content": "<p>Given a directed acyclic graph (<strong>DAG</strong>) of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, find all possible paths from node <code>0</code> to node <code>n - 1</code> and return them in <strong>any order</strong>.</p>\n\n<p>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code> (i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2],[3],[3],[]]\n<strong>Output:</strong> [[0,1,3],[0,2,3]]\n<strong>Explanation:</strong> There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\" style=\"width: 423px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> graph = [[4,3,1],[3,2,4],[3],[4],[]]\n<strong>Output:</strong> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 15</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt; n</code></li>\n\t<li><code>graph[i][j] != i</code> (i.e., there will be no self-loops).</li>\n\t<li>All the elements of <code>graph[i]</code> are <strong>unique</strong>.</li>\n\t<li>The input graph is <strong>guaranteed</strong> to be a <strong>DAG</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7007,
        "dislikes": 138,
        "similarQuestions": "[{\"title\": \"Number of Ways to Arrive at Destination\", \"titleSlug\": \"number-of-ways-to-arrive-at-destination\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Increasing Paths in a Grid\", \"titleSlug\": \"number-of-increasing-paths-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"487.3K\", \"totalSubmission\": \"591.3K\", \"totalAcceptedRaw\": 487282, \"totalSubmissionRaw\": 591323, \"acRate\": \"82.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-arrive-at-destination",
          "title": "Number of Ways to Arrive at Destination",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "number-of-increasing-paths-in-a-grid",
          "title": "Number of Increasing Paths in a Grid",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "smallest-rotation-with-highest-score": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "798",
        "title": "Smallest Rotation with Highest Score",
        "titleSlug": "smallest-rotation-with-highest-score",
        "content": "<p>You are given an array <code>nums</code>. You can rotate it by a non-negative integer <code>k</code> so that the array becomes <code>[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]</code>. Afterward, any entries that are less than or equal to their index are worth one point.</p>\n\n<ul>\n\t<li>For example, if we have <code>nums = [2,4,1,3,0]</code>, and we rotate by <code>k = 2</code>, it becomes <code>[1,3,0,2,4]</code>. This is worth <code>3</code> points because <code>1 &gt; 0</code> [no points], <code>3 &gt; 1</code> [no points], <code>0 &lt;= 2</code> [one point], <code>2 &lt;= 3</code> [one point], <code>4 &lt;= 4</code> [one point].</li>\n</ul>\n\n<p>Return <em>the rotation index </em><code>k</code><em> that corresponds to the highest score we can achieve if we rotated </em><code>nums</code><em> by it</em>. If there are multiple answers, return the smallest such index <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,4,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Scores for each k are listed below: \nk = 0,  nums = [2,3,1,4,0],    score 2\nk = 1,  nums = [3,1,4,0,2],    score 3\nk = 2,  nums = [1,4,0,2,3],    score 3\nk = 3,  nums = [4,0,2,3,1],    score 4\nk = 4,  nums = [0,2,3,1,4],    score 3\nSo we should choose k = 3, which has the highest score.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,0,2,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt; nums.length</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 520,
        "dislikes": 36,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"13K\", \"totalSubmission\": \"25.6K\", \"totalAcceptedRaw\": 12963, \"totalSubmissionRaw\": 25554, \"acRate\": \"50.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "champagne-tower": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "799",
        "title": "Champagne Tower",
        "titleSlug": "champagne-tower",
        "content": "<p>We stack glasses in a pyramid, where the <strong>first</strong> row has <code>1</code> glass, the <strong>second</strong> row has <code>2</code> glasses, and so on until the 100<sup>th</sup> row.&nbsp; Each glass holds one cup&nbsp;of champagne.</p>\r\n\r\n<p>Then, some champagne is poured into the first glass at the top.&nbsp; When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.&nbsp; When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.&nbsp; (A glass at the bottom row has its excess champagne fall on the floor.)</p>\r\n\r\n<p>For example, after one cup of champagne is poured, the top most glass is full.&nbsp; After two cups of champagne are poured, the two glasses on the second row are half full.&nbsp; After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.&nbsp; After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" style=\"height: 241px; width: 350px;\" /></p>\r\n\r\n<p>Now after pouring some non-negative integer cups of champagne, return how full the <code>j<sup>th</sup></code> glass in the <code>i<sup>th</sup></code> row is (both <code>i</code> and <code>j</code> are 0-indexed.)</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> poured = 1, query_row = 1, query_glass = 1\r\n<strong>Output:</strong> 0.00000\r\n<strong>Explanation:</strong> We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> poured = 2, query_row = 1, query_glass = 1\r\n<strong>Output:</strong> 0.50000\r\n<strong>Explanation:</strong> We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> poured = 100000009, query_row = 33, query_glass = 17\r\n<strong>Output:</strong> 1.00000\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;=&nbsp;poured &lt;= 10<sup>9</sup></code></li>\r\n\t<li><code>0 &lt;= query_glass &lt;= query_row&nbsp;&lt; 100</code></li>\r\n</ul>",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3575,
        "dislikes": 194,
        "similarQuestions": "[{\"title\": \"Number of Ways to Build House of Cards\", \"titleSlug\": \"number-of-ways-to-build-house-of-cards\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"148.4K\", \"totalSubmission\": \"256K\", \"totalAcceptedRaw\": 148423, \"totalSubmissionRaw\": 256021, \"acRate\": \"58.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-build-house-of-cards",
          "title": "Number of Ways to Build House of Cards",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "similar-rgb-color": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "800",
        "title": "Similar RGB Color",
        "titleSlug": "similar-rgb-color",
        "content": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 105,
        "dislikes": 679,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Enumeration", "slug": "enumeration" }
        ],
        "stats": "{\"totalAccepted\": \"17K\", \"totalSubmission\": \"25.3K\", \"totalAcceptedRaw\": 17011, \"totalSubmissionRaw\": 25260, \"acRate\": \"67.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Enumeration", "slug": "enumeration" }
      ]
    }
  },
  "minimum-swaps-to-make-sequences-increasing": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "801",
        "title": "Minimum Swaps To Make Sequences Increasing",
        "titleSlug": "minimum-swaps-to-make-sequences-increasing",
        "content": "<p>You are given two integer arrays of the same length <code>nums1</code> and <code>nums2</code>. In one operation, you are allowed to swap <code>nums1[i]</code> with <code>nums2[i]</code>.</p>\n\n<ul>\n\t<li>For example, if <code>nums1 = [1,2,3,<u>8</u>]</code>, and <code>nums2 = [5,6,7,<u>4</u>]</code>, you can swap the element at <code>i = 3</code> to obtain <code>nums1 = [1,2,3,4]</code> and <code>nums2 = [5,6,7,8]</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of needed operations to make </em><code>nums1</code><em> and </em><code>nums2</code><em> <strong>strictly increasing</strong></em>. The test cases are generated so that the given input always makes it possible.</p>\n\n<p>An array <code>arr</code> is <strong>strictly increasing</strong> if and only if <code>arr[0] &lt; arr[1] &lt; arr[2] &lt; ... &lt; arr[arr.length - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3,5,4], nums2 = [1,2,3,7]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums2.length == nums1.length</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 2 * 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2746,
        "dislikes": 135,
        "similarQuestions": "[{\"title\": \"Minimum Operations to Make the Array K-Increasing\", \"titleSlug\": \"minimum-operations-to-make-the-array-k-increasing\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Maximize Last Elements in Arrays\", \"titleSlug\": \"minimum-operations-to-maximize-last-elements-in-arrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"72.2K\", \"totalSubmission\": \"181.9K\", \"totalAcceptedRaw\": 72166, \"totalSubmissionRaw\": 181916, \"acRate\": \"39.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-operations-to-make-the-array-k-increasing",
          "title": "Minimum Operations to Make the Array K-Increasing",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-operations-to-maximize-last-elements-in-arrays",
          "title": "Minimum Operations to Maximize Last Elements in Arrays",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "find-eventual-safe-states": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "802",
        "title": "Find Eventual Safe States",
        "titleSlug": "find-eventual-safe-states",
        "content": "<p>There is a directed graph of <code>n</code> nodes with each node labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a <strong>0-indexed</strong> 2D integer array <code>graph</code> where <code>graph[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is an edge from node <code>i</code> to each node in <code>graph[i]</code>.</p>\n\n<p>A node is a <strong>terminal node</strong> if there are no outgoing edges. A node is a <strong>safe node</strong> if every possible path starting from that node leads to a <strong>terminal node</strong> (or another safe node).</p>\n\n<p>Return <em>an array containing all the <strong>safe nodes</strong> of the graph</em>. The answer should be sorted in <strong>ascending</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height: 171px; width: 600px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>Output:</strong> [2,4,5,6]\n<strong>Explanation:</strong> The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n<strong>Output:</strong> [4]\n<strong>Explanation:</strong>\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;= n</code></li>\n\t<li><code>0 &lt;= graph[i][j] &lt;= n - 1</code></li>\n\t<li><code>graph[i]</code> is sorted in a strictly increasing order.</li>\n\t<li>The graph may contain self-loops.</li>\n\t<li>The number of edges in the graph will be in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5427,
        "dislikes": 439,
        "similarQuestions": "[{\"title\": \"Build a Matrix With Conditions\", \"titleSlug\": \"build-a-matrix-with-conditions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" }
        ],
        "stats": "{\"totalAccepted\": \"219.9K\", \"totalSubmission\": \"355K\", \"totalAcceptedRaw\": 219874, \"totalSubmissionRaw\": 355001, \"acRate\": \"61.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "build-a-matrix-with-conditions",
          "title": "Build a Matrix With Conditions",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" }
      ]
    }
  },
  "bricks-falling-when-hit": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "803",
        "title": "Bricks Falling When Hit",
        "titleSlug": "bricks-falling-when-hit",
        "content": "<p>You are given an <code>m x n</code> binary <code>grid</code>, where each <code>1</code> represents a brick and <code>0</code> represents an empty space. A brick is <strong>stable</strong> if:</p>\n\n<ul>\n\t<li>It is directly connected to the top of the grid, or</li>\n\t<li>At least one other brick in its four adjacent cells is <strong>stable</strong>.</li>\n</ul>\n\n<p>You are also given an array <code>hits</code>, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location <code>hits[i] = (row<sub>i</sub>, col<sub>i</sub>)</code>. The brick on that location&nbsp;(if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will <strong>fall</strong>. Once a brick falls, it is <strong>immediately</strong> erased from the <code>grid</code> (i.e., it does not land on other stable bricks).</p>\n\n<p>Return <em>an array </em><code>result</code><em>, where each </em><code>result[i]</code><em> is the number of bricks that will <strong>fall</strong> after the </em><code>i<sup>th</sup></code><em> erasure is applied.</em></p>\n\n<p><strong>Note</strong> that an erasure may refer to a location with no brick, and if it does, no bricks drop.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\n<strong>Output:</strong> [2]\n<strong>Explanation: </strong>Starting with the grid:\n[[1,0,0,0],\n [<u>1</u>,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,<u>1</u>,<u>1</u>,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\n<strong>Output:</strong> [0,0]\n<strong>Explanation: </strong>Starting with the grid:\n[[1,0,0,0],\n [1,<u>1</u>,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [<u>1</u>,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= hits.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>hits[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i&nbsp;</sub>&lt;= m - 1</code></li>\n\t<li><code>0 &lt;=&nbsp;y<sub>i</sub> &lt;= n - 1</code></li>\n\t<li>All <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are unique.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1071,
        "dislikes": 187,
        "similarQuestions": "[{\"title\": \"Last Day Where You Can Still Cross\", \"titleSlug\": \"last-day-where-you-can-still-cross\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Build Sturdy Brick Wall\", \"titleSlug\": \"number-of-ways-to-build-sturdy-brick-wall\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"29.4K\", \"totalSubmission\": \"84.9K\", \"totalAcceptedRaw\": 29352, \"totalSubmissionRaw\": 84855, \"acRate\": \"34.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "last-day-where-you-can-still-cross",
          "title": "Last Day Where You Can Still Cross",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "number-of-ways-to-build-sturdy-brick-wall",
          "title": "Number of Ways to Build Sturdy Brick Wall",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "unique-morse-code-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "804",
        "title": "Unique Morse Code Words",
        "titleSlug": "unique-morse-code-words",
        "content": "<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:</p>\n\n<ul>\n\t<li><code>&#39;a&#39;</code> maps to <code>&quot;.-&quot;</code>,</li>\n\t<li><code>&#39;b&#39;</code> maps to <code>&quot;-...&quot;</code>,</li>\n\t<li><code>&#39;c&#39;</code> maps to <code>&quot;-.-.&quot;</code>, and so on.</li>\n</ul>\n\n<p>For convenience, the full table for the <code>26</code> letters of the English alphabet is given below:</p>\n\n<pre>\n[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</pre>\n\n<p>Given an array of strings <code>words</code> where each word can be written as a concatenation of the Morse code of each letter.</p>\n\n<ul>\n\t<li>For example, <code>&quot;cab&quot;</code> can be written as <code>&quot;-.-..--...&quot;</code>, which is the concatenation of <code>&quot;-.-.&quot;</code>, <code>&quot;.-&quot;</code>, and <code>&quot;-...&quot;</code>. We will call such a concatenation the <strong>transformation</strong> of a word.</li>\n</ul>\n\n<p>Return <em>the number of different <strong>transformations</strong> among all words we have</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;gin&quot;,&quot;zen&quot;,&quot;gig&quot;,&quot;msg&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The transformation of each word is:\n&quot;gin&quot; -&gt; &quot;--...-.&quot;\n&quot;zen&quot; -&gt; &quot;--...-.&quot;\n&quot;gig&quot; -&gt; &quot;--...--.&quot;\n&quot;msg&quot; -&gt; &quot;--...--.&quot;\nThere are 2 different transformations: &quot;--...-.&quot; and &quot;--...--.&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 12</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2461,
        "dislikes": 1520,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"337.5K\", \"totalSubmission\": \"408.1K\", \"totalAcceptedRaw\": 337544, \"totalSubmissionRaw\": 408074, \"acRate\": \"82.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "split-array-with-same-average": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "805",
        "title": "Split Array With Same Average",
        "titleSlug": "split-array-with-same-average",
        "content": "<p>You are given an integer array <code>nums</code>.</p>\n\n<p>You should move each element of <code>nums</code> into one of the two arrays <code>A</code> and <code>B</code> such that <code>A</code> and <code>B</code> are non-empty, and <code>average(A) == average(B)</code>.</p>\n\n<p>Return <code>true</code> if it is possible to achieve that and <code>false</code> otherwise.</p>\n\n<p><strong>Note</strong> that for an array <code>arr</code>, <code>average(arr)</code> is the sum of all the elements of <code>arr</code> over the length of <code>arr</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6,7,8]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 30</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1230,
        "dislikes": 133,
        "similarQuestions": "[{\"title\": \"Partition Array Into Two Arrays to Minimize Sum Difference\", \"titleSlug\": \"partition-array-into-two-arrays-to-minimize-sum-difference\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Average Difference\", \"titleSlug\": \"minimum-average-difference\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"33.5K\", \"totalSubmission\": \"132.5K\", \"totalAcceptedRaw\": 33523, \"totalSubmissionRaw\": 132475, \"acRate\": \"25.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
          "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-average-difference",
          "title": "Minimum Average Difference",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "number-of-lines-to-write-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "806",
        "title": "Number of Lines To Write String",
        "titleSlug": "number-of-lines-to-write-string",
        "content": "<p>You are given a string <code>s</code> of lowercase English letters and an array <code>widths</code> denoting <strong>how many pixels wide</strong> each lowercase English letter is. Specifically, <code>widths[0]</code> is the width of <code>&#39;a&#39;</code>, <code>widths[1]</code> is the width of <code>&#39;b&#39;</code>, and so on.</p>\n\n<p>You are trying to write <code>s</code> across several lines, where <strong>each line is no longer than </strong><code>100</code><strong> pixels</strong>. Starting at the beginning of <code>s</code>, write as many letters on the first line such that the total width does not exceed <code>100</code> pixels. Then, from where you stopped in <code>s</code>, continue writing as many letters as you can on the second line. Continue this process until you have written all of <code>s</code>.</p>\n\n<p>Return <em>an array </em><code>result</code><em> of length 2 where:</em></p>\n\n<ul>\n\t<li><code>result[0]</code><em> is the total number of lines.</em></li>\n\t<li><code>result[1]</code><em> is the width of the last line in pixels.</em></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>Output:</strong> [3,60]\n<strong>Explanation:</strong> You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = &quot;bbbcccdddaaa&quot;\n<strong>Output:</strong> [2,4]\n<strong>Explanation:</strong> You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>widths.length == 26</code></li>\n\t<li><code>2 &lt;= widths[i] &lt;= 10</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 571,
        "dislikes": 1304,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"73.3K\", \"totalSubmission\": \"108.4K\", \"totalAcceptedRaw\": 73300, \"totalSubmissionRaw\": 108380, \"acRate\": \"67.6%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "max-increase-to-keep-city-skyline": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "807",
        "title": "Max Increase to Keep City Skyline",
        "titleSlug": "max-increase-to-keep-city-skyline",
        "content": "<p>There is a city composed of <code>n x n</code> blocks, where each block contains a single building shaped like a vertical square prism. You are given a <strong>0-indexed</strong> <code>n x n</code> integer matrix <code>grid</code> where <code>grid[r][c]</code> represents the <strong>height</strong> of the building located in the block at row <code>r</code> and column <code>c</code>.</p>\n\n<p>A city&#39;s <strong>skyline</strong> is the&nbsp;outer contour formed by all the building when viewing the side of the city from a distance. The <strong>skyline</strong> from each cardinal direction north, east, south, and west may be different.</p>\n\n<p>We are allowed to increase the height of <strong>any number of buildings by any amount</strong> (the amount can be different per building). The height of a <code>0</code>-height building can also be increased. However, increasing the height of a building should <strong>not</strong> affect the city&#39;s <strong>skyline</strong> from any cardinal direction.</p>\n\n<p>Return <em>the <strong>maximum total sum</strong> that the height of the buildings can be increased by <strong>without</strong> changing the city&#39;s <strong>skyline</strong> from any cardinal direction</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/21/807-ex1.png\" style=\"width: 700px; height: 603px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n<strong>Output:</strong> 35\n<strong>Explanation:</strong> The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,0,0],[0,0,0],[0,0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Increasing the height of any building will result in the skyline changing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>n == grid[r].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[r][c] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2488,
        "dislikes": 506,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"156.9K\", \"totalSubmission\": \"182.4K\", \"totalAcceptedRaw\": 156934, \"totalSubmissionRaw\": 182421, \"acRate\": \"86.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "soup-servings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "808",
        "title": "Soup Servings",
        "titleSlug": "soup-servings",
        "content": "<p>There are two types of soup: <strong>type A</strong> and <strong>type B</strong>. Initially, we have <code>n</code> ml of each type of soup. There are four kinds of operations:</p>\n\n<ol>\n\t<li>Serve <code>100</code> ml of <strong>soup A</strong> and <code>0</code> ml of <strong>soup B</strong>,</li>\n\t<li>Serve <code>75</code> ml of <strong>soup A</strong> and <code>25</code> ml of <strong>soup B</strong>,</li>\n\t<li>Serve <code>50</code> ml of <strong>soup A</strong> and <code>50</code> ml of <strong>soup B</strong>, and</li>\n\t<li>Serve <code>25</code> ml of <strong>soup A</strong> and <code>75</code> ml of <strong>soup B</strong>.</li>\n</ol>\n\n<p>When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability <code>0.25</code>. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.</p>\n\n<p><strong>Note</strong> that we do not have an operation where all <code>100</code> ml&#39;s of <strong>soup B</strong> are used first.</p>\n\n<p>Return <em>the probability that <strong>soup A</strong> will be empty first, plus half the probability that <strong>A</strong> and <strong>B</strong> become empty at the same time</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 50\n<strong>Output:</strong> 0.62500\n<strong>Explanation:</strong> If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 100\n<strong>Output:</strong> 0.71875\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 940,
        "dislikes": 2560,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          {
            "name": "Probability and Statistics",
            "slug": "probability-and-statistics"
          }
        ],
        "stats": "{\"totalAccepted\": \"63.6K\", \"totalSubmission\": \"117K\", \"totalAcceptedRaw\": 63634, \"totalSubmissionRaw\": 116992, \"acRate\": \"54.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        {
          "name": "Probability and Statistics",
          "slug": "probability-and-statistics"
        }
      ]
    }
  },
  "expressive-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "809",
        "title": "Expressive Words",
        "titleSlug": "expressive-words",
        "content": "<p>Sometimes people repeat letters to represent extra feeling. For example:</p>\n\n<ul>\n\t<li><code>&quot;hello&quot; -&gt; &quot;heeellooo&quot;</code></li>\n\t<li><code>&quot;hi&quot; -&gt; &quot;hiiii&quot;</code></li>\n</ul>\n\n<p>In these strings like <code>&quot;heeellooo&quot;</code>, we have groups of adjacent letters that are all the same: <code>&quot;h&quot;</code>, <code>&quot;eee&quot;</code>, <code>&quot;ll&quot;</code>, <code>&quot;ooo&quot;</code>.</p>\n\n<p>You are given a string <code>s</code> and an array of query strings <code>words</code>. A query word is <strong>stretchy</strong> if it can be made to be equal to <code>s</code> by any number of applications of the following extension operation: choose a group consisting of characters <code>c</code>, and add some number of characters <code>c</code> to the group so that the size of the group is <strong>three or more</strong>.</p>\n\n<ul>\n\t<li>For example, starting with <code>&quot;hello&quot;</code>, we could do an extension on the group <code>&quot;o&quot;</code> to get <code>&quot;hellooo&quot;</code>, but we cannot get <code>&quot;helloo&quot;</code> since the group <code>&quot;oo&quot;</code> has a size less than three. Also, we could do another extension like <code>&quot;ll&quot; -&gt; &quot;lllll&quot;</code> to get <code>&quot;helllllooo&quot;</code>. If <code>s = &quot;helllllooo&quot;</code>, then the query word <code>&quot;hello&quot;</code> would be <strong>stretchy</strong> because of these two extension operations: <code>query = &quot;hello&quot; -&gt; &quot;hellooo&quot; -&gt; &quot;helllllooo&quot; = s</code>.</li>\n</ul>\n\n<p>Return <em>the number of query strings that are <strong>stretchy</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;heeellooo&quot;, words = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nWe can extend &quot;e&quot; and &quot;o&quot; in the word &quot;hello&quot; to get &quot;heeellooo&quot;.\nWe can&#39;t extend &quot;helo&quot; to get &quot;heeellooo&quot; because the group &quot;ll&quot; is not size 3 or more.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;zzzzzyyyyy&quot;, words = [&quot;zzyy&quot;,&quot;zy&quot;,&quot;zyy&quot;]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of lowercase letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 836,
        "dislikes": 1880,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"113K\", \"totalSubmission\": \"245.1K\", \"totalAcceptedRaw\": 113007, \"totalSubmissionRaw\": 245052, \"acRate\": \"46.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "chalkboard-xor-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "810",
        "title": "Chalkboard XOR Game",
        "titleSlug": "chalkboard-xor-game",
        "content": "<p>You are given an array of integers <code>nums</code> represents the numbers written on a chalkboard.</p>\n\n<p>Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become <code>0</code>, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is <code>0</code>.</p>\n\n<p>Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to <code>0</code>, then that player wins.</p>\n\n<p>Return <code>true</code> <em>if and only if Alice wins the game, assuming both players play optimally</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt; 2<sup>16</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 212,
        "dislikes": 277,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Brainteaser", "slug": "brainteaser" },
          { "name": "Game Theory", "slug": "game-theory" }
        ],
        "stats": "{\"totalAccepted\": \"9.8K\", \"totalSubmission\": \"16.8K\", \"totalAcceptedRaw\": 9766, \"totalSubmissionRaw\": 16756, \"acRate\": \"58.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Brainteaser", "slug": "brainteaser" },
        { "name": "Game Theory", "slug": "game-theory" }
      ]
    }
  },
  "subdomain-visit-count": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "811",
        "title": "Subdomain Visit Count",
        "titleSlug": "subdomain-visit-count",
        "content": "<p>A website domain <code>&quot;discuss.leetcode.com&quot;</code> consists of various subdomains. At the top level, we have <code>&quot;com&quot;</code>, at the next level, we have <code>&quot;leetcode.com&quot;</code>&nbsp;and at the lowest level, <code>&quot;discuss.leetcode.com&quot;</code>. When we visit a domain like <code>&quot;discuss.leetcode.com&quot;</code>, we will also visit the parent domains <code>&quot;leetcode.com&quot;</code> and <code>&quot;com&quot;</code> implicitly.</p>\n\n<p>A <strong>count-paired domain</strong> is a domain that has one of the two formats <code>&quot;rep d1.d2.d3&quot;</code> or <code>&quot;rep d1.d2&quot;</code> where <code>rep</code> is the number of visits to the domain and <code>d1.d2.d3</code> is the domain itself.</p>\n\n<ul>\n\t<li>For example, <code>&quot;9001 discuss.leetcode.com&quot;</code> is a <strong>count-paired domain</strong> that indicates that <code>discuss.leetcode.com</code> was visited <code>9001</code> times.</li>\n</ul>\n\n<p>Given an array of <strong>count-paired domains</strong> <code>cpdomains</code>, return <em>an array of the <strong>count-paired domains</strong> of each subdomain in the input</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cpdomains = [&quot;9001 discuss.leetcode.com&quot;]\n<strong>Output:</strong> [&quot;9001 leetcode.com&quot;,&quot;9001 discuss.leetcode.com&quot;,&quot;9001 com&quot;]\n<strong>Explanation:</strong> We only have one website domain: &quot;discuss.leetcode.com&quot;.\nAs discussed above, the subdomain &quot;leetcode.com&quot; and &quot;com&quot; will also be visited. So they will all be visited 9001 times.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cpdomains = [&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]\n<strong>Output:</strong> [&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]\n<strong>Explanation:</strong> We will visit &quot;google.mail.com&quot; 900 times, &quot;yahoo.com&quot; 50 times, &quot;intel.mail.com&quot; once and &quot;wiki.org&quot; 5 times.\nFor the subdomains, we will visit &quot;mail.com&quot; 900 + 1 = 901 times, &quot;com&quot; 900 + 50 + 1 = 951 times, and &quot;org&quot; 5 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cpdomain.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= cpdomain[i].length &lt;= 100</code></li>\n\t<li><code>cpdomain[i]</code> follows either the <code>&quot;rep<sub>i</sub> d1<sub>i</sub>.d2<sub>i</sub>.d3<sub>i</sub>&quot;</code> format or the <code>&quot;rep<sub>i</sub> d1<sub>i</sub>.d2<sub>i</sub>&quot;</code> format.</li>\n\t<li><code>rep<sub>i</sub></code> is an integer in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>d1<sub>i</sub></code>, <code>d2<sub>i</sub></code>, and <code>d3<sub>i</sub></code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1498,
        "dislikes": 1291,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"221.5K\", \"totalSubmission\": \"291.8K\", \"totalAcceptedRaw\": 221540, \"totalSubmissionRaw\": 291788, \"acRate\": \"75.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "largest-triangle-area": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "812",
        "title": "Largest Triangle Area",
        "titleSlug": "largest-triangle-area",
        "content": "<p>Given an array of points on the <strong>X-Y</strong> plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, return <em>the area of the largest triangle that can be formed by any three different points</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height: 369px; width: 450px;\" />\n<pre>\n<strong>Input:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> The five points are shown in the above figure. The red triangle is the largest.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,0],[0,0],[0,1]]\n<strong>Output:</strong> 0.50000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= points.length &lt;= 50</code></li>\n\t<li><code>-50 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 50</code></li>\n\t<li>All the given points are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 513,
        "dislikes": 1573,
        "similarQuestions": "[{\"title\": \"Largest Perimeter Triangle\", \"titleSlug\": \"largest-perimeter-triangle\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"46.8K\", \"totalSubmission\": \"77.7K\", \"totalAcceptedRaw\": 46821, \"totalSubmissionRaw\": 77727, \"acRate\": \"60.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "largest-perimeter-triangle",
          "title": "Largest Perimeter Triangle",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "largest-sum-of-averages": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "813",
        "title": "Largest Sum of Averages",
        "titleSlug": "largest-sum-of-averages",
        "content": "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You can partition the array into <strong>at most</strong> <code>k</code> non-empty adjacent subarrays. The <strong>score</strong> of a partition is the sum of the averages of each subarray.</p>\n\n<p>Note that the partition must use every integer in <code>nums</code>, and that the score is not necessarily an integer.</p>\n\n<p>Return <em>the maximum <strong>score</strong> you can achieve of all the possible partitions</em>. Answers within <code>10<sup>-6</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,1,2,3,9], k = 3\n<strong>Output:</strong> 20.00000\n<strong>Explanation:</strong> \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 4\n<strong>Output:</strong> 20.50000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2048,
        "dislikes": 95,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"50.9K\", \"totalSubmission\": \"95.5K\", \"totalAcceptedRaw\": 50913, \"totalSubmissionRaw\": 95507, \"acRate\": \"53.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "binary-tree-pruning": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "814",
        "title": "Binary Tree Pruning",
        "titleSlug": "binary-tree-pruning",
        "content": "<p>Given the <code>root</code> of a binary tree, return <em>the same tree where every subtree (of the given tree) not containing a </em><code>1</code><em> has been removed</em>.</p>\n\n<p>A subtree of a node <code>node</code> is <code>node</code> plus every node that is a descendant of <code>node</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width: 500px; height: 140px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,0,0,1]\n<strong>Output:</strong> [1,null,0,null,1]\n<strong>Explanation:</strong> \nOnly the red nodes satisfy the property &quot;every subtree not containing a 1&quot;.\nThe diagram on the right represents the answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width: 500px; height: 115px;\" />\n<pre>\n<strong>Input:</strong> root = [1,0,1,0,0,0,1]\n<strong>Output:</strong> [1,null,1,null,1]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width: 500px; height: 134px;\" />\n<pre>\n<strong>Input:</strong> root = [1,1,0,1,1,0,1,0]\n<strong>Output:</strong> [1,1,0,1,1,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 200]</code>.</li>\n\t<li><code>Node.val</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4426,
        "dislikes": 111,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"236.3K\", \"totalSubmission\": \"327.1K\", \"totalAcceptedRaw\": 236324, \"totalSubmissionRaw\": 327094, \"acRate\": \"72.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "bus-routes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "815",
        "title": "Bus Routes",
        "titleSlug": "bus-routes",
        "content": "<p>You are given an array <code>routes</code> representing bus routes where <code>routes[i]</code> is a bus route that the <code>i<sup>th</sup></code> bus repeats forever.</p>\n\n<ul>\n\t<li>For example, if <code>routes[0] = [1, 5, 7]</code>, this means that the <code>0<sup>th</sup></code> bus travels in the sequence <code>1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; ...</code> forever.</li>\n</ul>\n\n<p>You will start at the bus stop <code>source</code> (You are not on any bus initially), and you want to go to the bus stop <code>target</code>. You can travel between bus stops by buses only.</p>\n\n<p>Return <em>the least number of buses you must take to travel from </em><code>source</code><em> to </em><code>target</code>. Return <code>-1</code> if it is not possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= routes.length &lt;= 500</code>.</li>\n\t<li><code>1 &lt;= routes[i].length &lt;= 10<sup>5</sup></code></li>\n\t<li>All the values of <code>routes[i]</code> are <strong>unique</strong>.</li>\n\t<li><code>sum(routes[i].length) &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= routes[i][j] &lt; 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= source, target &lt; 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4116,
        "dislikes": 112,
        "similarQuestions": "[{\"title\": \"Minimum Costs Using the Train Line\", \"titleSlug\": \"minimum-costs-using-the-train-line\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"189.7K\", \"totalSubmission\": \"391K\", \"totalAcceptedRaw\": 189738, \"totalSubmissionRaw\": 391023, \"acRate\": \"48.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-costs-using-the-train-line",
          "title": "Minimum Costs Using the Train Line",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "ambiguous-coordinates": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "816",
        "title": "Ambiguous Coordinates",
        "titleSlug": "ambiguous-coordinates",
        "content": "<p>We had some 2-dimensional coordinates, like <code>&quot;(1, 3)&quot;</code> or <code>&quot;(2, 0.5)&quot;</code>. Then, we removed all commas, decimal points, and spaces and ended up with the string s.</p>\n\n<ul>\n\t<li>For example, <code>&quot;(1, 3)&quot;</code> becomes <code>s = &quot;(13)&quot;</code> and <code>&quot;(2, 0.5)&quot;</code> becomes <code>s = &quot;(205)&quot;</code>.</li>\n</ul>\n\n<p>Return <em>a list of strings representing all possibilities for what our original coordinates could have been</em>.</p>\n\n<p>Our original representation never had extraneous zeroes, so we never started with numbers like <code>&quot;00&quot;</code>, <code>&quot;0.0&quot;</code>, <code>&quot;0.00&quot;</code>, <code>&quot;1.0&quot;</code>, <code>&quot;001&quot;</code>, <code>&quot;00.01&quot;</code>, or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like <code>&quot;.1&quot;</code>.</p>\n\n<p>The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(123)&quot;\n<strong>Output:</strong> [&quot;(1, 2.3)&quot;,&quot;(1, 23)&quot;,&quot;(1.2, 3)&quot;,&quot;(12, 3)&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(0123)&quot;\n<strong>Output:</strong> [&quot;(0, 1.23)&quot;,&quot;(0, 12.3)&quot;,&quot;(0, 123)&quot;,&quot;(0.1, 2.3)&quot;,&quot;(0.1, 23)&quot;,&quot;(0.12, 3)&quot;]\n<strong>Explanation:</strong> 0.0, 00, 0001 or 00.01 are not allowed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(00011)&quot;\n<strong>Output:</strong> [&quot;(0, 0.011)&quot;,&quot;(0.001, 1)&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>4 &lt;= s.length &lt;= 12</code></li>\n\t<li><code>s[0] == &#39;(&#39;</code> and <code>s[s.length - 1] == &#39;)&#39;</code>.</li>\n\t<li>The rest of <code>s</code> are digits.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 307,
        "dislikes": 652,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" },
          { "name": "Enumeration", "slug": "enumeration" }
        ],
        "stats": "{\"totalAccepted\": \"28.9K\", \"totalSubmission\": \"51.2K\", \"totalAcceptedRaw\": 28949, \"totalSubmissionRaw\": 51234, \"acRate\": \"56.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" },
        { "name": "Enumeration", "slug": "enumeration" }
      ]
    }
  },
  "linked-list-components": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "817",
        "title": "Linked List Components",
        "titleSlug": "linked-list-components",
        "content": "<p>You are given the <code>head</code> of a linked list containing unique integer values and an integer array <code>nums</code> that is a subset of the linked list values.</p>\n\n<p>Return <em>the number of connected components in </em><code>nums</code><em> where two values are connected if they appear <strong>consecutively</strong> in the linked list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom1.jpg\" style=\"width: 424px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> head = [0,1,2,3], nums = [0,1,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 0 and 1 are connected, so [0, 1] and [3] are the two connected components.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/22/lc-linkedlistcom2.jpg\" style=\"width: 544px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> head = [0,1,2,3,4], nums = [0,3,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the linked list is <code>n</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= Node.val &lt; n</code></li>\n\t<li>All the values <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= nums.length &lt;= n</code></li>\n\t<li><code>0 &lt;= nums[i] &lt; n</code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1014,
        "dislikes": 2168,
        "similarQuestions": "[{\"title\": \"Merge Nodes in Between Zeros\", \"titleSlug\": \"merge-nodes-in-between-zeros\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Linked List", "slug": "linked-list" }
        ],
        "stats": "{\"totalAccepted\": \"87.6K\", \"totalSubmission\": \"153.4K\", \"totalAcceptedRaw\": 87605, \"totalSubmissionRaw\": 153382, \"acRate\": \"57.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "merge-nodes-in-between-zeros",
          "title": "Merge Nodes in Between Zeros",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Linked List", "slug": "linked-list" }
      ]
    }
  },
  "race-car": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "818",
        "title": "Race Car",
        "titleSlug": "race-car",
        "content": "<p>Your car starts at position <code>0</code> and speed <code>+1</code> on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions <code>&#39;A&#39;</code> (accelerate) and <code>&#39;R&#39;</code> (reverse):</p>\n\n<ul>\n\t<li>When you get an instruction <code>&#39;A&#39;</code>, your car does the following:\n\n\t<ul>\n\t\t<li><code>position += speed</code></li>\n\t\t<li><code>speed *= 2</code></li>\n\t</ul>\n\t</li>\n\t<li>When you get an instruction <code>&#39;R&#39;</code>, your car does the following:\n\t<ul>\n\t\t<li>If your speed is positive then <code>speed = -1</code></li>\n\t\t<li>otherwise <code>speed = 1</code></li>\n\t</ul>\n\tYour position stays the same.</li>\n</ul>\n\n<p>For example, after commands <code>&quot;AAR&quot;</code>, your car goes to positions <code>0 --&gt; 1 --&gt; 3 --&gt; 3</code>, and your speed goes to <code>1 --&gt; 2 --&gt; 4 --&gt; -1</code>.</p>\n\n<p>Given a target position <code>target</code>, return <em>the length of the shortest sequence of instructions to get there</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe shortest instruction sequence is &quot;AA&quot;.\nYour position goes from 0 --&gt; 1 --&gt; 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 6\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nThe shortest instruction sequence is &quot;AAARA&quot;.\nYour position goes from 0 --&gt; 1 --&gt; 3 --&gt; 7 --&gt; 7 --&gt; 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1847,
        "dislikes": 175,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"83.1K\", \"totalSubmission\": \"191.2K\", \"totalAcceptedRaw\": 83118, \"totalSubmissionRaw\": 191159, \"acRate\": \"43.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "most-common-word": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "819",
        "title": "Most Common Word",
        "titleSlug": "most-common-word",
        "content": "<p>Given a string <code>paragraph</code> and a string array of the banned words <code>banned</code>, return <em>the most frequent word that is not banned</em>. It is <strong>guaranteed</strong> there is <strong>at least one word</strong> that is not banned, and that the answer is <strong>unique</strong>.</p>\n\n<p>The words in <code>paragraph</code> are <strong>case-insensitive</strong> and the answer should be returned in <strong>lowercase</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> paragraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;, banned = [&quot;hit&quot;]\n<strong>Output:</strong> &quot;ball&quot;\n<strong>Explanation:</strong> \n&quot;hit&quot; occurs 3 times, but it is a banned word.\n&quot;ball&quot; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as &quot;ball,&quot;), \nand that &quot;hit&quot; isn&#39;t the answer even though it occurs more because it is banned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> paragraph = &quot;a.&quot;, banned = []\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= paragraph.length &lt;= 1000</code></li>\n\t<li>paragraph consists of English letters, space <code>&#39; &#39;</code>, or one of the symbols: <code>&quot;!?&#39;,;.&quot;</code>.</li>\n\t<li><code>0 &lt;= banned.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= banned[i].length &lt;= 10</code></li>\n\t<li><code>banned[i]</code> consists of only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1644,
        "dislikes": 3014,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Counting", "slug": "counting" }
        ],
        "stats": "{\"totalAccepted\": \"341.1K\", \"totalSubmission\": \"767.9K\", \"totalAcceptedRaw\": 341148, \"totalSubmissionRaw\": 767863, \"acRate\": \"44.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Counting", "slug": "counting" }
      ]
    }
  },
  "short-encoding-of-words": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "820",
        "title": "Short Encoding of Words",
        "titleSlug": "short-encoding-of-words",
        "content": "<p>A <strong>valid encoding</strong> of an array of <code>words</code> is any reference string <code>s</code> and array of indices <code>indices</code> such that:</p>\n\n<ul>\n\t<li><code>words.length == indices.length</code></li>\n\t<li>The reference string <code>s</code> ends with the <code>&#39;#&#39;</code> character.</li>\n\t<li>For each index <code>indices[i]</code>, the <strong>substring</strong> of <code>s</code> starting from <code>indices[i]</code> and up to (but not including) the next <code>&#39;#&#39;</code> character is equal to <code>words[i]</code>.</li>\n</ul>\n\n<p>Given an array of <code>words</code>, return <em>the <strong>length of the shortest reference string</strong> </em><code>s</code><em> possible of any <strong>valid encoding</strong> of </em><code>words</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> A valid encoding would be s = <code>&quot;time#bell#&quot; and indices = [0, 2, 5</code>].\nwords[0] = &quot;time&quot;, the substring of s starting from indices[0] = 0 to the next &#39;#&#39; is underlined in &quot;<u>time</u>#bell#&quot;\nwords[1] = &quot;me&quot;, the substring of s starting from indices[1] = 2 to the next &#39;#&#39; is underlined in &quot;ti<u>me</u>#bell#&quot;\nwords[2] = &quot;bell&quot;, the substring of s starting from indices[2] = 5 to the next &#39;#&#39; is underlined in &quot;time#<u>bell</u>#&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;t&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> A valid encoding would be s = &quot;t#&quot; and indices = [0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 7</code></li>\n\t<li><code>words[i]</code> consists of only lowercase letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1717,
        "dislikes": 644,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Trie", "slug": "trie" }
        ],
        "stats": "{\"totalAccepted\": \"94.2K\", \"totalSubmission\": \"155.8K\", \"totalAcceptedRaw\": 94196, \"totalSubmissionRaw\": 155762, \"acRate\": \"60.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Trie", "slug": "trie" }
      ]
    }
  },
  "shortest-distance-to-a-character": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "821",
        "title": "Shortest Distance to a Character",
        "titleSlug": "shortest-distance-to-a-character",
        "content": "<p>Given a string <code>s</code> and a character <code>c</code> that occurs in <code>s</code>, return <em>an array of integers </em><code>answer</code><em> where </em><code>answer.length == s.length</code><em> and </em><code>answer[i]</code><em> is the <strong>distance</strong> from index </em><code>i</code><em> to the <strong>closest</strong> occurrence of character </em><code>c</code><em> in </em><code>s</code>.</p>\n\n<p>The <strong>distance</strong> between two indices <code>i</code> and <code>j</code> is <code>abs(i - j)</code>, where <code>abs</code> is the absolute value function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;loveleetcode&quot;, c = &quot;e&quot;\n<strong>Output:</strong> [3,2,1,0,1,0,0,1,2,2,1,0]\n<strong>Explanation:</strong> The character &#39;e&#39; appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of &#39;e&#39; for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of &#39;e&#39; for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the &#39;e&#39; at index 3 and the &#39;e&#39; at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of &#39;e&#39; for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaab&quot;, c = &quot;b&quot;\n<strong>Output:</strong> [3,2,1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> and <code>c</code> are lowercase English letters.</li>\n\t<li>It is guaranteed that <code>c</code> occurs at least once in <code>s</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3061,
        "dislikes": 162,
        "similarQuestions": "[{\"title\": \"Check Distances Between Same Letters\", \"titleSlug\": \"check-distances-between-same-letters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"173.7K\", \"totalSubmission\": \"243.4K\", \"totalAcceptedRaw\": 173665, \"totalSubmissionRaw\": 243362, \"acRate\": \"71.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "check-distances-between-same-letters",
          "title": "Check Distances Between Same Letters",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "card-flipping-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "822",
        "title": "Card Flipping Game",
        "titleSlug": "card-flipping-game",
        "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>fronts</code> and <code>backs</code> of length <code>n</code>, where the <code>i<sup>th</sup></code> card has the positive integer <code>fronts[i]</code> printed on the front and <code>backs[i]</code> printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).</p>\n\n<p>After flipping the cards, an integer is considered <strong>good</strong> if it is facing down on some card and <strong>not</strong> facing up on any card.</p>\n\n<p>Return <em>the minimum possible good integer after flipping the cards</em>. If there are no good integers, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nIf we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\n2 is the minimum good integer as it appears facing down but not facing up.\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> fronts = [1], backs = [1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThere are no good integers no matter how we flip the cards, so we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == fronts.length == backs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= fronts[i], backs[i] &lt;= 2000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 159,
        "dislikes": 733,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" }
        ],
        "stats": "{\"totalAccepted\": \"17.5K\", \"totalSubmission\": \"37.3K\", \"totalAcceptedRaw\": 17452, \"totalSubmissionRaw\": 37287, \"acRate\": \"46.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" }
      ]
    }
  },
  "binary-trees-with-factors": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "823",
        "title": "Binary Trees With Factors",
        "titleSlug": "binary-trees-with-factors",
        "content": "<p>Given an array of unique integers, <code>arr</code>, where each integer <code>arr[i]</code> is strictly greater than <code>1</code>.</p>\n\n<p>We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node&#39;s value should be equal to the product of the values of its children.</p>\n\n<p>Return <em>the number of binary trees we can make</em>. The answer may be too large so return the answer <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can make these trees: <code>[2], [4], [4, 2, 2]</code></pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,4,5,10]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> We can make these trees: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>2 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the values of <code>arr</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3255,
        "dislikes": 250,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"145.7K\", \"totalSubmission\": \"275.1K\", \"totalAcceptedRaw\": 145734, \"totalSubmissionRaw\": 275139, \"acRate\": \"53.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "goat-latin": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "824",
        "title": "Goat Latin",
        "titleSlug": "goat-latin",
        "content": "<p>You are given a string <code>sentence</code> that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.</p>\n\n<p>We would like to convert the sentence to &quot;Goat Latin&quot; (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:</p>\n\n<ul>\n\t<li>If a word begins with a vowel (<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, or <code>&#39;u&#39;</code>), append <code>&quot;ma&quot;</code> to the end of the word.\n\n\t<ul>\n\t\t<li>For example, the word <code>&quot;apple&quot;</code> becomes <code>&quot;applema&quot;</code>.</li>\n\t</ul>\n\t</li>\n\t<li>If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add <code>&quot;ma&quot;</code>.\n\t<ul>\n\t\t<li>For example, the word <code>&quot;goat&quot;</code> becomes <code>&quot;oatgma&quot;</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Add one letter <code>&#39;a&#39;</code> to the end of each word per its word index in the sentence, starting with <code>1</code>.\n\t<ul>\n\t\t<li>For example, the first word gets <code>&quot;a&quot;</code> added to the end, the second word gets <code>&quot;aa&quot;</code> added to the end, and so on.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return<em> the final sentence representing the conversion from sentence to Goat Latin</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> sentence = \"I speak Goat Latin\"\n<strong>Output:</strong> \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> sentence = \"The quick brown fox jumped over the lazy dog\"\n<strong>Output:</strong> \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence.length &lt;= 150</code></li>\n\t<li><code>sentence</code> consists of English letters and spaces.</li>\n\t<li><code>sentence</code> has no leading or trailing spaces.</li>\n\t<li>All the words in <code>sentence</code> are separated by a single space.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 880,
        "dislikes": 1221,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"167.7K\", \"totalSubmission\": \"246.6K\", \"totalAcceptedRaw\": 167651, \"totalSubmissionRaw\": 246575, \"acRate\": \"68.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "friends-of-appropriate-ages": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "825",
        "title": "Friends Of Appropriate Ages",
        "titleSlug": "friends-of-appropriate-ages",
        "content": "<p>There are <code>n</code> persons on a social media website. You are given an integer array <code>ages</code> where <code>ages[i]</code> is the age of the <code>i<sup>th</sup></code> person.</p>\n\n<p>A Person <code>x</code> will not send a friend request to a person <code>y</code> (<code>x != y</code>) if any of the following conditions is true:</p>\n\n<ul>\n\t<li><code>age[y] &lt;= 0.5 * age[x] + 7</code></li>\n\t<li><code>age[y] &gt; age[x]</code></li>\n\t<li><code>age[y] &gt; 100 &amp;&amp; age[x] &lt; 100</code></li>\n</ul>\n\n<p>Otherwise, <code>x</code> will send a friend request to <code>y</code>.</p>\n\n<p>Note that if <code>x</code> sends a request to <code>y</code>, <code>y</code> will not necessarily send a request to <code>x</code>. Also, a person will not send a friend request to themself.</p>\n\n<p>Return <em>the total number of friend requests made</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ages = [16,16]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 2 people friend request each other.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ages = [16,17,18]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Friend requests are made 17 -&gt; 16, 18 -&gt; 17.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> ages = [20,30,100,110,120]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Friend requests are made 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == ages.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= ages[i] &lt;= 120</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 680,
        "dislikes": 1170,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"77.4K\", \"totalSubmission\": \"165.6K\", \"totalAcceptedRaw\": 77372, \"totalSubmissionRaw\": 165633, \"acRate\": \"46.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "most-profit-assigning-work": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "826",
        "title": "Most Profit Assigning Work",
        "titleSlug": "most-profit-assigning-work",
        "content": "<p>You have <code>n</code> jobs and <code>m</code> workers. You are given three arrays: <code>difficulty</code>, <code>profit</code>, and <code>worker</code> where:</p>\n\n<ul>\n\t<li><code>difficulty[i]</code> and <code>profit[i]</code> are the difficulty and the profit of the <code>i<sup>th</sup></code> job, and</li>\n\t<li><code>worker[j]</code> is the ability of <code>j<sup>th</sup></code> worker (i.e., the <code>j<sup>th</sup></code> worker can only complete a job with difficulty at most <code>worker[j]</code>).</li>\n</ul>\n\n<p>Every worker can be assigned <strong>at most one job</strong>, but one job can be <strong>completed multiple times</strong>.</p>\n\n<ul>\n\t<li>For example, if three workers attempt the same job that pays <code>$1</code>, then the total profit will be <code>$3</code>. If a worker cannot complete any job, their profit is <code>$0</code>.</li>\n</ul>\n\n<p>Return the maximum profit we can achieve after assigning the workers to the jobs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>Output:</strong> 100\n<strong>Explanation:</strong> Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == difficulty.length</code></li>\n\t<li><code>n == profit.length</code></li>\n\t<li><code>m == worker.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= difficulty[i], profit[i], worker[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1527,
        "dislikes": 133,
        "similarQuestions": "[{\"title\": \"Maximum Number of Tasks You Can Assign\", \"titleSlug\": \"maximum-number-of-tasks-you-can-assign\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Successful Pairs of Spells and Potions\", \"titleSlug\": \"successful-pairs-of-spells-and-potions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Matching of Players With Trainers\", \"titleSlug\": \"maximum-matching-of-players-with-trainers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"63.4K\", \"totalSubmission\": \"138.9K\", \"totalAcceptedRaw\": 63415, \"totalSubmissionRaw\": 138943, \"acRate\": \"45.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "maximum-number-of-tasks-you-can-assign",
          "title": "Maximum Number of Tasks You Can Assign",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "successful-pairs-of-spells-and-potions",
          "title": "Successful Pairs of Spells and Potions",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-matching-of-players-with-trainers",
          "title": "Maximum Matching of Players With Trainers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "making-a-large-island": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "827",
        "title": "Making A Large Island",
        "titleSlug": "making-a-large-island",
        "content": "<p>You are given an <code>n x n</code> binary matrix <code>grid</code>. You are allowed to change <strong>at most one</strong> <code>0</code> to be <code>1</code>.</p>\r\n\r\n<p>Return <em>the size of the largest <strong>island</strong> in</em> <code>grid</code> <em>after applying this operation</em>.</p>\r\n\r\n<p>An <strong>island</strong> is a 4-directionally connected group of <code>1</code>s.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,0],[0,1]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1],[1,0]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation: </strong>Change the 0 to 1 and make the island bigger, only one island with area = 4.</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1],[1,1]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Can&#39;t change any 0 to 1, only one island with area = 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>n == grid.length</code></li>\r\n\t<li><code>n == grid[i].length</code></li>\r\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\r\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\r\n</ul>",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3680,
        "dislikes": 66,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"150.9K\", \"totalSubmission\": \"326.4K\", \"totalAcceptedRaw\": 150865, \"totalSubmissionRaw\": 326362, \"acRate\": \"46.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "count-unique-characters-of-all-substrings-of-a-given-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "828",
        "title": "Count Unique Characters of All Substrings of a Given String",
        "titleSlug": "count-unique-characters-of-all-substrings-of-a-given-string",
        "content": "<p>Let&#39;s define a function <code>countUniqueChars(s)</code> that returns the number of unique characters in&nbsp;<code>s</code>.</p>\n\n<ul>\n\t<li>For example, calling <code>countUniqueChars(s)</code> if <code>s = &quot;LEETCODE&quot;</code> then <code>&quot;L&quot;</code>, <code>&quot;T&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;O&quot;</code>, <code>&quot;D&quot;</code> are the unique characters since they appear only once in <code>s</code>, therefore <code>countUniqueChars(s) = 5</code>.</li>\n</ul>\n\n<p>Given a string <code>s</code>, return the sum of <code>countUniqueChars(t)</code> where <code>t</code> is a substring of <code>s</code>. The test cases are generated such that the answer fits in a 32-bit integer.</p>\n\n<p>Notice that some substrings can be repeated so in this case you have to count the repeated ones too.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABC&quot;\n<strong>Output:</strong> 10\n<strong>Explanation: </strong>All possible substrings are: &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; and &quot;ABC&quot;.\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABA&quot;\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>The same as example 1, except <code>countUniqueChars</code>(&quot;ABA&quot;) = 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LEETCODE&quot;\n<strong>Output:</strong> 92\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of uppercase English letters only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2092,
        "dislikes": 242,
        "similarQuestions": "[{\"title\": \"Total Appeal of A String\", \"titleSlug\": \"total-appeal-of-a-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"68.3K\", \"totalSubmission\": \"131.2K\", \"totalAcceptedRaw\": 68292, \"totalSubmissionRaw\": 131154, \"acRate\": \"52.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "total-appeal-of-a-string",
          "title": "Total Appeal of A String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "consecutive-numbers-sum": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "829",
        "title": "Consecutive Numbers Sum",
        "titleSlug": "consecutive-numbers-sum",
        "content": "<p>Given an integer <code>n</code>, return <em>the number of ways you can write </em><code>n</code><em> as the sum of consecutive positive integers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 5 = 2 + 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 9\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 9 = 4 + 5 = 2 + 3 + 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 15\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1345,
        "dislikes": 1374,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Enumeration", "slug": "enumeration" }
        ],
        "stats": "{\"totalAccepted\": \"83.6K\", \"totalSubmission\": \"200.5K\", \"totalAcceptedRaw\": 83557, \"totalSubmissionRaw\": 200480, \"acRate\": \"41.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Enumeration", "slug": "enumeration" }
      ]
    }
  },
  "positions-of-large-groups": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "830",
        "title": "Positions of Large Groups",
        "titleSlug": "positions-of-large-groups",
        "content": "<p>In a string <code><font face=\"monospace\">s</font></code>&nbsp;of lowercase letters, these letters form consecutive groups of the same character.</p>\n\n<p>For example, a string like <code>s = &quot;abbxxxxzyy&quot;</code> has the groups <code>&quot;a&quot;</code>, <code>&quot;bb&quot;</code>, <code>&quot;xxxx&quot;</code>, <code>&quot;z&quot;</code>, and&nbsp;<code>&quot;yy&quot;</code>.</p>\n\n<p>A group is identified by an interval&nbsp;<code>[start, end]</code>, where&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code>&nbsp;denote the start and end&nbsp;indices (inclusive) of the group. In the above example,&nbsp;<code>&quot;xxxx&quot;</code>&nbsp;has the interval&nbsp;<code>[3,6]</code>.</p>\n\n<p>A group is considered&nbsp;<strong>large</strong>&nbsp;if it has 3 or more characters.</p>\n\n<p>Return&nbsp;<em>the intervals of every <strong>large</strong> group sorted in&nbsp;<strong>increasing order by start index</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbxxxxzzy&quot;\n<strong>Output:</strong> [[3,6]]\n<strong>Explanation:</strong> <code>&quot;xxxx&quot; is the only </code>large group with start index 3 and end index 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;\n<strong>Output:</strong> []\n<strong>Explanation:</strong> We have groups &quot;a&quot;, &quot;b&quot;, and &quot;c&quot;, none of which are large groups.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdddeeeeaabbbcd&quot;\n<strong>Output:</strong> [[3,5],[6,9],[12,14]]\n<strong>Explanation:</strong> The large groups are &quot;ddd&quot;, &quot;eeee&quot;, and &quot;bbb&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> contains lowercase English letters only.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 841,
        "dislikes": 122,
        "similarQuestions": "[{\"title\": \"Divide a String Into Groups of Size k\", \"titleSlug\": \"divide-a-string-into-groups-of-size-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"90.4K\", \"totalSubmission\": \"173.6K\", \"totalAcceptedRaw\": 90356, \"totalSubmissionRaw\": 173561, \"acRate\": \"52.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "divide-a-string-into-groups-of-size-k",
          "title": "Divide a String Into Groups of Size k",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "masking-personal-information": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "831",
        "title": "Masking Personal Information",
        "titleSlug": "masking-personal-information",
        "content": "<p>You are given a personal information string <code>s</code>, representing either an <strong>email address</strong> or a <strong>phone number</strong>. Return <em>the <strong>masked</strong> personal information using the below rules</em>.</p>\n\n<p><u><strong>Email address:</strong></u></p>\n\n<p>An email address is:</p>\n\n<ul>\n\t<li>A <strong>name</strong> consisting of uppercase and lowercase English letters, followed by</li>\n\t<li>The <code>&#39;@&#39;</code> symbol, followed by</li>\n\t<li>The <strong>domain</strong> consisting of uppercase and lowercase English letters with a dot <code>&#39;.&#39;</code> somewhere in the middle (not the first or last character).</li>\n</ul>\n\n<p>To mask an email:</p>\n\n<ul>\n\t<li>The uppercase letters in the <strong>name</strong> and <strong>domain</strong> must be converted to lowercase letters.</li>\n\t<li>The middle letters of the <strong>name</strong> (i.e., all but the first and last letters) must be replaced by 5 asterisks <code>&quot;*****&quot;</code>.</li>\n</ul>\n\n<p><u><strong>Phone number:</strong></u></p>\n\n<p>A phone number is formatted as follows:</p>\n\n<ul>\n\t<li>The phone number contains 10-13 digits.</li>\n\t<li>The last 10 digits make up the <strong>local number</strong>.</li>\n\t<li>The remaining 0-3 digits, in the beginning, make up the <strong>country code</strong>.</li>\n\t<li><strong>Separation characters</strong> from the set <code>{&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39; &#39;}</code> separate the above digits in some way.</li>\n</ul>\n\n<p>To mask a phone number:</p>\n\n<ul>\n\t<li>Remove all <strong>separation characters</strong>.</li>\n\t<li>The masked phone number should have the form:\n\t<ul>\n\t\t<li><code>&quot;***-***-XXXX&quot;</code> if the country code has 0 digits.</li>\n\t\t<li><code>&quot;+*-***-***-XXXX&quot;</code> if the country code has 1 digit.</li>\n\t\t<li><code>&quot;+**-***-***-XXXX&quot;</code> if the country code has 2 digits.</li>\n\t\t<li><code>&quot;+***-***-***-XXXX&quot;</code> if the country code has 3 digits.</li>\n\t</ul>\n\t</li>\n\t<li><code>&quot;XXXX&quot;</code> is the last 4 digits of the <strong>local number</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LeetCode@LeetCode.com&quot;\n<strong>Output:</strong> &quot;l*****e@leetcode.com&quot;\n<strong>Explanation:</strong> s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AB@qq.com&quot;\n<strong>Output:</strong> &quot;a*****b@qq.com&quot;\n<strong>Explanation:</strong> s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though &quot;ab&quot; is 2 characters, it still must have 5 asterisks in the middle.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1(234)567-890&quot;\n<strong>Output:</strong> &quot;***-***-7890&quot;\n<strong>Explanation:</strong> s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is &quot;***-***-7890&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s</code> is either a <strong>valid</strong> email or a phone number.</li>\n\t<li>If <code>s</code> is an email:\n\t<ul>\n\t\t<li><code>8 &lt;= s.length &lt;= 40</code></li>\n\t\t<li><code>s</code> consists of uppercase and lowercase English letters and exactly one <code>&#39;@&#39;</code> symbol and <code>&#39;.&#39;</code> symbol.</li>\n\t</ul>\n\t</li>\n\t<li>If <code>s</code> is a phone number:\n\t<ul>\n\t\t<li><code>10 &lt;= s.length &lt;= 20</code></li>\n\t\t<li><code>s</code> consists of digits, spaces, and the symbols <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;+&#39;</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 160,
        "dislikes": 439,
        "similarQuestions": "[]",
        "topicTags": [{ "name": "String", "slug": "string" }],
        "stats": "{\"totalAccepted\": \"18.3K\", \"totalSubmission\": \"37.9K\", \"totalAcceptedRaw\": 18276, \"totalSubmissionRaw\": 37894, \"acRate\": \"48.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [{ "name": "String", "slug": "string" }]
    }
  },
  "flipping-an-image": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "832",
        "title": "Flipping an Image",
        "titleSlug": "flipping-an-image",
        "content": "<p>Given an <code>n x n</code> binary matrix <code>image</code>, flip the image <strong>horizontally</strong>, then invert it, and return <em>the resulting image</em>.</p>\n\n<p>To flip an image horizontally means that each row of the image is reversed.</p>\n\n<ul>\n\t<li>For example, flipping <code>[1,1,0]</code> horizontally results in <code>[0,1,1]</code>.</li>\n</ul>\n\n<p>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>.</p>\n\n<ul>\n\t<li>For example, inverting <code>[0,1,1]</code> results in <code>[1,0,0]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> image = [[1,1,0],[1,0,1],[0,0,0]]\n<strong>Output:</strong> [[1,0,0],[0,1,0],[1,1,1]]\n<strong>Explanation:</strong> First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n<strong>Output:</strong> [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n<strong>Explanation:</strong> First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == image.length</code></li>\n\t<li><code>n == image[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>images[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3341,
        "dislikes": 235,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"401.6K\", \"totalSubmission\": \"492.7K\", \"totalAcceptedRaw\": 401564, \"totalSubmissionRaw\": 492720, \"acRate\": \"81.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "find-and-replace-in-string": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "833",
        "title": "Find And Replace in String",
        "titleSlug": "find-and-replace-in-string",
        "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> that you must perform <code>k</code> replacement operations on. The replacement operations are given as three <strong>0-indexed</strong> parallel arrays, <code>indices</code>, <code>sources</code>, and <code>targets</code>, all of length <code>k</code>.</p>\n\n<p>To complete the <code>i<sup>th</sup></code> replacement operation:</p>\n\n<ol>\n\t<li>Check if the <strong>substring</strong> <code>sources[i]</code> occurs at index <code>indices[i]</code> in the <strong>original string</strong> <code>s</code>.</li>\n\t<li>If it does not occur, <strong>do nothing</strong>.</li>\n\t<li>Otherwise if it does occur, <strong>replace</strong> that substring with <code>targets[i]</code>.</li>\n</ol>\n\n<p>For example, if <code>s = &quot;<u>ab</u>cd&quot;</code>, <code>indices[i] = 0</code>, <code>sources[i] = &quot;ab&quot;</code>, and <code>targets[i] = &quot;eee&quot;</code>, then the result of this replacement will be <code>&quot;<u>eee</u>cd&quot;</code>.</p>\n\n<p>All replacement operations must occur <strong>simultaneously</strong>, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will <strong>not overlap</strong>.</p>\n\n<ul>\n\t<li>For example, a testcase with <code>s = &quot;abc&quot;</code>, <code>indices = [0, 1]</code>, and <code>sources = [&quot;ab&quot;,&quot;bc&quot;]</code> will not be generated because the <code>&quot;ab&quot;</code> and <code>&quot;bc&quot;</code> replacements overlap.</li>\n</ul>\n\n<p>Return <em>the <strong>resulting string</strong> after performing all replacement operations on </em><code>s</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/12/833-ex1.png\" style=\"width: 411px; height: 251px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, indices = [0, 2], sources = [&quot;a&quot;, &quot;cd&quot;], targets = [&quot;eee&quot;, &quot;ffff&quot;]\n<strong>Output:</strong> &quot;eeebffff&quot;\n<strong>Explanation:</strong>\n&quot;a&quot; occurs at index 0 in s, so we replace it with &quot;eee&quot;.\n&quot;cd&quot; occurs at index 2 in s, so we replace it with &quot;ffff&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/12/833-ex2-1.png\" style=\"width: 411px; height: 251px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, indices = [0, 2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>Output:</strong> &quot;eeecd&quot;\n<strong>Explanation:</strong>\n&quot;ab&quot; occurs at index 0 in s, so we replace it with &quot;eee&quot;.\n&quot;ec&quot; does not occur at index 2 in s, so we do nothing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>k == indices.length == sources.length == targets.length</code></li>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>0 &lt;= indexes[i] &lt; s.length</code></li>\n\t<li><code>1 &lt;= sources[i].length, targets[i].length &lt;= 50</code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>sources[i]</code> and <code>targets[i]</code> consist of only lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1142,
        "dislikes": 976,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"142.1K\", \"totalSubmission\": \"266.7K\", \"totalAcceptedRaw\": 142064, \"totalSubmissionRaw\": 266685, \"acRate\": \"53.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "sum-of-distances-in-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "834",
        "title": "Sum of Distances in Tree",
        "titleSlug": "sum-of-distances-in-tree",
        "content": "<p>There is an undirected connected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p>\n\n<p>You are given the integer <code>n</code> and the array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Return an array <code>answer</code> of length <code>n</code> where <code>answer[i]</code> is the sum of the distances between the <code>i<sup>th</sup></code> node in the tree and all other nodes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist1.jpg\" style=\"width: 304px; height: 224px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n<strong>Output:</strong> [8,12,6,10,10,10]\n<strong>Explanation:</strong> The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist2.jpg\" style=\"width: 64px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> n = 1, edges = []\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist3.jpg\" style=\"width: 144px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> n = 2, edges = [[1,0]]\n<strong>Output:</strong> [1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>The given input represents a valid tree.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4901,
        "dislikes": 109,
        "similarQuestions": "[{\"title\": \"Distribute Coins in Binary Tree\", \"titleSlug\": \"distribute-coins-in-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Nodes With the Highest Score\", \"titleSlug\": \"count-nodes-with-the-highest-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Collect Coins in a Tree\", \"titleSlug\": \"collect-coins-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Score After Applying Operations on a Tree\", \"titleSlug\": \"maximum-score-after-applying-operations-on-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"89.1K\", \"totalSubmission\": \"150.3K\", \"totalAcceptedRaw\": 89085, \"totalSubmissionRaw\": 150318, \"acRate\": \"59.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "distribute-coins-in-binary-tree",
          "title": "Distribute Coins in Binary Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-nodes-with-the-highest-score",
          "title": "Count Nodes With the Highest Score",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "collect-coins-in-a-tree",
          "title": "Collect Coins in a Tree",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-score-after-applying-operations-on-a-tree",
          "title": "Maximum Score After Applying Operations on a Tree",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "image-overlap": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "835",
        "title": "Image Overlap",
        "titleSlug": "image-overlap",
        "content": "<p>You are given two images, <code>img1</code> and <code>img2</code>, represented as binary, square matrices of size <code>n x n</code>. A binary matrix has only <code>0</code>s and <code>1</code>s as values.</p>\n\n<p>We <strong>translate</strong> one image however we choose by sliding all the <code>1</code> bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the <strong>overlap</strong> by counting the number of positions that have a <code>1</code> in <strong>both</strong> images.</p>\n\n<p>Note also that a translation does <strong>not</strong> include any kind of rotation. Any <code>1</code> bits that are translated outside of the matrix borders are erased.</p>\n\n<p>Return <em>the largest possible overlap</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap1.jpg\" style=\"width: 450px; height: 231px;\" />\n<pre>\n<strong>Input:</strong> img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We translate img1 to right by 1 unit and down by 1 unit.\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg\" style=\"width: 450px; height: 105px;\" />\nThe number of positions that have a 1 in both images is 3 (shown in red).\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg\" style=\"width: 450px; height: 231px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> img1 = [[1]], img2 = [[1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> img1 = [[0]], img2 = [[0]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == img1.length == img1[i].length</code></li>\n\t<li><code>n == img2.length == img2[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n\t<li><code>img1[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>img2[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1301,
        "dislikes": 470,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"91.8K\", \"totalSubmission\": \"144.1K\", \"totalAcceptedRaw\": 91773, \"totalSubmissionRaw\": 144086, \"acRate\": \"63.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "rectangle-overlap": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "836",
        "title": "Rectangle Overlap",
        "titleSlug": "rectangle-overlap",
        "content": "<p>An axis-aligned rectangle is represented as a list <code>[x1, y1, x2, y2]</code>, where <code>(x1, y1)</code> is the coordinate of its bottom-left corner, and <code>(x2, y2)</code> is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.</p>\n\n<p>Two rectangles overlap if the area of their intersection is <strong>positive</strong>. To be clear, two rectangles that only touch at the corner or edges do not overlap.</p>\n\n<p>Given two axis-aligned rectangles <code>rec1</code> and <code>rec2</code>, return <code>true</code><em> if they overlap, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> rec1 = [0,0,1,1], rec2 = [2,2,3,3]\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rec1.length == 4</code></li>\n\t<li><code>rec2.length == 4</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= rec1[i], rec2[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>rec1</code> and <code>rec2</code> represent a valid rectangle with a non-zero area.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1930,
        "dislikes": 454,
        "similarQuestions": "[{\"title\": \"Rectangle Area\", \"titleSlug\": \"rectangle-area\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" }
        ],
        "stats": "{\"totalAccepted\": \"136.3K\", \"totalSubmission\": \"306.9K\", \"totalAcceptedRaw\": 136342, \"totalSubmissionRaw\": 306914, \"acRate\": \"44.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "rectangle-area",
          "title": "Rectangle Area",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" }
      ]
    }
  },
  "new-21-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "837",
        "title": "New 21 Game",
        "titleSlug": "new-21-game",
        "content": "<p>Alice plays the following game, loosely based on the card game <strong>&quot;21&quot;</strong>.</p>\n\n<p>Alice starts with <code>0</code> points and draws numbers while she has less than <code>k</code> points. During each draw, she gains an integer number of points randomly from the range <code>[1, maxPts]</code>, where <code>maxPts</code> is an integer. Each draw is independent and the outcomes have equal probabilities.</p>\n\n<p>Alice stops drawing numbers when she gets <code>k</code> <strong>or more points</strong>.</p>\n\n<p>Return the probability that Alice has <code>n</code> or fewer points.</p>\n\n<p>Answers within <code>10<sup>-5</sup></code> of the actual answer are considered accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, k = 1, maxPts = 10\n<strong>Output:</strong> 1.00000\n<strong>Explanation:</strong> Alice gets a single card, then stops.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, k = 1, maxPts = 10\n<strong>Output:</strong> 0.60000\n<strong>Explanation:</strong> Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 21, k = 17, maxPts = 10\n<strong>Output:</strong> 0.73278\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= maxPts &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1943,
        "dislikes": 1791,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          {
            "name": "Probability and Statistics",
            "slug": "probability-and-statistics"
          }
        ],
        "stats": "{\"totalAccepted\": \"73.9K\", \"totalSubmission\": \"164K\", \"totalAcceptedRaw\": 73881, \"totalSubmissionRaw\": 163957, \"acRate\": \"45.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        {
          "name": "Probability and Statistics",
          "slug": "probability-and-statistics"
        }
      ]
    }
  },
  "push-dominoes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "838",
        "title": "Push Dominoes",
        "titleSlug": "push-dominoes",
        "content": "<p>There are <code>n</code> dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.</p>\n\n<p>After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.</p>\n\n<p>When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.</p>\n\n<p>For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.</p>\n\n<p>You are given a string <code>dominoes</code> representing the initial state where:</p>\n\n<ul>\n\t<li><code>dominoes[i] = &#39;L&#39;</code>, if the <code>i<sup>th</sup></code> domino has been pushed to the left,</li>\n\t<li><code>dominoes[i] = &#39;R&#39;</code>, if the <code>i<sup>th</sup></code> domino has been pushed to the right, and</li>\n\t<li><code>dominoes[i] = &#39;.&#39;</code>, if the <code>i<sup>th</sup></code> domino has not been pushed.</li>\n</ul>\n\n<p>Return <em>a string representing the final state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dominoes = &quot;RR.L&quot;\n<strong>Output:</strong> &quot;RR.L&quot;\n<strong>Explanation:</strong> The first domino expends no additional force on the second domino.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png\" style=\"height: 196px; width: 512px;\" />\n<pre>\n<strong>Input:</strong> dominoes = &quot;.L.R...LR..L..&quot;\n<strong>Output:</strong> &quot;LL.RR.LLRRLL..&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == dominoes.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>dominoes[i]</code> is either <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, or <code>&#39;.&#39;</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3325,
        "dislikes": 218,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"119.9K\", \"totalSubmission\": \"210.1K\", \"totalAcceptedRaw\": 119909, \"totalSubmissionRaw\": 210095, \"acRate\": \"57.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "similar-string-groups": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "839",
        "title": "Similar String Groups",
        "titleSlug": "similar-string-groups",
        "content": "<p>Two strings, <code>X</code> and <code>Y</code>, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string <code>X</code>.</p>\n\n<p>For example, <code>&quot;tars&quot;</code>&nbsp;and <code>&quot;rats&quot;</code>&nbsp;are similar (swapping at positions <code>0</code> and <code>2</code>), and <code>&quot;rats&quot;</code> and <code>&quot;arts&quot;</code> are similar, but <code>&quot;star&quot;</code> is not similar to <code>&quot;tars&quot;</code>, <code>&quot;rats&quot;</code>, or <code>&quot;arts&quot;</code>.</p>\n\n<p>Together, these form two connected groups by similarity: <code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> and <code>{&quot;star&quot;}</code>.&nbsp; Notice that <code>&quot;tars&quot;</code> and <code>&quot;arts&quot;</code> are in the same group even though they are not similar.&nbsp; Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p>\n\n<p>We are given a list <code>strs</code> of strings where every string in <code>strs</code> is an anagram of every other string in <code>strs</code>. How many groups are there?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;omv&quot;,&quot;ovm&quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 300</code></li>\n\t<li><code>strs[i]</code> consists of lowercase letters only.</li>\n\t<li>All words in <code>strs</code> have the same length and are anagrams of each other.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2287,
        "dislikes": 214,
        "similarQuestions": "[{\"title\": \"Groups of Strings\", \"titleSlug\": \"groups-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" }
        ],
        "stats": "{\"totalAccepted\": \"115.4K\", \"totalSubmission\": \"211K\", \"totalAcceptedRaw\": 115363, \"totalSubmissionRaw\": 211005, \"acRate\": \"54.7%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "groups-of-strings",
          "title": "Groups of Strings",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" }
      ]
    }
  },
  "magic-squares-in-grid": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "840",
        "title": "Magic Squares In Grid",
        "titleSlug": "magic-squares-in-grid",
        "content": "<p>A <code>3 x 3</code> magic square is a <code>3 x 3</code> grid filled with distinct numbers <strong>from </strong><code>1</code><strong> to </strong><code>9</code> such that each row, column, and both diagonals all have the same sum.</p>\n\n<p>Given a <code>row x col</code>&nbsp;<code>grid</code>&nbsp;of integers, how many <code>3 x 3</code> &quot;magic square&quot; subgrids are there?&nbsp; (Each subgrid is contiguous).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/11/magic_main.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>\nThe following subgrid is a 3 x 3 magic square:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg\" style=\"width: 242px; height: 242px;\" />\nwhile this one is not:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg\" style=\"width: 242px; height: 242px;\" />\nIn total, there is only one magic square inside the given grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[8]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>row == grid.length</code></li>\n\t<li><code>col == grid[i].length</code></li>\n\t<li><code>1 &lt;= row, col &lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 15</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 320,
        "dislikes": 1586,
        "similarQuestions": "[{\"title\": \"Largest Magic Square\", \"titleSlug\": \"largest-magic-square\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"37.5K\", \"totalSubmission\": \"96.5K\", \"totalAcceptedRaw\": 37499, \"totalSubmissionRaw\": 96469, \"acRate\": \"38.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "largest-magic-square",
          "title": "Largest Magic Square",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "keys-and-rooms": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "841",
        "title": "Keys and Rooms",
        "titleSlug": "keys-and-rooms",
        "content": "<p>There are <code>n</code> rooms labeled from <code>0</code> to <code>n - 1</code>&nbsp;and all the rooms are locked except for room <code>0</code>. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.</p>\n\n<p>When you visit a room, you may find a set of <strong>distinct keys</strong> in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.</p>\n\n<p>Given an array <code>rooms</code> where <code>rooms[i]</code> is the set of keys that you can obtain if you visited room <code>i</code>, return <code>true</code> <em>if you can visit <strong>all</strong> the rooms, or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rooms = [[1],[2],[3],[]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rooms = [[1,3],[3,0,1],[2],[0]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We can not enter room number 2 since the only key that unlocks it is in that room.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == rooms.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= sum(rooms[i].length) &lt;= 3000</code></li>\n\t<li><code>0 &lt;= rooms[i][j] &lt; n</code></li>\n\t<li>All the values of <code>rooms[i]</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5861,
        "dislikes": 260,
        "similarQuestions": "[{\"title\": \"Graph Valid Tree\", \"titleSlug\": \"graph-valid-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"386.9K\", \"totalSubmission\": \"534.2K\", \"totalAcceptedRaw\": 386940, \"totalSubmissionRaw\": 534243, \"acRate\": \"72.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "graph-valid-tree",
          "title": "Graph Valid Tree",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "split-array-into-fibonacci-sequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "842",
        "title": "Split Array into Fibonacci Sequence",
        "titleSlug": "split-array-into-fibonacci-sequence",
        "content": "<p>You are given a string of digits <code>num</code>, such as <code>&quot;123456579&quot;</code>. We can split it into a Fibonacci-like sequence <code>[123, 456, 579]</code>.</p>\n\n<p>Formally, a <strong>Fibonacci-like</strong> sequence is a list <code>f</code> of non-negative integers such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= f[i] &lt; 2<sup>31</sup></code>, (that is, each integer fits in a <strong>32-bit</strong> signed integer type),</li>\n\t<li><code>f.length &gt;= 3</code>, and</li>\n\t<li><code>f[i] + f[i + 1] == f[i + 2]</code> for all <code>0 &lt;= i &lt; f.length - 2</code>.</li>\n</ul>\n\n<p>Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number <code>0</code> itself.</p>\n\n<p>Return any Fibonacci-like sequence split from <code>num</code>, or return <code>[]</code> if it cannot be done.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;1101111&quot;\n<strong>Output:</strong> [11,0,11,11]\n<strong>Explanation:</strong> The output [110, 1, 111] would also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;112358130&quot;\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The task is impossible.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;0123&quot;\n<strong>Output:</strong> []\n<strong>Explanation:</strong> Leading zeroes are not allowed, so &quot;01&quot;, &quot;2&quot;, &quot;3&quot; is not valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 200</code></li>\n\t<li><code>num</code> contains only digits.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1104,
        "dislikes": 297,
        "similarQuestions": "[{\"title\": \"Additive Number\", \"titleSlug\": \"additive-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Fibonacci Number\", \"titleSlug\": \"fibonacci-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Backtracking", "slug": "backtracking" }
        ],
        "stats": "{\"totalAccepted\": \"38K\", \"totalSubmission\": \"97.8K\", \"totalAcceptedRaw\": 38031, \"totalSubmissionRaw\": 97789, \"acRate\": \"38.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "additive-number",
          "title": "Additive Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "fibonacci-number",
          "title": "Fibonacci Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Backtracking", "slug": "backtracking" }
      ]
    }
  },
  "guess-the-word": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "843",
        "title": "Guess the Word",
        "titleSlug": "guess-the-word",
        "content": "<p>You are given an array of unique strings <code>words</code> where <code>words[i]</code> is six letters long. One word of <code>words</code> was chosen as a secret word.</p>\n\n<p>You are also given the helper object <code>Master</code>. You may call <code>Master.guess(word)</code> where <code>word</code> is a six-letter-long string, and it must be from <code>words</code>. <code>Master.guess(word)</code> returns:</p>\n\n<ul>\n\t<li><code>-1</code> if <code>word</code> is not from <code>words</code>, or</li>\n\t<li>an integer representing the number of exact matches (value and position) of your guess to the secret word.</li>\n</ul>\n\n<p>There is a parameter <code>allowedGuesses</code> for each test case where <code>allowedGuesses</code> is the maximum number of times you can call <code>Master.guess(word)</code>.</p>\n\n<p>For each test case, you should call <code>Master.guess</code> with the secret word without exceeding the maximum number of allowed guesses. You will get:</p>\n\n<ul>\n\t<li><strong><code>&quot;Either you took too many guesses, or you did not find the secret word.&quot;</code></strong> if you called <code>Master.guess</code> more than <code>allowedGuesses</code> times or if you did not call <code>Master.guess</code> with the secret word, or</li>\n\t<li><strong><code>&quot;You guessed the secret word correctly.&quot;</code></strong> if you called <code>Master.guess</code> with the secret word with the number of calls to <code>Master.guess</code> less than or equal to <code>allowedGuesses</code>.</li>\n</ul>\n\n<p>The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;acckzz&quot;, words = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;], allowedGuesses = 10\n<strong>Output:</strong> You guessed the secret word correctly.\n<strong>Explanation:</strong>\nmaster.guess(&quot;aaaaaa&quot;) returns -1, because &quot;aaaaaa&quot; is not in wordlist.\nmaster.guess(&quot;acckzz&quot;) returns 6, because &quot;acckzz&quot; is secret and has all 6 matches.\nmaster.guess(&quot;ccbazz&quot;) returns 3, because &quot;ccbazz&quot; has 3 matches.\nmaster.guess(&quot;eiowzz&quot;) returns 2, because &quot;eiowzz&quot; has 2 matches.\nmaster.guess(&quot;abcczz&quot;) returns 4, because &quot;abcczz&quot; has 4 matches.\nWe made 5 calls to master.guess, and one of them was the secret, so we pass the test case.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> secret = &quot;hamada&quot;, words = [&quot;hamada&quot;,&quot;khaled&quot;], allowedGuesses = 10\n<strong>Output:</strong> You guessed the secret word correctly.\n<strong>Explanation:</strong> Since there are two words, you can guess both.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>words[i].length == 6</code></li>\n\t<li><code>words[i]</code> consist of lowercase English letters.</li>\n\t<li>All the strings of <code>wordlist</code> are <strong>unique</strong>.</li>\n\t<li><code>secret</code> exists in <code>words</code>.</li>\n\t<li><code>10 &lt;= allowedGuesses &lt;= 30</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1486,
        "dislikes": 1750,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Interactive", "slug": "interactive" },
          { "name": "Game Theory", "slug": "game-theory" }
        ],
        "stats": "{\"totalAccepted\": \"139K\", \"totalSubmission\": \"348.3K\", \"totalAcceptedRaw\": 139041, \"totalSubmissionRaw\": 348347, \"acRate\": \"39.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Interactive", "slug": "interactive" },
        { "name": "Game Theory", "slug": "game-theory" }
      ]
    }
  },
  "backspace-string-compare": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "844",
        "title": "Backspace String Compare",
        "titleSlug": "backspace-string-compare",
        "content": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if they are equal when both are typed into empty text editors</em>. <code>&#39;#&#39;</code> means a backspace character.</p>\n\n<p>Note that after backspacing an empty text, the text will continue empty.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab#c&quot;, t = &quot;ad#c&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Both s and t become &quot;ac&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab##&quot;, t = &quot;c#d#&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Both s and t become &quot;&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a#c&quot;, t = &quot;b&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> s becomes &quot;c&quot; while t becomes &quot;b&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code><span>1 &lt;= s.length, t.length &lt;= 200</span></code></li>\n\t<li><span><code>s</code> and <code>t</code> only contain lowercase letters and <code>&#39;#&#39;</code> characters.</span></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it in <code>O(n)</code> time and <code>O(1)</code> space?</p>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 7364,
        "dislikes": 340,
        "similarQuestions": "[{\"title\": \"Crawler Log Folder\", \"titleSlug\": \"crawler-log-folder\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Removing Stars From a String\", \"titleSlug\": \"removing-stars-from-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"776.9K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 776946, \"totalSubmissionRaw\": 1582863, \"acRate\": \"49.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "crawler-log-folder",
          "title": "Crawler Log Folder",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "removing-stars-from-a-string",
          "title": "Removing Stars From a String",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "longest-mountain-in-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "845",
        "title": "Longest Mountain in Array",
        "titleSlug": "longest-mountain-in-array",
        "content": "<p>You may recall that an array <code>arr</code> is a <strong>mountain array</strong> if and only if:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some index <code>i</code> (<strong>0-indexed</strong>) with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given an integer array <code>arr</code>, return <em>the length of the longest subarray, which is a mountain</em>. Return <code>0</code> if there is no mountain subarray.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,1,4,7,3,2,5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The largest mountain is [1,4,7,3,2] which has length 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,2,2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no mountain.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Can you solve it using only one pass?</li>\n\t<li>Can you solve it in <code>O(1)</code> space?</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2706,
        "dislikes": 74,
        "similarQuestions": "[{\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Good Days to Rob the Bank\", \"titleSlug\": \"find-good-days-to-rob-the-bank\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Enumeration", "slug": "enumeration" }
        ],
        "stats": "{\"totalAccepted\": \"121K\", \"totalSubmission\": \"300.6K\", \"totalAcceptedRaw\": 120972, \"totalSubmissionRaw\": 300647, \"acRate\": \"40.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
          "title": "Minimum Number of Removals to Make Mountain Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "find-good-days-to-rob-the-bank",
          "title": "Find Good Days to Rob the Bank",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Enumeration", "slug": "enumeration" }
      ]
    }
  },
  "hand-of-straights": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "846",
        "title": "Hand of Straights",
        "titleSlug": "hand-of-straights",
        "content": "<p>Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size <code>groupSize</code>, and consists of <code>groupSize</code> consecutive cards.</p>\n\n<p>Given an integer array <code>hand</code> where <code>hand[i]</code> is the value written on the <code>i<sup>th</sup></code> card and an integer <code>groupSize</code>, return <code>true</code> if she can rearrange the cards, or <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Alice&#39;s hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> hand = [1,2,3,4,5], groupSize = 4\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Alice&#39;s hand can not be rearranged into groups of 4.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hand.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= hand[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= groupSize &lt;= hand.length</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1296: <a href=\"https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\" target=\"_blank\">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2419,
        "dislikes": 163,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"148.1K\", \"totalSubmission\": \"264.8K\", \"totalAcceptedRaw\": 148068, \"totalSubmissionRaw\": 264833, \"acRate\": \"55.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "shortest-path-visiting-all-nodes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "847",
        "title": "Shortest Path Visiting All Nodes",
        "titleSlug": "shortest-path-visiting-all-nodes",
        "content": "<p>You have an undirected, connected graph of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given an array <code>graph</code> where <code>graph[i]</code> is a list of all the nodes connected with node <code>i</code> by an edge.</p>\n\n<p>Return <em>the length of the shortest path that visits every node</em>. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/12/shortest1-graph.jpg\" style=\"width: 222px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2,3],[0],[0],[0]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One possible path is [1,0,2,0,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/12/shortest2-graph.jpg\" style=\"width: 382px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One possible path is [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;n</code></li>\n\t<li><code>graph[i]</code> does not contain <code>i</code>.</li>\n\t<li>If <code>graph[a]</code> contains <code>b</code>, then <code>graph[b]</code> contains <code>a</code>.</li>\n\t<li>The input graph is always connected.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4185,
        "dislikes": 161,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Bitmask", "slug": "bitmask" }
        ],
        "stats": "{\"totalAccepted\": \"117.6K\", \"totalSubmission\": \"178.7K\", \"totalAcceptedRaw\": 117571, \"totalSubmissionRaw\": 178669, \"acRate\": \"65.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Bitmask", "slug": "bitmask" }
      ]
    }
  },
  "shifting-letters": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "848",
        "title": "Shifting Letters",
        "titleSlug": "shifting-letters",
        "content": "<p>You are given a string <code>s</code> of lowercase English letters and an integer array <code>shifts</code> of the same length.</p>\n\n<p>Call the <code>shift()</code> of a letter, the next letter in the alphabet, (wrapping around so that <code>&#39;z&#39;</code> becomes <code>&#39;a&#39;</code>).</p>\n\n<ul>\n\t<li>For example, <code>shift(&#39;a&#39;) = &#39;b&#39;</code>, <code>shift(&#39;t&#39;) = &#39;u&#39;</code>, and <code>shift(&#39;z&#39;) = &#39;a&#39;</code>.</li>\n</ul>\n\n<p>Now for each <code>shifts[i] = x</code>, we want to shift the first <code>i + 1</code> letters of <code>s</code>, <code>x</code> times.</p>\n\n<p>Return <em>the final string after all such shifts to s are applied</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, shifts = [3,5,9]\n<strong>Output:</strong> &quot;rpl&quot;\n<strong>Explanation:</strong> We start with &quot;abc&quot;.\nAfter shifting the first 1 letters of s by 3, we have &quot;dbc&quot;.\nAfter shifting the first 2 letters of s by 5, we have &quot;igc&quot;.\nAfter shifting the first 3 letters of s by 9, we have &quot;rpl&quot;, the answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaa&quot;, shifts = [1,2,3]\n<strong>Output:</strong> &quot;gfd&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n\t<li><code>shifts.length == s.length</code></li>\n\t<li><code>0 &lt;= shifts[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1327,
        "dislikes": 121,
        "similarQuestions": "[{\"title\": \"Replace All Digits with Characters\", \"titleSlug\": \"replace-all-digits-with-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Shifting Letters II\", \"titleSlug\": \"shifting-letters-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Lexicographically Smallest String After Substring Operation\", \"titleSlug\": \"lexicographically-smallest-string-after-substring-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "String", "slug": "string" },
          { "name": "Prefix Sum", "slug": "prefix-sum" }
        ],
        "stats": "{\"totalAccepted\": \"92.5K\", \"totalSubmission\": \"206.5K\", \"totalAcceptedRaw\": 92482, \"totalSubmissionRaw\": 206461, \"acRate\": \"44.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "replace-all-digits-with-characters",
          "title": "Replace All Digits with Characters",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "shifting-letters-ii",
          "title": "Shifting Letters II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "lexicographically-smallest-string-after-substring-operation",
          "title": "Lexicographically Smallest String After Substring Operation",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "String", "slug": "string" },
        { "name": "Prefix Sum", "slug": "prefix-sum" }
      ]
    }
  },
  "maximize-distance-to-closest-person": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "849",
        "title": "Maximize Distance to Closest Person",
        "titleSlug": "maximize-distance-to-closest-person",
        "content": "<p>You are given an array representing a row of <code>seats</code> where <code>seats[i] = 1</code> represents a person sitting in the <code>i<sup>th</sup></code> seat, and <code>seats[i] = 0</code> represents that the <code>i<sup>th</sup></code> seat is empty <strong>(0-indexed)</strong>.</p>\n\n<p>There is at least one empty seat, and at least one person sitting.</p>\n\n<p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.&nbsp;</p>\n\n<p>Return <em>that maximum distance to the closest person</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/distance.jpg\" style=\"width: 650px; height: 257px;\" />\n<pre>\n<strong>Input:</strong> seats = [1,0,0,0,1,0,1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [1,0,0,0]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>\nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [0,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= seats.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>seats[i]</code>&nbsp;is <code>0</code> or&nbsp;<code>1</code>.</li>\n\t<li>At least one seat is <strong>empty</strong>.</li>\n\t<li>At least one seat is <strong>occupied</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3142,
        "dislikes": 193,
        "similarQuestions": "[{\"title\": \"Exam Room\", \"titleSlug\": \"exam-room\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Task Scheduler II\", \"titleSlug\": \"task-scheduler-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"215.5K\", \"totalSubmission\": \"449.7K\", \"totalAcceptedRaw\": 215507, \"totalSubmissionRaw\": 449717, \"acRate\": \"47.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "exam-room",
          "title": "Exam Room",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "task-scheduler-ii",
          "title": "Task Scheduler II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "rectangle-area-ii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "850",
        "title": "Rectangle Area II",
        "titleSlug": "rectangle-area-ii",
        "content": "<p>You are given a 2D array of axis-aligned <code>rectangles</code>. Each <code>rectangle[i] = [x<sub>i1</sub>, y<sub>i1</sub>, x<sub>i2</sub>, y<sub>i2</sub>]</code> denotes the <code>i<sup>th</sup></code> rectangle where <code>(x<sub>i1</sub>, y<sub>i1</sub>)</code> are the coordinates of the <strong>bottom-left corner</strong>, and <code>(x<sub>i2</sub>, y<sub>i2</sub>)</code> are the coordinates of the <strong>top-right corner</strong>.</p>\n\n<p>Calculate the <strong>total area</strong> covered by all <code>rectangles</code> in the plane. Any area covered by two or more rectangles should only be counted <strong>once</strong>.</p>\n\n<p>Return <em>the <strong>total area</strong></em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" style=\"width: 600px; height: 450px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> A total area of 6 is covered by all three rectangles, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rectangles = [[0,0,1000000000,1000000000]]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The answer is 10<sup>18</sup> modulo (10<sup>9</sup> + 7), which is 49.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\n\t<li><code>rectanges[i].length == 4</code></li>\n\t<li><code>0 &lt;= x<sub>i1</sub>, y<sub>i1</sub>, x<sub>i2</sub>, y<sub>i2</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>x<sub>i1 &lt;= </sub>x<sub>i2</sub></code></li>\n\t<li><code>y<sub>i1 &lt;=</sub> y<sub>i2</sub></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 936,
        "dislikes": 60,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Segment Tree", "slug": "segment-tree" },
          { "name": "Line Sweep", "slug": "line-sweep" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"34K\", \"totalSubmission\": \"62.9K\", \"totalAcceptedRaw\": 34047, \"totalSubmissionRaw\": 62914, \"acRate\": \"54.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Segment Tree", "slug": "segment-tree" },
        { "name": "Line Sweep", "slug": "line-sweep" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "loud-and-rich": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "851",
        "title": "Loud and Rich",
        "titleSlug": "loud-and-rich",
        "content": "<p>There is a group of <code>n</code> people labeled from <code>0</code> to <code>n - 1</code> where each person has a different amount of money and a different level of quietness.</p>\n\n<p>You are given an array <code>richer</code> where <code>richer[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that <code>a<sub>i</sub></code> has more money than <code>b<sub>i</sub></code> and an integer array <code>quiet</code> where <code>quiet[i]</code> is the quietness of the <code>i<sup>th</sup></code> person. All the given data in richer are <strong>logically correct</strong> (i.e., the data will not lead you to a situation where <code>x</code> is richer than <code>y</code> and <code>y</code> is richer than <code>x</code> at the same time).</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> where </em><code>answer[x] = y</code><em> if </em><code>y</code><em> is the least quiet person (that is, the person </em><code>y</code><em> with the smallest value of </em><code>quiet[y]</code><em>) among all people who definitely have equal to or more money than the person </em><code>x</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\n<strong>Output:</strong> [5,5,2,5,4,5,6,7]\n<strong>Explanation:</strong> \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> richer = [], quiet = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == quiet.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>0 &lt;= quiet[i] &lt; n</code></li>\n\t<li>All the values of <code>quiet</code> are <strong>unique</strong>.</li>\n\t<li><code>0 &lt;= richer.length &lt;= n * (n - 1) / 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i </sub>!= b<sub>i</sub></code></li>\n\t<li>All the pairs of <code>richer</code> are <strong>unique</strong>.</li>\n\t<li>The observations in <code>richer</code> are all logically consistent.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1209,
        "dislikes": 770,
        "similarQuestions": "[{\"title\": \"Build a Matrix With Conditions\", \"titleSlug\": \"build-a-matrix-with-conditions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Graph", "slug": "graph" },
          { "name": "Topological Sort", "slug": "topological-sort" }
        ],
        "stats": "{\"totalAccepted\": \"41K\", \"totalSubmission\": \"69.5K\", \"totalAcceptedRaw\": 40950, \"totalSubmissionRaw\": 69495, \"acRate\": \"58.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "build-a-matrix-with-conditions",
          "title": "Build a Matrix With Conditions",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Graph", "slug": "graph" },
        { "name": "Topological Sort", "slug": "topological-sort" }
      ]
    }
  },
  "peak-index-in-a-mountain-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "852",
        "title": "Peak Index in a Mountain Array",
        "titleSlug": "peak-index-in-a-mountain-array",
        "content": "<p>An array <code>arr</code> is a <strong>mountain</strong> if the following properties hold:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given a mountain array <code>arr</code>, return the index <code>i</code> such that <code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p>\n\n<p>You must solve it in <code>O(log(arr.length))</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,1,0]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,2,1,0]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,10,5,2]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>arr</code> is <strong>guaranteed</strong> to be a mountain array.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7155,
        "dislikes": 1901,
        "similarQuestions": "[{\"title\": \"Find Peak Element\", \"titleSlug\": \"find-peak-element\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find in Mountain Array\", \"titleSlug\": \"find-in-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"745.5K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 745484, \"totalSubmissionRaw\": 1086087, \"acRate\": \"68.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "find-peak-element",
          "title": "Find Peak Element",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "find-in-mountain-array",
          "title": "Find in Mountain Array",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
          "title": "Minimum Number of Removals to Make Mountain Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "car-fleet": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "853",
        "title": "Car Fleet",
        "titleSlug": "car-fleet",
        "content": "<p>There are <code>n</code> cars going to the same destination along a one-lane road. The destination is <code>target</code> miles away.</p>\n\n<p>You are given two integer array <code>position</code> and <code>speed</code>, both of length <code>n</code>, where <code>position[i]</code> is the position of the <code>i<sup>th</sup></code> car and <code>speed[i]</code> is the speed of the <code>i<sup>th</sup></code> car (in miles per hour).</p>\n\n<p>A car can never pass another car ahead of it, but it can catch up to it&nbsp;and drive bumper to bumper <strong>at the same speed</strong>. The faster car will <strong>slow down</strong> to match the slower car&#39;s speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).</p>\n\n<p>A <strong>car fleet</strong> is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.</p>\n\n<p>If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.</p>\n\n<p>Return <em>the <strong>number of car fleets</strong> that will arrive at the destination</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 10, position = [3], speed = [3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one car, hence there is only one fleet.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 100, position = [0,2,4], speed = [4,2,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == position.length == speed.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt; target &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= position[i] &lt; target</code></li>\n\t<li>All the values of <code>position</code> are <strong>unique</strong>.</li>\n\t<li><code>0 &lt; speed[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3230,
        "dislikes": 809,
        "similarQuestions": "[{\"title\": \"Car Fleet II\", \"titleSlug\": \"car-fleet-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Collisions on a Road\", \"titleSlug\": \"count-collisions-on-a-road\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Monotonic Stack", "slug": "monotonic-stack" }
        ],
        "stats": "{\"totalAccepted\": \"207.6K\", \"totalSubmission\": \"411K\", \"totalAcceptedRaw\": 207595, \"totalSubmissionRaw\": 411002, \"acRate\": \"50.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "car-fleet-ii",
          "title": "Car Fleet II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "count-collisions-on-a-road",
          "title": "Count Collisions on a Road",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Monotonic Stack", "slug": "monotonic-stack" }
      ]
    }
  },
  "k-similar-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "854",
        "title": "K-Similar Strings",
        "titleSlug": "k-similar-strings",
        "content": "<p>Strings <code>s1</code> and <code>s2</code> are <code>k</code><strong>-similar</strong> (for some non-negative integer <code>k</code>) if we can swap the positions of two letters in <code>s1</code> exactly <code>k</code> times so that the resulting string equals <code>s2</code>.</p>\n\n<p>Given two anagrams <code>s1</code> and <code>s2</code>, return the smallest <code>k</code> for which <code>s1</code> and <code>s2</code> are <code>k</code><strong>-similar</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;ba&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The two string are 1-similar because we can use one swap to change s1 to s2: &quot;ab&quot; --&gt; &quot;ba&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abc&quot;, s2 = &quot;bca&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two strings are 2-similar because we can use two swaps to change s1 to s2: &quot;abc&quot; --&gt; &quot;bac&quot; --&gt; &quot;bca&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length &lt;= 20</code></li>\n\t<li><code>s2.length == s1.length</code></li>\n\t<li><code>s1</code> and <code>s2</code> contain only lowercase letters from the set <code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code>.</li>\n\t<li><code>s2</code> is an anagram of <code>s1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1103,
        "dislikes": 59,
        "similarQuestions": "[{\"title\": \"Couples Holding Hands\", \"titleSlug\": \"couples-holding-hands\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" }
        ],
        "stats": "{\"totalAccepted\": \"43.9K\", \"totalSubmission\": \"110.2K\", \"totalAcceptedRaw\": 43858, \"totalSubmissionRaw\": 110168, \"acRate\": \"39.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "couples-holding-hands",
          "title": "Couples Holding Hands",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" }
      ]
    }
  },
  "exam-room": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "855",
        "title": "Exam Room",
        "titleSlug": "exam-room",
        "content": "<p>There is an exam room with <code>n</code> seats in a single row labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number <code>0</code>.</p>\n\n<p>Design a class that simulates the mentioned exam room.</p>\n\n<p>Implement the <code>ExamRoom</code> class:</p>\n\n<ul>\n\t<li><code>ExamRoom(int n)</code> Initializes the object of the exam room with the number of the seats <code>n</code>.</li>\n\t<li><code>int seat()</code> Returns the label of the seat at which the next student will set.</li>\n\t<li><code>void leave(int p)</code> Indicates that the student sitting at seat <code>p</code> will leave the room. It is guaranteed that there will be a student sitting at seat <code>p</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;ExamRoom&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;leave&quot;, &quot;seat&quot;]\n[[10], [], [], [], [], [4], []]\n<strong>Output</strong>\n[null, 0, 9, 4, 2, null, 5]\n\n<strong>Explanation</strong>\nExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li>It is guaranteed that there is a student sitting at seat <code>p</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>seat</code> and <code>leave</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1271,
        "dislikes": 463,
        "similarQuestions": "[{\"title\": \"Maximize Distance to Closest Person\", \"titleSlug\": \"maximize-distance-to-closest-person\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Design", "slug": "design" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"58.1K\", \"totalSubmission\": \"134.3K\", \"totalAcceptedRaw\": 58132, \"totalSubmissionRaw\": 134251, \"acRate\": \"43.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximize-distance-to-closest-person",
          "title": "Maximize Distance to Closest Person",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Design", "slug": "design" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "score-of-parentheses": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "856",
        "title": "Score of Parentheses",
        "titleSlug": "score-of-parentheses",
        "content": "<p>Given a balanced parentheses string <code>s</code>, return <em>the <strong>score</strong> of the string</em>.</p>\n\n<p>The <strong>score</strong> of a balanced parentheses string is based on the following rule:</p>\n\n<ul>\n\t<li><code>&quot;()&quot;</code> has score <code>1</code>.</li>\n\t<li><code>AB</code> has score <code>A + B</code>, where <code>A</code> and <code>B</code> are balanced parentheses strings.</li>\n\t<li><code>(A)</code> has score <code>2 * A</code>, where <code>A</code> is a balanced parentheses string.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(())&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()()&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>s</code> consists of only <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</li>\n\t<li><code>s</code> is a balanced parentheses string.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5314,
        "dislikes": 186,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"175K\", \"totalSubmission\": \"272K\", \"totalAcceptedRaw\": 175042, \"totalSubmissionRaw\": 272038, \"acRate\": \"64.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "minimum-cost-to-hire-k-workers": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "857",
        "title": "Minimum Cost to Hire K Workers",
        "titleSlug": "minimum-cost-to-hire-k-workers",
        "content": "<p>There are <code>n</code> workers. You are given two integer arrays <code>quality</code> and <code>wage</code> where <code>quality[i]</code> is the quality of the <code>i<sup>th</sup></code> worker and <code>wage[i]</code> is the minimum wage expectation for the <code>i<sup>th</sup></code> worker.</p>\n\n<p>We want to hire exactly <code>k</code> workers to form a paid group. To hire a group of <code>k</code> workers, we must pay them according to the following rules:</p>\n\n<ol>\n\t<li>Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.</li>\n\t<li>Every worker in the paid group must be paid at least their minimum wage expectation.</li>\n</ol>\n\n<p>Given the integer <code>k</code>, return <em>the least amount of money needed to form a paid group satisfying the above conditions</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> quality = [10,20,5], wage = [70,50,30], k = 2\n<strong>Output:</strong> 105.00000\n<strong>Explanation:</strong> We pay 70 to 0<sup>th</sup> worker and 35 to 2<sup>nd</sup> worker.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\n<strong>Output:</strong> 30.66667\n<strong>Explanation:</strong> We pay 4 to 0<sup>th</sup> worker, 13.33333 to 2<sup>nd</sup> and 3<sup>rd</sup> workers separately.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == quality.length == wage.length</code></li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= quality[i], wage[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2164,
        "dislikes": 279,
        "similarQuestions": "[{\"title\": \"Maximum Subsequence Score\", \"titleSlug\": \"maximum-subsequence-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"63.3K\", \"totalSubmission\": \"119.9K\", \"totalAcceptedRaw\": 63298, \"totalSubmissionRaw\": 119882, \"acRate\": \"52.8%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-subsequence-score",
          "title": "Maximum Subsequence Score",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "mirror-reflection": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "858",
        "title": "Mirror Reflection",
        "titleSlug": "mirror-reflection",
        "content": "<p>There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered <code>0</code>, <code>1</code>, and <code>2</code>.</p>\n\n<p>The square room has walls of length <code>p</code>&nbsp;and a laser ray from the southwest corner first meets the east wall at a distance <code>q</code> from the <code>0<sup>th</sup></code> receptor.</p>\n\n<p>Given the two integers <code>p</code> and <code>q</code>, return <em>the number of the receptor that the ray meets first</em>.</p>\n\n<p>The test cases are guaranteed so that the ray will meet a receptor eventually.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png\" style=\"width: 218px; height: 217px;\" />\n<pre>\n<strong>Input:</strong> p = 2, q = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The ray meets receptor 2 the first time it gets reflected back to the left wall.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> p = 3, q = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= q &lt;= p &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1089,
        "dislikes": 2537,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" },
          { "name": "Number Theory", "slug": "number-theory" }
        ],
        "stats": "{\"totalAccepted\": \"77.6K\", \"totalSubmission\": \"123.8K\", \"totalAcceptedRaw\": 77594, \"totalSubmissionRaw\": 123820, \"acRate\": \"62.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" },
        { "name": "Number Theory", "slug": "number-theory" }
      ]
    }
  },
  "buddy-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "859",
        "title": "Buddy Strings",
        "titleSlug": "buddy-strings",
        "content": "<p>Given two strings <code>s</code> and <code>goal</code>, return <code>true</code><em> if you can swap two letters in </em><code>s</code><em> so the result is equal to </em><code>goal</code><em>, otherwise, return </em><code>false</code><em>.</em></p>\n\n<p>Swapping letters is defined as taking two indices <code>i</code> and <code>j</code> (0-indexed) such that <code>i != j</code> and swapping the characters at <code>s[i]</code> and <code>s[j]</code>.</p>\n\n<ul>\n\t<li>For example, swapping at indices <code>0</code> and <code>2</code> in <code>&quot;abcd&quot;</code> results in <code>&quot;cbad&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, goal = &quot;ba&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can swap s[0] = &#39;a&#39; and s[1] = &#39;b&#39; to get &quot;ba&quot;, which is equal to goal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, goal = &quot;ab&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The only letters you can swap are s[0] = &#39;a&#39; and s[1] = &#39;b&#39;, which results in &quot;ba&quot; != goal.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, goal = &quot;aa&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can swap s[0] = &#39;a&#39; and s[1] = &#39;a&#39; to get &quot;aa&quot;, which is equal to goal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, goal.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>goal</code> consist of lowercase letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3090,
        "dislikes": 1758,
        "similarQuestions": "[{\"title\": \"Determine if Two Strings Are Close\", \"titleSlug\": \"determine-if-two-strings-are-close\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if One String Swap Can Make Strings Equal\", \"titleSlug\": \"check-if-one-string-swap-can-make-strings-equal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Make Number of Distinct Characters Equal\", \"titleSlug\": \"make-number-of-distinct-characters-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"230.2K\", \"totalSubmission\": \"699.5K\", \"totalAcceptedRaw\": 230225, \"totalSubmissionRaw\": 699489, \"acRate\": \"32.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "determine-if-two-strings-are-close",
          "title": "Determine if Two Strings Are Close",
          "isPaidOnly": false
        },
        {
          "difficulty": "Easy",
          "titleSlug": "check-if-one-string-swap-can-make-strings-equal",
          "title": "Check if One String Swap Can Make Strings Equal",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "make-number-of-distinct-characters-equal",
          "title": "Make Number of Distinct Characters Equal",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "lemonade-change": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "860",
        "title": "Lemonade Change",
        "titleSlug": "lemonade-change",
        "content": "<p>At a lemonade stand, each lemonade costs <code>$5</code>. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill. You must provide the correct change to each customer so that the net transaction is that the customer pays <code>$5</code>.</p>\n\n<p>Note that you do not have any change in hand at first.</p>\n\n<p>Given an integer array <code>bills</code> where <code>bills[i]</code> is the bill the <code>i<sup>th</sup></code> customer pays, return <code>true</code> <em>if you can provide every customer with the correct change, or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> bills = [5,5,5,10,20]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> bills = [5,5,10,10,20]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bills.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>bills[i]</code> is either <code>5</code>, <code>10</code>, or <code>20</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2197,
        "dislikes": 153,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" }
        ],
        "stats": "{\"totalAccepted\": \"160.9K\", \"totalSubmission\": \"303.1K\", \"totalAcceptedRaw\": 160929, \"totalSubmissionRaw\": 303062, \"acRate\": \"53.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" }
      ]
    }
  },
  "score-after-flipping-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "861",
        "title": "Score After Flipping Matrix",
        "titleSlug": "score-after-flipping-matrix",
        "content": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>.</p>\n\n<p>A <strong>move</strong> consists of choosing any row or column and toggling each value in that row or column (i.e., changing all <code>0</code>&#39;s to <code>1</code>&#39;s, and all <code>1</code>&#39;s to <code>0</code>&#39;s).</p>\n\n<p>Every row of the matrix is interpreted as a binary number, and the <strong>score</strong> of the matrix is the sum of these numbers.</p>\n\n<p>Return <em>the highest possible <strong>score</strong> after making any number of <strong>moves</strong> (including zero moves)</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-toogle1.jpg\" style=\"width: 500px; height: 299px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n<strong>Output:</strong> 39\n<strong>Explanation:</strong> 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 20</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1532,
        "dislikes": 176,
        "similarQuestions": "[{\"title\": \"Remove All Ones With Row and Column Flips\", \"titleSlug\": \"remove-all-ones-with-row-and-column-flips\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"46.3K\", \"totalSubmission\": \"61.8K\", \"totalAcceptedRaw\": 46295, \"totalSubmissionRaw\": 61796, \"acRate\": \"74.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "remove-all-ones-with-row-and-column-flips",
          "title": "Remove All Ones With Row and Column Flips",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "shortest-subarray-with-sum-at-least-k": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "862",
        "title": "Shortest Subarray with Sum at Least K",
        "titleSlug": "shortest-subarray-with-sum-at-least-k",
        "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the length of the shortest non-empty <strong>subarray</strong> of </em><code>nums</code><em> with a sum of at least </em><code>k</code>. If there is no such <strong>subarray</strong>, return <code>-1</code>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2], k = 4\n<strong>Output:</strong> -1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [2,-1,2], k = 3\n<strong>Output:</strong> 3\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4121,
        "dislikes": 112,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Queue", "slug": "queue" },
          { "name": "Sliding Window", "slug": "sliding-window" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Prefix Sum", "slug": "prefix-sum" },
          { "name": "Monotonic Queue", "slug": "monotonic-queue" }
        ],
        "stats": "{\"totalAccepted\": \"94.1K\", \"totalSubmission\": \"362K\", \"totalAcceptedRaw\": 94088, \"totalSubmissionRaw\": 361987, \"acRate\": \"26.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Queue", "slug": "queue" },
        { "name": "Sliding Window", "slug": "sliding-window" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Prefix Sum", "slug": "prefix-sum" },
        { "name": "Monotonic Queue", "slug": "monotonic-queue" }
      ]
    }
  },
  "all-nodes-distance-k-in-binary-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "863",
        "title": "All Nodes Distance K in Binary Tree",
        "titleSlug": "all-nodes-distance-k-in-binary-tree",
        "content": "<p>Given the <code>root</code> of a binary tree, the value of a target node <code>target</code>, and an integer <code>k</code>, return <em>an array of the values of all nodes that have a distance </em><code>k</code><em> from the target node.</em></p>\n\n<p>You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"width: 500px; height: 429px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\n<strong>Output:</strong> [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1], target = 1, k = 3\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 500]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 500</code></li>\n\t<li>All the values <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>target</code> is the value of one of the nodes in the tree.</li>\n\t<li><code>0 &lt;= k &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 10541,
        "dislikes": 206,
        "similarQuestions": "[{\"title\": \"Amount of Time for Binary Tree to Be Infected\", \"titleSlug\": \"amount-of-time-for-binary-tree-to-be-infected\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"400.6K\", \"totalSubmission\": \"624.3K\", \"totalAcceptedRaw\": 400590, \"totalSubmissionRaw\": 624345, \"acRate\": \"64.2%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "amount-of-time-for-binary-tree-to-be-infected",
          "title": "Amount of Time for Binary Tree to Be Infected",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "shortest-path-to-get-all-keys": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "864",
        "title": "Shortest Path to Get All Keys",
        "titleSlug": "shortest-path-to-get-all-keys",
        "content": "<p>You are given an <code>m x n</code> grid <code>grid</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> is an empty cell.</li>\n\t<li><code>&#39;#&#39;</code> is a wall.</li>\n\t<li><code>&#39;@&#39;</code> is the starting point.</li>\n\t<li>Lowercase letters represent keys.</li>\n\t<li>Uppercase letters represent locks.</li>\n</ul>\n\n<p>You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.</p>\n\n<p>If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.</p>\n\n<p>For some <code><font face=\"monospace\">1 &lt;= k &lt;= 6</font></code>, there is exactly one lowercase and one uppercase letter of the first <code>k</code> letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.</p>\n\n<p>Return <em>the lowest number of moves to acquire all keys</em>. If it is impossible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-keys2.jpg\" style=\"width: 404px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@.a..&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Note that the goal is to obtain all the keys not to open all the locks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-key2.jpg\" style=\"width: 404px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-keys3.jpg\" style=\"width: 244px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@Aa&quot;]\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> is either an English letter, <code>&#39;.&#39;</code>, <code>&#39;#&#39;</code>, or <code>&#39;@&#39;</code>.&nbsp;</li>\n\t<li>There is exactly one&nbsp;<code>&#39;@&#39;</code>&nbsp;in the grid.</li>\n\t<li>The number of keys in the grid is in the range <code>[1, 6]</code>.</li>\n\t<li>Each key in the grid is <strong>unique</strong>.</li>\n\t<li>Each key in the grid has a matching lock.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2268,
        "dislikes": 97,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"71.8K\", \"totalSubmission\": \"133.3K\", \"totalAcceptedRaw\": 71834, \"totalSubmissionRaw\": 133339, \"acRate\": \"53.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "smallest-subtree-with-all-the-deepest-nodes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "865",
        "title": "Smallest Subtree with all the Deepest Nodes",
        "titleSlug": "smallest-subtree-with-all-the-deepest-nodes",
        "content": "<p>Given the <code>root</code> of a binary tree, the depth of each node is <strong>the shortest distance to the root</strong>.</p>\n\n<p>Return <em>the smallest subtree</em> such that it contains <strong>all the deepest nodes</strong> in the original tree.</p>\n\n<p>A node is called <strong>the deepest</strong> if it has the largest depth possible among any node in the entire tree.</p>\n\n<p>The <strong>subtree</strong> of a node is a tree consisting of that node, plus the set of all descendants of that node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" style=\"width: 600px; height: 510px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4]\n<strong>Output:</strong> [2,7,4]\n<strong>Explanation:</strong> We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The root is the deepest node in the tree.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0,1,3,null,2]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong> The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[1, 500]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 500</code></li>\n\t<li>The values of the nodes in the tree are <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1123: <a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/\" target=\"_blank\">https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/</a></p>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2548,
        "dislikes": 363,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"128.4K\", \"totalSubmission\": \"183.6K\", \"totalAcceptedRaw\": 128372, \"totalSubmissionRaw\": 183575, \"acRate\": \"69.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "prime-palindrome": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "866",
        "title": "Prime Palindrome",
        "titleSlug": "prime-palindrome",
        "content": "<p>Given an integer n, return <em>the smallest <strong>prime palindrome</strong> greater than or equal to </em><code>n</code>.</p>\n\n<p>An integer is <strong>prime</strong> if it has exactly two divisors: <code>1</code> and itself. Note that <code>1</code> is not a prime number.</p>\n\n<ul>\n\t<li>For example, <code>2</code>, <code>3</code>, <code>5</code>, <code>7</code>, <code>11</code>, and <code>13</code> are all primes.</li>\n</ul>\n\n<p>An integer is a <strong>palindrome</strong> if it reads the same from left to right as it does from right to left.</p>\n\n<ul>\n\t<li>For example, <code>101</code> and <code>12321</code> are palindromes.</li>\n</ul>\n\n<p>The test cases are generated so that the answer always exists and is in the range <code>[2, 2 * 10<sup>8</sup>]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 6\n<strong>Output:</strong> 7\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 8\n<strong>Output:</strong> 11\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 13\n<strong>Output:</strong> 101\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 418,
        "dislikes": 817,
        "similarQuestions": "[{\"title\": \"Sum of k-Mirror Numbers\", \"titleSlug\": \"sum-of-k-mirror-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Math", "slug": "math" }],
        "stats": "{\"totalAccepted\": \"31K\", \"totalSubmission\": \"119.5K\", \"totalAcceptedRaw\": 30993, \"totalSubmissionRaw\": 119452, \"acRate\": \"25.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "sum-of-k-mirror-numbers",
          "title": "Sum of k-Mirror Numbers",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Math", "slug": "math" }]
    }
  },
  "transpose-matrix": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "867",
        "title": "Transpose Matrix",
        "titleSlug": "transpose-matrix",
        "content": "<p>Given a 2D integer array <code>matrix</code>, return <em>the <strong>transpose</strong> of</em> <code>matrix</code>.</p>\n\n<p>The <strong>transpose</strong> of a matrix is the matrix flipped over its main diagonal, switching the matrix&#39;s row and column indices.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png\" style=\"width: 600px; height: 197px;\" /></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [[1,4,7],[2,5,8],[3,6,9]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6]]\n<strong>Output:</strong> [[1,4],[2,5],[3,6]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3613,
        "dislikes": 441,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"365.2K\", \"totalSubmission\": \"517.2K\", \"totalAcceptedRaw\": 365241, \"totalSubmissionRaw\": 517198, \"acRate\": \"70.6%\"}",
        "hints": [
          "We don't need any special algorithms to do this. You just need to know what the transpose of a matrix looks like. Rows become columns and vice versa!"
        ]
      },
      "similar": [],
      "hints": [
        "We don't need any special algorithms to do this. You just need to know what the transpose of a matrix looks like. Rows become columns and vice versa!"
      ],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "binary-gap": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "868",
        "title": "Binary Gap",
        "titleSlug": "binary-gap",
        "content": "<p>Given a positive integer <code>n</code>, find and return <em>the <strong>longest distance</strong> between any two <strong>adjacent</strong> </em><code>1</code><em>&#39;s in the binary representation of </em><code>n</code><em>. If there are no two adjacent </em><code>1</code><em>&#39;s, return </em><code>0</code><em>.</em></p>\n\n<p>Two <code>1</code>&#39;s are <strong>adjacent</strong> if there are only <code>0</code>&#39;s separating them (possibly no <code>0</code>&#39;s). The <b>distance</b> between two <code>1</code>&#39;s is the absolute difference between their bit positions. For example, the two <code>1</code>&#39;s in <code>&quot;1001&quot;</code> have a distance of 3.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 22\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 22 in binary is &quot;10110&quot;.\nThe first adjacent pair of 1&#39;s is &quot;<u>1</u>0<u>1</u>10&quot; with a distance of 2.\nThe second adjacent pair of 1&#39;s is &quot;10<u>11</u>0&quot; with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that &quot;<u>1</u>01<u>1</u>0&quot; is not a valid pair since there is a 1 separating the two 1&#39;s underlined.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> 8 in binary is &quot;1000&quot;.\nThere are not any adjacent pairs of 1&#39;s in the binary representation of 8, so we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 5 in binary is &quot;101&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 609,
        "dislikes": 652,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"76.8K\", \"totalSubmission\": \"122.1K\", \"totalAcceptedRaw\": 76846, \"totalSubmissionRaw\": 122133, \"acRate\": \"62.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "reordered-power-of-2": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "869",
        "title": "Reordered Power of 2",
        "titleSlug": "reordered-power-of-2",
        "content": "<p>You are given an integer <code>n</code>. We reorder the digits in any order (including the original order) such that the leading digit is not zero.</p>\n\n<p>Return <code>true</code> <em>if and only if we can do this so that the resulting number is a power of two</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2089,
        "dislikes": 431,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Sorting", "slug": "sorting" },
          { "name": "Counting", "slug": "counting" },
          { "name": "Enumeration", "slug": "enumeration" }
        ],
        "stats": "{\"totalAccepted\": \"110.6K\", \"totalSubmission\": \"175.7K\", \"totalAcceptedRaw\": 110581, \"totalSubmissionRaw\": 175707, \"acRate\": \"62.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Sorting", "slug": "sorting" },
        { "name": "Counting", "slug": "counting" },
        { "name": "Enumeration", "slug": "enumeration" }
      ]
    }
  },
  "advantage-shuffle": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "870",
        "title": "Advantage Shuffle",
        "titleSlug": "advantage-shuffle",
        "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> both of the same length. The <strong>advantage</strong> of <code>nums1</code> with respect to <code>nums2</code> is the number of indices <code>i</code> for which <code>nums1[i] &gt; nums2[i]</code>.</p>\n\n<p>Return <em>any permutation of </em><code>nums1</code><em> that maximizes its <strong>advantage</strong> with respect to </em><code>nums2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums1 = [2,7,11,15], nums2 = [1,10,4,11]\n<strong>Output:</strong> [2,11,7,15]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums1 = [12,24,8,32], nums2 = [13,25,32,11]\n<strong>Output:</strong> [24,32,8,12]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums2.length == nums1.length</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1575,
        "dislikes": 93,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"64.5K\", \"totalSubmission\": \"123.5K\", \"totalAcceptedRaw\": 64549, \"totalSubmissionRaw\": 123548, \"acRate\": \"52.2%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "minimum-number-of-refueling-stops": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "871",
        "title": "Minimum Number of Refueling Stops",
        "titleSlug": "minimum-number-of-refueling-stops",
        "content": "<p>A car travels from a starting position to a destination which is <code>target</code> miles east of the starting position.</p>\n\n<p>There are gas stations along the way. The gas stations are represented as an array <code>stations</code> where <code>stations[i] = [position<sub>i</sub>, fuel<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> gas station is <code>position<sub>i</sub></code> miles east of the starting position and has <code>fuel<sub>i</sub></code> liters of gas.</p>\n\n<p>The car starts with an infinite tank of gas, which initially has <code>startFuel</code> liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.</p>\n\n<p>Return <em>the minimum number of refueling stops the car must make in order to reach its destination</em>. If it cannot reach the destination, return <code>-1</code>.</p>\n\n<p>Note that if the car reaches a gas station with <code>0</code> fuel left, the car can still refuel there. If the car reaches the destination with <code>0</code> fuel left, it is still considered to have arrived.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 1, startFuel = 1, stations = []\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We can reach the target without refueling.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 100, startFuel = 1, stations = [[10,100]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We can not reach the target (or even the first gas station).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target, startFuel &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= position<sub>i</sub> &lt; position<sub>i+1</sub> &lt; target</code></li>\n\t<li><code>1 &lt;= fuel<sub>i</sub> &lt; 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4532,
        "dislikes": 81,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
        ],
        "stats": "{\"totalAccepted\": \"130.4K\", \"totalSubmission\": \"327.1K\", \"totalAcceptedRaw\": 130397, \"totalSubmissionRaw\": 327070, \"acRate\": \"39.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" }
      ]
    }
  },
  "leaf-similar-trees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "872",
        "title": "Leaf-Similar Trees",
        "titleSlug": "leaf-similar-trees",
        "content": "<p>Consider all the leaves of a binary tree, from&nbsp;left to right order, the values of those&nbsp;leaves form a <strong>leaf value sequence</strong><em>.</em></p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"width: 400px; height: 336px;\" /></p>\n\n<p>For example, in the given tree above, the leaf value sequence is <code>(6, 7, 4, 9, 8)</code>.</p>\n\n<p>Two binary trees are considered <em>leaf-similar</em>&nbsp;if their leaf value sequence is the same.</p>\n\n<p>Return <code>true</code> if and only if the two given trees with head nodes <code>root1</code> and <code>root2</code> are leaf-similar.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg\" style=\"width: 600px; height: 237px;\" />\n<pre>\n<strong>Input:</strong> root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg\" style=\"width: 300px; height: 110px;\" />\n<pre>\n<strong>Input:</strong> root1 = [1,2,3], root2 = [1,3,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each tree will be in the range <code>[1, 200]</code>.</li>\n\t<li>Both of the given trees will have values in the range <code>[0, 200]</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 3401,
        "dislikes": 75,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"315.5K\", \"totalSubmission\": \"464.4K\", \"totalAcceptedRaw\": 315523, \"totalSubmissionRaw\": 464378, \"acRate\": \"67.9%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "length-of-longest-fibonacci-subsequence": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "873",
        "title": "Length of Longest Fibonacci Subsequence",
        "titleSlug": "length-of-longest-fibonacci-subsequence",
        "content": "<p>A sequence <code>x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub></code> is <em>Fibonacci-like</em> if:</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li><code>x<sub>i</sub> + x<sub>i+1</sub> == x<sub>i+2</sub></code> for all <code>i + 2 &lt;= n</code></li>\n</ul>\n\n<p>Given a <b>strictly increasing</b> array <code>arr</code> of positive integers forming a sequence, return <em>the <strong>length</strong> of the longest Fibonacci-like subsequence of</em> <code>arr</code>. If one does not exist, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> is derived from another sequence <code>arr</code> by deleting any number of elements (including none) from <code>arr</code>, without changing the order of the remaining elements. For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,4,5,6,7,8]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest subsequence that is fibonacci-like: [1,2,3,5,8].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,3,7,11,12,14,18]\n<strong>Output:</strong> 3\n<strong>Explanation</strong>:<strong> </strong>The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1969,
        "dislikes": 67,
        "similarQuestions": "[{\"title\": \"Fibonacci Number\", \"titleSlug\": \"fibonacci-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"61.3K\", \"totalSubmission\": \"126.7K\", \"totalAcceptedRaw\": 61308, \"totalSubmissionRaw\": 126677, \"acRate\": \"48.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "fibonacci-number",
          "title": "Fibonacci Number",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "walking-robot-simulation": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "874",
        "title": "Walking Robot Simulation",
        "titleSlug": "walking-robot-simulation",
        "content": "<p>A robot on an infinite XY-plane starts at point <code>(0, 0)</code> facing north. The robot can receive a sequence of these three possible types of <code>commands</code>:</p>\n\n<ul>\n\t<li><code>-2</code>: Turn left <code>90</code> degrees.</li>\n\t<li><code>-1</code>: Turn right <code>90</code> degrees.</li>\n\t<li><code>1 &lt;= k &lt;= 9</code>: Move forward <code>k</code> units, one unit at a time.</li>\n</ul>\n\n<p>Some of the grid squares are <code>obstacles</code>. The <code>i<sup>th</sup></code> obstacle is at grid point <code>obstacles[i] = (x<sub>i</sub>, y<sub>i</sub>)</code>. If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.</p>\n\n<p>Return <em>the <strong>maximum Euclidean distance</strong> that the robot ever gets from the origin <strong>squared</strong> (i.e. if the distance is </em><code>5</code><em>, return </em><code>25</code><em>)</em>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>North means +Y direction.</li>\n\t<li>East means +X direction.</li>\n\t<li>South means -Y direction.</li>\n\t<li>West means -X direction.</li>\n\t<li>There can be obstacle in&nbsp;[0,0].</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> commands = [4,-1,3], obstacles = []\n<strong>Output:</strong> 25\n<strong>Explanation:</strong> The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 3<sup>2</sup> + 4<sup>2</sup> = 25 units away.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>Output:</strong> 65\n<strong>Explanation:</strong> The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 1<sup>2</sup> + 8<sup>2</sup> = 65 units away.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> commands = [6,-1,-1,6], obstacles = []\n<strong>Output:</strong> 36\n<strong>Explanation:</strong> The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 6<sup>2</sup> = 36 units away.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= commands.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>commands[i]</code> is either <code>-2</code>, <code>-1</code>, or an integer in the range <code>[1, 9]</code>.</li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li>The answer is guaranteed to be less than <code>2<sup>31</sup></code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 190,
        "dislikes": 46,
        "similarQuestions": "[{\"title\": \"Walking Robot Simulation II\", \"titleSlug\": \"walking-robot-simulation-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"39.2K\", \"totalSubmission\": \"98.8K\", \"totalAcceptedRaw\": 39176, \"totalSubmissionRaw\": 98831, \"acRate\": \"39.6%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "walking-robot-simulation-ii",
          "title": "Walking Robot Simulation II",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "koko-eating-bananas": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "875",
        "title": "Koko Eating Bananas",
        "titleSlug": "koko-eating-bananas",
        "content": "<p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the <code>i<sup>th</sup></code> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p>\n\n<p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p>\n\n<p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p>\n\n<p>Return <em>the minimum integer</em> <code>k</code> <em>such that she can eat all the bananas within</em> <code>h</code> <em>hours</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [3,6,7,11], h = 8\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [30,11,23,4,20], h = 5\n<strong>Output:</strong> 30\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [30,11,23,4,20], h = 6\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>piles.length &lt;= h &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 9681,
        "dislikes": 497,
        "similarQuestions": "[{\"title\": \"Minimize Max Distance to Gas Station\", \"titleSlug\": \"minimize-max-distance-to-gas-station\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimized Maximum of Products Distributed to Any Store\", \"titleSlug\": \"minimized-maximum-of-products-distributed-to-any-store\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Frog Jump II\", \"titleSlug\": \"frog-jump-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Repair Cars\", \"titleSlug\": \"minimum-time-to-repair-cars\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"522.1K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 522110, \"totalSubmissionRaw\": 1057529, \"acRate\": \"49.4%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "minimize-max-distance-to-gas-station",
          "title": "Minimize Max Distance to Gas Station",
          "isPaidOnly": true
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-candies-allocated-to-k-children",
          "title": "Maximum Candies Allocated to K Children",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimized-maximum-of-products-distributed-to-any-store",
          "title": "Minimized Maximum of Products Distributed to Any Store",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "frog-jump-ii",
          "title": "Frog Jump II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "minimum-time-to-repair-cars",
          "title": "Minimum Time to Repair Cars",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "middle-of-the-linked-list": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "876",
        "title": "Middle of the Linked List",
        "titleSlug": "middle-of-the-linked-list",
        "content": "<p>Given the <code>head</code> of a singly linked list, return <em>the middle node of the linked list</em>.</p>\n\n<p>If there are two middle nodes, return <strong>the second middle</strong> node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg\" style=\"width: 544px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [3,4,5]\n<strong>Explanation:</strong> The middle node of the list is node 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg\" style=\"width: 664px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5,6]\n<strong>Output:</strong> [4,5,6]\n<strong>Explanation:</strong> Since the list has two middle nodes with values 3 and 4, we return the second one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 10851,
        "dislikes": 330,
        "similarQuestions": "[{\"title\": \"Delete the Middle Node of a Linked List\", \"titleSlug\": \"delete-the-middle-node-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Twin Sum of a Linked List\", \"titleSlug\": \"maximum-twin-sum-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Linked List", "slug": "linked-list" },
          { "name": "Two Pointers", "slug": "two-pointers" }
        ],
        "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1609085, \"totalSubmissionRaw\": 2090605, \"acRate\": \"77.0%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "delete-the-middle-node-of-a-linked-list",
          "title": "Delete the Middle Node of a Linked List",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "maximum-twin-sum-of-a-linked-list",
          "title": "Maximum Twin Sum of a Linked List",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Linked List", "slug": "linked-list" },
        { "name": "Two Pointers", "slug": "two-pointers" }
      ]
    }
  },
  "stone-game": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "877",
        "title": "Stone Game",
        "titleSlug": "stone-game",
        "content": "<p>Alice and Bob play a game with piles of stones. There are an <strong>even</strong> number of piles arranged in a row, and each pile has a <strong>positive</strong> integer number of stones <code>piles[i]</code>.</p>\n\n<p>The objective of the game is to end with the most stones. The <strong>total</strong> number of stones across all the piles is <strong>odd</strong>, so there are no ties.</p>\n\n<p>Alice and Bob take turns, with <strong>Alice starting first</strong>. Each turn, a player takes the entire pile of stones either from the <strong>beginning</strong> or from the <strong>end</strong> of the row. This continues until there are no more piles left, at which point the person with the <strong>most stones wins</strong>.</p>\n\n<p>Assuming Alice and Bob play optimally, return <code>true</code><em> if Alice wins the game, or </em><code>false</code><em> if Bob wins</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [5,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [3,7,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\n\t<li><code>piles.length</code> is <strong>even</strong>.</li>\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\n\t<li><code>sum(piles[i])</code> is <strong>odd</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3100,
        "dislikes": 2828,
        "similarQuestions": "[{\"title\": \"Stone Game V\", \"titleSlug\": \"stone-game-v\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game VI\", \"titleSlug\": \"stone-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VII\", \"titleSlug\": \"stone-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VIII\", \"titleSlug\": \"stone-game-viii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IX\", \"titleSlug\": \"stone-game-ix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strictly Palindromic Number\", \"titleSlug\": \"strictly-palindromic-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Visit Array Positions to Maximize Score\", \"titleSlug\": \"visit-array-positions-to-maximize-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Game Theory", "slug": "game-theory" }
        ],
        "stats": "{\"totalAccepted\": \"218.1K\", \"totalSubmission\": \"310.1K\", \"totalAcceptedRaw\": 218116, \"totalSubmissionRaw\": 310090, \"acRate\": \"70.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "stone-game-v",
          "title": "Stone Game V",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "stone-game-vi",
          "title": "Stone Game VI",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "stone-game-vii",
          "title": "Stone Game VII",
          "isPaidOnly": false
        },
        {
          "difficulty": "Hard",
          "titleSlug": "stone-game-viii",
          "title": "Stone Game VIII",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "stone-game-ix",
          "title": "Stone Game IX",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "strictly-palindromic-number",
          "title": "Strictly Palindromic Number",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "visit-array-positions-to-maximize-score",
          "title": "Visit Array Positions to Maximize Score",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Game Theory", "slug": "game-theory" }
      ]
    }
  },
  "nth-magical-number": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "878",
        "title": "Nth Magical Number",
        "titleSlug": "nth-magical-number",
        "content": "<p>A positive integer is <em>magical</em> if it is divisible by either <code>a</code> or <code>b</code>.</p>\n\n<p>Given the three integers <code>n</code>, <code>a</code>, and <code>b</code>, return the <code>n<sup>th</sup></code> magical number. Since the answer may be very large, <strong>return it modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, a = 2, b = 3\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, a = 2, b = 3\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>2 &lt;= a, b &lt;= 4 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1244,
        "dislikes": 155,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" }
        ],
        "stats": "{\"totalAccepted\": \"35.9K\", \"totalSubmission\": \"101.7K\", \"totalAcceptedRaw\": 35863, \"totalSubmissionRaw\": 101707, \"acRate\": \"35.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" }
      ]
    }
  },
  "profitable-schemes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "879",
        "title": "Profitable Schemes",
        "titleSlug": "profitable-schemes",
        "content": "<p>There is a group of <code>n</code> members, and a list of various crimes they could commit. The <code>i<sup>th</sup></code> crime generates a <code>profit[i]</code> and requires <code>group[i]</code> members to participate in it. If a member participates in one crime, that member can&#39;t participate in another crime.</p>\n\n<p>Let&#39;s call a <strong>profitable scheme</strong> any subset of these crimes that generates at least <code>minProfit</code> profit, and the total number of members participating in that subset of crimes is at most <code>n</code>.</p>\n\n<p>Return the number of schemes that can be chosen. Since the answer may be very large, <strong>return it modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, minProfit = 3, group = [2,2], profit = [2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= minProfit &lt;= 100</code></li>\n\t<li><code>1 &lt;= group.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\n\t<li><code>profit.length == group.length</code></li>\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1781,
        "dislikes": 120,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"60.7K\", \"totalSubmission\": \"124.8K\", \"totalAcceptedRaw\": 60711, \"totalSubmissionRaw\": 124783, \"acRate\": \"48.7%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "decoded-string-at-index": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "880",
        "title": "Decoded String at Index",
        "titleSlug": "decoded-string-at-index",
        "content": "<p>You are given an encoded string <code>s</code>. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:</p>\n\n<ul>\n\t<li>If the character read is a letter, that letter is written onto the tape.</li>\n\t<li>If the character read is a digit <code>d</code>, the entire current tape is repeatedly written <code>d - 1</code> more times in total.</li>\n</ul>\n\n<p>Given an integer <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> letter (<strong>1-indexed)</strong> in the decoded string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leet2code3&quot;, k = 10\n<strong>Output:</strong> &quot;o&quot;\n<strong>Explanation:</strong> The decoded string is &quot;leetleetcodeleetleetcodeleetleetcode&quot;.\nThe 10<sup>th</sup> letter in the string is &quot;o&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ha22&quot;, k = 5\n<strong>Output:</strong> &quot;h&quot;\n<strong>Explanation:</strong> The decoded string is &quot;hahahaha&quot;.\nThe 5<sup>th</sup> letter is &quot;h&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a2345678999999999999999&quot;, k = 1\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The decoded string is &quot;a&quot; repeated 8301530446056247680 times.\nThe 1<sup>st</sup> letter is &quot;a&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of lowercase English letters and digits <code>2</code> through <code>9</code>.</li>\n\t<li><code>s</code> starts with a letter.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>It is guaranteed that <code>k</code> is less than or equal to the length of the decoded string.</li>\n\t<li>The decoded string is guaranteed to have less than <code>2<sup>63</sup></code> letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2451,
        "dislikes": 346,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "String", "slug": "string" },
          { "name": "Stack", "slug": "stack" }
        ],
        "stats": "{\"totalAccepted\": \"93.7K\", \"totalSubmission\": \"256.4K\", \"totalAcceptedRaw\": 93658, \"totalSubmissionRaw\": 256365, \"acRate\": \"36.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "String", "slug": "string" },
        { "name": "Stack", "slug": "stack" }
      ]
    }
  },
  "boats-to-save-people": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "881",
        "title": "Boats to Save People",
        "titleSlug": "boats-to-save-people",
        "content": "<p>You are given an array <code>people</code> where <code>people[i]</code> is the weight of the <code>i<sup>th</sup></code> person, and an <strong>infinite number of boats</strong> where each boat can carry a maximum weight of <code>limit</code>. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most <code>limit</code>.</p>\n\n<p>Return <em>the minimum number of boats to carry every given person</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [1,2], limit = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 1 boat (1, 2)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [3,2,2,1], limit = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 boats (1, 2), (2) and (3)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [3,5,3,4], limit = 5\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 4 boats (3), (3), (4), (5)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= people.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= people[i] &lt;= limit &lt;= 3 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 5733,
        "dislikes": 135,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Two Pointers", "slug": "two-pointers" },
          { "name": "Greedy", "slug": "greedy" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"275.3K\", \"totalSubmission\": \"488.4K\", \"totalAcceptedRaw\": 275318, \"totalSubmissionRaw\": 488394, \"acRate\": \"56.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Two Pointers", "slug": "two-pointers" },
        { "name": "Greedy", "slug": "greedy" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "reachable-nodes-in-subdivided-graph": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "882",
        "title": "Reachable Nodes In Subdivided Graph",
        "titleSlug": "reachable-nodes-in-subdivided-graph",
        "content": "<p>You are given an undirected graph (the <strong>&quot;original graph&quot;</strong>) with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You decide to <strong>subdivide</strong> each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.</p>\n\n<p>The graph is given as a 2D array of <code>edges</code> where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, cnt<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the original graph, and <code>cnt<sub>i</sub></code> is the total number of new nodes that you will <strong>subdivide</strong> the edge into. Note that <code>cnt<sub>i</sub> == 0</code> means you will not subdivide the edge.</p>\n\n<p>To <strong>subdivide</strong> the edge <code>[u<sub>i</sub>, v<sub>i</sub>]</code>, replace it with <code>(cnt<sub>i</sub> + 1)</code> new edges and <code>cnt<sub>i</sub></code> new nodes. The new nodes are <code>x<sub>1</sub></code>, <code>x<sub>2</sub></code>, ..., <code>x<sub>cnt<sub>i</sub></sub></code>, and the new edges are <code>[u<sub>i</sub>, x<sub>1</sub>]</code>, <code>[x<sub>1</sub>, x<sub>2</sub>]</code>, <code>[x<sub>2</sub>, x<sub>3</sub>]</code>, ..., <code>[x<sub>cnt<sub>i</sub>-1</sub>, x<sub>cnt<sub>i</sub></sub>]</code>, <code>[x<sub>cnt<sub>i</sub></sub>, v<sub>i</sub>]</code>.</p>\n\n<p>In this <strong>new graph</strong>, you want to know how many nodes are <strong>reachable</strong> from the node <code>0</code>, where a node is <strong>reachable</strong> if the distance is <code>maxMoves</code> or less.</p>\n\n<p>Given the original graph and <code>maxMoves</code>, return <em>the number of nodes that are <strong>reachable</strong> from node </em><code>0</code><em> in the new graph</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"width: 600px; height: 247px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\n<strong>Output:</strong> 23\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, 10<sup>4</sup>)</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt; n</code></li>\n\t<li>There are <strong>no multiple edges</strong> in the graph.</li>\n\t<li><code>0 &lt;= cnt<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= maxMoves &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= n &lt;= 3000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 768,
        "dislikes": 220,
        "similarQuestions": "[{\"title\": \"Find All People With Secret\", \"titleSlug\": \"find-all-people-with-secret\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Paths in Maze That Lead to Same Room\", \"titleSlug\": \"paths-in-maze-that-lead-to-same-room\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Graph", "slug": "graph" },
          { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
          { "name": "Shortest Path", "slug": "shortest-path" }
        ],
        "stats": "{\"totalAccepted\": \"25.9K\", \"totalSubmission\": \"51.8K\", \"totalAcceptedRaw\": 25912, \"totalSubmissionRaw\": 51755, \"acRate\": \"50.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Hard",
          "titleSlug": "find-all-people-with-secret",
          "title": "Find All People With Secret",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "paths-in-maze-that-lead-to-same-room",
          "title": "Paths in Maze That Lead to Same Room",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Graph", "slug": "graph" },
        { "name": "Heap (Priority Queue)", "slug": "heap-priority-queue" },
        { "name": "Shortest Path", "slug": "shortest-path" }
      ]
    }
  },
  "projection-area-of-3d-shapes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "883",
        "title": "Projection Area of 3D Shapes",
        "titleSlug": "projection-area-of-3d-shapes",
        "content": "<p>You are given an <code>n x n</code> <code>grid</code> where we place some <code>1 x 1 x 1</code> cubes that are axis-aligned with the <code>x</code>, <code>y</code>, and <code>z</code> axes.</p>\n\n<p>Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of the cell <code>(i, j)</code>.</p>\n\n<p>We view the projection of these cubes onto the <code>xy</code>, <code>yz</code>, and <code>zx</code> planes.</p>\n\n<p>A <strong>projection</strong> is like a shadow, that maps our <strong>3-dimensional</strong> figure to a <strong>2-dimensional</strong> plane. We are viewing the &quot;shadow&quot; when looking at the cubes from the top, the front, and the side.</p>\n\n<p>Return <em>the total area of all three projections</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"width: 800px; height: 214px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2],[3,4]]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> Here are the three projections (&quot;shadows&quot;) of the shape made with each axis-aligned plane.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[2]]\n<strong>Output:</strong> 5\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0],[0,2]]\n<strong>Output:</strong> 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 559,
        "dislikes": 1392,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"52.7K\", \"totalSubmission\": \"73.1K\", \"totalAcceptedRaw\": 52708, \"totalSubmissionRaw\": 73098, \"acRate\": \"72.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "uncommon-words-from-two-sentences": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "884",
        "title": "Uncommon Words from Two Sentences",
        "titleSlug": "uncommon-words-from-two-sentences",
        "content": "<p>A <strong>sentence</strong> is a string of single-space separated words where each word consists only of lowercase letters.</p>\n\n<p>A word is <strong>uncommon</strong> if it appears exactly once in one of the sentences, and <strong>does not appear</strong> in the other sentence.</p>\n\n<p>Given two <strong>sentences</strong> <code>s1</code> and <code>s2</code>, return <em>a list of all the <strong>uncommon words</strong></em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\n<strong>Output:</strong> [\"sweet\",\"sour\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s1 = \"apple apple\", s2 = \"banana\"\n<strong>Output:</strong> [\"banana\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 200</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters and spaces.</li>\n\t<li><code>s1</code> and <code>s2</code> do not have leading or trailing spaces.</li>\n\t<li>All the words in <code>s1</code> and <code>s2</code> are separated by a single space.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1304,
        "dislikes": 165,
        "similarQuestions": "[{\"title\": \"Count Common Words With One Occurrence\", \"titleSlug\": \"count-common-words-with-one-occurrence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"131.1K\", \"totalSubmission\": \"196.1K\", \"totalAcceptedRaw\": 131127, \"totalSubmissionRaw\": 196064, \"acRate\": \"66.9%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "count-common-words-with-one-occurrence",
          "title": "Count Common Words With One Occurrence",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "spiral-matrix-iii": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "885",
        "title": "Spiral Matrix III",
        "titleSlug": "spiral-matrix-iii",
        "content": "<p>You start at the cell <code>(rStart, cStart)</code> of an <code>rows x cols</code> grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.</p>\n\n<p>You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid&#39;s boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all <code>rows * cols</code> spaces of the grid.</p>\n\n<p>Return <em>an array of coordinates representing the positions of the grid in the order you visited them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png\" style=\"width: 174px; height: 99px;\" />\n<pre>\n<strong>Input:</strong> rows = 1, cols = 4, rStart = 0, cStart = 0\n<strong>Output:</strong> [[0,0],[0,1],[0,2],[0,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png\" style=\"width: 202px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> rows = 5, cols = 6, rStart = 1, cStart = 4\n<strong>Output:</strong> [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rows, cols &lt;= 100</code></li>\n\t<li><code>0 &lt;= rStart &lt; rows</code></li>\n\t<li><code>0 &lt;= cStart &lt; cols</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 883,
        "dislikes": 843,
        "similarQuestions": "[{\"title\": \"Spiral Matrix\", \"titleSlug\": \"spiral-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix II\", \"titleSlug\": \"spiral-matrix-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix IV\", \"titleSlug\": \"spiral-matrix-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Matrix", "slug": "matrix" },
          { "name": "Simulation", "slug": "simulation" }
        ],
        "stats": "{\"totalAccepted\": \"47K\", \"totalSubmission\": \"63.3K\", \"totalAcceptedRaw\": 46992, \"totalSubmissionRaw\": 63252, \"acRate\": \"74.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix",
          "title": "Spiral Matrix",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix-ii",
          "title": "Spiral Matrix II",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "spiral-matrix-iv",
          "title": "Spiral Matrix IV",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Matrix", "slug": "matrix" },
        { "name": "Simulation", "slug": "simulation" }
      ]
    }
  },
  "possible-bipartition": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "886",
        "title": "Possible Bipartition",
        "titleSlug": "possible-bipartition",
        "content": "<p>We want to split a group of <code>n</code> people (labeled from <code>1</code> to <code>n</code>) into two groups of <strong>any size</strong>. Each person may dislike some other people, and they should not go into the same group.</p>\n\n<p>Given the integer <code>n</code> and the array <code>dislikes</code> where <code>dislikes[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that the person labeled <code>a<sub>i</sub></code> does not like the person labeled <code>b<sub>i</sub></code>, return <code>true</code> <em>if it is possible to split everyone into two groups in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The first group has [1,4], and the second group has [2,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We need at least 3 groups to divide them. We cannot put them in two groups.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2000</code></li>\n\t<li><code>0 &lt;= dislikes.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>dislikes[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= n</code></li>\n\t<li>All the pairs of <code>dislikes</code> are <strong>unique</strong>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4569,
        "dislikes": 106,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Breadth-First Search", "slug": "breadth-first-search" },
          { "name": "Union Find", "slug": "union-find" },
          { "name": "Graph", "slug": "graph" }
        ],
        "stats": "{\"totalAccepted\": \"199.4K\", \"totalSubmission\": \"395.5K\", \"totalAcceptedRaw\": 199420, \"totalSubmissionRaw\": 395533, \"acRate\": \"50.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Breadth-First Search", "slug": "breadth-first-search" },
        { "name": "Union Find", "slug": "union-find" },
        { "name": "Graph", "slug": "graph" }
      ]
    }
  },
  "super-egg-drop": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "887",
        "title": "Super Egg Drop",
        "titleSlug": "super-egg-drop",
        "content": "<p>You are given <code>k</code> identical eggs and you have access to a building with <code>n</code> floors labeled from <code>1</code> to <code>n</code>.</p>\n\n<p>You know that there exists a floor <code>f</code> where <code>0 &lt;= f &lt;= n</code> such that any egg dropped at a floor <strong>higher</strong> than <code>f</code> will <strong>break</strong>, and any egg dropped <strong>at or below</strong> floor <code>f</code> will <strong>not break</strong>.</p>\n\n<p>Each move, you may take an unbroken egg and drop it from any floor <code>x</code> (where <code>1 &lt;= x &lt;= n</code>). If the egg breaks, you can no longer use it. However, if the egg does not break, you may <strong>reuse</strong> it in future moves.</p>\n\n<p>Return <em>the <strong>minimum number of moves</strong> that you need to determine <strong>with certainty</strong> what the value of </em><code>f</code> is.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 1, n = 2\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, n = 6\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 14\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 3527,
        "dislikes": 177,
        "similarQuestions": "[{\"title\": \"Egg Drop With 2 Eggs and N Floors\", \"titleSlug\": \"egg-drop-with-2-eggs-and-n-floors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" }
        ],
        "stats": "{\"totalAccepted\": \"67.6K\", \"totalSubmission\": \"246.1K\", \"totalAcceptedRaw\": 67622, \"totalSubmissionRaw\": 246074, \"acRate\": \"27.5%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "egg-drop-with-2-eggs-and-n-floors",
          "title": "Egg Drop With 2 Eggs and N Floors",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" }
      ]
    }
  },
  "fair-candy-swap": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "888",
        "title": "Fair Candy Swap",
        "titleSlug": "fair-candy-swap",
        "content": "<p>Alice and Bob have a different total number of candies. You are given two integer arrays <code>aliceSizes</code> and <code>bobSizes</code> where <code>aliceSizes[i]</code> is the number of candies of the <code>i<sup>th</sup></code> box of candy that Alice has and <code>bobSizes[j]</code> is the number of candies of the <code>j<sup>th</sup></code> box of candy that Bob has.</p>\n\n<p>Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.</p>\n\n<p>Return a<em>n integer array </em><code>answer</code><em> where </em><code>answer[0]</code><em> is the number of candies in the box that Alice must exchange, and </em><code>answer[1]</code><em> is the number of candies in the box that Bob must exchange</em>. If there are multiple answers, you may <strong>return any</strong> one of them. It is guaranteed that at least one answer exists.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> aliceSizes = [1,1], bobSizes = [2,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> aliceSizes = [1,2], bobSizes = [2,3]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> aliceSizes = [2], bobSizes = [1,3]\n<strong>Output:</strong> [2,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= aliceSizes.length, bobSizes.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= aliceSizes[i], bobSizes[j] &lt;= 10<sup>5</sup></code></li>\n\t<li>Alice and Bob have a different total number of candies.</li>\n\t<li>There will be at least one valid answer for the given input.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2031,
        "dislikes": 358,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Binary Search", "slug": "binary-search" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"113.7K\", \"totalSubmission\": \"185.5K\", \"totalAcceptedRaw\": 113706, \"totalSubmissionRaw\": 185491, \"acRate\": \"61.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Binary Search", "slug": "binary-search" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "construct-binary-tree-from-preorder-and-postorder-traversal": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "889",
        "title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "titleSlug": "construct-binary-tree-from-preorder-and-postorder-traversal",
        "content": "<p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of <strong>distinct</strong> values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return <em>the binary tree</em>.</p>\n\n<p>If there exist multiple answers, you can <strong>return any</strong> of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/24/lc-prepost.jpg\" style=\"width: 304px; height: 265px;\" />\n<pre>\n<strong>Input:</strong> preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\n<strong>Output:</strong> [1,2,3,4,5,6,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> preorder = [1], postorder = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 30</code></li>\n\t<li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li>\n\t<li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>\n\t<li><code>postorder.length == preorder.length</code></li>\n\t<li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li>\n\t<li>All the values of <code>postorder</code> are <strong>unique</strong>.</li>\n\t<li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 2676,
        "dislikes": 109,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"96.9K\", \"totalSubmission\": \"135.9K\", \"totalAcceptedRaw\": 96862, \"totalSubmissionRaw\": 135897, \"acRate\": \"71.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Divide and Conquer", "slug": "divide-and-conquer" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "find-and-replace-pattern": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "890",
        "title": "Find and Replace Pattern",
        "titleSlug": "find-and-replace-pattern",
        "content": "<p>Given a list of strings <code>words</code> and a string <code>pattern</code>, return <em>a list of</em> <code>words[i]</code> <em>that match</em> <code>pattern</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p>\n\n<p>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;\n<strong>Output:</strong> [&quot;mee&quot;,&quot;aqq&quot;]\n<strong>Explanation:</strong> &quot;mee&quot; matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, ...}. \n&quot;ccc&quot; does not match the pattern because {a -&gt; c, b -&gt; c, ...} is not a permutation, since a and b map to the same letter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], pattern = &quot;a&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>words[i].length == pattern.length</code></li>\n\t<li><code>pattern</code> and <code>words[i]</code> are lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3843,
        "dislikes": 169,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" }
        ],
        "stats": "{\"totalAccepted\": \"179.2K\", \"totalSubmission\": \"232.5K\", \"totalAcceptedRaw\": 179193, \"totalSubmissionRaw\": 232546, \"acRate\": \"77.1%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" }
      ]
    }
  },
  "sum-of-subsequence-widths": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "891",
        "title": "Sum of Subsequence Widths",
        "titleSlug": "sum-of-subsequence-widths",
        "content": "<p>The <strong>width</strong> of a sequence is the difference between the maximum and minimum elements in the sequence.</p>\n\n<p>Given an array of integers <code>nums</code>, return <em>the sum of the <strong>widths</strong> of all the non-empty <strong>subsequences</strong> of </em><code>nums</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3]\n<strong>Output:</strong> 6\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 697,
        "dislikes": 167,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"20.1K\", \"totalSubmission\": \"53.7K\", \"totalAcceptedRaw\": 20074, \"totalSubmissionRaw\": 53720, \"acRate\": \"37.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "surface-area-of-3d-shapes": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "892",
        "title": "Surface Area of 3D Shapes",
        "titleSlug": "surface-area-of-3d-shapes",
        "content": "<p>You are given an <code>n x n</code> <code>grid</code> where you have placed some <code>1 x 1 x 1</code> cubes. Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of cell <code>(i, j)</code>.</p>\n\n<p>After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.</p>\n\n<p>Return <em>the total surface area of the resulting shapes</em>.</p>\n\n<p><strong>Note:</strong> The bottom face of each shape counts toward its surface area.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2],[3,4]]\n<strong>Output:</strong> 34\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid4.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> 32\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid5.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,2,2],[2,1,2],[2,2,2]]\n<strong>Output:</strong> 46\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 546,
        "dislikes": 732,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Math", "slug": "math" },
          { "name": "Geometry", "slug": "geometry" },
          { "name": "Matrix", "slug": "matrix" }
        ],
        "stats": "{\"totalAccepted\": \"37.8K\", \"totalSubmission\": \"57.9K\", \"totalAcceptedRaw\": 37802, \"totalSubmissionRaw\": 57869, \"acRate\": \"65.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Math", "slug": "math" },
        { "name": "Geometry", "slug": "geometry" },
        { "name": "Matrix", "slug": "matrix" }
      ]
    }
  },
  "groups-of-special-equivalent-strings": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "893",
        "title": "Groups of Special-Equivalent Strings",
        "titleSlug": "groups-of-special-equivalent-strings",
        "content": "<p>You are given an array of strings of the same length <code>words</code>.</p>\n\n<p>In one <strong>move</strong>, you can swap any two even indexed characters or any two odd indexed characters of a string <code>words[i]</code>.</p>\n\n<p>Two strings <code>words[i]</code> and <code>words[j]</code> are <strong>special-equivalent</strong> if after any number of moves, <code>words[i] == words[j]</code>.</p>\n\n<ul>\n\t<li>For example, <code>words[i] = &quot;zzxy&quot;</code> and <code>words[j] = &quot;xyzz&quot;</code> are <strong>special-equivalent</strong> because we may make the moves <code>&quot;zzxy&quot; -&gt; &quot;xzzy&quot; -&gt; &quot;xyzz&quot;</code>.</li>\n</ul>\n\n<p>A <strong>group of special-equivalent strings</strong> from <code>words</code> is a non-empty subset of words such that:</p>\n\n<ul>\n\t<li>Every pair of strings in the group are special equivalent, and</li>\n\t<li>The group is the largest size possible (i.e., there is not a string <code>words[i]</code> not in the group such that <code>words[i]</code> is special-equivalent to every string in the group).</li>\n</ul>\n\n<p>Return <em>the number of <strong>groups of special-equivalent strings</strong> from </em><code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;cdab&quot;,&quot;cbad&quot;,&quot;xyzz&quot;,&quot;zzxy&quot;,&quot;zzyx&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nOne group is [&quot;abcd&quot;, &quot;cdab&quot;, &quot;cbad&quot;], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [&quot;xyzz&quot;, &quot;zzxy&quot;] and [&quot;zzyx&quot;].\nNote that in particular, &quot;zzxy&quot; is not special equivalent to &quot;zzyx&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consist of lowercase English letters.</li>\n\t<li>All the strings are of the same length.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 513,
        "dislikes": 1473,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"47.3K\", \"totalSubmission\": \"66.3K\", \"totalAcceptedRaw\": 47340, \"totalSubmissionRaw\": 66291, \"acRate\": \"71.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "all-possible-full-binary-trees": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "894",
        "title": "All Possible Full Binary Trees",
        "titleSlug": "all-possible-full-binary-trees",
        "content": "<p>Given an integer <code>n</code>, return <em>a list of all possible <strong>full binary trees</strong> with</em> <code>n</code> <em>nodes</em>. Each node of each tree in the answer must have <code>Node.val == 0</code>.</p>\n\n<p>Each element of the answer is the root node of one possible tree. You may return the final list of trees in <strong>any order</strong>.</p>\n\n<p>A <strong>full binary tree</strong> is a binary tree where each node has exactly <code>0</code> or <code>2</code> children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png\" style=\"width: 700px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [[0,0,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4915,
        "dislikes": 332,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Recursion", "slug": "recursion" },
          { "name": "Memoization", "slug": "memoization" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"171.5K\", \"totalSubmission\": \"207.2K\", \"totalAcceptedRaw\": 171458, \"totalSubmissionRaw\": 207161, \"acRate\": \"82.8%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Recursion", "slug": "recursion" },
        { "name": "Memoization", "slug": "memoization" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "maximum-frequency-stack": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "895",
        "title": "Maximum Frequency Stack",
        "titleSlug": "maximum-frequency-stack",
        "content": "<p>Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.</p>\n\n<p>Implement the <code>FreqStack</code> class:</p>\n\n<ul>\n\t<li><code>FreqStack()</code> constructs an empty frequency stack.</li>\n\t<li><code>void push(int val)</code> pushes an integer <code>val</code> onto the top of the stack.</li>\n\t<li><code>int pop()</code> removes and returns the most frequent element in the stack.\n\t<ul>\n\t\t<li>If there is a tie for the most frequent element, the element closest to the stack&#39;s top is removed and returned.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FreqStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n<strong>Output</strong>\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\n<strong>Explanation</strong>\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>push</code> and <code>pop</code>.</li>\n\t<li>It is guaranteed that there will be at least one element in the stack before calling <code>pop</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 4579,
        "dislikes": 66,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Hash Table", "slug": "hash-table" },
          { "name": "Stack", "slug": "stack" },
          { "name": "Design", "slug": "design" },
          { "name": "Ordered Set", "slug": "ordered-set" }
        ],
        "stats": "{\"totalAccepted\": \"164.4K\", \"totalSubmission\": \"247.4K\", \"totalAcceptedRaw\": 164437, \"totalSubmissionRaw\": 247447, \"acRate\": \"66.5%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Hash Table", "slug": "hash-table" },
        { "name": "Stack", "slug": "stack" },
        { "name": "Design", "slug": "design" },
        { "name": "Ordered Set", "slug": "ordered-set" }
      ]
    }
  },
  "monotonic-array": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "896",
        "title": "Monotonic Array",
        "titleSlug": "monotonic-array",
        "content": "<p>An array is <strong>monotonic</strong> if it is either monotone increasing or monotone decreasing.</p>\n\n<p>An array <code>nums</code> is monotone increasing if for all <code>i &lt;= j</code>, <code>nums[i] &lt;= nums[j]</code>. An array <code>nums</code> is monotone decreasing if for all <code>i &lt;= j</code>, <code>nums[i] &gt;= nums[j]</code>.</p>\n\n<p>Given an integer array <code>nums</code>, return <code>true</code><em> if the given array is monotonic, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,5,4,4]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 2939,
        "dislikes": 86,
        "similarQuestions": "[{\"title\": \"Count Hills and Valleys in an Array\", \"titleSlug\": \"count-hills-and-valleys-in-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "topicTags": [{ "name": "Array", "slug": "array" }],
        "stats": "{\"totalAccepted\": \"399K\", \"totalSubmission\": \"653.3K\", \"totalAcceptedRaw\": 398988, \"totalSubmissionRaw\": 653275, \"acRate\": \"61.1%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Easy",
          "titleSlug": "count-hills-and-valleys-in-an-array",
          "title": "Count Hills and Valleys in an Array",
          "isPaidOnly": false
        }
      ],
      "hints": [],
      "relatedTopics": [{ "name": "Array", "slug": "array" }]
    }
  },
  "increasing-order-search-tree": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "897",
        "title": "Increasing Order Search Tree",
        "titleSlug": "increasing-order-search-tree",
        "content": "<p>Given the <code>root</code> of a binary search tree, rearrange the tree in <strong>in-order</strong> so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg\" style=\"width: 600px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg\" style=\"width: 300px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> root = [5,1,7]\n<strong>Output:</strong> [1,null,5,null,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 4220,
        "dislikes": 664,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Stack", "slug": "stack" },
          { "name": "Tree", "slug": "tree" },
          { "name": "Depth-First Search", "slug": "depth-first-search" },
          { "name": "Binary Search Tree", "slug": "binary-search-tree" },
          { "name": "Binary Tree", "slug": "binary-tree" }
        ],
        "stats": "{\"totalAccepted\": \"270.1K\", \"totalSubmission\": \"345.2K\", \"totalAcceptedRaw\": 270114, \"totalSubmissionRaw\": 345154, \"acRate\": \"78.3%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Stack", "slug": "stack" },
        { "name": "Tree", "slug": "tree" },
        { "name": "Depth-First Search", "slug": "depth-first-search" },
        { "name": "Binary Search Tree", "slug": "binary-search-tree" },
        { "name": "Binary Tree", "slug": "binary-tree" }
      ]
    }
  },
  "bitwise-ors-of-subarrays": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "898",
        "title": "Bitwise ORs of Subarrays",
        "titleSlug": "bitwise-ors-of-subarrays",
        "content": "<p>Given an integer array <code>arr</code>, return <em>the number of distinct bitwise ORs of all the non-empty subarrays of</em> <code>arr</code>.</p>\n\n<p>The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one possible result: 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,1,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The possible results are 1, 2, 3, 4, 6, and 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1395,
        "dislikes": 201,
        "similarQuestions": "[{\"title\": \"Longest Nice Subarray\", \"titleSlug\": \"longest-nice-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Subarrays With Maximum Bitwise OR\", \"titleSlug\": \"smallest-subarrays-with-maximum-bitwise-or\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Bitwise OR of All Subsequence Sums\", \"titleSlug\": \"bitwise-or-of-all-subsequence-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Dynamic Programming", "slug": "dynamic-programming" },
          { "name": "Bit Manipulation", "slug": "bit-manipulation" }
        ],
        "stats": "{\"totalAccepted\": \"33.9K\", \"totalSubmission\": \"88.3K\", \"totalAcceptedRaw\": 33850, \"totalSubmissionRaw\": 88327, \"acRate\": \"38.3%\"}",
        "hints": []
      },
      "similar": [
        {
          "difficulty": "Medium",
          "titleSlug": "longest-nice-subarray",
          "title": "Longest Nice Subarray",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "smallest-subarrays-with-maximum-bitwise-or",
          "title": "Smallest Subarrays With Maximum Bitwise OR",
          "isPaidOnly": false
        },
        {
          "difficulty": "Medium",
          "titleSlug": "bitwise-or-of-all-subsequence-sums",
          "title": "Bitwise OR of All Subsequence Sums",
          "isPaidOnly": true
        }
      ],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Dynamic Programming", "slug": "dynamic-programming" },
        { "name": "Bit Manipulation", "slug": "bit-manipulation" }
      ]
    }
  },
  "orderly-queue": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "899",
        "title": "Orderly Queue",
        "titleSlug": "orderly-queue",
        "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose one of the first <code>k</code> letters of <code>s</code> and append it at the end of the string.</p>\n\n<p>Return <em>the lexicographically smallest string you could have after applying the mentioned step any number of moves</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cba&quot;, k = 1\n<strong>Output:</strong> &quot;acb&quot;\n<strong>Explanation:</strong> \nIn the first move, we move the 1<sup>st</sup> character &#39;c&#39; to the end, obtaining the string &quot;bac&quot;.\nIn the second move, we move the 1<sup>st</sup> character &#39;b&#39; to the end, obtaining the final result &quot;acb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;baaca&quot;, k = 3\n<strong>Output:</strong> &quot;aaabc&quot;\n<strong>Explanation:</strong> \nIn the first move, we move the 1<sup>st</sup> character &#39;b&#39; to the end, obtaining the string &quot;aacab&quot;.\nIn the second move, we move the 3<sup>rd</sup> character &#39;c&#39; to the end, obtaining the final result &quot;aaabc&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of lowercase English letters.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1714,
        "dislikes": 606,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Math", "slug": "math" },
          { "name": "String", "slug": "string" },
          { "name": "Sorting", "slug": "sorting" }
        ],
        "stats": "{\"totalAccepted\": \"67.7K\", \"totalSubmission\": \"102.6K\", \"totalAcceptedRaw\": 67655, \"totalSubmissionRaw\": 102578, \"acRate\": \"66.0%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Math", "slug": "math" },
        { "name": "String", "slug": "string" },
        { "name": "Sorting", "slug": "sorting" }
      ]
    }
  },
  "rle-iterator": {
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
      "question": {
        "questionFrontendId": "900",
        "title": "RLE Iterator",
        "titleSlug": "rle-iterator",
        "content": "<p>We can use run-length encoding (i.e., <strong>RLE</strong>) to encode a sequence of integers. In a run-length encoded array of even length <code>encoding</code> (<strong>0-indexed</strong>), for all even <code>i</code>, <code>encoding[i]</code> tells us the number of times that the non-negative integer value <code>encoding[i + 1]</code> is repeated in the sequence.</p>\n\n<ul>\n\t<li>For example, the sequence <code>arr = [8,8,8,5,5]</code> can be encoded to be <code>encoding = [3,8,2,5]</code>. <code>encoding = [3,8,0,9,2,5]</code> and <code>encoding = [2,8,1,8,2,5]</code> are also valid <strong>RLE</strong> of <code>arr</code>.</li>\n</ul>\n\n<p>Given a run-length encoded array, design an iterator that iterates through it.</p>\n\n<p>Implement the <code>RLEIterator</code> class:</p>\n\n<ul>\n\t<li><code>RLEIterator(int[] encoded)</code> Initializes the object with the encoded array <code>encoded</code>.</li>\n\t<li><code>int next(int n)</code> Exhausts the next <code>n</code> elements and returns the last element exhausted in this way. If there is no element left to exhaust, return <code>-1</code> instead.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RLEIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\n<strong>Output</strong>\n[null, 8, 8, 5, -1]\n\n<strong>Explanation</strong>\nRLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= encoding.length &lt;= 1000</code></li>\n\t<li><code>encoding.length</code> is even.</li>\n\t<li><code>0 &lt;= encoding[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>1000</code> calls will be made to <code>next</code>.</li>\n</ul>\n",
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 704,
        "dislikes": 178,
        "similarQuestions": "[]",
        "topicTags": [
          { "name": "Array", "slug": "array" },
          { "name": "Design", "slug": "design" },
          { "name": "Counting", "slug": "counting" },
          { "name": "Iterator", "slug": "iterator" }
        ],
        "stats": "{\"totalAccepted\": \"68.1K\", \"totalSubmission\": \"114.5K\", \"totalAcceptedRaw\": 68088, \"totalSubmissionRaw\": 114533, \"acRate\": \"59.4%\"}",
        "hints": []
      },
      "similar": [],
      "hints": [],
      "relatedTopics": [
        { "name": "Array", "slug": "array" },
        { "name": "Design", "slug": "design" },
        { "name": "Counting", "slug": "counting" },
        { "name": "Iterator", "slug": "iterator" }
      ]
    }
  }
}
