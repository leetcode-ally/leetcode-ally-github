{
    "SDE Sheet": [
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-an-n-x-m-integer-matrix-if-an-element-is-0-set-its-entire-row-and-column-to-0-39-s-and-return-the-matrix-in-particular-your-task-is-to-modify-it-in-such-a-way-that-if-a-cell-has-a-value-0-matrix-i-j-0-then-all-the-cells-of-the-ith-row-and-jth-column-should-be-changed-to-0\">Given an \u2018N\u2019 x \u2018M\u2019 integer matrix, if an element is 0, set its entire row and column to 0's, and return the matrix. In particular, your task is to modify it in such a way that if a cell has a value 0 (matrix[i][j] == 0), then all the cells of the ith row and jth column should be changed to 0.</h4>\n\n<h4 id=\"you-must-do-it-in-place\">You must do it in place.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>If the given grid is this:\n[7, 19, 3]\n[4, 21, 0]\n\nThen the modified grid will be:\n[7, 19, 0]\n[0, 0,  0]\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of the input contains a single integer \u2018T\u2019 representing the no. of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019, denoting the no. of the rows and columns of the matrix.\n\nThe next 'N' lines will contain \u2018M\u2019 space separated integers representing the elements of the matrix.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print the modified grid.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 \u2264 T \u2264 1000\n1 \u2264 m, n \u2264 1000\n\u03a3(m * n) \u2264 2000000\n-2^(31) \u2264 matrix[i][j] \u2264 2^(31)-1, for all (1 \u2264 i \u2264 n and 1 \u2264 j \u2264 m).\n\nTime Limit: 1 sec\n</code></pre>\n\n<h4 id=\"follow-up\">Follow up:</h4>\n\n<pre><code>Can we do better than O(m * n) space?\nUsing O(m + n) space is an improvement but we can still do better.\nWe can do it using constant memory. Can you do it?\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n2 3\n7 19 3\n4 21 0\n3 3\n1 2 3\n4 0 6\n7 8 9\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>7 19 0\n0 0 0\n1 0 3\n0 0 0\n7 0 9\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>For First Case - Similar to the example explained above. \n\nFor Second Case - \nOnly the cell (2,2) has zero. So all the elements of the second row and second column are changed to zeros.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n4 2\n1 0\n2 7\n3 0\n4 8\n3 3\n0 2 3\n1 0 3\n1 2 0\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>0 0\n2 0\n0 0\n4 0\n0 0 0\n0 0 0\n0 0 0\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 1,
        "link": "https://www.codingninjas.com/codestudio/problems/set-matrix-zeros_3846774?topList=striver-sde-sheet-problems",
        "title": "Set Matrix Zeros",
        "solution": "/*\n    Time Complexity: O(N * M) \n    Space Complexity:O(1) \n    Where N & M are dimensions of the given matrix.\n*/\nvoid setZeros(vector<vector<int>> &matrix)\n{\n    // Storing dimensions of matrix in n and m.\n    int n = matrix.size();\n    int m = matrix[0].size();\n    // Declaring two boolean variables firstColZero and firstRowZero.\n    bool firstColZero = false, firstRowZero = false;\n    for(int i = 0; i < n; i++) {\n        if(matrix[i][0] == 0) {\n            firstColZero = true;\n            break;\n        }\n    }\n    // Setting firstRowZero to true if any element in first row is zero.\n    for(int j = 0; j < m; j++) {\n        if(matrix[0][j] == 0) {\n            firstRowZero = true;\n            break;\n        }\n    }\n    // Setting values for each row and column to be zero or not.\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            if(matrix[i][j] == 0) {\n                matrix[i][0] = matrix[0][j] = 0;\n            }\n        }\n    }\n    // If any element of first row is zero then that complete column should be zero and vice-versa.\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            if(matrix[i][0] == 0 || matrix[0][j] == 0) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n    // Setting first row to zero if firstRowZero is true.\n    if(firstColZero) {\n        for(int i = 0; i < n; i++) {\n            matrix[i][0] = 0;\n        }\n    }\n    // Setting first column to zero if firstColZero is true.\n    if(firstRowZero) {\n        for(int j = 0; j < m; j++) {\n            matrix[0][j] = 0;\n        }\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-integer-n-your-task-is-to-return-a-2-d-arraylist-containing-the-pascal-s-triangle-till-the-row-n\">You are given an integer N. Your task is to return a 2-D ArrayList containing the pascal\u2019s triangle till the row N.</h4>\n\n<h4 id=\"a-pascal-39-s-triangle-is-a-triangular-array-constructed-by-summing-adjacent-elements-in-preceding-rows-pascal-39-s-triangle-contains-the-values-of-the-binomial-coefficient-for-example-in-the-figure-below\">A Pascal's triangle is a triangular array constructed by summing adjacent elements in preceding rows. Pascal's triangle contains the values of the binomial coefficient. For example in the figure below.</h4>\n\n<p><img src=\"https://files.codingninjas.in/image1-7089.png\" alt=\"\"></p>\n\n<h4 id=\"for-example-given-integer-n-4-then-you-have-to-print\">For example, given integer N= 4 then you have to print.</h4>\n\n<pre><code>1  \n1 1 \n1 2 1 \n1 3 3 1\n\nHere for the third row, you will see that the second element is the summation of the above two-row elements i.e. 2=1+1, and similarly for row three 3 = 1+2 and 3 = 1+2.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe first line of each test case contains a single integer N denoting the row till which you have to print the pascal\u2019s triangle.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the 2-D array/list containing the pascal\u2019s triangle till the row N.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 40\n1 &lt;= N &lt;= 50\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>3\n1\n2\n3\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1\n1 \n1 1 \n1 \n1 1 \n1 2 1 \n</code></pre>\n\n<h5>Explanation of The Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nThe given integer N = 1 you have to print the triangle till row 1 so you just have to output 1.\n\nFor the second test case:\nThe given integer N = 2 you have to print the triangle till row 2 so you have to output \n1\n1 1\n\nFor the third test case\nThe given integer N = 3 you have to print the triangle till row 3 so you have to output \n1\n1 1\n1 2 1\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>3\n4\n5\n6\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1 \n1 1 \n1 2 1\n1 3 3 1 \n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1\n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1\n1 5 10 10 5 1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 2,
        "link": "https://www.codingninjas.com/codestudio/problems/pascal-s-triangle_1089580?topList=striver-sde-sheet-problems",
        "title": "Pascal's Triangle",
        "solution": "/*\n\tTime Complexity: O(N^2)\n\tSpace complexity: O(1)\n\t\n\tWhere N denotes the number of Rows.\n*/\n\n#include<vector>\n\nvector < vector < long long int >> printPascal(int n) {\n    vector < vector < long long int >> triangle;\n    vector < long long int > temp;\n\n    for (int i = 1; i <= n; i++) {\n        long long int rCe = 1;\n        temp.clear();\n        for (int j = 1; j <= i; j++) {\n            temp.push_back(rCe);\n            rCe = rCe * (i - j) / j;\n        }\n\n        triangle.push_back(temp);\n    }\n    return triangle;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-permutation-of-n-integers-a-sequence-of-n-integers-is-called-a-permutation-if-it-contains-all-integers-from-1-to-n-exactly-once-your-task-is-to-rearrange-the-numbers-and-generate-the-lexicographically-next-greater-permutation\">You have been given a permutation of \u2018N\u2019 integers. A sequence of \u2018N\u2019 integers is called a permutation if it contains all integers from 1 to \u2018N\u2019 exactly once. Your task is to rearrange the numbers and generate the lexicographically next greater permutation.</h4>\n\n<h4 id=\"to-determine-which-of-the-two-permutations-is-lexicographically-smaller-we-compare-their-first-elements-of-both-permutations-if-they-are-equal-compare-the-second-and-so-on-if-we-have-two-permutations-x-and-y-then-x-is-lexicographically-smaller-if-x-i-lt-y-i-where-i-is-the-first-index-in-which-the-permutations-x-and-y-differ\">To determine which of the two permutations is lexicographically smaller, we compare their first elements of both permutations. If they are equal \u2014 compare the second, and so on. If we have two permutations X and Y, then X is lexicographically smaller if X[i]\u2009&lt;\u2009Y[i], where \u2018i\u2019 is the first index in which the permutations X and Y differ.</h4>\n\n<h4 id=\"for-example-2-1-3-4-is-lexicographically-smaller-than-2-1-4-3\">For example, [2, 1, 3, 4] is lexicographically smaller than [2, 1, 4, 3].</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain an integer \u2018N\u2019 representing the length of the permutation.\n\nThe second line contains \u2018N\u2019 space-separated integers which are the elements of the permutation.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the elements of the lexicographically next greater permutation with a single space-separated. If lexicographically next greater permutation doesn\u2019t exist, print the lexicographically smallest permutation.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n1 &lt;= P[i] &lt;= N\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2 3\n5\n2 3 1 4 5\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 3 2\n2 3 1 5 4\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the lexicographically next greater permutation is [1, 3, 2].\n\nIn the second test case, the lexicographically next greater permutation is [2, 3, 1, 4, 5].\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 2\n3\n3 1 2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2 1\n3 2 1\n</code></pre>\n\n<h5>Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the lexicographically next greater permutation is [2, 1].\n\nIn the second test case, the lexicographically next greater permutation is [3, 2, 1].\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 3,
        "link": "https://www.codingninjas.com/codestudio/problems/next-permutaion_893046?topList=striver-sde-sheet-problems",
        "title": "Next Permutation",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    Where 'N' is the length of the given permutation.\n*/\nvector<int> nextPermutation(vector<int> &permutation, int n)\n{\n    // Start iterating from the end of the given permutation.\n    for (int i = n - 2; i >= 0; i--)\n    {\n        if (permutation[i] < permutation[i + 1])\n            // To store the index of just greater element.\n            int id = n - 1;\n            // Iterating to find the just greater element.\n            for (int j = i + 1; j < n; j++)\n            {\n                if (permutation[j] < permutation[i])\n                {\n                    // Element found.\n                    id = j - 1;\n                    break;\n                }\n            }\n            // Swap the ith and element at index 'id'.\n            swap(permutation[i], permutation[id]);\n            // Reverse rest of the elements.\n            for (int j = 0; j < (n - i) / 2; j++)\n            {\n                swap(permutation[i + 1 + j], permutation[n - 1 - j]);\n            }\n            return permutation;\n        }\n    }\n    // Next greater permuation doesn't exists. So, return the smallest one.\n    for (int i = 0; i < n; i++)\n    {\n        permutation[i] = i + 1;\n    }\n    return permutation;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-arr-of-length-n-consisting-of-integers-you-have-to-find-the-sum-of-the-subarray-including-empty-subarray-having-maximum-sum-among-all-subarrays\">You are given an array (ARR) of length N, consisting of integers. You have to find the sum of the subarray <strong>(including empty subarray)</strong> having maximum sum among all subarrays.</h4>\n\n<h4 id=\"a-subarray-is-a-contiguous-segment-of-an-array-in-other-words-a-subarray-can-be-formed-by-removing-0-or-more-integers-from-the-beginning-and-0-or-more-integers-from-the-end-of-an-array\">A subarray is a contiguous segment of an array. In other words, a subarray can be formed by removing 0 or more integers from the beginning, and 0 or more integers from the end of an array.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The sum of an empty subarray is 0.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer N, representing the length of the array.\n\nThe second line of input contains N single space-separated integers, denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>In the only output line, output the maximum subarray sum.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^6\n-10^6 &lt;= A[i] &lt;= 10^6\n\nwhere N is the length of the array.\nA[i] represents the numbers present in the array.\n\nTime limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>9\n1 2 7 -4 3 2 -10 9 1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>11\n</code></pre>\n\n<h5>Explanation for Sample 1 :</h5>\n\n<pre><code>The subarray yielding maximum sum is [1, 2, 7, -4, 3, 2].\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>6\n10 20 -30 40 -50 60\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>60\n</code></pre>\n\n<h5>Sample Input 3 :</h5>\n\n<pre><code>3\n-3 -5 -6\n</code></pre>\n\n<h5>Sample Input 3 :</h5>\n\n<pre><code>0\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 4,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-subarray-sum_630526?topList=striver-sde-sheet-problems",
        "title": "Maximum Subarray Sum",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    where N is the length of the array.\n*/\n#include <algorithm>\nlong long maxSubarraySum(int arr[], int n)\n{\n    long long maxSum = 0, curSum = 0;\n    for(int i=0; i<n; i++)\n    {\n        curSum = max(0ll, curSum + arr[i]);\n        maxSum = max(maxSum, curSum);\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-an-integer-array-list-arr-of-size-39-n-39-it-only-contains-0s-1s-and-2s-write-a-solution-to-sort-this-array-list\">You have been given an integer array/list(ARR) of size 'N'. It only contains 0s, 1s and 2s. Write a solution to sort this array/list.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Try to solve the problem in 'Single Scan'. ' Single Scan' refers to iterating over the array/list just once or to put it in other words, you will be visiting each element in the array/list just once.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an Integer 'N' denoting the size of the array/list.\n\nThe second line of each test case contains 'N' space-separated Integers denoting the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, print the sorted array/list(ARR) as space-separated Integers.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You need to change in the given array/list itself. Hence, no need to return or print anything.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= (5 * (10 ^ 5))\n0 &lt;= ARR[i] &lt;= 2\n\nWhere 'N' is the size of the given array/list.\nAnd, ARR[i] denotes the i-th element in the array/list.\n\nTime Limit: 1sec \n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n6\n0 1 2 2 1 0\n7\n0 1 2 1 2 1 2\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>0 0 1 1 2 2\n0 1 1 1 2 2 2\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n7\n2 2 2 1 1 1 0\n6\n2 1 2 0 1 0\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>0 1 1 1 2 2 2\n0 0 1 1 2 2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 5,
        "link": "https://www.codingninjas.com/codestudio/problems/sort-0-1-2_631055?topList=striver-sde-sheet-problems",
        "title": "Sort 0 1 2",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    Where N is the size of the array.\n*/\n#include <algorithm>\nvoid sort012(int *arr, int n)\n{\n    int i = 0;\n    int nextZero = 0;\n    int nextTwo = n - 1;\n    while (i <= nextTwo)\n    {\n        if (arr[i] == 0)\n            i++;\n            nextZero++;\n        }\n        else if (arr[i] == 2)\n        {\n            swap(arr[i], arr[nextTwo]);\n            nextTwo--;\n        }\n        else\n        {\n            i++;\n        }\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-list-39-prices-39-where-the-elements-of-the-array-represent-the-prices-of-the-stock-as-they-were-yesterday-and-indices-of-the-array-represent-minutes-your-task-is-to-find-and-return-the-maximum-profit-you-can-make-by-buying-and-selling-the-stock-you-can-buy-and-sell-the-stock-only-once\">You are given an array/list 'prices' where the elements of the array represent the prices of the stock as they were yesterday and indices of the array represent minutes. Your task is to find and return the maximum profit you can make by buying and selling the stock. You can buy and sell the stock only once.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You can\u2019t sell without buying first.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For the given array [ 2, 100, 150, 120],\nThe maximum profit can be achieved by buying the stock at minute 0 when its price is Rs. 2 and selling it at minute 2 when its price is Rs. 150.\nSo, the output will be 148.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019, representing the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the given array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the maximum profit you can achieve. If the maximum profit is negative, print 0.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n4\n2 2 2 2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h5>Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, it\u2019s optimal to buy the stock at minute 0 and sell it at minute 3 to get a maximum profit of 3.\n\nFor the second test case, the maximum profit will be 0 for all possible ways of buying and selling stock.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n6\n17 20 11 9 12 6\n4\n98 101 66 72\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>3\n6\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 6,
        "link": "https://www.codingninjas.com/codestudio/problems/stocks-are-profitable_893405?topList=striver-sde-sheet-problems",
        "title": "Best Time to Buy and Sell Stock",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    Where N is the size of the array.\n*/\nint maximumProfit(vector<int> &prices){\n    // Variables to store the buying price and maximum profit\n    int buy = prices[0],maxProfit = 0;\n    int n = prices.size();\n    // Iterating over the array\n    for(int i = 1; i < n; i++){\n        /*\n            we will update buying price as the current price.\n        */\n        if(prices[i] < buy){\n            buy = prices[i];\n        }\n        /*\n            Else if selling at this price is more profitable,\n            then we will update out maximum profit.\n        */\n        else if( (prices[i] - buy) > maxProfit){\n            maxProfit = prices[i] - buy;\n        }\n    }\n    return maxProfit;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-2-dimensional-matrix-of-size-n-x-m-rotate-the-elements-of-the-matrix-clockwise\">Given a 2-dimensional matrix of size \u2018N\u2019 x \u2018M\u2019, rotate the elements of the matrix clockwise.</h4>\n\n<pre><code>For example: \nInput Matrix: [ [ 1, 2, 3 ] \n                [ 4, 5, 6 ] \n                [ 7, 8, 9 ] ]\n\nOutput Matrix: [ [ 4, 1, 2 ] \n                 [ 7, 5, 3 ] \n                 [ 8, 9, 6 ] ]\n\nThe output matrix is generated by rotating the elements of the input matrix in a clockwise direction. Note that every element is rotated only once. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Also, update the given matrix in-place.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains two single-spaced integers N and M, representing the number of rows and columns of the matrix, respectively.\n\nThe next N line contains M single-spaced integers denoting the matrix elements. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, the modified matrix is printed.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N, M &lt;= 100\n-10^5 &lt;= data &lt;= 10^5,\n\nwhere \u2018T\u2019 is the number of test cases,  \u2018N\u2019 and \u2018M\u2019 are the numbers of rows and columns respectively and \u2018data\u2019 is the value of the elements of the matrix.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>5 1 2 3\n9 10 6 4\n13 11 7 8\n14 15 16 12\n</code></pre>\n\n<h5>Explanation of Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/family-6635.png\" alt=\"\"></p>\n\n<pre><code>The resulting matrix after rotating the given matrix clockwise is shown above. \n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n1 3\n4 5\n3 3\n3 4 5\n5 6 7\n8 10 20\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>4 1\n5 3\n5 3 4\n8 6 5\n10 20 7 \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 7,
        "link": "https://www.codingninjas.com/codestudio/problems/rotate-matrix_981260?topList=striver-sde-sheet-problems",
        "title": "Rotate Matrix",
        "solution": "/*\n    Time Complexity: O(N * M)\n    Space Complexity: O(1)\n    Where N, M are the number of rowStarts and the number of colStartumns of the matrix, \n    respectively. \n*/\nvoid rotateMatrix(vector<vector<int>> &mat, int n, int m)\n{\n    // Index of starting row and column\n    int rowStart = 0, colStart = 0; \n    while (rowStart < n && colStart < m) \n    { \n        // If we have rotated the whole matrix\n        if (rowStart == n - 1 || colStart == m - 1)\n        { \n            break; \n        }\n        // Store the first element of next rown as this element will replace the first element of current row\n        previous = mat[rowStart + 1][colStart]; \n        // Move elements of first row from the remaining rows\n        for (int i = colStart; i < m; i++) \n        { \n            current = mat[rowStart][i]; \n            mat[rowStart][i] = previous; \n            previous = current; \n        } \n        rowStart++; \n        // Move elements of last column from the remaining columns \n        for (int i = rowStart; i < n; i++) \n        { \n            current = mat[i][m-1]; \n            mat[i][m-1] = previous; \n            previous = current; \n        } \n        m--; \n        // Move elements of last rowStart from the remaining rows \n        if (rowStart < n) \n        { \n            for (int i = m-1; i >= colStart; i--) \n            { \n                current = mat[n-1][i]; \n                mat[n-1][i] = previous; \n                previous = current; \n            } \n        } \n        n--; \n        // Move elements of first column from the remaining rows \n        if (colStart < m) \n        { \n            for (int i = n-1; i >= rowStart; i--) \n            { \n                current = mat[i][colStart]; \n                mat[i][colStart] = previous; \n                previous = current; \n            } \n        } \n        colStart++; \n    } \n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-n-number-of-intervals-where-each-interval-contains-two-integers-denoting-the-start-time-and-the-end-time-for-the-interval\">You are given N number of intervals, where each interval contains two integers denoting the start time and the end time for the interval.</h4>\n\n<h4 id=\"the-task-is-to-merge-all-the-overlapping-intervals-and-return-the-list-of-merged-intervals-sorted-by-increasing-order-of-their-start-time\">The task is to merge all the overlapping intervals and return the list of merged intervals sorted by increasing order of their start time.</h4>\n\n<h4 id=\"two-intervals-a-b-and-c-d-are-said-to-be-overlapping-with-each-other-if-there-is-at-least-one-integer-that-is-covered-by-both-of-them\">Two intervals [A,B] and [C,D] are said to be overlapping with each other if there is at least one integer that is covered by both of them.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For the given 5 intervals - [1, 4], [3, 5], [6, 8], [10, 12], [8, 9].\n\nSince intervals [1, 4] and [3, 5] overlap with each other, we will merge them into a single interval as [1, 5].\n\nSimilarly, [6, 8] and [8, 9] overlap, merge them into [6,9].\n\nInterval [10, 12] does not overlap with any interval.\n\nFinal List after merging overlapping intervals: [1, 5], [6, 9], [10, 12].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer N, the number of intervals.\n\nThe second line of input contains N integers, i.e. all the start times of the N intervals.\n\nThe third line of input contains N integers, i.e. all the end times of the N intervals.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print S lines, each contains two single space-separated integers A, and B, where S is the size of the merged array of intervals, 'A' is the start time of an interval and 'B' is the end time of the same interval.\n</code></pre>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5 \n0 &lt;= START, FINISH &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 3\n3 5\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 5  \n</code></pre>\n\n<h5>Explanation for Sample Input 1</h5>\n\n<pre><code>Since these two intervals overlap at point 3 so we merge them and the new interval becomes (1,5).\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>5\n1 3 6 8 10\n4 5 8 9 12\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 5\n6 9\n10 12\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 8,
        "link": "https://www.codingninjas.com/codestudio/problems/merge-intervals_699917?topList=striver-sde-sheet-problems",
        "title": "Merge Intervals",
        "solution": "/*\n    Time Complexity: O(N * log(N))\n    Space Complexity: O(1)\n    Where N is the number of intervals.\n*/\n#include <algorithm>\nvector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)\n{\n    int n = intervals.size();\n    sort(intervals.begin(), intervals.end());\n    vector<vector<int>> res;\n    for (int i = 0; i < n; i++)\n    {\n        // If current interval doesn't overlap with the previous interval.\n        if (res.size() == 0 || curS > res[res.size() - 1][1]) \n        {\n            res.push_back(intervals[i]);\n        }\n        // If current interval overlaps with the previous interval.\n        else \n        {\n            res[res.size() - 1][1] = max(res[res.size() - 1][1], curE);\n        }\n    }\n    return res;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-has-been-given-two-sorted-integer-arrays-lists-arr1-and-arr2-of-size-m-and-n-ninja-has-to-merge-these-sorted-arrays-lists-into-arr1-as-one-sorted-array-you-may-have-to-assume-that-arr1-has-a-size-equal-to-m-n-such-that-arr1-has-enough-space-to-add-all-the-elements-of-arr2-in-arr1\">Ninja has been given two sorted integer arrays/lists \u2018ARR1\u2019 and \u2018ARR2\u2019 of size \u2018M\u2019 and \u2018N\u2019. Ninja has to merge these sorted arrays/lists into \u2018ARR1\u2019 as one sorted array. You may have to assume that \u2018ARR1\u2019 has a size equal to \u2018M\u2019 + \u2018N\u2019 such that \u2018ARR1\u2019 has enough space to add all the elements of \u2018ARR2\u2019 in \u2018ARR1\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>\u2018ARR1\u2019 = [3 6 9 0 0]\n\u2018ARR2\u2019 = [4 10]\nAfter merging the \u2018ARR1\u2019 and \u2018ARR2\u2019 in \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [3 4 6 9 10]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019, which represent the size of \u2018ARR1\u2019 and \u2018ARR2\u2019.\n\nThe next lines of each test case contain \u2018M\u2019 space-separated integers and \u2018N\u2019 zeros (i.e. 0) which represent the number of elements in \u2018ARR1\u2019.\n\nThe next lines of each test case contain \u2018N\u2019 space-separated integers which represent the number of elements in \u2018ARR2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the \u2018ARR1\u2019 after merging.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018M\u2019, \u2018N\u2019 &lt;= 5000\n1 &lt;= \u2018ARR1[i], ARR2[i]\u2019 &lt;= 100000\n\nTime Limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3 2\n1 2 3 0 0 \n4 5\n4 2\n1 4 6 10 0 0\n2 5\n</code></pre>\n\n<h4>Sample Output 1:</h4>\n\n<pre><code>1 2 3 4 5\n1 2 4 5 6 10\n</code></pre>\n\n<h4>Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 2 3 4 5]\n\nFor sample test case 2: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 2 4 5 6 10] \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2 3\n1 10 0 0 0 \n3 8 11\n3 3\n3 4 6 0 0 0\n1 8 10\n</code></pre>\n\n<h4>Sample Output 2:</h4>\n\n<pre><code>1 3 8 10 11\n1 3 4 6 8 10 \n</code></pre>\n\n<h4>Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 3 8 10 11]\n\nFor sample test case 2: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 3 4 6 8 10]\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 9,
        "link": "https://www.codingninjas.com/codestudio/problems/ninja-and-sorted-arrays_1214628?topList=striver-sde-sheet-problems",
        "title": "Merge Two Sorted Arrays",
        "solution": "/*\n    Time complexity: O(M+N)\n    Space complexity: O(1)\n    Where M and N are the number of elements in ARR1 and ARR2 respectively.\n*/\nvector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {\n    int i = m - 1;\n    int j = n - 1;\n    int lastIndex = m + n - 1;\n    while (j >= 0) {\n        if (i >= 0 && arr1[i] > arr2[j]) {\n        } else {\n            arr1[lastIndex] = arr2[j];\n            j--;\n        }\n        lastIndex--;\n    }\n    return arr1;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-of-integers-39-arr-39-containing-n-elements-each-integer-is-in-the-range-1-n-1-with-exactly-one-element-repeated-in-the-array\">You are given an array of integers 'ARR' containing N elements. Each integer is in the range [1, N-1], with exactly one element repeated in the array.</h4>\n\n<h4 id=\"your-task-is-to-find-the-duplicate-element-the-duplicate-element-may-be-repeated-more-than-twice-in-the-error-but-there-will-be-exactly-one-element-that-is-repeated-in-the-array\">Your task is to find the duplicate element. The duplicate element may be repeated more than twice in the error, but there will be exactly one element that is repeated in the array.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>All the integers in the array appear only once except for precisely one integer which appears two or more times.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then the T test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019, the number of elements in the array. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the array. \n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, the duplicate element of the given array is printed.\n\nThe output of each test case is printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not supposed to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n1 &lt;= ARR[i] &lt;= N - 1\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample Input 1:</h4>\n\n<pre><code>1\n3\n1 1 2\n</code></pre>\n\n<h4>Sample Output 1:</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4>Explanation of Sample Input 1:</h4>\n\n<pre><code>1 is repeated in the array, hence function returns 1.\n</code></pre>\n\n<h4>Sample Input 2:</h4>\n\n<pre><code>3\n5\n1 3 4 2 2\n5\n3 1 3 4 2\n3\n1 1 1\n</code></pre>\n\n<h4>Sample Output 2:</h4>\n\n<pre><code>2\n3\n1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 10,
        "link": "https://www.codingninjas.com/codestudio/problems/find-duplicate-in-array_1112602?topList=striver-sde-sheet-problems",
        "title": "Find Duplicate in Array",
        "solution": "/*\n    Time complexity: O(N) \n    Space complexity: O(1)\n    Where N is the length of the array.\n*/\nint findDuplicate(vector<int> &arr, int n)\n{\n    // Initialise tortoise and hare pointers.\n    int tortoise = arr[0];\n    int hare = arr[0];\n    do \n    {\n        tortoise = arr[tortoise];\n        hare = arr[arr[hare]];\n    } \n    // Find the intersection point of the two runners.\n    while (tortoise != hare);\n    // To find the entrance to the cycle tortoise begins from start of array while hare begins from intersection point.\n    tortoise = arr[0];\n    while (tortoise != hare) \n    {\n      // This time both runners move with same speed.\n      tortoise = arr[tortoise];\n      hare = arr[hare];\n    }\n    // Return the entrance to the cycle, which will be the repeated element.\n    return hare;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-of-size-n-the-elements-of-the-array-are-in-the-range-from-1-to-n\">You are given an array of size \u2018N\u2019. The elements of the array are in the range from 1 to \u2018N\u2019.</h4>\n\n<h4 id=\"ideally-the-array-should-contain-elements-from-1-to-n-but-due-to-some-miscalculations-there-is-a-number-r-in-the-range-1-n-which-appears-in-the-array-twice-and-another-number-m-in-the-range-1-n-which-is-missing-from-the-array\">Ideally, the array should contain elements from 1 to \u2018N\u2019. But due to some miscalculations, there is a number R in the range [1, N] which appears in the array twice and another number M in the range [1, N] which is missing from the array.</h4>\n\n<h4 id=\"your-task-is-to-find-the-missing-number-m-and-the-repeating-number-r\">Your task is to find the missing number (M) and the repeating number (R).</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider an array of size six. The elements of the array are { 6, 4, 3, 5, 5, 1 }. \nThe array should contain elements from one to six. Here, 2 is not present and 5 is occurring twice. Thus, 2 is the missing number (M) and 5 is the repeating number (R). \n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you do this in linear time and constant additional space? \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\nThe first line of every test case contains an integer \u2018N\u2019 denoting the size of the array.\nThe second line of every test case contains \u2018N\u2019 space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print the missing number (M) and the repeating number (R) separated by a single space. \nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \nYou have to return a pair whose first element is the missing number \u2018M\u2019 and the second element is the repeating number \u2018R\u2019. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n2 &lt;= N &lt;= 5 * 10^4\n1 &lt;= data &lt;= N\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array and \u2018data\u2019 denotes the value of the elements of the array. \n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1 \n5\n1 3 5 4 4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2 4\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>As we can clearly see, among all the numbers from 1 to 5, 2 is not present and 4 is occurring twice. Thus, 2 and 4 are missing and repeating numbers respectively. \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n10\n4 5 2 9 8 1 1 7 10 3\n7\n7 5 3 2 1 6 6 \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>6 1 \n4 6\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 11,
        "link": "https://www.codingninjas.com/codestudio/problems/missing-and-repeating-numbers_873366?topList=striver-sde-sheet-problems",
        "title": "Missing and repeating numbers",
        "solution": "/*\n    Time complexity: O(N) \n    Space complexity: O(1)\n    Where N is the length of the given array. \n*/\npair<int,int> missingAndRepeating(vector<int> &arr, int n)\n{\n    int findXOR = 0;\n    // calculating the XOR of all the numbers from 1 to n\n    for(int i  = 1; i <= n; i += 1)\n    {\n    // calculating the XOR of all the elements of the array\n    for(int i  = 0; i < n; i += 1)\n    {\n        findXOR ^= arr[i];\n    }\n    // last set bit of findXOR\n    int bitIndex = findXOR & ~(findXOR - 1); \n    int bitSet = 0, bitNotSet = 0;\n    // dividing the elements of the array in two sets, bitSet and bitNotSet\n    for (int i = 0; i < n; i++) \n    { \n        if (arr[i] & bitIndex) \n        {\n            bitSet = bitSet ^ arr[i];\n        }\n        else\n        {\n            bitNotSet = bitNotSet ^ arr[i]; \n        }\n    } \n    // dividing the elements from 1 to n in two sets\n    for (int i = 1; i <= n; i++) \n    { \n        if (i & bitIndex) \n        {\n            bitSet = bitSet ^ i; \n        }\n        else\n        {\n            bitNotSet = bitNotSet ^ i; \n        }\n    } \n    int m, r;\n    for(int i = 0; i < n; i += 1)\n    {\n        // if bitSet is present in the array, it is the repeating number and bitNotSet is the missing number\n        if(bitSet == arr[i])\n        {\n            r = bitSet ; \n            m = bitNotSet;\n            break;\n        }\n        // if bitNotSet is present in the array, it is the repeating number and bitSet is the missing number\n        if(bitNotSet == arr[i])\n        {\n            r = bitNotSet;\n            m = bitSet;\n            break;\n        }\n    }\n    pair<int, int>ans;\n    ans.first = m;\n    ans.second = r;\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"for-a-given-integer-array-list-39-arr-39-of-size-39-n-39-containing-all-distinct-values-find-the-total-number-of-39-inversions-39-that-may-exist\">For a given integer array/list 'ARR' of size 'N' containing all distinct values, find the total number of 'Inversions' that may exist.</h4>\n\n<h4 id=\"an-inversion-is-defined-for-a-pair-of-integers-in-the-array-list-when-the-following-two-conditions-are-met\">An inversion is defined for a pair of integers in the array/list when the following two conditions are met.</h4>\n\n<pre><code>A pair ('ARR[i]', 'ARR[j]') is said to be an inversion when:\n\n1. 'ARR[i] &gt; 'ARR[j]' \n2. 'i' &lt; 'j'\n\nWhere 'i' and 'j' denote the indices ranging from [0, 'N').\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer 'N', denoting the size of the array.\n\nThe second line of input contains 'N' integers separated by a single space, denoting the elements of the array 'ARR'.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print a single line containing a single integer that denotes the total count of inversions in the input array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything, it has been already taken care of. Just implement the given function.  \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5 \n1 &lt;= ARR[i] &lt;= 10^9\n\nWhere 'ARR[i]' denotes the array element at 'ith' index.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>3\n3 2 1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation of Sample Output 1:</h5>\n\n<pre><code>We have a total of 3 pairs which satisfy the condition of inversion. (3, 2), (2, 1) and (3, 1).\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>5\n2 5 1 3 4\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5>Explanation of Sample Output 1:</h5>\n\n<pre><code>We have a total of 4 pairs which satisfy the condition of inversion. (2, 1), (5, 1), (5, 3) and (5, 4).\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 12,
        "link": "https://www.codingninjas.com/codestudio/problems/count-inversions_615?topList=striver-sde-sheet-problems",
        "title": "Count Inversions",
        "solution": "/*\n    Time Complexity : O(N*log(N))\n    Space Complexity : O(N)\n    Where, N is the size of the array.\n*/\n#include <vector>\n#include <algorithm>\nvoid fenwickUpdate(int index, int siz, vector<long long> &fenwick)\n{\n    while (index <= siz)\n    {\n        // Update the current element in the fenwick vector.\n        fenwick[index] += 1;\n        index = index + (index & (-index));\n    }\n}\nlong long fenwickSum(int index, vector<long long> &fenwick)\n{\n    long long sum = 0;\n    while (index > 0)\n    {\n        // Add the value of current node in sum.\n        sum += fenwick[index];\n        // Move to the parent node of the current node.\n        index = index - (index & (-index));\n    }\n    return sum;\n}\nlong long getInversions(long long *arr, int n) {\n    // Take a 2D vector to store the sorted array and their initial index.\n    vector<vector<int>> mapping(n, vector<int>(2));\n    vector<long long> fenwick(n + 1, 0), mask(n);\n    for (int i = 0; i < n; i++) {\n        mapping[i][0] = arr[i];\n        mapping[i][1] = i;\n    }\n    // Sort the mapping array and update all the permutations to mask vector.\n    sort(mapping.begin(), mapping.end());\n    for (int i = 0; i < n; i++) {\n        mask[mapping[i][1]] = i + 1;\n    }\n    long long answer = 0;\n    for (int i = n - 1; i >= 0; i--) {\n        // Calculate the number of elements greater than the current element.\n        answer += fenwickSum(mask[i] - 1, fenwick);\n        // Update the element that has been visited.\n        fenwickUpdate(mask[i], n, fenwick);\n    }\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-2-d-array-39-mat-39-of-size-m-x-n-where-39-m-39-and-39-n-39-denote-the-number-of-rows-and-columns-respectively-the-elements-of-each-row-are-sorted-in-non-decreasing-order\">You have been given a 2-D array 'MAT' of size M x N where 'M' and 'N' denote the number of rows and columns, respectively. The elements of each row are sorted in non-decreasing order.</h4>\n\n<h4 id=\"moreover-the-first-element-of-a-row-is-greater-than-the-last-element-of-the-previous-row-if-exists\">Moreover, the first element of a row is greater than the last element of the previous row (if exists).</h4>\n\n<h4 id=\"you-are-given-an-integer-39-target-39-and-your-task-is-to-find-if-it-exists-in-the-given-39-mat-39-or-not\">You are given an integer 'TARGET' and your task is to find if it exists in the given 'MAT' or not.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Given Matrix : 1 1 and Target : 8\n               4 8 \n\nThe output should be \"TRUE\" as 8 is present in the Matrix.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases Then the test case follows :\n\nThe first line of each test case contains three space-separated integers 'M', 'N' and 'TARGET' where 'M' and 'N' denote the number of rows and columns of the 'MAT', respectively and 'TARGET' is the integer to be found.\n\nFrom the second line of each test case, the next 'N' lines represent the rows of the 'MAT'. Every row contains 'M' single space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u201cTRUE\u201d if 'TARGET' is present in the 'MAT', else print \u201cFALSE\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 50\n-10^5 &lt;= MAT[i], TARGET &lt;= 10^5\n\nTime Limit : 1 sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this problem in less than O(M*N) time complexity ?\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3 4 8\n1 2 3 4\n5 6 7 8\n9 10 11 12\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>TRUE\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h4>\n\n<pre><code>The 'TARGET' = 8 exists in the 'MAT' at index (1, 3).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3 78\n1 2 4 \n6 7 8\n9 10 34\n2 2 8\n1 1\n4 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>FALSE\nTRUE\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h4>\n\n<pre><code>The 'TARGET' = 78 do not exists in the 'MAT'.\nThe 'TARGET' = 8 exists in the 'MAT' at index (1, 1).\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"></div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 13,
        "link": "https://www.codingninjas.com/codestudio/problems/search-in-a-2d-matrix_980531?topList=striver-sde-sheet-problems",
        "title": "Search In A 2D Matrix",
        "solution": "/*\n    Time Complexity : O(log(M*N))\n    Space Complexity : O(1)\n    Where M and N denote the number of rows and columns \n*/\n#include <vector>\nbool findTargetInMatrix(vector < vector < int > > & mat, int m, int n, int target) {\n    int start = 0, end = m * n - 1;\n    // Binary search.\n    while (start <= end) {\n        int mid = start + (end - start) / 2;\n        int val = mat[mid / n][mid % n];\n            end = mid - 1;\n        } else if (target > val) {\n            start = mid + 1;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-three-integers-39-x-39-39-n-39-and-39-m-39-your-task-is-to-find-39-x-39-39-n-39-39-m-39-a-b-is-defined-as-a-raised-to-power-b-and-a-c-is-the-remainder-when-a-is-divided-by-c\">You are given a three integers 'X', 'N', and 'M'. Your task is to find ('X' ^ 'N') % 'M'. A ^ B is defined as A raised to power B and A % C is the remainder when A is divided by C.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer 'T', representing the number of test cases. \n\nThe first line of each test contains three space-separated integers 'X', 'N', and 'M'.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return a single line containing the value of ('X' ^ 'N') % 'M'.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve the problem in O(log 'N') time complexity and O(1) space complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= X, N, M &lt;= 10^9\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2 \n3 1 2\n4 3 10\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1\n4\n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, \nX = 3, N = 1, and M = 2 \nX ^ N = 3 ^ 1 = 3 \nX ^ N % M = 3 % 2 = 1. \nSo the answer will be 1.\n\nIn test case 2,\nX = 4, N = 3, and M = 10 \nX ^ N = 4 ^ 3 = 64 \nX ^ N % M = 64 % 10 = 4. \nSo the answer will be 4.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n5 2 10 \n2 5 4\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>5\n0\n</code></pre>\n\n<h5>Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, \nX = 5, N = 2, and M = 10 \nX^N = 5^2 = 25 \nX^N %M = 25 % 10 = 5. \nSo the answer will be 5.\n\nIn test case 2,\nX = 2, N = 5, and M = 4 \nX^N = 2^5 = 32 \nX^N %M = 32 % 4 = 0. \nSo the answer will be 0.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 14,
        "link": "https://www.codingninjas.com/codestudio/problems/modular-exponentiation_1082146?topList=striver-sde-sheet-problems",
        "title": "Modular Exponentiation",
        "solution": "/*\n    Time Complexity  : O(log N)\n    Space Complexity : O(1)\n    Where 'N' is the number given in the problem.\n*/\nint modularExponentiation(int x, int n, int m) {\n    // Declare a variable to store our result and initialize it with 1.\n    int answer = 1;\n    // Run a loop until 'N' > 0.\n    while (n > 0) {\n        // If bitwise and of 'N' with 1 is 1 then multiply answer with 'X'.\n        if (n & 1)  {\n        // Do modular squaring of 'X'.\n        x = (1LL * x * x ) % m;\n        // Right shift 'N' by 1 bit for next iteration.\n        n >>= 1;\n    }\n    // Return the answer.\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-an-array-list-39-arr-39-consisting-of-39-n-39-integers-your-task-is-to-find-the-majority-element-in-the-array-if-there-is-no-majority-element-present-print-1\">You have been given an array/list 'ARR' consisting of 'N' integers. Your task is to find the majority element in the array. If there is no majority element present, print -1.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A majority element is an element that occurs more than floor('N' / 2) times in the array.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases.\n\nThe first line of each test case contains a single positive integer \u2018N\u2019 representing the size of the array/list.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers representing the array elements of 'ARR'.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the majority element present in the array. Print-1 in case of no majority element.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5 * 10^3\n-10^5 &lt;= ARR[i] &lt;= 10^5\n\nWhere 'ARR[i]' denotes the element at the 'i'th index in the array/list 'ARR'.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n5\n2 3 9 2 2\n4\n8 5 1 9 \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n-1\n</code></pre>\n\n<h4>Explanation of Sample Output 1:</h4>\n\n<pre><code>In test case 1, frequencies of occurrences of different elements are:\n\n2 \u2192 3 times\n3 \u2192 1 time\n9 \u2192 1 time\n\nAs 2 occurs more than floor(5/2) (i.e. floor(2.5) = 2) times, it is the majority element.\n\nIn test case 2, frequencies of occurrences of different elements are:\n\n8 \u2192 1 time\n5 \u2192 1 time\n1 \u2192 1 time\n9 \u2192 1 time\n\nAs no element occurs more than floor(4/2) = 2 times. Thus No majority element is present.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n7\n8 8 8 8 8 9 1 \n4\n2 2 3 3\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>8\n-1\n</code></pre>\n\n<h5>Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, frequencies of occurrences of different elements are:\n\n8 \u2192 5 times\n9 \u2192 1 time\n1 \u2192 1 time\n\nAs 8 occurs more than floor(7/2) (i.e. floor(3.5) = 3) times, it is the majority element.\n\nIn test case 2, frequencies of occurrences of different elements are:\n\n2 \u2192 2 times\n3 \u2192 2 times\n\nAs no element occurs more than floor(4/2) = 2 times. Thus No majority element is present.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 15,
        "link": "https://www.codingninjas.com/codestudio/problems/majority-element_842495?topList=striver-sde-sheet-problems",
        "title": "Majority element",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    Where 'N' is the size of array/list.\n*/\nint findMajorityElement(int arr[], int n) { \n    // Variable to store the majority element in the array, it it is present.\n    int majorityElement = -1;\n    int count = 0;\n    // Iterating the array to know if there is a possible majority element present.\n    for(int i = 0; i < n; i++) {    \n        // If count becomes 0, set current element as a possible candidate for majority element, reset count to 1.\n            majorityElement = arr[i];\n            count = 1;\n            continue;\n        }\n        // Increment the count if the current element of the array is equal to the current majority element, else decrement it.\n        if(arr[i] == majorityElement) {\n            count++;\n        }       \n        else {\n            count--;\n        }\n    }\n    count = 0;\n    // Checking if majority element occurs more than 'n' / 2 times.\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == majorityElement) {\n            count++;\n        }\n    }\n    // If the count of the majority element is greater than 'n' / 2, then return it.\n    if(count > n / 2) {\n        return majorityElement;\n    }\n    // If no majority element found, return -1.\n    return -1;  \n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-list-39-arr-39-of-integers-of-length-n-you-are-supposed-to-find-all-the-elements-that-occur-strictly-more-than-floor-n-3-times-in-the-given-array-list\">You are given an array/list 'ARR' of integers of length \u2018N\u2019. You are supposed to find all the elements that occur strictly more than floor(N/3) times in the given array/list.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second line contains \u2018N\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return all the majority elements separated by a single space.\n\nThe output of every test case will be printed in a separate line.\n\nYou may return the majority of elements in any order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n3 &lt;= N &lt;= 5000\n1 &lt;= ARR[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n7\n3 2 2 1 5 2 3\n5\n7 4 4 9 7\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n4 7\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>In the first test case, floor(N/3) = floor(7/3) is equal to 2, and 2 occurs 3 times which is strictly more than N/3. No other element occurs more than 2 times.\n\nIn the second test case, floor(N/3) = floor(5/3) is equal to 1, and 4 and 7 both occur 2 times. No other element occurs more than once.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n6\n1 2 4 4 3 4\n4\n6 6 6 7\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>4\n6\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>In the first test case, floor(N/3) = floor(6/3) is equal to 2, and 4 occurs 3 times which is strictly more than N/3. No other element occurs more than 2 times.\n\nIn the second test case, floor(N/3) = floor(4/3) is equal to 1, and 6 occurs 3 times. No other element occurs more than once.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 16,
        "link": "https://www.codingninjas.com/codestudio/problems/majority-element-ii_893027?topList=striver-sde-sheet-problems",
        "title": "Majority Element - II",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    Where 'N' is the number of elements in the given array/list\n*/\nvector<int> majorityElementII(vector<int> &arr)\n{\n    int n = arr.size();\n    // Array for storing final answer.\n    vector<int> majorityElement;\n    // Variables for storing the elements which may occur more than n/3 times.\n    int firstCandidate = 0, secondCandidate = 0;\n    int firstCount = 0, secondCount = 0;\n    // Iterate through the array.\n    for (int i = 0; i < n; i++)\n    {\n        // Increment firstCount if the current element is equal to firstCandidate.\n        if (arr[i] == firstCandidate)\n        {\n            firstCount = firstCount + 1;\n        }\n        // Increment secondCount if the current element is equal to secondCandidate.\n        else if (arr[i] == secondCandidate)\n        {\n            secondCount = secondCount + 1;\n        }\n        // Change value of the firstCandidate to the current element if firstCount is equal to 0.\n        else if (firstCount == 0)\n        {\n            firstCandidate = arr[i];\n            firstCount = 1;\n        }\n        // Change value of the secondCandidate to the current element if secondCount is equal to 0.\n        else if (secondCount == 0)\n        {\n            secondCandidate = arr[i];\n            secondCount = 1;\n        }\n        // Otherwise decrement firstCount and secondCount by 1.\n        else\n        {\n            firstCount = firstCount - 1;\n            secondCount = secondCount - 1;\n        }\n    }\n    firstCount = 0;\n    secondCount = 0;\n    // Iterate through the array to find frequency of firstCandidate and secondCandidate.\n    for (int i = 0; i < n; i++)\n    {\n        // Increment firstCount if the current element is equal to firstCandidate.\n        if (arr[i] == firstCandidate)\n        {\n            firstCount = firstCount + 1;\n        }\n        // Increment secondCount if the current element is equal to secondCandidate.\n        else if (arr[i] == secondCandidate)\n        {\n            secondCount = secondCount + 1;\n        }\n    }\n    // Include firstCandidate in the answer if its frequency is more than n/3.\n    if (firstCount > n / 3)\n    {\n        majorityElement.push_back(firstCandidate);\n    }\n    // Include secondCandidate in the answer if its frequency is more than n/3.\n    if (secondCount > n / 3)\n    {\n        majorityElement.push_back(secondCandidate);\n    }\n    // Return all stored majority elements.\n    return majorityElement;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-present-at-point-a-which-is-the-top-left-cell-of-an-m-x-n-matrix-your-destination-is-point-b-which-is-the-bottom-right-cell-of-the-same-matrix-your-task-is-to-find-the-total-number-of-unique-paths-from-point-a-to-point-b-in-other-words-you-will-be-given-the-dimensions-of-the-matrix-as-integers-m-and-n-your-task-is-to-find-the-total-number-of-unique-paths-from-the-cell-matrix-0-0-to-matrix-39-m-39-1-39-n-39-1\">You are present at point \u2018A\u2019 which is the top-left cell of an M X N matrix, your destination is point \u2018B\u2019, which is the bottom-right cell of the same matrix. Your task is to find the total number of unique paths from point \u2018A\u2019 to point \u2018B\u2019.In other words, you will be given the dimensions of the matrix as integers \u2018M\u2019 and \u2018N\u2019, your task is to find the total number of unique paths from the cell MATRIX[0][0] to MATRIX['M' - 1]['N' - 1].</h4>\n\n<h4 id=\"to-traverse-in-the-matrix-you-can-either-move-right-or-down-at-each-step-for-example-in-a-given-point-matrix-i-j-you-can-move-to-either-matrix-i-1-j-or-matrix-i-j-1\">To traverse in the matrix, you can either move Right or Down at each step. For example in a given point MATRIX[i] [j], you can move to either MATRIX[i + 1][j] or MATRIX[i][j + 1].</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of the test case. \n\nThe first and the only line of each test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019, denoting the number of rows and number of columns of the matrix respectively. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return a single integer, which is the total number of unique paths for traveling from top-left to bottom-right cells of the matrix.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 T \u2264 100\n1 \u2264 M \u2264 15\n1 \u2264 N \u2264 15\n\nWhere \u2018M\u2019 is the number of rows and \u2018N\u2019 is the number of columns in the matrix. \n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n2 2\n1 1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5>Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, we are given a 2 x 2 matrix, to move from matrix[0][0] to matrix[1][1] we have the following possible paths.\n\nPath 1 = (0, 0) -&gt; (0, 1) -&gt; (1, 1)\nPath 2 = (0, 0) -&gt; (1, 0) -&gt; (1, 1)\n\nHence a total of 2 paths are available, so the output is 2.\n\nIn test case 2, we are given a 1 x 1 matrix, hence we just have a single cell which is both the starting and ending point. Hence the output is 1.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n3 2\n1 6\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5>Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, we are given a 3 x 2 matrix, to move from matrix[0][0] to matrix[2][1] we have the following possible paths.\n\nPath 1 = (0, 0) -&gt; (0, 1) -&gt; (1, 1) -&gt; (2, 1)\nPath 2 = (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1)\nPath 3 =  (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (2, 1)\n\nHence a total of 3 paths are available, so the output is 3.\n\nIn test case 2, we are given a 1 x 6 matrix, hence we just have a single row to traverse and thus total path will be 1.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 17,
        "link": "https://www.codingninjas.com/codestudio/problems/total-unique-paths_1081470?topList=striver-sde-sheet-problems",
        "title": "Unique Paths",
        "solution": "/*\n    Time Complexity  : O(M * N) \n    Space Complexity : O(N)\n    Where 'M' is the number of rows and 'N' is the number of columns of the matrix.  \n*/\nint uniquePaths(int m,int n)\n{\n    // Reference array to store subproblems.\n    int dp[n] = {1};                   \n    // Bottom up approach.\n    dp[0] = 1;\n    for (int i = 0; i < m; i++) \n    {      \n            dp[j] += dp[j - 1];  \n        }\n    } \n    //Returning answer. \n    return dp[n - 1];                  \n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-list-say-arr-of-size-n-we-call-pair-i-j-a-reverse-pair-when-i-lt-j-and-39-arr-i-39-gt-2-39-arr-j-39\">You are given an array/list say \u2018ARR\u2019 of size \u2018N\u2019. We call pair (i, j) a Reverse Pair when i &lt; j and 'ARR[i]' &gt; 2 * 'ARR[j]'.</h4>\n\n<h4 id=\"your-task-is-to-find-the-number-of-reverse-pairs-present-in-given-39-arr-39\">Your task is to find the number of Reverse Pairs present in given 'ARR'.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>For the array [50, 21, 9], if we follow 1-based indexing, the Reverse Pairs are (1, 2), (1, 3) and (2, 3). Thus, the total count i.e. the answer becomes 3.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>A single index of the pair (i, j) can be used multiple times.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the size of the array/list. \n\nThe second line of every test case contains \u2018N\u2019 space-separated integers denoting the elements of array/list 'ARR'.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the number of distinct pairs.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5    \n2 &lt;= N &lt;= 3000\n1 &lt;= ARR[i] &lt;= 10^5\n\nWhere 'ARR[i]' denotes the i-th elements in the array/list. \n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n6\n1 2 3 2 3 1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5>Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test case 1: \nGiven that we follow 1-based indexing, for the array {1, 2, 3, 2, 1}, the pairs satisfying the conditions of Reverse Pairs are \nFor i = 3, arr[i] = 3 and for j = 6, arr[j] = 1.\nFor i = 5, arr[i] = 3 and for j = 6, arr[j] = 1.\nHence there are two possible pairs.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n6\n6 4 8 2 1 3\n5\n2 4 3 5 1 \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>6\n3\n</code></pre>\n\n<h5>Explanation Of Sample Input 2 :</h5>\n\n<pre><code>Test case 1: \nGiven that we follow 1-based indexing,The possible pairs satisfying the conditions of Reverse Pairs are (1, 4), (1, 5), (2, 5), (3, 4), (3, 5), (3, 6). Thus, the answer is 6.\n\nTest case 2: \nGiven that we follow 1-based indexing, The possible pair of indices satisfying the above condition are (2, 5), (3, 5), (4, 5). Thus, the answer is 3.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 18,
        "link": "https://www.codingninjas.com/codestudio/problems/reverse-pairs_1112652?topList=striver-sde-sheet-problems",
        "title": "Reverse Pairs",
        "solution": "/*\n        Time Complexity: O(N * log(N))\n        Space Complexity: O(N)\n        Where N is the size of the array.\n*/\nvoid merge(vector<int>& arr, int start, int mid, int end)\n{\n    // Merging the arrays using helper arrays\n    int n1 = (mid - start + 1);\n    int n2 = (end - mid);\n    int left[n1], right[n2];\n    for (int i = 0; i < n1; i++) \n    {\n        left[i] = arr[start + i];\n    for (int j = 0; j < n2; j++) \n    {\n        right[j] = arr[mid + 1 + j];\n    }\n    int i = 0, j = 0;\n    for (int k = start; k <= end; k++) \n    {\n        if (j >= n2 || (i < n1 && left[i] <= right[j])) \n        {\n            arr[k] = left[i++];\n        }\n        else \n        {\n            arr[k] = right[j++];\n        }\n    }\n}\nint mergeSort(vector<int>& arr, int start, int end)\n{\n    if (start < end) \n    {\n        int mid = (start + end) / 2;\n        // Counting the pairs in the left and right arrays.\n        int count = mergeSort(arr, start, mid) + mergeSort(arr, mid + 1, end);\n        int j = mid + 1;\n        for (int i = start; i <= mid; i++) \n        {\n            while (j <= end && arr[i] > arr[j] * 2LL) \n            {\n                j++;\n            }\n            count += j - (mid + 1);\n        }\n        // Merging the arrays.\n        merge(arr, start, mid, end);\n        return count;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint reversePairs(vector<int>& arr, int n)\n{\n    return mergeSort(arr, 0, n - 1);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-integer-array-39-arr-39-of-size-39-n-39-and-an-integer-39-s-39-your-task-is-to-return-the-list-of-all-pairs-of-elements-such-that-each-sum-of-elements-of-each-pair-equals-39-s-39\">You are given an integer array 'ARR' of size 'N' and an integer 'S'. Your task is to return the list of all pairs of elements such that each sum of elements of each pair equals 'S'.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Each pair should be sorted i.e the first value should be less than or equals to the second value. \n\nReturn the list of pairs sorted in non-decreasing order of their first value. In case if two pairs have the same first value, the pair with a smaller second value should come first.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two space-separated integers 'N' and 'S', denoting the size of the input array and the value of 'S'.\n\nThe second and last line of input contains 'N' space-separated integers, denoting the elements of the input array: ARR[i] where 0 &lt;= i &lt; 'N'.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print 'C' lines, each line contains one pair i.e two space-separated integers, where 'C' denotes the count of pairs having sum equals to given value 'S'.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^4\n-10^5 &lt;= ARR[i] &lt;= 10^5\n-2 * 10^5 &lt;= S &lt;= 2 * 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>5 5\n1 2 3 4 5\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 4\n2 3\n</code></pre>\n\n<h5>Explaination For Sample Output 1:</h5>\n\n<pre><code>Here, 1 + 4 = 5\n      2 + 3 = 5\nHence the output will be, (1,4) , (2,3).\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>5 0\n2 -3 3 3 -2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-3 3\n-3 3\n-2 2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 19,
        "link": "https://www.codingninjas.com/codestudio/problems/pair-sum_697295?topList=striver-sde-sheet-problems",
        "title": "Pair Sum",
        "solution": "/*\n    Time Complexity: O(N ^ 2)\n    Space Complexity: O(N)\n    where 'N' is the total number of elements\n    i.e the size of the input array.\n*/\n#include<map>\nvector<vector<int>> pairSum(vector<int> &arr, int s){\n   // Used to store result.\n    vector<vector<int>> ans;\n    map<int, int> mp;\n        if(!mp.count(num)){\n            keyArray.push_back(num);\n        }\n        // Store frequency of each unique element.\n        mp[num] += 1;\n    }\n    sort(keyArray.begin(), keyArray.end());\n    for (int key : keyArray) {\n        if (key + key == s) {\n            int freq = mp[key];\n            // Total number of such pairs will be 'FREQ*(FREQ-1)/2'.\n            for (int j = 0; j < freq * (freq - 1) / 2; j++) {\n                ans.push_back({ key, key });\n            }\n        }\n    }\n    // Maintain two pointers.\n    int low = 0;\n    int high = keyArray.size() - 1;\n    while (low < high) {\n        int currSum = keyArray[low] + keyArray[high];\n        // If the current sum is equal to the target sum.\n        if (currSum == s) {\n            int freq = mp[keyArray[low]] * mp[keyArray[high]];\n            // Total number of such pairs will be 'FREQ'.\n            for (int j = 0; j < freq; j++) {\n                ans.push_back({ keyArray[low], keyArray[high] });\n            }\n            low++;\n            high--;\n        }\n        else if (currSum < s) {\n            low++;\n        }\n        else {\n            high--;\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        int a = ans[i][0], b = ans[i][1];\n        ans[i][0] = min(a, b);\n        ans[i][1] = max(a, b);\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-list-39-arr-39-of-n-integers-and-an-integer-value-target-you-need-to-check-whether-there-exist-four-numbers-arr-i-arr-j-arr-k-arr-l-such-that-0-lt-i-lt-j-lt-k-lt-l-lt-n-and-arr-i-arr-j-arr-k-arr-l-39-target-39\">You are given an array/list 'ARR' of \u2018N\u2019 integers  and an integer value \u2018TARGET\u2019. You need to check whether there exist four numbers (ARR[i], ARR[j], ARR[k], ARR[l]) such that (0 &lt;= i &lt; j &lt; k &lt; l &lt; N) and ARR[i] + ARR[j] + ARR[k] + ARR[l] = 'TARGET'.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All four numbers should exist at different indices in the given array.\n2. The answer is case-sensitive.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018TARGET\u2019 denoting the number of the elements present in the sequence and the target sum respectively.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array 'ARR'.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain  \u201cYes\u201d (without quotes) if there exist 4 numbers (having different indices) that give sum \u2018TARGET\u2019 else \u201cNo\u201d (without quotes).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n4 &lt;= N &lt;= 2*10^2   \n-10^9 &lt;= ARR[i] &lt;= 10^9\n-10^9 &lt;= TARGET&lt;= 10^9 \n\nTime Limit: 1 sec\n</code></pre>\n\n<h4 id=\"follow-up\">Follow Up:</h4>\n\n<pre><code>Can you try solving the problem with less than O(N^2 * log(N)) time complexity?\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n5 9\n1 3 3 10 2\n6 20\n2 4 6 3 1 1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>Yes\nNo\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThe elements at indices (0, 1, 2, 4) gives sum 9 i.e, ARR[0] + ARR[1] + ARR[2] + ARR[4] = 9. Hence the answer is Yes.\n\nTest case 2:\nNone of the combinations of 4 numbers gives 20 as 'TARGET'. Hence the answer is No.  \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n5 15\n0 10 1 2 2\n6 20\n-2 12 -1 1 20 1 \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 20,
        "link": "https://www.codingninjas.com/codestudio/problems/find-four-elements-that-sums-to-a-given-value_983605?topList=striver-sde-sheet-problems",
        "title": "Find Four Elements That Sums To A Given Value",
        "solution": "/*\n    Time Complexity: O(N^2)\n    Space complexity: O(N^2)\n    Where 'N' is the number of element present in the given array.\n*/\n#include <unordered_map>\n#include <vector>\nbool commonIdx(pair < int, int > p1, pair < int, int > p2) {\n    return p1.first == p2.first || p1.first == p2.second || p1.second == p2.first || p1.second == p2.second;\n}\n    unordered_map < int, pair < int, int >> mp;\n    /* \n        Preparing a HashMap which will store sum of \n        two elements of array arr[] as key and their \n        indexes as value.\n    */\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            mp[arr[i] + arr[j]] = {\n                i,\n                j\n            };\n        }\n    }\n    // Check on all possible pair sum which can be found in HashMap.\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            int requiredSum = target - (arr[i] + arr[j]);\n            /* \n                If HashMap contains required sum then we must \n                ensure that both pairs does not contain common indexes.\n            */\n            if (mp.find(requiredSum) != mp.end() && !commonIdx(mp[requiredSum], {\n                    i,\n                    j\n                })) {\n                return \"Yes\";\n            }\n        }\n    }\n    // If we can not found the target sum then we return No.\n    return \"No\";\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-unsorted-array-list-39-arr-39-of-39-n-39-integers-your-task-is-to-return-the-length-of-the-longest-consecutive-sequence\">You are given an unsorted array/list 'ARR' of 'N'  integers. Your task is to return the length of the longest consecutive sequence.</h4>\n\n<h4 id=\"the-consecutive-sequence-is-in-the-form-39-num-39-39-num-39-1-39-num-39-2-39-num-39-l-where-39-num-39-is-the-starting-integer-of-the-sequence-and-39-l-39-1-is-the-length-of-the-sequence\">The consecutive sequence is in the form ['NUM', 'NUM' + 1, 'NUM' + 2, ..., 'NUM' + L] where 'NUM' is the starting integer of the sequence and 'L' + 1 is the length of the sequence.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If there are any duplicates in the given array we will count only one of them in the consecutive sequence.\n</code></pre>\n\n<h5 id=\"for-example\">For example-</h5>\n\n<pre><code>For the given 'ARR' [9,5,4,9,10,10,6].\n\nOutput = 3\nThe longest consecutive sequence is [4,5,6].\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in O(N) time and O(N) space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer 'T', representing the number of test cases or queries to be run. Then the 'T' test cases follow.\n\nThe first line of each test case contains integer 'N' denoting the size of the array.\n\nThe second line of each test case contains 'N' single space-separated integers, elements of the array.  \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print an integer in a single line that represents the length of the longest consecutive sequence.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1 \n5\n33 20 34 30 35\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation to Sample Input 1 :</h5>\n\n<pre><code>The longest consecutive sequence is [33, 34, 35].\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n7\n1 9 3 10 4 20 2    \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5>Explanation to Sample Input 2 :</h5>\n\n<pre><code>The consecutive sequence is in the form ['NUM', 'NUM' + 1, 'NUM' + 2,...,'NUM' + 'L']. So in the given array, the longest consecutive sequence is [1,2,3,4] where 'NUM' = 1 and 'L' = 3. And the length of the sequence will be 'L' + 1 = 4.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 21,
        "link": "https://www.codingninjas.com/codestudio/problems/longest-consecutive-sequence_759408?topList=striver-sde-sheet-problems",
        "title": "Longest Consecutive Sequence",
        "solution": "/*  \n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    Where N is the length of the given array.\n*/\n#include <unordered_set>\nint lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {\n    // To store length of longest consecutive sequence.\n    int mx = 0;\n    // To store the length of current consecutive Sequence.\n    // To store all the unique elements of array.\n    unordered_set<int> set;\n    for (int i = 0; i < n; i++) {\n        set.insert(arr[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        int previousConsecutiveElement = arr[i] - 1;\n        if (set.find(previousConsecutiveElement) == set.end()) {\n            // 'arr[i]' is the first value of consecutive sequence.\n            int j = arr[i];\n            while (set.find(j) != set.end()) {\n                // The next consecutive element by will be j + 1.\n                j++;\n            }\n            // Update maximum length of consecutive sequence.\n            mx = max(mx, j - arr[i]);\n        }\n    }\n    return mx;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-loves-playing-with-numbers-so-his-friend-gives-him-an-array-on-his-birthday-the-array-consists-of-positive-and-negative-integers-now-ninja-is-interested-in-finding-the-length-of-the-longest-subarray-whose-sum-is-zero\">Ninja loves playing with numbers. So his friend gives him an array on his birthday. The array consists of positive and negative integers. Now Ninja is interested in finding the length of the longest subarray whose sum is zero.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer T, denoting the number of test cases. \n\nThe first line of each test case will contain the integer N, denoting the number of elements in the given array.\n\nThe second and last line contains N space-separated integers that denote the value of the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>The first and only line of each test case in the output contains an integer denoting the length of the longest subarray whose sum is zero.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n-10^5 &lt;= arr[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2 \n5\n1 3 -1 4 -4\n4\n1 -1 2 -2 \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n4 \n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code>In the first test case, the given array is (1, 3, -1, 4, -4). The sub-arrays we can create are (1), (3), (-1), (4), (-4), (1, 3), (3, -1), (-1, 4), (4, -4), (1, 3, -1), (3, -1, 4), (-1, 4, -4), (1, 3, -1, 4), (3, -1, 4, -4), (1, 3, -1, 4, -4). Out of them only (4, -4) is the sub array whose sum is zero.Length of this sub array is 2 and hence we return 2 as the final answer.\n\nIn the second test case, the given array is (1, -1, 2, -2). The sub-arrays we can create are (1), (-1), (2), (-2), (1, -1), (-1, 2), (2, -2), (1, -1, 2), (-1, 2, -2), (1, -1, 2, -2). Out of them sub arrays with zer sum are (1, -1), (2, -2), (1, -1, 2, -2). Out of them only (1, -1, 2, -2) has the longest length of 4. Hence we return 4 as the final answer.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2 \n3\n4 -5 1\n4\n1 2 1 -2\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>3\n0\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 22,
        "link": "https://www.codingninjas.com/codestudio/problems/longest-subset-zero-sum_920321?topList=striver-sde-sheet-problems",
        "title": "Longest Subarray Zero Sum",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    Where 'N' denotes the number of elements of the array\n*/\n#include<unordered_map>\n#include<vector>\nint LongestSubsetWithZeroSum(vector<int>arr) \n{\n    // Map to store the previous sums\n    unordered_map<int, int> presum;\n    int sum = 0; // Initialize the sum of elements\n    int maxLen = 0; // Initialize result\n    int n = arr.size();\n        // Add current element to sum\n        sum += arr[i];\n        if (arr[i] == 0 && maxLen == 0)\n            maxLen = 1;\n        if (sum == 0)\n            maxLen = i + 1;\n        // Look for this sum in Hash table\n        if (presum.find(sum) != presum.end()) {\n            // If this sum is seen before, then update maxLen\n            maxLen = max(maxLen, i - presum[sum]);\n        }\n        else {\n            // Else insert this sum with index in hash table\n            presum[sum] = i;\n        }\n    }\n    return maxLen;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-an-array-of-integers-arr-and-an-integer-x-you-are-supposed-to-find-the-number-of-subarrays-of-39-arr-39-which-have-bitwise-xor-of-the-elements-equal-to-39-x-39\">Given an array of integers \u2018ARR\u2019 and an integer \u2018X\u2019, you are supposed to find the number of subarrays of 'ARR' which have bitwise XOR of the elements equal to 'X'.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>An array \u2018B\u2019 is a subarray of an array \u2018A\u2019 if \u2018B\u2019 that can be obtained by deletion of, several elements(possibly none) from the start of \u2018A\u2019 and several elements(possibly none) from the end of \u2018A\u2019. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018X\u2019 separated by a single space, denoting the number of elements in the array and the required subarray XOR respectively.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print on a new line the number of subarrays of the given array that have bitwise XOR of the elements equal to \u2018X\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= N &lt;= 5 * 10 ^ 4\n0 &lt;= X &lt;= 10 ^ 9\n0 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of elements in the array, \u2018X\u2019 denotes the required subarray XOR and ARR[i] denotes the 'i-th' element of the given array.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n5 8\n5 3 8 3 10\n3 7\n5 2 9\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5>Explanation of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the subarray from index 1 to index 3 i.e. {3,8,3} and the subarray from index 2 to index 2 i.e. {8} have bitwise XOR equal to 8.\n\nIn the second test case, the subarray from index 0 to index 1 i.e. {5,2} has bitwise XOR equal to 7.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n6 11\n10 1 0 3 4 7\n5 4\n4 3 1 2 4\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>3\n4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 23,
        "link": "https://www.codingninjas.com/codestudio/problems/count-subarrays-with-given-xor_1115652?topList=striver-sde-sheet-problems",
        "title": "Count Subarrays with Given XOR",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' denotes the number of elements in the given array.\n*/\n#include <unordered_map>\nint subarraysXor(vector<int> &arr, int x)\n{\n    int n = arr.size();\n    //    To store the prefix XOR's.\n    unordered_map<int, int> prefXor;\n    int ans = 0;\n    int currXor = 0;\n    //    Intialy Xor is 0.\n    prefXor[0]++;\n    for (int i = 0; i < n; i++)\n    {\n        //    Update the Xor of the current prefix.\n        currXor = currXor ^ arr[i];\n        //    Required value of the prefix Xor to make the xor of the subarray ending at the current index equal to X.\n        int req = x ^ currXor;\n        //    Add the count of prefix arrays with required xor.\n        ans += prefXor[req];\n        prefXor[currXor]++;\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-string-input-of-length-n-find-the-length-of-the-longest-substring-without-repeating-characters-i-e-return-a-substring-that-does-not-have-any-repeating-characters\">Given a string input of length n, find the length of the longest substring without repeating characters i.e return a substring that does not have any repeating characters.</h4>\n\n<h4 id=\"substring-is-the-continuous-sub-part-of-the-string-formed-by-removing-zero-or-more-characters-from-both-ends\">Substring is the continuous sub-part of the string formed by removing zero or more characters from both ends.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code> The first and the only line consists of a string of length n containing lowercase alphabets.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code> You need to print the length of the longest unique characters substring.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code> 1&lt;= n &lt;=10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code> abcabcbb \n</code></pre>\n\n<h5>Sample Output1:</h5>\n\n<pre><code> 3\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>Substring \"abc\" has no repeating character with the length of 3.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code> aaaa\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 24,
        "link": "https://www.codingninjas.com/codestudio/problems/longest-unique-substring_630418?topList=striver-sde-sheet-problems",
        "title": "Longest Substring Without Repeating Characters",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(K)\n    where N is the length of input string and\n    K is the number of unique characters in the string\n*/\n#include <unordered_map>\nint uniqueSubstrings(string input) \n{\n    int n = input.length();\n    unordered_map<char, int> set;\n    int ans = 0, i = 0, j = 0;\n    {\n        // Try to extend the range [i,j]\n        if (set.find(input[j]) == set.end()) \n        {\n            set[input[j]] = 1;\n            ans = max(ans, j - i + 1);\n            j++;\n        } else \n        {\n            set.erase(input[i]);\n            i++;\n        }\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-singly-linked-list-of-integers-your-task-is-to-return-the-head-of-the-reversed-linked-list\">Given a singly linked list of integers. Your task is to return the head of the reversed linked list.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The given linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4-&gt; NULL. Then the reverse linked list is 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; NULL and the head of the reversed linked list will be 4.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this problem in O(N) time and O(1) space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the given linked list in reverse order in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n0 &lt;= L &lt;= 10^5\n1 &lt;= data &lt;= 10^9 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n1 2 3 4 5 6 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>6 5 4 3 2 1 -1\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case,  After changing the next pointer of each node to the previous node, The given linked list is reversed.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n10 21 3 2 4 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>4 2 3 21 10 -1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 25,
        "link": "https://www.codingninjas.com/codestudio/problems/reverse-the-singly-linked-list_799897?topList=striver-sde-sheet-problems",
        "title": "Reverse Linked List",
        "solution": "/*\n    Time Complexity:O(N)\n    Space Complexity:O(1)\n    Where N is the total nodes in Linked List\n*/\nLinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) {\n    if (head == NULL || head->next == NULL) {\n        return head;\n    }\n    LinkedListNode<int> *pre = NULL;\n    while (head != 0) {\n        pre = (LinkedListNode<int>*) (()   () );\n          () ((uintptr_t) pre ^ (uintptr_t) head->next); \n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next);       \n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\n        head = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\n    }\n    return pre;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-the-head-node-of-the-singly-linked-list-return-a-pointer-pointing-to-the-middle-of-the-linked-list\">Given the head node of the singly linked list, return a pointer pointing to the middle of the linked list.</h4>\n\n<h4 id=\"if-there-are-an-odd-number-of-elements-return-the-middle-element-if-there-are-even-elements-return-the-one-which-is-farther-from-the-head-node\">If there are an odd number of elements, return the middle element if there are even elements return the one which is farther from the head node.</h4>\n\n<h4 id=\"for-example-let-the-linked-list-be-1-gt-2-gt-3-gt-4-gt-null\">For example, let the linked list be 1-&gt;2-&gt;3-&gt;4-&gt;null</h4>\n\n<p><img src=\"https://files.codingninjas.in/linkedlisteg1correct-6467.jpg\" alt=\"add-image\"></p>\n\n<h4 id=\"since-the-number-of-elements-in-this-linked-list-is-4-so-we-have-2-middle-elements-i-e-2-and-3-but-we-return-3-as-it-is-farther-from-the-head-node-i-e-1\">Since the number of elements in this linked list is 4 so we have 2 middle elements, i.e. 2 and 3, but we return 3 as it is farther from the head node, i.e. 1.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first and only line of each test case contains integers denoting the nodes of the linked list. Each line is guaranteed to have -1 at the end to signify the end of the linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a pointer pointing to the node which is at the middle of the linked list. If no midpoint exists, return a null pointer.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1.You do not need to print anything, it has already been taken care of. Just implement the given function.\n\n2.For a linked list of size 1, the head node is the midpoint.\n\n3.If no midpoint exists, return a null pointer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 4*10^4\n-10^9 &lt;= data &lt;= 10^9 \ndata \u2260 -1\n\nWhere 'N' is the number of nodes and 'data' is the value of nodes.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 -1\n4 0 32 5 48 6 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n5\n</code></pre>\n\n<h5>Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case:\n\nThe linked List is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\nWe can clearly see that there are 5 elements in the linked list and the middle element is 3 hence we return a pointer poiniting to the middle element i.e 3.\n\nFor the second test case:\n\nThe linked List is : 4-&gt;0-&gt;32-&gt;5-&gt;48-&gt;6-&gt;NULL\n\nWe have 6 elements in the linked list. we will have 2 middle elements i.e 32 and 5. Since it is specified to return the element farther from the root node, we return 5.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n2 69 7 -1\n1 4 5 8 9 6 3 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>69\n8\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 26,
        "link": "https://www.codingninjas.com/codestudio/problems/middle-of-linked-list_973250?topList=striver-sde-sheet-problems",
        "title": "Middle Of Linked List",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n    Where 'N' is the number of elements in the linked list\n*/\nNode *findMiddle(Node *head) \n{\n    // If head is null just return null\n    if (head == NULL) \n    {\n        return head;\n    }\n    // If the Linked List has just 1 element that element is the middle\n        return head;\n    }\n    Node *fast = head;\n    Node *slow = head;\n    while (fast != NULL && fast->next != NULL) \n    {\n        fast = fast->next->next;\n        slow = slow->next;\n    }\n    return slow;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-sorted-linked-lists-you-have-to-merge-them-to-produce-a-combined-sorted-linked-list-you-need-to-return-the-head-of-the-final-linked-list\">You are given two sorted linked lists. You have to merge them to produce a combined sorted linked list. You need to return the head of the final linked list.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The given linked lists may or may not be null.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>If the first list is: 1 -&gt; 4 -&gt; 5 -&gt; NULL and the second list is: 2 -&gt; 3 -&gt; 5 -&gt; NULL\n\nThe final list would be: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 5 -&gt; NULL\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe first line of each test case contains the elements of the first linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n\nThe second line of each test case contains the elements of the second linked list separated by a single space and terminated by -1.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the final linked list. The elements of the linked list must be separated by a single space and terminated by -1.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= L &lt;= 10^5\n1 \u2264 data \u2264 10^6 and data != -1\n\nWhere L is the number of nodes in either of the two Linked List.\n\nTime Limit: 1 sec \n</code></pre>\n\n<h4 id=\"follow-up\">Follow-up:</h4>\n\n<pre><code>Try to solve this problem in linear time complexity and constant space complexity.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 4 5 -1\n2 3 5 -1\n7 8 -1\n1 3 4 6 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 5 5 -1\n1 3 4 6 7 8 -1\n</code></pre>\n\n<h5>Explanation of Input 1:</h5>\n\n<pre><code>The first test case is already explained in the problem statement.\n\nThe second test case, the first list is: 7 -&gt; 8 -&gt; NULL\nThe second list is: 1 -&gt; 3 -&gt; 4 -&gt; 6 -&gt; NULL\nThe final list would be: 1 -&gt; 3 -&gt; 4 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; NULL\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n5 -1\n1 3 6 10 -1\n1 1 1 -1\n1 1 1 -1\n</code></pre>\n\n<h5>Sample Output 2</h5>\n\n<pre><code>1 3 5 6 10 -1\n1 1 1 1 1 1 -1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 27,
        "link": "https://www.codingninjas.com/codestudio/problems/merge-two-sorted-linked-lists_800332?topList=striver-sde-sheet-problems",
        "title": "Merge Two Sorted Linked Lists",
        "solution": "/*\n        Time Complexity - O(N + M)\n        Space Complexity - O(1)\n        Where N and M are the number of nodes in both lists respectively.\n*/\nNode<int>* sort(Node<int>* first, Node<int>* second)\n{\n    // When only one node is in first list, point its head to the second list.\n    if(first -> next == NULL)\n    {\n        first->next = second;\n        return first;\n    }\n       ,     next;\n    Node<int>* cur2 = second, *next2 = second -> next;\n    while(next1 && cur2)\n    {\n        if ((cur2->data) >= (cur1->data) && (cur2->data) <= (next1->data)) { \n            next2 = cur2->next; \n            cur1->next = cur2; \n            cur2->next = next1; \n            // Let cur1 and cur2 to point to their immediate next pointers.\n            cur1 = cur2; \n            cur2 = next2; \n        } \n        else { \n            // if there are more nodes in first list.\n            if (next1->next) { \n                next1 = next1->next; \n                cur1 = cur1->next; \n            } \n            // else point the last node of first list to the remaining nodes of second list.\n            else { \n                next1->next = cur2; \n                return first; \n            } \n        } \n    }\n    return first;\n}\nNode<int>* sortTwoLists(Node<int>* first, Node<int>* second) {\n    if(!first)\n    {\n        return second;\n    }\n    if(!second)\n    {\n        return first;\n    }\n    if((first -> data) < (second ->data))\n    {\n        return sort(first, second);\n    }\n    else\n    {\n        return sort(second, first);\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-singly-linked-list-of-39-n-39-nodes-with-integer-data-and-an-integer-39-k-39-your-task-is-to-remove-the-kth-node-from-the-end-of-the-given-linked-list\">You have been given a singly Linked List of 'N' nodes with integer data and an integer 'K'. Your task is to remove the Kth node from the end of the given Linked List.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The given linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4-&gt; 'NULL'. and 'K' is 2\nAfter removing the second node from the end, the linked list become 1-&gt;2-&gt;4-&gt;'NULL'\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this without finding the length of the linked list and using O(1) extra space?\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe first line of each test case contains a single integer 'K', representing the index(1 based indexing) of a node from the last to be deleted.\n\nThe second line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line that contains the updated linked list in a linear fashion. A single space will separate all the list data and -1 will indicate the end of the list.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 5\n0 &lt;= 'N' &lt;= 10 ^ 5\n0 &lt;= 'K' &lt;= 'N'\n1 &lt;= 'DATA' &lt;= 10 ^ 9 and 'DATA' != -1\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n6\n1 2 3 4 5 6 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2 3 4 5 6 -1\n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>In the given linked list the node with data \u20181\u2019(head) will be removed as this is the 6th node from the end of the Linked List.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n1\n1 2 3 2 4 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1 2 3 2 -1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 28,
        "link": "https://www.codingninjas.com/codestudio/problems/delete-kth-node-from-end-in-linked-list_799912?topList=striver-sde-sheet-problems",
        "title": "Delete Kth node From End",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Compexity: O(1)\n    Where 'N' is the total nodes in Linked List.\n*/\nLinkedListNode<int> *removeKthNode(LinkedListNode<int> *head, int K)\n{\n    if (head == NULL || K == 0)\n    {\n        return head;\n    }\n    LinkedListNode<int> *slow = head;\n    LinkedListNode<int> *fast = head;\n        // If head is the Kth node from end of Linked List.\n        if (fast->next == NULL) {\n            LinkedListNode<int> *next = head->next;\n            head->next = NULL;\n            head = next;\n            return head;\n        }\n        else\n        {\n            fast = fast->next;\n        }\n    }\n    // Moving both slow and fast pointer with same speed.\n    while (fast->next != NULL)\n    {\n        slow = slow->next;\n        fast = fast->next;\n    }\n    // Removing the Kth node from end of Linked List.\n    slow->next = slow->next->next;\n    return head;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-linked-lists-representing-two-non-negative-numbers-the-digits-in-the-linked-list-are-stored-in-reverse-order-i-e-starting-from-least-significant-digit-lsd-to-the-most-significant-digit-msd-and-each-of-their-nodes-contains-a-single-digit-your-task-is-to-find-the-sum-list-and-return-the-head-of-the-sum-list-where-the-sum-list-is-a-linked-list-representation-of-the-addition-of-two-numbers\">You are given two linked lists representing two non-negative numbers. The digits in the linked list are stored in reverse order, i.e. starting from least significant digit (LSD) to the most significant digit (MSD), and each of their nodes contains a single digit. Your task is to find the sum list and return the head of the sum list where the sum list is a linked list representation of the addition of two numbers.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The number represented by the linked lists do not contain any leading zeros. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases. \n\nThen the T test cases follow.\n\nThe first line of each test case contains the elements of the first singly linked list separated by a single space and terminated by -1.\n\nThe second line of each test case contains the elements of the second singly linked list separated by a single space and terminated by -1.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the sum linked list. The elements of the sum list should be single-space separated and terminated by -1.\n\nThe output of each test case must be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= M, N &lt;= 5 * 10^4\n0 &lt;= data[i] &lt;= 9 and data[i] != -1\n\nWhere 'M' and 'N' are the number of nodes in the two linked lists, 'data[i]' is the data of the 'i-th' node.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n5 6 3 -1\n8 4 2 -1\n7 5 9 4 6 -1\n8 4 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3 1 6 -1\n5 0 0 5 6 -1\n</code></pre>\n\n<h5>Explanation 1:</h5>\n\n<pre><code>For the first test case, we have two linked lists: 5 -&gt; 6 -&gt; 3 -&gt; NULL  and 8 -&gt; 4 -&gt; 2 -&gt; NULL, representing the numbers 365 and 248. The sum of the numbers is 613, represented by linked list 3 -&gt; 1 -&gt; 6 -&gt; NULL.\n\nFor the second test case,we have two linked lists: 7 -&gt; 5 -&gt; 9 -&gt; 4 -&gt; 6 -&gt; NULL and 8 -&gt; 4 -&gt; NULL, representing the numbers 64957 and 48. The sum of the numbers is 65005, represented by linked list 5 -&gt; 0 -&gt; 0 -&gt; 5 -&gt; 6 -&gt; NULL.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2 4 3 -1\n5 6 -1\n0 1 -1\n0 0 1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>7 0 4 -1\n0 1 1 -1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 29,
        "link": "https://www.codingninjas.com/codestudio/problems/add-two-numbers-as-linked-lists_1170520?topList=striver-sde-sheet-problems",
        "title": "Add Two Numbers As Linked Lists",
        "solution": "/*\n    Time Complexity - O(M + N)\n    Space Complexity - O(1)\n    Where 'M' and 'N' are the number of nodes in the two linked lists.\n*/\nNode *addTwoNumbers(Node *head1, Node *head2)\n{\n    // 'NODE1' and 'NODE2' point to the current node of the first and second list, respectively.\n    Node *node1 = head1;\n    Node *node2 = head2;\n    // 'SUM' and 'CARRY' store the sum and carry generated in the current iteration.\n    int sum = 0, carry = 0;\n    while (node1 != NULL && node2 != NULL)\n    {\n        // Add the values in the current nodes along with the carry.\n        sum = node1->data + node2->data + carry;\n        // Store the next node of the sum list in the current node of the first linked list.\n        node1->data = sum % 10;\n        // Get the new carry.\n        carry = sum / 10;\n        // Keep track of the previous node.\n        prev = node1;\n        // Move to the next node\n        node1 = node1->next;\n        node2 = node2->next;\n    }\n    // If there are remaining digits in any one of the lists, add them to the sum list.\n    if (node1 != NULL || node2 != NULL)\n    {\n        if (node2 != NULL)\n        {\n            prev->next = node2;\n        }\n        node1 = prev->next;\n        while (node1 != NULL)\n        {\n            // Add the values in the current node along with the carry.\n            sum = node1->data + carry;\n            // Store the next node of the sum list in the current node of the first linked list.\n            node1->data = sum % 10;\n            // Get the new carry.\n            carry = sum / 10;\n            // Keep track of the previous node.\n            prev = node1;\n            // Move to the next node\n            node1 = node1->next;\n        }\n    }\n    if (carry > 0)\n    {\n        // Carry is generated from the last iteration. So, add a new node to the sum list.\n        prev->next = new Node(carry);\n    }\n    // Return the head of the sum list.\n    return head1;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-singly-linked-list-of-integers-and-a-reference-to-the-node-to-be-deleted-every-node-of-the-linked-list-has-a-unique-value-written-on-it-your-task-is-to-delete-that-node-from-the-linked-list\">You are given a Singly Linked List of integers and a reference to the node to be deleted. Every node of the Linked List has a unique value written on it. Your task is to delete that node from the linked list.</h4>\n\n<h4 id=\"a-singly-linked-list-is-a-linear-data-structure-in-which-we-can-traverse-only-in-one-direction-i-e-from-head-to-tail-it-consists-of-several-nodes-where-each-node-contains-some-data-and-a-reference-to-the-next-node\">A singly linked list is a linear data structure in which we can traverse only in one direction i.e. from Head to Tail. It consists of several nodes where each node contains some data and a reference to the next node.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>\u2022 The reference to the head of the linked list is not given.\n\u2022 The node to be deleted is not a tail node.\n\u2022 The value of each node in the Linked List is unique.\n\u2022 It is guaranteed that the node to be deleted is present in the linked list.\n</code></pre>\n\n<h4 id=\"a-sample-linked-list\">A sample Linked List-</h4>\n\n<p><img src=\"https://files.codingninjas.in/samplelinkedlist-7675.png\" alt=\"singly_linkedlist\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains space-separated integers denoting the values of nodes of the Linked List. The Linked List is terminated with -1. Hence, -1 is never a node value of the Linked List.\n\nThe second line of each test case contains a single integer K which denotes the node to be deleted from the Linked List.\n\nFor more clarity please refer to the sample inputs.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, delete the given node and then print a single line containing the elements of the Linked List separated by a single space, '-1' at the end denotes the end of the linked list.\n\nThe output for each test case will be printed in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 5000\n-10 ^ 9 &lt;= NODE.DATA &lt;= 10 ^ 9 and node.data != -1\n\nWhere 'N' denotes the total number of nodes in the Linked List and 'NODE.DATA' is the value of the node present.\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n2 5 7 10 -1\n7\n-8 3 4 -2 1 -1\n4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2 5 10 -1\n-8 3 -2 1 -1\n</code></pre>\n\n<h5>Explanation for sample input 1:</h5>\n\n<pre><code>For the first test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-1-7676.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node 7, the Linked List becomes 2 \u2192 5 \u2192 10 \u2192 NULL, which is shown in the below figure.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1deletednode-7678.png\" alt=\"explanation\"></p>\n\n<pre><code>For the second test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-2-7679.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node 4, the Linked List becomes  -8 \u2192 3 \u2192 -2 \u2192 1 \u2192 NULL.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 9 10 -1\n4\n-7 7 -1\n-7\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>9 10 -1\n7 -1\n</code></pre>\n\n<h5>Explanation for sample input 2:</h5>\n\n<pre><code>For the first test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-3-7680.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node 4, the Linked List becomes 9 \u2192 10 \u2192 NULL.\n\n\nFor the second test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-4-7681.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node -7, the Linked List becomes 7 \u2192 NULL.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 30,
        "link": "https://www.codingninjas.com/codestudio/problems/delete-node-in-a-linked-list_1105578?topList=striver-sde-sheet-problems",
        "title": "Delete Node In A Linked List",
        "solution": "/*\n    Time Complexity - O(1)\n    Space Complexity - O(1)\n*/\nvoid deleteNode(LinkedListNode<int> * node) \n{\n    // Create a temp pointer that initially points to node -> next.\n    LinkedListNode<int> * temp = node->next;\n    // Store the data of temp as node -> data and make node -> next = temp -> next.\n    node -> data = temp -> data;\n    node -> next = temp -> next;\n    // Finally delete the temp pointer.\n    delete temp;\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-singly-linked-list-of-integers-which-are-merging-at-some-node-of-a-third-linked-list\">You are given two Singly Linked List of integers, which are merging at some node of a third linked list.</h4>\n\n<h4 id=\"your-task-is-to-find-the-data-of-the-node-at-which-merging-starts-if-there-is-no-merging-return-1\">Your task is to find the data of the node at which merging starts. If there is no merging, return -1.</h4>\n\n<h4 id=\"for-example\">For example:-</h4>\n\n<pre><code>The given Linked Lists, where a1, a2, c1 is the first linked list, b1, b2, b3, c1 is the second linked list, and c1, c2, c3 is the third linked list which are merging at node c1.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004245.png\" alt=\"alt.txt\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The input format contains three lines consisting of three singly-linked lists. \n\nAll three lines contain the elements of the singly linked list separated by a single space and terminated by -1.  \n\nSo first linked list would contain\n       a1, a2, ...an, c1, -1. \n\nSimilarly, the second line would contain\n       b1,b2, ...bm, c1, -1. \n\nThe third line would contain \n       c2, c3, ....ck, -1.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only line of output contains data of the first merged node. If there is no merging output should contain -1.\n\nYou don't have to explicitly print by yourself. It has been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^5\n0 &lt;= M &lt;= 10^5\n0 &lt;= K &lt;= 10^5.\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\n\n Time Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>4 1 8 -1\n5 6 1 8 -1\n4 5 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>As shown in the diagram the node with data is 8 at which merging starts\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004244.png\" alt=\"Sample Input 1\"></p>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1 9 1 2 -1\n3 2 -1\n4 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5>Sample Input 3 :</h5>\n\n<pre><code>2 6 4 -1\n1 5 -1\n-1\n</code></pre>\n\n<h5>Sample Output 3 :</h5>\n\n<pre><code>-1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 31,
        "link": "https://www.codingninjas.com/codestudio/problems/intersection-of-linked-list_630457?topList=striver-sde-sheet-problems",
        "title": "Intersection of Two Linked Lists",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    where N is the maximum length of linked list.\n*/\nint length(Node *head)\n{\n    int length = 0;\n    Node *tmp = head;\n    while (tmp != NULL)\n    {\n        tmp = tmp->next;\n    return length;\n}\nint findIntersection(Node *firstHead, Node *secondHead)\n{\n    //Get the length of both list\n    int firstListLength = length(firstHead), secondListLength = length(secondHead);\n    //Move headA and headB to the same start point\n    while (firstListLength > secondListLength)\n    {\n        firstHead = firstHead->next;\n        firstListLength--;\n    }\n    while (firstListLength < secondListLength)\n    {\n        secondHead = secondHead->next;\n        secondListLength--;\n    }\n    //Find the intersection until end\n    while (firstHead != secondHead)\n    {\n        firstHead = firstHead->next;\n        secondHead = secondHead->next;\n    }\n    if (firstHead == NULL)\n    {\n        return -1;\n    }\n    return firstHead->data;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-given-a-singly-linked-list-of-integers-determine-if-it-forms-a-cycle-or-not\">You have given a Singly Linked List of integers, determine if it forms a cycle or not.</h4>\n\n<h4 id=\"a-cycle-occurs-when-a-node-39-s-next-points-back-to-a-previous-node-in-the-list-the-linked-list-is-no-longer-linear-with-a-beginning-and-end-instead-it-cycles-through-a-loop-of-nodes\">A cycle occurs when a node's next points back to a previous node in the list. The linked list is no longer linear with a beginning and end\u2014instead, it cycles through a loop of nodes.</h4>\n\n<h4 id=\"note-since-it-is-binary-problem-there-is-no-partial-marking-marks-will-only-be-awarded-if-you-get-all-the-test-cases-correct\">Note: Since, it is binary problem, there is no partial marking. Marks will only be awarded if you get all the test cases correct.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1 and hence -1 would never be a list element.\n\nThe second line contains the integer position \"pos\" which represents the position (0-indexed) in the linked list where tail connects to. If \"pos\" is -1, then there is no cycle in the linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only line of output contains 'true' if linked list has a cycle or 'false' otherwise.\n\nYou don't have to explicitly print by yourself. It has been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^6\n-1 &lt;= pos &lt; N\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere 'N' is the size of the singly linked list, \"pos\" represents the position (0-indexed) in the linked list where tail connects to and \"data\" is the Integer data of singly linked list.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Try to solve this problem in O(N) Time Complexity and O(1) space Complexity\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>3 2 0 -4 -1\n1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004224.png\" alt=\"Sample Input 1\"></p>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>true\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1 -1\n-1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004227.png\" alt=\"Sample Input 1\"></p>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>false\n</code></pre>\n\n<h5>Sample Input 3 :</h5>\n\n<pre><code>1 2 -1\n1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004225.png\" alt=\"Sample Input 1\"></p>\n\n<h5>Sample Output 3 :</h5>\n\n<pre><code>true\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 32,
        "link": "https://www.codingninjas.com/codestudio/problems/cycle-detection-in-a-singly-linked-list_628974?topList=striver-sde-sheet-problems",
        "title": "Cycle Detection in a Singly Linked List",
        "solution": "/*  \n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    Where N is number of Nodes in Linked-List.\n*/\nbool detectCycle(Node *head)\n{\n    if (head == NULL || head->next == NULL)\n    {\n        return false;\n    }\n    //  Slow Pointer - This will be incremented by 1 Nodes.\n    Node *slow = head;\n    //  Fast Pointer  - This will be incremented by 2 Nodes.\n    while (slow != fast)\n    {\n        //  We reached the end of the List and haven't found any Cycle.\n        if (fast == NULL || fast->next == NULL)\n        {\n            return false;\n        }\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    //  We found a Cycle.\n    return true;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-singly-linked-list-of-integers-and-an-integer-array-39-b-39-of-size-39-n-39-each-element-in-the-array-39-b-39-represents-a-block-size-modify-the-linked-list-by-reversing-the-nodes-in-each-block-whose-sizes-are-given-by-the-array-39-b-39\">You are given a Singly Linked List of integers and an integer array 'B' of size 'N'. Each element in the array 'B' represents a block size. Modify the linked list by reversing the nodes in each block whose sizes are given by the array 'B'.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. If you encounter a situation when 'B[i]' is greater than the number of remaining nodes in the list, then simply reverse the remaining nodes as a block and ignore all the block sizes from 'B[i]'. \n\n2. All block sizes are contiguous i.e. suppose that block 'B[i]' ends at a node cur, then the block 'B[i+1]' starts from the node just after the node cur.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>Linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5\nArray B: 3 3 5\n\nOutput: 3-&gt;2-&gt;1-&gt;5-&gt;4\n\nWe reverse the first block of size 3 and then move to block 2. Now, since the number of nodes remaining in the list (2) is less than the block size (3), we reverse the remaining nodes (4 and 5) as a block and ignore all the block sizes that follow.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would not be a list element.\n\nThe second line contains a single integer 'N', denoting the size of the block array 'B'.\n\nThe third line contains 'N' single space-separated elements of the block array 'B'.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>You should return the modified linked list where elements should be single-space separated, terminated by -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= L &lt;= 5 * 10^5\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n1 &lt;= N &lt;= 5 * 10^5\n0 &lt;= B[i] &lt;= 5 * 10^5\n\nWhere 'L' is the number of nodes in the linked list and 'data' is the value of a node in the linked list. \n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1 2 3 4 5 6 7 8 9 10 11 -1\n3\n2 3 4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2 1 5 4 3 9 8 7 6 10 11 -1\n</code></pre>\n\n<h5>Explanation of the Sample Output 1:</h5>\n\n<pre><code>For the given input, the block sizes are 2, 3 and 4 respectively. First, we reverse 2 elements (1-&gt;2 becomes 2-&gt;1), then the next 3 elements (3-&gt;4-&gt;5 becomes 5-&gt;4-&gt;3) and lastly the next 4 elements (6-&gt;7-&gt;8-&gt;9 becomes 9-&gt;8-&gt;7-&gt;6). Thus, the final modified list becomes 2-&gt;1-&gt;5-&gt;4-&gt;3-&gt;9-&gt;8-&gt;7-&gt;6-&gt;10-&gt;11. \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>0 6 1 5 -1\n2\n2 3\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>6 0 5 1 -1\n</code></pre>\n\n<h5>Explanation of the Sample Output 2:</h5>\n\n<pre><code>For the given input, the block sizes are 2 and 3 . First, we reverse 2 elements (0-&gt;6 becomes 6-&gt;0), then we need to change next 3 elements but we are left with only 2 elements (1-&gt;5) and thus it becomes (5-&gt;1). Thus, the final modified list becomes 6-&gt;0-&gt;5-&gt;1.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 33,
        "link": "https://www.codingninjas.com/codestudio/problems/reverse-blocks_763406?topList=striver-sde-sheet-problems",
        "title": "Reverse Nodes in k-Group",
        "solution": "/*  \n    Time Complexity : O(L)\n    Space Complexity : O(1)\n    Where L is the number of nodes in the Linked-List.\n*/\nNode *getListAfterReverseOperation(Node *head, int n, int b[]) {\n    // If linked list is empty, return head of the linked list.\n    if (head == NULL) {\n        return NULL;\n    }\n    int idx = 0;\n    Node *prev = NULL, *cur = head, *temp = NULL;\n    Node *tail = NULL, *join = NULL;\n    bool isHeadUpdated = false;\n    // Reverse nodes until the list is empty or entire block array has been considered.\n    while (cur != NULL && idx < n) {\n        // K represents the size of the current block\n        int K = b[idx];\n        // Just move to the next block if size of the current block is zero\n        if (K == 0) {\n            idx++;\n            continue;\n        }\n        join = cur;\n        prev = NULL;\n        // Reverse nodes until end of list is reached or current block has been reversed\n        while (cur != NULL && K--) {\n            temp = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = temp;\n        }\n        // Update the head pointer when reversing the first block.\n        if (isHeadUpdated == false) {\n            head = prev;\n            isHeadUpdated = true;\n        }\n        // Tail pointer keeps track of the last node before the current K-reversed linked list. \n        // We join the tail pointer with the current K-reversed linked list's head. \n        if (tail != NULL) {\n            tail->next = prev;\n        }\n        // The tail is then updated to the last node of the current K-reversed linked list.\n        tail = join;\n        idx++;\n    }\n    // If entire block is iterated and reached at end, then we append the remaining nodes to the tail of the partial modified linked list.\n    if (tail != NULL) {\n        tail->next = cur;\n    }\n    // Return the head of the linked list.\n    return head;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-singly-linked-list-of-integers-your-task-is-to-return-true-if-the-given-singly-linked-list-is-a-palindrome-otherwise-returns-false\">You are given a singly Linked List of integers. Your task is to return true if the given singly linked list is a palindrome otherwise returns false.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The given linked list is 1 -&gt; 2 -&gt; 3 -&gt; 2-&gt; 1-&gt; NULL.\n\nIt is a palindrome linked list because the given linked list has the same order of elements when traversed forwards and backward\u200b.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve the problem in O(N) time complexity and O(1) space complexity iteratively?\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print \u201ctrue\u201d or \u201cfalse\u201d in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= L &lt;= 10^5\n1 &lt;= data &lt;= 10^9 and data != -1\n\nWhere L is the number of nodes in the Linked List.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 6 -1\n1 2 1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>false\ntrue\n</code></pre>\n\n<h5>Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, it is not a palindrome because Linked List doesn't have the same order of elements when traversed forwards and backwards\u200b.\n\nFor the second test case, it is a palindrome linked list because a Linked List has the same order of elements when traversed forwards and backwards\u200b.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1\n1 10 45 10 1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 34,
        "link": "https://www.codingninjas.com/codestudio/problems/palindrom-linked-list_799352?topList=striver-sde-sheet-problems",
        "title": "Palindrome Linked List",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Compexity: O(1)\n    Where N is the total nodes in Linked List.\n*/\nLinkedListNode<int> *reverse(LinkedListNode<int> *head) {\n    // Creating node for remembering previous node in Linked List.\n    LinkedListNode<int> *reverseHead = NULL;\n    // Creating temporory node.\n    LinkedListNode<int> *current = head;\n    while (current != NULL) {\n           current->next;\n        current->next = reverseHead;\n        reverseHead = current;\n        current = currentNext;\n    }\n    // Return reverse Linked List.\n    return reverseHead;\n}\nbool isPalindrome(LinkedListNode<int> *head) {\n    LinkedListNode<int> *slow = head;\n    LinkedListNode<int> *fast = head;\n    LinkedListNode<int> *prev = head;\n    // Find the middle node using TORTOISE-HARE-APPROACH.\n    while (fast != NULL && fast->next != NULL) {\n        prev = slow;\n        fast = fast->next->next;\n        slow = slow->next;\n    }\n    /*\n        Fast pointer would become NULL when there are even elements in the list and\n        not NULL for odd elements. We need to skip the middle node for odd case.\n    */\n    if (fast != NULL) {\n        slow = slow->next;\n    }\n    // When there is only one node in given Linked List.\n    if (slow == NULL) {\n        return true;\n    }\n    // Dividing Linked LIst in two part by pointing prev next to NULL.\n    prev->next = NULL;\n    // Now reverse the second half.\n    LinkedListNode<int> *reverseHead = reverse(slow);\n    // Iterate through both LinkedList and then compare it.\n    while (head != NULL) {\n        if (head->data != reverseHead->data) {\n            return false;\n        }\n        reverseHead = reverseHead->next;\n        head = head->next;\n    }\n    return true;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-singly-linked-list-which-may-or-may-not-contain-a-cycle-you-are-supposed-to-return-the-node-where-the-cycle-begins-if-a-cycle-exists\">You have been given a singly linked list which may or may not contain a cycle. You are supposed to return the node where the cycle begins (if a cycle exists).</h4>\n\n<h4 id=\"a-cycle-occurs-when-a-node-39-s-next-pointer-points-back-to-a-previous-node-in-the-list-the-linked-list-is-no-longer-linear-with-a-beginning-and-end-instead-it-cycles-through-a-loop-of-nodes\">A cycle occurs when a node's next pointer points back to a previous node in the list. The linked list is no longer linear with a beginning and end\u2014instead, it cycles through a loop of nodes.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1 and hence -1 would never be a list element.\n\nThe second line contains the integer position \"pos\" which represents the position (0-indexed) in the linked list where the tail connects to. If \"pos\" is -1, then there is no cycle in the linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the integer position \u201cpos\u201d which represents the position of (0-indexed) in the linked list which is the first node of the cycle. Print -1 if there is no cycle in the linked list.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= T &lt;= 50\n-10^4 &lt;= N &lt;= 10^4\n-1 &lt;= pos &lt; N\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you do this in O(N) time and usingconstant space?\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3 2 0 -4 -1\n1\n1 -1\n1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004224.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the second test case, the cycle starting from the first node exists in the linked list.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 -1\n1\n1 2 3 -1\n-1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>0\n-1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 35,
        "link": "https://www.codingninjas.com/codestudio/problems/detect-the-first-node-of-the-loop_1112628?topList=striver-sde-sheet-problems",
        "title": "Linked List Cycle II",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    Where 'N' is the number of nodes in the linked list.\n*/\nNode *firstNode(Node *head)\n{\n    if (head == NULL)\n    {\n        // Empty linked list.\n        return NULL;\n    }\n    // Slow Pointer - This will be incremented by 1 Nodes\n    // Fast Pointer - This will be incremented by 2 Nodes\n    Node *fast = head;\n    do\n    {\n        if (fast && fast->next)\n        {\n            fast = fast->next->next;\n        }\n        else\n        {\n            // Fast pointer reached the end of the list.\n            return NULL;\n        }\n        slow = slow->next;\n    } while (fast != slow);\n    slow = head;\n    // To track the position of node.\n    while (slow != fast)\n    {\n        slow = slow->next;\n        fast = fast->next;\n    }\n    return slow;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-linked-list-containing-n-nodes-where-every-node-in-the-linked-list-contains-two-pointers-first-one-is-next-which-points-to-the-next-node-in-the-list-and-the-second-one-is-child-pointer-to-a-linked-list-where-the-head-is-this-node-and-each-of-these-child-linked-lists-is-in-sorted-order\">You are given a linked list containing N nodes, where every node in the linked list contains two pointers, first one is \u2018NEXT\u2019 which points to the next node in the list and the second one is \u2018CHILD\u2019 pointer to a linked list where the head is this node. And each of these child linked lists is in sorted order.</h4>\n\n<h4 id=\"your-task-is-to-flatten-this-linked-such-that-all-nodes-appear-in-a-single-layer-or-level-while-the-nodes-should-maintain-the-sorted-order\">Your task is to flatten this linked such that all nodes appear in a single layer or level while the nodes should maintain the <strong>sorted order</strong>.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The given linked list is - \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-7731.png\" alt=\"\"></p>\n\n<pre><code>So your output should be \n\n1 \u2192 2 \u2192 3 \u2192 4 \u2192 5 \u2192 6 \u2192 7 \u2192 8 \u2192 9 \u2192 12 \u2192 20 \u2192 null.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The flattened list will be printed using the bottom pointer instead of the next pointer.\n\nThe value of any node in the linked list will not be equal to -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of the test case contains \u2018N\u2019 which represents the number of next-nodes in the linked list.\n\nThe description of the next N lines is as follows-\n\nEach line contains space-separated integers which are the child nodes of the head linked list and each line ends with -1 to indicate that the sublist is over. Thus, -1 will never be a linked list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the head node of the final linked list. The output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n1 &lt;= C &lt;= 20\n1 &lt;= data &lt;= 1000\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n5\n3 4 6  -1\n5 11 14 -1\n22 25 -1\n26 28 -1\n39  -1\n4\n1 2 3 -1\n8 10 15 -1\n18 22 -1\n29 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3 4 5 6 11 14 22 25 26 28 39\n1 2 3 4 6 8 10 15 18 22 29\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nThe given linked list is :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-7733.png\" alt=\"\"></p>\n\n<pre><code>Therefore after flattening the list will become-\n3 -&gt; 4 -&gt;  5 -&gt;  6 -&gt; 11 -&gt; 14 -&gt; 22 -&gt; 25 -&gt; 26 -&gt; 28 -&gt; 39-&gt;null\nNote that: the list after flattening should be sorted!\n\nFor the second test case:\n\nThe given linked list is \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-7732.png\" alt=\"\">    </p>\n\n<pre><code>Therefore after flattening the list will become-\n1 -&gt; 2 -&gt;  3 -&gt;  4 -&gt; 6 -&gt; 8 -&gt; 10 -&gt; 15 -&gt; 18 -&gt; 22 -&gt; 29 -&gt;null\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>3\n5\n4 6 -1\n5 71 -1\n7 8 9 -1\n11 12 19 -1\n14 15 17 -1\n2\n3 4 -1\n5 6 7 8 -1\n1\n3 -1 \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>4 5 6 7 8 9 11 12 14 15 17 19 71\n3 4 5 6 7 8\n3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 36,
        "link": "https://www.codingninjas.com/codestudio/problems/flatten-a-linked-list_1112655?topList=striver-sde-sheet-problems",
        "title": "Flatten A Linked List",
        "solution": "/*\n    Time Complexity: O(N * K)\n    Space complexity: O(N)\n    Where 'N' denotes the size of the linked list and 'K' is the average number of child nodes for each of the N nodes->\n*/\nNode *merge(Node *first, Node *second)\n{\n    // If the first is NULL return second\n    if (first == NULL)\n    {\n        return second;\n    }\n    // If the second is NULL return first\n        return first;\n    }\n    Node *merged = NULL;\n    if (first->data < second->data)\n    {\n        merged = first;\n        merged->child = merge(first->child, second);\n    }\n    else\n    {\n        merged = second;\n        merged->child = merge(first, second->child);\n    }\n    merged->next = nullptr;\n    return merged;\n}\nNode *flattenLinkedList(Node *head)\n{\n    if (head == NULL || head->next == NULL)\n    {\n        return head;\n    }\n    // Recur on next node\n    head->next = flattenLinkedList(head->next);\n    // Merge with the current\n    head = merge(head, head->next);\n    return head;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-linked-list-having-n-nodes-and-an-integer-k-you-have-to-rotate-the-linked-list-by-k-positions-in-a-clockwise-direction\">You have been given a Linked List having \u2018N\u2019 nodes and an integer \u2018K\u2019. You have to rotate the Linked List by \u2018K\u2019 positions in a clockwise direction.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code> Given Linked List : 1 2 3 4 -1 and K : 2\n Then the modified Linked List after K rotation : 3 4 1 2\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case contains single space-separated integers, denoting the elements of the Linked List with -1 being the last element denoting the end of the List (or null element).\n\nThe next line of each test case contains an integer \u2018K\u2019, representing the number of positions up to the given Linked List that has to rotate.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the elements of the resultant Linked List after rotating by \u2018K\u2019 positions in a clockwise direction.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10^5\n0 &lt;= node.data &lt;= 10^9 and node.data != -1 \n0 &lt;= \u2018K\u2019 &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 6 -1\n2\n2 4 -1\n3\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>5 6 1 2 3 4\n4 2\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, after 1st clockwise rotation the modified Linked List will be : 6 1 2 3 4 5\nAfter, 2nd clockwise rotated the modified Linked List will be : 5 6 1 2 3 4\n\nFor the second test case, after 1st clockwise rotation the modified Linked List will be : 4 2\nAfter, 2nd clockwise rotated the modified Linked List will be : 2 4\nAfter, 3rd clockwise rotated the modified Linked List will be : 4 2\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 -1\n2\n3 6 9 -1\n0\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2 3 1\n3 6 9\n</code></pre>\n\n<h5>Explanation For Sample Input 2 :</h5>\n\n<pre><code>For the first test case, after 1st clockwise rotation the modified Linked List will be : 3 1 2\nAfter, 2nd clockwise rotated the modified Linked List will be : 2 3 1\n\nFor the second test case, \u2018K\u2019 is 0 therefore there will be no rotation, so the Linked List remains unchanged.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 37,
        "link": "https://www.codingninjas.com/codestudio/problems/rotate-linked-list_920454?topList=striver-sde-sheet-problems",
        "title": "Rotate Linked List",
        "solution": "/*\n    Time Complexity : O(N) \n    Space Complexity: O(1)\n    Where N denotes the size of the linked list.\n*/\nNode *rotate(Node *head, int k) {\n    // Base condition.\n    if(head == NULL) {\n        return head;\n    }\n    int len = 1;\n    Node *temp = head;\n    // Calculate length of the linked list.\n        len += 1;\n    }\n    k = k % len;\n    // Number of rotations are same as len so no change in LL.\n    if(k == len || k == 0) {\n        return head;\n    }\n    // To make a circular linked list.\n    temp->next = head;\n    temp = head;\n    for(int i = 0; i < abs(len - k - 1); i++) {\n        temp = temp->next;\n    }\n    // Changing pointers.\n    head = temp->next;\n    temp->next = NULL;\n    return head;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-linked-list-having-two-pointers-in-each-node-the-first-one-points-to-the-next-node-of-the-list-however-the-other-pointer-is-random-and-can-point-to-any-node-of-the-list-or-null-the-task-is-to-create-a-deep-copy-of-the-given-linked-list-and-return-its-head-we-will-validate-whether-the-linked-list-is-a-copy-of-the-original-linked-list-or-not\">Given a linked list having two pointers in each node. The first one points to the next node of the list, however, the other pointer is random and can point to any node of the list or null. The task is to create a deep copy of the given linked list and return its head. We will validate whether the linked list is a copy of the original linked list or not.</h4>\n\n<h4 id=\"a-deep-copy-of-a-linked-list-means-we-do-not-copy-the-references-of-the-nodes-of-the-original-linked-list-rather-for-each-node-in-the-original-linked-list-a-new-node-is-created\">A deep copy of a Linked List means we do not copy the references of the nodes of the original Linked List rather for each node in the original Linked List, a new node is created.</h4>\n\n<h4 id=\"for-example\">For example,</h4>\n\n<p><img src=\"https://files.codingninjas.in/linkedlist-5722.png\" alt=\"example\"></p>\n\n<h4 id=\"random-pointers-are-shown-in-red-and-next-pointers-in-black\">Random pointers are shown in red and next pointers in black.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains the elements of the linked-list with random pointers. The line consists of nodes (value of node followed by its random pointer) separated by a single space. In case a node (next or random pointer) is null, we take -1 in its place.\n\nEach node is represented as a pair of a value and its random index where,\nValue: an integer representing the value of the node\nRandom index: the index of the node where the random pointer points to, or -1 if it does not point to any node.\n\nFor example, the input for the linked list depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/linkedlist-5722.png\" alt=\"example\"></p>\n\n<pre><code>1 2 2 0 3 4 4 4 5 1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>The head node of the linked-list is 1, and its random pointer points to a node present at index 2, i.e. node 3.\n\nThe second node of the linked list is 2, and its random pointer points to a node present at index 0, i.e. node 1.\n\nIn this way, input for each node is taken until a pair having its first part as -1 is encountered since it denotes a node having null value, i.e. end of the linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only output line contains \u201ctrue\u201d if the linked list is successfully cloned.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 ^ 2\n0 &lt;= N &lt;= 10 ^ 3\n0 &lt;= DATA &lt;= 10 ^ 6 and data != -1\n-1 &lt;= RANDOMINDEX &lt; N\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the linked list, 'DATA' is the value of the linked list node and 'RANDOMINDEX' is the index of the node where the random pointer points to.\n\nTime limit: 1 sec.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>Can you do it without using extra space?\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n1 2 2 0 3 4 4 4 5 1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>true\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, \u201ctrue\u201d will be printed if the linked list is successfully cloned.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/linkedlist-2-5747.png\" alt=\"example\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 1 2 1 -1\n7 -1 13 0 11 4 10 2 1 0 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 38,
        "link": "https://www.codingninjas.com/codestudio/problems/clone-linked-list-with-random-pointer_873376?topList=striver-sde-sheet-problems",
        "title": "Copy List with Random Pointer",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n    Where 'N' is the number of nodes in the list.\n*/\n// This function clones a given linked list in O(1) space.\nLinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)\n{\n    LinkedListNode<int> *curr = head, *temp = NULL;\n    // Insert additional node after every node of original list.\n        temp = curr->next;\n        // Inserting node.\n        curr->next = new LinkedListNode<int>(curr->data);\n        curr->next->next = temp;\n        curr = temp;\n    }\n    curr = head;\n    // Adjust the random pointers of the newly added nodes.\n    while (curr != NULL)\n    {\n        if (curr->next != NULL)\n        {\n            if (curr->random != NULL)\n            {\n                curr->next->random = curr->random->next;\n            }\n            else\n            {\n                curr->next->random = curr->random;\n            }\n        }\n        // Move to the next newly added node by skipping an original node.\n        if (curr->next != NULL)\n        {\n            curr = curr->next->next;\n        }\n        else\n        {\n            curr = curr->next;\n        }\n    }\n    LinkedListNode<int> *original = head, *copy = NULL;\n    if (head != NULL)\n    {\n        copy = head->next;\n    }\n    // Save the start of copied linked list.\n    temp = copy;\n    // Now separate the original list and copied list.\n    while (original != NULL && copy != NULL)\n    {\n        if (original->next != NULL)\n        {\n            original->next = original->next->next;\n        }\n        if (copy->next != NULL)\n        {\n            copy->next = copy->next->next;\n        }\n        original = original->next;\n        copy = copy->next;\n    }\n    return temp;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-list-arr-consisting-of-n-integers-your-task-is-to-find-all-the-distinct-triplets-present-in-the-array-which-adds-up-to-a-given-number-k\">You are given an array/list ARR consisting of N integers. Your task is to find all the distinct triplets present in the array which adds up to a given number K.</h4>\n\n<h4 id=\"an-array-is-said-to-have-a-triplet-arr-i-arr-j-arr-k-with-sum-39-k-39-if-there-exists-three-indices-i-j-and-k-such-that-i-j-j-k-and-i-j-and-arr-i-arr-j-arr-k-39-k-39\">An array is said to have a triplet {ARR[i], ARR[j], ARR[k]} with sum = 'K' if there exists three indices i, j and k such that i!=j, j!=k and i!=j and ARR[i] + ARR[j] + ARR[k] = 'K'.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You can return the list of values in any order. For example, if a valid triplet is {1, 2, -3}, then {2, -3, 1}, {-3, 2, 1} etc is also valid triplet. Also, the ordering of different triplets can be random i.e if there are more than one valid triplets, you can return them in any order.\n2. The elements in the array need not be distinct.\n3. If no such triplet is present in the array, then return an empty list, and the output printed for such a test case will be \"-1\".\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T, denoting the number of test cases.\n\nThe first line of each test case contains the integer N, denoting the size of the array.\n\nThe second line of each test case contains N space-separated integers denoting the array elements.\n\nThe third line of each test case contains the integer K, denoting the required sum for each triplet.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, every line of output contains three spaced integers denoting a valid triplet as described in the statement. Refer to sample input 2 for more clarification.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;=  50\n1 &lt;= N &lt;= 10^3  \n-10^6 &lt;= ARR[i] &lt;= 10^6\n-10^9 &lt;= K &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n5\n10 5 5 5 2\n12\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>5 5 2\n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>5 5 2 is the only triplet that adds up to 15. Note that the order of the output doesn\u2019t matter, so 5 2 5 or 2 5 5 is also acceptable.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>3\n6\n1 2 3 1 2 3\n6\n4\n1 2 3 4 \n11\n6\n1 1 2 2 1 1\n4\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 2 3\n-1\n1 1 2\n</code></pre>\n\n<h5>Explanation for Sample Input 2:</h5>\n\n<pre><code>In the first input, (1, 2, 3) is the only unique triplet that adds up to six.\n\nIn the second input, since there are no such triplets, we print -1.\n\nFor the third input, the only distinct triplet is (1, 1, 2), so just print 1 1 2.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 39,
        "link": "https://www.codingninjas.com/codestudio/problems/triplets-with-given-sum_893028?topList=striver-sde-sheet-problems",
        "title": "3Sum",
        "solution": "/*\n    Time Complexity: O(N^2)\n    Space Complexity: O(1)\n    Where N is the number of elements in the array.\n*/\nvector<vector<int>> findTriplets(vector<int>arr, int n, int K) {\n    vector<vector<int>>ans;\n    // Sorting the vector.\n    sort(arr.begin(), arr.end());\n    for (int i = 0; i < n; i++) {\n        int target = K - arr[i];\n        while (front < back) {\n            int sum = arr[front] + arr[back];\n            // Finding answer which starts from arr[i].\n            if (sum < target) {\n                front++;\n            }\n            else if (sum > target) {\n                back--;\n            }\n            else {\n                int x = arr[front];\n                int y = arr[back];\n                ans.push_back({arr[i], arr[front], arr[back]});\n                // Incrementing front pointer until we reach a different number.\n                while (front < back && arr[front] == x) {\n                    front++;\n                }\n                // Decrementing last pointer until we reach a different number.\n                while (front < back && arr[back] == y) {\n                    back--;\n                }\n            }\n        }\n        // Ensuring that we don't encounter duplicate values for arr[i].\n        while (i + 1 < n && arr[i] == arr[i + 1]) {\n            i++;\n        }\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-long-type-array-list-39-arr-39-of-size-39-n-39-it-represents-an-elevation-map-wherein-39-arr-i-39-denotes-the-elevation-of-the-39-ith-39-bar-print-the-total-amount-of-rainwater-that-can-be-trapped-in-these-elevations\">You have been given a long type array/list 'ARR' of size 'N'. It represents an elevation map wherein 'ARR[i]' denotes the elevation of the 'ith' bar. Print the total amount of rainwater that can be trapped in these elevations.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The width of each bar is the same and is equal to 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains an integer 'N' representing the size of the array/list.\n\nThe second line contains 'N' single space-separated integers representing the elevation of the bars.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print in a single line a single integer denoting the total water that can be trapped.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10^4\n0 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit : 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n6\n3 0 0 2 0 4\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>10\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>Refer to the image for better comprehension:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000001829.png\" alt=\"Alt Text\"></p>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1\n100\n3\n5 1 5\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>0\n4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 40,
        "link": "https://www.codingninjas.com/codestudio/problems/trapping-rainwater_630519?topList=striver-sde-sheet-problems",
        "title": "Trapping Rain Water",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    Where N is the total number of elevations.\n*/\n#include <climits>\nlong getTrappedWater(long *arr, int n){\n    //Reference point.\n    int peak = 0;\n    // Result.\n    long ans = 0L;\n    }\n    long peakVal = arr[0];\n    // Moving left to right.\n    for (int i = 0; i < n; i++) {\n        if (arr[i] >= peakVal) {\n            peak = i;\n            peakVal = arr[i];\n        }\n    }\n    // Initialising a min value.\n    long maxSoFar = LONG_MIN;\n    long countSubmerged = 0L;\n    long submergedArea = 0L;\n    // Traversing over a peak.\n    for (int i = 0; i <= peak; i++) {\n        if (arr[i] >= maxSoFar) {\n            // Calculation.\n            ans += (countSubmerged * maxSoFar - submergedArea);\n            maxSoFar = arr[i];\n            countSubmerged = 0L;\n            submergedArea = 0L;\n        }\n        else {\n            submergedArea += arr[i];\n            countSubmerged++;\n        }\n    }\n    // Initialising a min value.\n    maxSoFar = LONG_MIN;\n    countSubmerged = 0L;\n    submergedArea = 0L;\n    // Moving right to left.\n    for (int i = n - 1; i >= peak; i--) {\n        if (arr[i] >= maxSoFar) {\n            // Calculation.\n            ans += (countSubmerged * maxSoFar - submergedArea);\n            maxSoFar = arr[i];\n            countSubmerged = 0L;\n            submergedArea = 0L;\n        }\n        else {\n            submergedArea += arr[i];\n            countSubmerged++;\n        }\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-sorted-integer-array-39-arr-39-of-size-39-n-39-you-need-to-remove-the-duplicates-from-the-array-such-that-each-element-appears-only-once-return-the-length-of-this-new-array\">You are given a sorted integer array' ARR' of size 'N'. You need to remove the duplicates from the array such that each element appears only once. Return the length of this new array.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Do not allocate extra space for another array. You need to do this by modifying the given input array in-place with O(1) extra memory. \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of elements in the array. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the array. \n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the length of the modified array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n-10^9 &lt;= ARR[i] &lt;=10^9\n\nWhere \u2018ARR[i]\u2019 is the value of elements of the array.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 1 2\n5\n1 2 3 4 5\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n5\n</code></pre>\n\n<h5>Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, Modified Array after removing duplicates: [1 2]. Thus the Length of modified array is 2.\n\nIn test case 2, All the elements of the array are distinct and so the array will be unchanged. Thus the length will be 5.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n5\n3 3 3 4 4\n10\n1 2 3 4 5 6 7 8 9 10\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2\n10\n</code></pre>\n\n<h5>Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, Modified Array after removing duplicates: [3 4]. Thus the Length of modified array is 2.\n\nIn test case 2, All the elements of the array are distinct and so the array will be unchanged. Thus the length will be 10.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 41,
        "link": "https://www.codingninjas.com/codestudio/problems/remove-duplicates-from-sorted-array_1102307?topList=striver-sde-sheet-problems",
        "title": "Remove Duplicates from Sorted Array",
        "solution": "/*\n    Time complexity: O(N) \n    Space complexity: O(1)\n    Where 'N' is the length of the array.\n*/\nint removeDuplicates(vector<int> &arr, int n) {\n    // First pointer.\n    int i = 0;\n    // Second pointer traversing from 1 to n.\n    for (int j = 1; j < n; j++) {\n        //  If not duplicates increment first pointer and check again.\n        if (arr[j] != arr[j-1]) {\n            arr[i++] = arr[j];\n        }\n    return i + 1;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-binary-array-39-arr-39-of-size-39-n-39-your-task-is-to-find-the-longest-sequence-of-continuous-1-s-that-can-be-formed-by-replacing-at-most-39-k-39-zeroes-by-ones-return-the-length-of-this-longest-sequence-of-continuous-1-s\">Given a binary array 'ARR' of size 'N', your task is to find the longest sequence of continuous 1\u2019s that can be formed by replacing at-most 'K' zeroes by ones. Return the length of this longest sequence of continuous 1\u2019s.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case or query contains an integer 'N' representing the size of the array (ARR).\n\nThe second line contains 'N' single space-separated binary values, representing the elements in the array.\n\nThe third line contains the value of 'K'.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the length of the longest subarray whose all elements are 1.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10^4 \n0 &lt;= Arr[i] &lt;= 1\n0 &lt;= K &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n7\n1 0 0 1 1 0 1   \n1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>4 \n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>Here we can replace at-most one 0 by 1 ( since K = 1 ). So the longest consecutive subarray with all 1\u2019s that we can get is by replacing the 0 present at index 5.    \n\nSo the updated array will be {1,0,0,1,1,1,1}.\n\nAs we can see in the updated array the longest subarray with all 1\u2019s is from index 3 of length 4.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n10\n1 0 0 1 0 1 0 1 0 1\n2\n5\n1 1 0 1 1\n2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>5\n5\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>Here, In the first test case we can replace at-most two 0\u2019s by 1\u2019s ( since 'K' = 2 ). So the longest consecutive subarray with all 1\u2019s  we can get is by replacing the 0 present at index 4 and index 6 or index 6 and index 8 .    \nSo the updated array will be either {1,0,0,1,1,1,1,1,0,1} or {1,0,0,1,0,1,1,1,1,1}.\n\nIn the second test case there is only one zero in the whole array and we are allowed to replace two 0\u2019s by 1\u2019s so the answer will be the size of the array, i.e. 5.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 42,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-consecutive-ones_892994?topList=striver-sde-sheet-problems",
        "title": "Maximum Consecutive Ones",
        "solution": "/*\n    Time complexity: O(N) \n    Space complexity: O(1)\n    where 'N' is the total number of elements in the array.\n*/\nint longestSubSeg(vector<int> &arr , int n, int k) \n{ \n    // Stores count of zero in the array under consideration.\n    int cnt0 = 0;\n    int l = 0; \n    int maxLen = 0; \n    for (int r = 0; r < n; r++) { \n        if (arr[r] == 0) {\n            cnt0++; \n        }\n        // If there are more 0's move left pointer towards current ending point. \n        while (cnt0 > k) { \n            if (arr[l] == 0) {\n                cnt0--; \n            }\n            l++; \n        } \n        maxLen = max(maxLen, r - l + 1); \n    }\n    return maxLen; \n} \n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-the-schedule-of-n-meetings-with-their-start-time-start-i-and-end-time-end-i-but-you-have-only-1-meeting-room-so-you-need-to-tell-the-meeting-numbers-you-can-organize-in-the-given-room-such-that-the-number-of-meetings-organized-is-maximum\">You are given the schedule of N meetings with their start time Start[i] and end time End[i]. But you have only 1 meeting room. So, you need to tell the meeting numbers you can organize in the given room, such that the number of meetings organized is maximum.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The start time of one chosen meeting can\u2019t be equal to the end time of the other chosen meeting. Also for the same end time, a meeting with a smaller index is preferred. \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer 'T' denoting the number of test cases or queries to be run. \n\nThe first line of each test case or query contains a single integers 'N' denoting the number of meetings. \n\nThe second line of each test case contains N single space-separated integers denoting the start time of N meetings respectively.\n\nThe third line of each test case contains N single space-separated integers denoting the end time of N meetings respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the meeting numbers (Consider 1 based indexing) you organized in the given room, in the order in which you organized them such that the number of meetings is maximum.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n0 &lt;= Start[i] &lt; End[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n6\n1 3 0 5 8 5\n2 4 6 7 9 9\n3\n1 1 1\n4 5 9\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 4 5\n1\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>For test case 1: \nYou can organize a maximum of 4 meetings. Meeting number 1 from 1 to 2, Meeting number 2 from 3 to 4, Meeting number 4 from 5 to 7, and Meeting number 5 from 8 to 9.\n\nFor test case 2:\nAs all meetings have the same start time, you can organize only 1 meeting in the room.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n5\n0 7 1 4 8\n2 9 5 9 10\n3\n1 2 3\n4 4 4\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 2 \n1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 43,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-meetings_1062658?topList=striver-sde-sheet-problems",
        "title": "Maximum meetings",
        "solution": "/*\n    Time Complexity: O(N * logN)\n    Space Complexity: O(N)\n    Where N is the number of meetings.\n*/\n#include <algorithm>\nstruct meet {\n    int meetingID;\n    int startTime;\n    int endTime;\n};\nbool compare(struct meet a, struct meet b) {\n    if (a.endTime == b.endTime) {\n        return a.meetingID < b.meetingID;\n        return a.endTime < b.endTime;\n    }\n}\nvector<int> maximumMeetings(vector<int> &start, vector<int> &end) {\n    int n = start.size();\n    // Creating meeting array of size N.\n    struct meet meeting[n];\n    for (int i = 0; i < n; i++) {\n        meeting[i].meetingID = i + 1;\n        meeting[i].startTime = start[i];\n        meeting[i].endTime = end[i];\n    }\n    // Sorting the meeting array in increasing order of end time using customized comparator.\n    sort(meeting, meeting + n, compare);\n    vector<int> result;\n    // Taking the first meeting of sorted array as our first meeting.\n    result.push_back(meeting[0].meetingID);\n    int currentTime = meeting[0].endTime;\n    for (int i = 1; i < n; i++) {\n        // If startTime of current meeting is greater than our currentTime.\n        // Then we will perform this meeting and update currentTime with endTime of the meeting.\n        if (meeting[i].startTime > currentTime) {\n            result.push_back(meeting[i].meetingID);\n            currentTime = meeting[i].endTime;\n        }\n    }\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-two-arrays-39-at-39-and-39-dt-39-representing-the-arrival-and-departure-times-of-all-trains-that-reach-a-railway-station\">You have been given two arrays, 'AT' and 'DT', representing the arrival and departure times of all trains that reach a railway station.</h4>\n\n<h4 id=\"your-task-is-to-find-the-minimum-number-of-platforms-required-for-the-railway-station-so-that-no-train-needs-to-wait\">Your task is to find the minimum number of platforms required for the railway station so that no train needs to wait.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. Every train will depart on the same day and the departure time will always be greater than the arrival time. For example, A train with arrival time 2240 and departure time 1930 is not possible.\n\n2. Time will be given in 24H format and colons will be omitted for convenience. For example, 9:05AM will be given as \"905\", or 9:10PM will be given as \"2110\".\n\n3. Also, there will be no leading zeroes in the given times. For example, 12:10AM will be given as \u201c10\u201d and not as \u201c0010\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases.\n\nThe first line of each test case contains an integer 'N', representing the total number of trains.\n\nThe second line of each test case contains 'N' single-spaced separated elements of the array 'AT',  representing the arrival times of all the trains.\n\nThe third line of each test case contains 'N' single-spaced separated elements of the array 'DT', representing the departure times of all the trains.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the minimum number of platforms required for the railway station so that no train needs to wait.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print the output, it has already been taken care of. You just need to implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up :</h5>\n\n<pre><code>Try to solve the problem in O(N) time and O(1) space.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 50000\n0 &lt;= AT[i] &lt;= DT[i] &lt;= 2359\n\nWhere 'AT[i]' and 'DT[i]' are the elements of the arrival and the departure arrays respectively.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n6\n900 940 950 1100 1500 1800\n910 1200 1120 1130 1900 2000\n4\n100 200 300 400\n200 300 400 500\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5>Explanation of the Sample Output 1:</h5>\n\n<pre><code>In test case 1, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 900 on platform 1. \nTrain 1 departed at 910 from platform 1. \nTrain 2 arrived at 940 on platform 1.\nTrain 3 arrived at 950 on platform 2 (since platform 1 was already occupied by train 1).\nTrain 4 arrived at 1100 on platform 3 (since both platforms 1 and 2 were occupied by trains 2 and 3 respectively).\nTrain 3 departed at 1120 from platform 2 (platform 2 becomes vacant).\nTrain 4 departed at 1130 from platform 3 (platform 3 also becomes vacant).\nTrain 2 departed at 1200 from platform 1 (platform 1 also becomes vacant).\nTrain 5 arrived at 1500 on platform 1.\nTrain 6 arrived at 1800 on platform 2.\nTrain 5 departed at 1900 from platform 1.\nTrain 6 departed at 2000 from platform 2.\n\nThus, minimum 3 platforms are needed for the given input.\n\nIn test case 2, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 100 on platform 1. \nTrain 2 arrived at 200 from platform 2 (as platform 1 is occupied by train 1).\nTrain 1 departed at 200 from platform 1. \nTrain 3 arrived at 300 on platform 1.\nTrain 2 departed at 300 from platform 2.\nTrain 4 arrived at 400 on platform 2.\nTrain 3 departed at 400 from platform 1.\nTrain 4 departed at 500 from platform 2. \n\nThus, 2 platforms are needed for the given input.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2\n900 1000\n999 1100\n3\n1200 1300 1450\n1310 1440 1600    \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5>Explanation of the Sample Output 2:</h5>\n\n<pre><code>In test case 1, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 900 on platform 1. \nTrain 1 departed at 999 from platform 1. \nTrain 2 arrived at 1000 on platform 1.\nTrain 2 arrived at 1100 on platform 1.\n\nThus, only 1 platform is needed for the given input.\n\nIn test case 2, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 1200 on platform 1. \nTrain 2 arrived at 1300 on platform 2. (since platform 1 was already occupied by train 1). \nTrain 1 departed at 1310 from platform 1.\nTrain 2 departed at 1440 from platform 2.\nTrain 3 arrived at 1450 on platform 1.\nTrain 3 departed at 1600 on platform 1.\n\nThus, minimum 2 platforms are needed for the given input.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 44,
        "link": "https://www.codingninjas.com/codestudio/problems/minimum-number-of-platforms_799400?topList=striver-sde-sheet-problems",
        "title": "Minimum Number of Platforms",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity :  O(1)\n    Where 'N' is the number of trains.\n*/\nint calculateMinPatforms(int at[], int dt[], int n)\n{\n    // Array to store the number of platforms required at different points of time.\n    int platforms[2361] = {0};\n    // Variable to store the final answer i.e. minimum number of platforms required.\n    int minNumOfPlatforms = 1;\n        // Increment the count of platforms at the time of arrival.\n        ++platforms[at[i]];\n        // Decrease the platform count just after the departure.\n        --platforms[dt[i] + 1];\n    }\n    // We are running loop till 2361 because maximum time value in a day can be 23:60.\n    for (int i = 1; i < 2361; i++)\n    {\n        // Taking cumulative sum of platforms.\n        platforms[i] = platforms[i] + platforms[i - 1];\n        // Update minNumOfPlatforms.\n        minNumOfPlatforms = max(minNumOfPlatforms, platforms[i]);\n    }\n    // Return the minimum number of platforms.\n    return minNumOfPlatforms;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-n-x-2-2-d-array-39-jobs-39-of-39-n-39-jobs-where-jobs-i-0-denote-the-deadline-of-i-th-job-and-jobs-i-1-denotes-the-profit-associated-with-i-th-job\">You are given a N x 2 2-D array 'Jobs' of 'N' jobs where Jobs[i][0] denote the deadline of i-th job and Jobs[i][1] denotes the profit associated with i-th job.</h4>\n\n<h4 id=\"you-will-make-a-certain-profit-if-you-complete-the-job-within-the-deadline-associated-with-it-each-job-takes-1-unit-of-time-to-be-completed-and-you-can-schedule-only-one-job-at-a-particular-time\">You will make a certain profit if you complete the job within the deadline associated with it. Each job takes 1 unit of time to be completed, and you can schedule only one job at a particular time.</h4>\n\n<h4 id=\"your-task-is-to-find-out-the-maximum-profit-that-you-can-make\">Your task is to find out the maximum profit that you can make.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>If a particular job has a deadline 'x', it means that it needs to be completed at any time interval before 'x'.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If jobs is - \n\n[ 2 40 ]\n[ 2 20 ]\n[1 10 ]\n\nSo, there are a total of 3 jobs. The first job has a deadline of 2, and the profit associated with it is 40. The second job has a deadline of 2, and the profit is 20. Similarly, the third job has a deadline of 1, and the profit is 10. \nSo, it\u2019s optimal to complete the first and second jobs to earn a profit of 60. One of the jobs can be completed in the first minute, and the second job can be completed in the next minute. So, the total profit = 40 + 20 = 60, and the number of completed jobs is 2. Since the third job can\u2019t be completed within the deadline, so we do not earn any profit.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this in (N*log(N)) time complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T', which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains a single integer N, denoting the number of elements of the array \u201cjobs\u201d.\n\nThe second line of each test case contains 'N' space-separated integers denoting the deadline assigned to each job.\n\nThe third line of each test case contains 'N' space-separated integers denoting the profit associated with each job.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum profit that can be earned. \n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= jobs[i][0] &lt;= 3000\n1 &lt;= jobs[i][1] &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n4\n2 2 1 1\n30 40 10 10\n5\n2 4 1 3 5\n25 40 5 50 60\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>70\n180\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the first and second jobs can be completed within the deadlines, and we earn a profit of 70 by doing so.\n\nFor the second test case, all the jobs have different deadlines. So we complete all the jobs.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1\n2\n50\n3\n1 1 1\n40 60 50\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>50\n60\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 45,
        "link": "https://www.codingninjas.com/codestudio/problems/job-sequencing-problem_1169460?topList=striver-sde-sheet-problems",
        "title": "Job Sequencing Problem",
        "solution": "/*\n    Time Complexity : O(N *log max(N, maxDeadline))\n    Space Complexity : O(maxDeadline)\n    Where 'N' is size of the array \"jobs\" and \n    'maxDeadline' is the maximum among all the deadlines.\n*/\n#include <algorithm>\n#include <set>\n// Custom Comparator function to sort the jobs in the decreasing order of their profit.\nbool compare(vector<int> &job1, vector<int> &job2)\n{\nint jobScheduling(vector<vector<int>> &jobs)\n{\n    sort(jobs.begin(), jobs.end(), compare);\n    int maxProfit = 0;\n    int maxDeadline = 0;\n    // Find the maximum deadline among all the jobs.\n    for (int i = 0; i < jobs.size(); i++)\n    {\n        maxDeadline = max(maxDeadline, jobs[i][0]);\n    }\n    // Create a set \"slots\".\n    set<int, greater<int>> slots;\n    // Insert all the elements from maxDeadline to 1 into the set.\n    for (int i = maxDeadline; i > 0; i--)\n    {\n        slots.insert(i);\n    }\n    for (int i = 0; i < jobs.size(); i++)\n    {\n        // If the set is empty or the deadline is less than the last element of the set, then ignore this job.\n        if (slots.size() == 0 || jobs[i][0] < *slots.rbegin())\n        {\n            continue;\n        }\n        int availableSlot = *slots.lower_bound(jobs[i][0]);\n        maxProfit = maxProfit + jobs[i][1];\n        slots.erase(availableSlot);\n    }\n    return maxProfit;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-weights-and-values-of-n-items-you-are-also-given-a-knapsack-of-size-w\">You have been given weights and values of \u2018N\u2019 items. You are also given a  knapsack of size \u2018W\u2019.</h4>\n\n<h4 id=\"your-task-is-to-put-the-items-in-the-knapsack-such-that-the-total-value-of-items-in-the-knapsack-is-maximum\">Your task is to put the items in the knapsack such that the total value of items in the knapsack is maximum.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are allowed to break the items.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>If 'N = 4' and 'W = 10'. The weights and values of items are weights = [6, 1, 5, 3] and values = [3, 6, 1, 4]. \nThen the best way to fill the knapsack is to choose items with weight 6, 1 and  3. The total value of knapsack = 3 + 6 + 4 = 13.00   \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018W\u2019, respectively.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers representing the weight of the i-th item.\n\nThe third line of each test case contains \u2018N\u2019 single space-separated integers representing the value of the i-th item.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output will print the maximum total value of items in the knapsack.  \n\nThe output must be rounded correctly up to two decimal places.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= W &lt;= 10^5\n1 &lt;= weights[i] &lt;= 10^5\n1 &lt;= values[i] &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n6 200\n50 40 90 120 10 200 \n40 50 25 100 30 45\n</code></pre>\n\n<h5>Sample output 1:</h5>\n\n<pre><code>204.00\n</code></pre>\n\n<h5>Explanation of Sample output 1:</h5>\n\n<pre><code>The most optimal way to fill the knapsack is to choose full items with weight 10 and value 30, weight 40 and value 50, weight 120 and value 100. Then take weight 30 from the item with weight 50 and value 40.\n\nThe total value =  30 + 50 + 100 + (30/50)*(40) = 204.00\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n5 100\n20 24 36 40 42\n12 35 41 25 32\n</code></pre>\n\n<h5>Sample output 2:</h5>\n\n<pre><code>106.48\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 46,
        "link": "https://www.codingninjas.com/codestudio/problems/fractional-knapsack_975286?topList=striver-sde-sheet-problems",
        "title": "Fractional Knapsack",
        "solution": "/*\n    Time Complexity : O(N * log(N))\n    Space Complexity : O(1)\n    where N is the number of items.\n*/\n#include <algorithm>\n// Comparator to sort items.\nbool compare(pair<int, int>& a, pair<int, int>& b)\n{\n    double r1 = (double) a.second / a.first;\n    double r2 = (double) b.second / b.first;\ndouble maximumValue(vector<pair<int,int>>& items, int n, int w)\n{\n    // Sort items according to value/weight.\n    sort(items.begin(), items.end(), compare);\n    double maxValue = 0;\n    int currWeight = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (currWeight + items[i].first <= w)\n        {\n            currWeight += items[i].first;\n            maxValue += items[i].second;\n        }\n        else\n        {\n            int remainingWeight = w - currWeight;\n            // Pick a fraction of current item.\n            maxValue += items[i].second * ((double)remainingWeight / items[i].first);\n            break;\n        }\n    }\n    return maxValue;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"dora-the-explorer-visits-india-and-decides-to-try-the-famous-indian-food-however-the-restaurant-accepts-only-indian-currency-i-e-1-2-5-10-20-50-100-500-1000-valued-coins\">Dora, the explorer, visits India and decides to try the famous Indian food. However, the restaurant accepts only Indian currency i.e. [1, 2, 5, 10, 20, 50, 100, 500, 1000] valued coins.</h4>\n\n<h4 id=\"so-dora-goes-to-a-bank-that-has-an-infinite-supply-of-each-of-the-denominations-to-make-a-change-for-a-given-amount-of-money-as-a-cashier-at-the-bank-your-task-is-to-provide-dora-the-minimum-number-of-coins-that-add-up-to-the-given-amount\">So, Dora goes to a bank that has an infinite supply of each of the denominations to make a change for a given \u2018Amount\u2019 of money. As a cashier at the bank, your task is to provide Dora the minimum number of coins that add up to the given \u2018Amount\u2019.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>For Amount = 70, the minimum number of coins required is 2 i.e an Rs. 50 coin and a Rs. 20 coin.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>It is always possible to find the minimum number of coins for the given amount. So, the answer will always exist.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe only line of each test case contains a single integer \u2018Amount\u2019 representing the amount Dora wishes to change to Indian currency.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print the minimum number of coins needed to make the change.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= Amount &lt;= 10^5\nWhere 'T' is the number of test-cases\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1</h5>\n\n<pre><code>2\n13\n20\n</code></pre>\n\n<h5>Sample Output 1</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5>Explanation of Sample Input 1</h5>\n\n<pre><code>For the First Test Case ,the minimum number of coins to make the change are 3 {1, 2, 10}.\n\nFor the second Test Case, only one coin {20} is required.\n</code></pre>\n\n<h5>Sample Input 2</h5>\n\n<pre><code>2\n50\n96\n</code></pre>\n\n<h5>Sample Output 2</h5>\n\n<pre><code>1\n5\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 47,
        "link": "https://www.codingninjas.com/codestudio/problems/find-minimum-number-of-coins_975277?topList=striver-sde-sheet-problems",
        "title": "Find Minimum Number Of Coins",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    where 'N' is the number of denominations given.\n*/\nint findMinimumCoins(int amount) \n{\n    // Array to store denominations.\n    vector<int> denominations = {1, 2, 5, 10, 20, 50, 100, 500, 1000};\n    // Variable to store result.\n    int coinsCount = 0; \n    int n = denominations.size();\n    for (int i = n - 1; i >= 0; i--) \n    {\n        coinsCount += amount / denominations[i];\n        amount %= denominations[i];\n    }\n    return coinsCount; \n} \n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-n-activities-with-their-start-time-start-and-finish-time-finish-you-need-to-tell-the-maximum-number-of-activities-a-single-person-can-perform\">You are given N activities with their start time Start[] and finish time Finish[]. You need to tell the maximum number of activities a single person can perform.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A person can only work on a single activity at a time. The start time of one activity can coincide with the end time of another.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer 'T' denoting the number of test cases or queries to be run. \n\nThe first line of each test case or query contains a single integers 'N' denoting the number of activities. \n\nThe second line of each test case contains N single space-separated integers denoting the starting time of N activities respectively.\n\nThe third line of each test case contains N single space-separated integers denoting the finishing time of N activities respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the maximum number of activities a single person can perform.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= (10^5)\n0 &lt;= Start[i] &lt; Finish[i] &lt;= (10^9)\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 6 2 4 \n2 7 5 8 \n3\n1 1 1\n4 5 9\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>For test case 1: \nA person can perform maximum of 3 activities, by performing the activities in the given order 1 - &gt; 3 -&gt; 2.\n\nFor test case 2:\nAs the starting of all the activities is the same, a person can perform a maximum of 1 activity.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 3 2 5\n2 4 3 6\n2\n1 2 \n6 3 \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>4 \n1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 48,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-activities_1062712?topList=striver-sde-sheet-problems",
        "title": "Maximum activities",
        "solution": "/*\n    Time Complexity: O(N * logN)\n    Space Complexity: O(N)\n    Where N is the number of activities.\n*/\n#include <algorithm>\nint maximumActivities(vector<int> &start, vector<int> &finish) {\n    int n = start.size();\n    vector<pair<int, int>> activity(n);\n    for (int i = 0; i < n; i++) {\n        activity[i].first = finish[i];\n        activity[i].second = start[i];\n    }\n    sort(activity.begin(), activity.end());\n    int maxActivity = 1;\n    int currentTime = activity[0].first;\n    for (int i = 1; i < n; i++) {\n        // Find the next meeting available.\n        if (activity[i].second >= currentTime) {\n            maxActivity++;\n            currentTime = activity[i].first;\n        }\n    }\n    return maxActivity;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-of-n-integers-you-have-to-find-the-sum-of-all-the-subsets-in-the-non-decreasing-order-of-the-given-array\">You are given an array of \u2018N\u2019 integers. You have to find the sum of all the subsets in the non-decreasing order of the given array.</h4>\n\n<h5 id=\"for-example\">For example</h5>\n\n<pre><code>If N=3 and array elements are [1,2].\nFollowing are the subset sums:\n0 (by considering empty subset)\n1 \n2\n1+2 = 3\nSo, subset sum are [0,1,2,3].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer, 'T\u2019, denoting the number of test cases.\n\nThe first line of each test case will contain a single integer \u2018N\u2019, denoting the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the sum of all the subsets in non-decreasing order of the given array.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 15\n0 &lt;= nums[i] &lt;= 5000\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n2\n1 2\n1\n0\n</code></pre>\n\n<h5>Sample output 1 :</h5>\n\n<pre><code>0 1 2 3\n0 0\n</code></pre>\n\n<h5>Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case,\nFollowing are the subset sums:\n0 (by considering empty subset)\n1\n2\n1+2 = 3\nSo, subset-sum are [0,1,2,3]\n\nFor the second test case,\nThere are only 2 subsets one is an empty subset and the other contains a single element \u20180\u2019.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n3 \n1 2 3\n2 \n4 5\n</code></pre>\n\n<h5>Sample output 2 :</h5>\n\n<pre><code>0 1 2 3 3 4 5 6\n0 4 5 9\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 49,
        "link": "https://www.codingninjas.com/codestudio/problems/subset-sum_3843086?topList=striver-sde-sheet-problems",
        "title": "Subset Sum",
        "solution": "/*\n    Time Complexity:  O( (2^N)*N ).\n    Space Complexity:O( 1 ).\n    Where 'N' is the size of the array.\n*/\nvector<int> subsetSum(vector<int> &num)\n{\n    int n = num.size();\n    // Ans vector contains all the subset sums.\n    vector<int> ans;\n    for (int i = 0; i < (1 << n); i++)\n    {\n        int sum = 0;\n        for (int j = 0; j < n; j++)\n        {\n            if ((1 << j) & i)\n            {\n                sum += num[j];\n            }\n        }\n        ans.push_back(sum);\n    }\n    // Sort the vector and finally return it.\n    sort(ans.begin(), ans.end());\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-is-observing-an-array-of-n-numbers-and-wants-to-make-as-many-unique-subsets-as-possible-can-you-help-the-ninja-to-find-all-the-unique-subsets\">Ninja is observing an array of \u2018N\u2019 numbers and wants to make as many unique subsets as possible. Can you help the Ninja to find all the unique subsets?</h4>\n\n<h4 id=\"note-two-subsets-are-called-same-if-they-have-same-set-of-elements-for-example-3-4-1-and-1-4-3-are-not-unique-subsets\">Note: Two subsets are called same if they have same set of elements.For example {3,4,1} and {1,4,3} are not unique subsets.</h4>\n\n<h4 id=\"you-are-given-an-array-arr-having-n-elements-your-task-is-to-print-all-unique-subsets\">You are given an array \u2018ARR\u2019 having N elements. Your task is to print all unique subsets.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>For the given if ARR = [1,1,3],the answer will be [ ],[1],[1,1],[1,3],[3],[1,1,3].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, 'T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements.\nThe second line of each test case contains \u2018ARR\u2019 array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print all the subsets in each line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\nReturn the output in sorted format as shown in the sample output.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 20.\n1 &lt;= ARR[i] &lt;=100\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 1 3\n4\n1 3 3 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1\n1 1\n1 3\n3\n1 1 3\n\n1\n1 3\n1 3 3\n1 3 3 3 \n3 \n3 3\n3 3 3\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nThe unique subsets will be  [ ],[1],[1,1],[1,3],[3],[1,1,3]. \n\nFor the second test case:\nThe unique subsets will be  [ ],[1,3],[1,3,3],[1,3,3,3],[3],[3,3],[3,3,3]. \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4\n5 5 3 5 \n3\n1 3 5 \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>3 \n3 5 \n3 5 5 \n3 5 5 5 \n5 \n5 5 \n5 5 5 \n\n1 \n1 3 \n1 3 5 \n1 5 \n3 \n3 5 \n5\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 50,
        "link": "https://www.codingninjas.com/codestudio/problems/unique-subsets_3625236?topList=striver-sde-sheet-problems",
        "title": "Subsets II",
        "solution": "/*\n    Time Complexity: O(N * 2^N)\n    Space Complexity: O(2^N)\n    where \u2018N\u2019 is the number of elements in \u2018ARR\u2019.\n*/\n#include<algorithm>\nvector<vector<int>> uniqueSubsets(int n, vector<int> &arr)\n{\n    vector<vector<int>> subsets;\n    sort(arr.begin(), arr.end());\n    // Trying all subsets.\n    for (int mask = 0; mask < (1<<n); mask++){\n        for (int i = 0; i < n; i++){\n            if (( mask & (1<<i) ) == 0){\n                // Bit not set.\n                continue;\n            }\n            if (i > 0 && arr[i] == arr[i-1] && (mask & (1<<(i-1))) == 0 ){\n                unique = false;\n            }\n            if (unique == false){\n                break;\n            }\n            // Inserting arr[i] to current subset.\n            cur.push_back(arr[i]);\n        }\n        if(unique){\n            subsets.push_back(cur);\n        }\n    }\n    sort(subsets.begin(), subsets.end());\n    return subsets;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-an-integer-array-39-arr-39-of-size-39-n-39-and-an-integer-39-k-39-return-all-the-subsets-of-39-arr-39-which-sum-to-39-k-39\">Given an integer array 'ARR' of size 'N' and an integer 'K', return all the subsets of 'ARR' which sum to 'K'.</h4>\n\n<h4 id=\"subset-of-an-array-39-arr-39-is-a-tuple-that-can-be-obtained-from-39-arr-39-by-removing-some-possibly-all-elements-of-39-arr-39\">Subset of an array 'ARR' is a tuple that can be obtained from 'ARR' by removing some (possibly all) elements of 'ARR'.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The order of subsets is not important. \n\nThe order of elements in a particular subset should be in increasing order of the index.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer 'N', which denotes the size of the array.\n\nThe second line contains 'N' single-space separated integers representing the elements of the array.\n\nThe third line contains a single integer 'K', which denotes the integer to which the subsets should sum to.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print single-space separated integers of a subset of 'ARR' having sum = 'K'. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'N' &lt;= 16\n- (10 ^ 6) &lt;= ARR[i] &lt;= (10 ^ 6)\n- 16 * (10 ^ 6) &lt;= 'K' &lt;= 16 * (10 ^ 6)\n\nWhere \u2018ARR[i]\u2019 denotes the value for \u2018ith\u2019 element of the array \u2018ARR\u2019 and 'K' is the given sum.\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3\n2 4 6\n6\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2 4\n6\n</code></pre>\n\n<h5>Explanation of the Sample Input 1:</h5>\n\n<pre><code>For the array'ARR' = {2, 4, 6}, we can have subsets {}, {2}, {4}, {6}, {2, 4}, {2, 6}, {4, 6}, {2, 4, 6}. Out of these 8 subsets, {2, 4} and {6} sum to the given 'K' i.e. 6. \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>6 \n5 -1 8 2 7 0\n7\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-1 8 \n-1 8 0 \n5 2 \n5 2 0 \n7 \n7 0 \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 51,
        "link": "https://www.codingninjas.com/codestudio/problems/return-subsets-sum-to-k_759331?topList=striver-sde-sheet-problems",
        "title": "Return Subsets Sum to K",
        "solution": "/*\n    Time Complexity:  O((2^N) * N).\n    Space Complexity:O( 1 ).\n    Where 'N' is the size of the array.\n*/\nvector<vector<int>> findSubsetsThatSumToK(vector<int> &arr, int n, int k)\n{\n    // Ans vector contains all the subset which sum upto 'K'.\n    vector<vector<int>> ans;\n    for (int i = 0; i < (1 << n); i++)\n    {\n        int sum = 0;\n        {\n            // Checking wheather the element is present the subset or not.\n            if ((1 << j) & i)\n            {\n                sum += arr[j];\n                vec.push_back(arr[j]);\n            }\n        }\n        // If sum is 'K'.\n        if (sum == k)\n        {\n            ans.push_back(vec);\n        }\n    }\n    // Return ans.\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-arr-of-n-positive-integers-you-are-also-given-a-positive-integer-target\">You are given an array \u2018Arr\u2019 of \u2018N\u2019 positive integers. You are also given a positive integer \u2018target\u2019.</h4>\n\n<h4 id=\"your-task-is-to-find-all-unique-combinations-of-the-array-arr-whose-sum-is-equal-to-target-each-number-in-arr-may-only-be-used-once-in-the-combination\">Your task is to find all unique combinations of the array \u2018Arr\u2019 whose sum is equal to \u2018target\u2019. Each number in \u2018Arr\u2019 may only be used once in the combination.</h4>\n\n<h4 id=\"elements-in-each-combination-must-be-in-non-decreasing-order-and-you-need-to-print-all-unique-combinations-in-lexicographical-order\">Elements in each combination must be in non-decreasing order and you need to print all unique combinations in lexicographical order.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>In lexicographical order, combination/array  \u2018A\u2019  comes before array \u2018B\u2019 if \u2018A\u2019 is the prefix of array \u2018B\u2019, or if none of them is a prefix of the other and at the first position where they differ integer in \u2018A\u2019 is smaller than the integer in \u2018B\u2019.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let the array \u2018Arr\u2019 be [1, 2, 3, 1] and \u2018target\u2019 = 5. Then all possible valid combinations in lexicographical order are -:\n(1, 1, 3)\n(2, 3)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThen the first line of each test case contains two space-separated integers  \u2018N\u2019 and \u2018target\u2019 denoting the number of elements in \u2018Arr\u2019 and the \u2018target'\n\nThe second line of each test case contains N space-separated integers the elements of array \u2018Arr\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print all possible valid combinations in a separate line in the lexicographical order. Elements in each combination must be in non-decreasing order. Print a new line after each test case.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N &lt;= 20\n1 &lt;= Arr[i] &lt;= 30\n1 &lt;= target &lt;= 30\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n7 8\n10 1 2 7 6 1 5\n5 2\n1 1 1 1 1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 1 6\n1 2 5\n1 7\n2 6\n\n1 1\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>Test Case 1:\n\nHere \u2018N\u2019 = 7, Arr = [10, 1, 2, 7, 6, 1 , 5], and \u2018target\u2019 = 8\nAll unique combinations whose sum of elements is 8 are -:     \n\n(1, 1, 6)  because, 1 + 1 + 6 = 8\n(1, 2, 5)  because,  1 + 2 + 5 = 8\n(1, 7)  because, 1 + 7 = 8                                                                                                               \n(2, 6)  because,  2 + 6 = 8\n\nNote, elements in each combination are in non-decreasing order and all unique combinations are arranged in lexicographical order. \n\nTest Case 2:\n\nAll elements are 1 in a given array and \u2018target\u2019 = 2,  so the only possible combination is (1, 1) as 1 + 1 = 2\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n5 5\n1 2 3 1 5\n1 3\n3\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 1 3\n2 3\n5\n\n3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 52,
        "link": "https://www.codingninjas.com/codestudio/problems/combination-sum-ii_1112622?topList=striver-sde-sheet-problems",
        "title": "Combination Sum II",
        "solution": "/*\n    Time complexity: O(2^N)\n    Space complexity: O(N)\n    Where \u2018N\u2019 is size of the given array 'Arr'.\n*/\nconst int MAX_NUM = 30;  // Maximum possible element in given array.\nvoid backtrack(vector<int> &comb, int remain, int curr, vector<int> &counter, vector<vector<int>> &result) \n{\n    if(remain == 0) \n    {\n        // The current combination has required sum.\n    }\n    if(curr > MAX_NUM) \n    {\n        // There exist no element greater than MAX_NUM in given array.\n        return;\n    }\n    while(counter[curr] > 0 && remain >= curr) \n    {\n        // Append all occurrence of 'curr' in current combination.\n        comb.push_back(curr);\n        counter[curr]--;\n        remain -= curr;\n    }\n    // Try to find valid combinations with different groups of 'curr'.   \n    while(comb.size() > 0 && comb.back() == curr) \n    {\n        backtrack(comb, remain, curr+1, counter, result);\n        comb.pop_back();\n        remain += curr;\n        counter[curr]++;\n    }\n    // Find valid combination without 'curr'. \n    backtrack(comb, remain, curr+1, counter, result);\n}\nvector<vector<int>> combinationSum2(vector<int> &arr, int n, int target) \n{\n    // Find frequency of each unique element.\n    vector<int> counter(MAX_NUM+1);\n    for(int i = 0; i < n; i++) \n    {\n        counter[arr[i]]++;\n    }\n    vector<vector<int>> result;\n    vector<int> comb;\n    // Recursively find all possible combinations.\n    backtrack(comb, target, 1, counter, result);\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-string-39-s-39-your-task-is-to-partition-39-s-39-such-that-every-substring-of-the-partition-is-a-palindrome-you-need-to-return-all-possible-palindrome-partitioning-of-39-s-39\">You are given a string 'S'. Your task is to partition 'S' such that every substring of the partition is a palindrome. You need to return all possible palindrome partitioning of 'S'.</h4>\n\n<h4 id=\"note-a-substring-is-a-contiguous-segment-of-a-string\">Note: A substring is a contiguous segment of a string.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For a given string \u201cBaaB\u201d\n3 possible palindrome partitioning of the given string are:\n{\u201cB\u201d, \u201ca\u201d, \u201ca\u201d, \u201cB\u201d}\n{\u201cB\u201d, \u201caa\u201d, \u201cB\u201d}\n{\u201cBaaB\u201d}\nEvery substring of all the above partitions of \u201cBaaB\u201d is a palindrome.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line of input contains a string 'S'.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print all the possible palindromic partitions of the given string in a separate line.\n\nEach substring of a partition is written within quotes(\u201c\u201c) and separated by comma(,) and space, and each partition of the given string is written inside square brackets[].\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>All the substrings of a partition are sorted in lexicographical order in the output. You just need to return the partitions in any order.\n\nYou do not need to print or sort anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= |S|&lt;= 15\nwhere |S| denotes the length of string 'S'.\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>aaC\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>[\"C\", \"a\", \"a\"]\n[\"C\", \"aa\"]\n</code></pre>\n\n<h5>Explanation for input 1:</h5>\n\n<pre><code>For the given string \"aaC\" there are two partitions in which all substring of partition is a palindrome.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>BaaB\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>[\"B\", \"B\", \"a\", \"a\"]\n[\"B\", \"B\", \"aa\"]\n[\"BaaB\"]\n</code></pre>\n\n<h5>Explanation for input 2:</h5>\n\n<pre><code>For the given string \"BaaB\", there are 3 partitions that can be made in which every substring is palindromic substrings.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 53,
        "link": "https://www.codingninjas.com/codestudio/problems/palindrome-partitioning_799931?topList=striver-sde-sheet-problems",
        "title": "Palindrome Partitioning",
        "solution": "/*\n    Time Complexity: O(N * ( 2 ^ N ))\n    Space Complexity: O(N ^ 2)\n    Where 'N' is the length of string.\n*/\n#include <vector>\n#include <string>\nvoid partitionHelper(string &s, int start, vector<vector<string>> &ans, vector<string> &currentList, vector<vector<bool>> &dp) \n{\n    // If start reach the end of String.\n    if (start >= s.length()) \n    {\n        ans.push_back(currentList);\n        return;\n    }\n    for (int k = start; k < s.length(); k++) \n    {\n        // Check if substring S[start...k] is Palindrome or not.\n        if (dp[start][k]) \n        {\n            // Add the substring S[start...k].\n            currentList.push_back(s.substr(start, k + 1 - start));\n            // Recurence for rest of the string to get all the palindromic partitions.\n            partitionHelper(s, k + 1, ans, currentList, dp);\n            // Remove the substring S[start...k] from current partition.\n            currentList.pop_back();\n        }\n    }\n}\nvector<vector<string>> partition(string &s) \n{\n    // It store all the possible palindromic partitions.\n    vector<vector<string>> ans;\n    // Create a boolean dp for checking substing[i..j] is palindrome or not.\n    vector<vector<bool>> dp (s.length(), vector <bool> (s.length(), false));\n    for (int i = 0; i < s.length(); i++) \n    {\n        for (int j = 0; j <= i; j++) \n        {\n            if (s[i] == s[j] && (i - j < 2 || dp[j + 1][i - 1])) \n            {\n                dp[j][i] = true;\n            }\n        }\n    }\n    vector<string> currentList;\n    // Recursive function to generate all the possible palindromic partitions.\n    partitionHelper(s, 0, ans, currentList, dp);\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-two-integers-n-and-k-your-task-is-to-find-the-k-th-permutation-sequence-of-numbers-from-1-to-n-the-k-th-permutation-is-the-k-th-permutation-in-the-set-of-all-sorted-permutations-of-string-1-to-n\">You have been given two integers \u2018N\u2019 and \u2018K\u2019. Your task is to find the K-th permutation sequence of numbers from 1 to \u2018N\u2019. The K-th permutation is the K-th permutation in the set of all sorted permutations of string 1 to \u2018N\u2019.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If \u2018N\u2019 = 3 and \u2018K\u2019 = 4. Then all permutations for \u2018N\u2019 = 3 are \u201c123\u201d, \u201c132\u201d, \u201c213\u201d, \u201c231\u201d, \u201c312\u201d, \u201c321\u201d. So the 4-th permutation is \u201c231\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018K\u2019, respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output contains a string of K-th permutation sequence of numbers from 1 to \u2018N\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019 &lt;= 9\n1 &lt;= \u2018K\u2019 &lt;= N!\n\nTime Limit: 1 sec \n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n2 1\n3 6\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>12\n321\n</code></pre>\n\n<h5>Explanation For Sample output 1:</h5>\n\n<pre><code>For the first test case, \u2018N\u2019 = 2. So all permutations are \u201c12\u201d, \u201c21\u201d. Now \u2018K\u2019 = 1, so the 1st permutation is \u201c12\u201d.\n\nFor the second test case, \u2018N\u2019 = 3. So all permutations are  \u201c123\u201d, \u201c132\u201d, \u201c213\u201d, \u201c231\u201d, \u201c312\u201d, \u201c321\u201d. Now \u2018K\u2019 = 6, so the 6th permutation is \u201c321\u201d.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 3\n1 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1324\n1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 54,
        "link": "https://www.codingninjas.com/codestudio/problems/k-th-permutation-sequence_1112626?topList=striver-sde-sheet-problems",
        "title": "K-th Permutation Sequence",
        "solution": "/*\n    Time Complexity: O(N ^ 2)\n    Space Complexity: O(N)\n    where N is the length of each string.\n*/\nstring kthPermutation(int n, int k) \n{\n    int j, factorial = 1;\n    string s;\n    for (int i = 1; i <= n; i++) \n    {\n        factorial *= i;\n        // Build string of sequence 1234...n.\n    k--;\n    for (int i = 0; i < n; i++) \n    {\n        factorial /= n - i;\n        // Calculate index of char to put at index i on 's'.\n        j = i + k / factorial;\n        char c = s[j];\n        // Remove c by shifting to cover up (adjust the right part).\n        while (j > i) \n        {\n            s[j] = s[j - 1];\n            j--;\n        }\n        k %= factorial;\n        s[i] = c;\n    }\n    return s;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-input-string-39-s-39-your-task-is-to-find-and-return-all-possible-permutations-of-the-input-string\">You are given an input string 'S'. Your task is to find and return all possible permutations of the input string.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The input string may contain the same characters, so there will also be the same permutations.\n\n2. The order of permutation does not matter.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first and only line of input contains a string 'S' of alphabets in lower case characters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all the permutations of the given string 'S' in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.    \n</code></pre>\n\n<h5 id=\"constraint\">Constraint:</h5>\n\n<pre><code>0 &lt;= |S| &lt;= 8\n\nWhere |S| denotes the length of string 'S'.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>cba\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>abc\nacb\nbac\nbca\ncab\ncba\n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code>All the possible permutations for string \"cba\" will be \"abc\", \"acb\", \"bac\", \"bca\", \"cab\" and \"cba\".\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>xyx\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>xyx\nxxy\nyxx\nyxx\nxyx\nxxy\n</code></pre>\n\n<h5>Explanation for Sample Output 2:</h5>\n\n<pre><code>All the possible permutations for string \"xyx\" will be \"xyx\", \"xxy\", \"yxx\", \"yxx\", \"xyx\" and \"xxy\". Here, all three permutations \"xyx\", \"yxx\", \"xxy\" are repeating twice but we need to print all the possible permutations and hence we are printing them twice..\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 55,
        "link": "https://www.codingninjas.com/codestudio/problems/print-permutations-string_758958?topList=striver-sde-sheet-problems",
        "title": "Print Permutations - String",
        "solution": "/*\n    Time Complexity: O(N*N!).\n    Space Complexity: O(N).\n    Where N is the length of the input string.\n*/\n#include <algorithm>\n#include <vector>\n// Swaping two alphabets in a string.\nvoid swap(string &s, int i, int j) {\n    char te = s[i];\n    s[i] = s[j];\n    s[j] = te;\n}\n ( ,  , int j, vector <string> &ans) {\n    if (i >= j) {\n        // Storing the string in the vector ans.\n        string permutation = \"\";\n        for (int k = 0; k < s.length(); k++) {\n            permutation += (s[k]);\n        }\n        ans.push_back(permutation);\n        return;\n    }\n    // Fixing a character at index i and then swapping with characters from index i to j and by this way building up permutation strings.\n    for (int k = i; k <= j; k++) {\n        swap(s, i, k);\n        findPermutationsHelper(s, i + 1, j, ans);\n        swap(s, i, k);\n    }\n}\nvector <string> findPermutations(string &s) {\n    // Declaring a vector of string to store all the possible permutations of the string.\n    vector <string> ans;\n    // Calling the user defined function which stores all the possible permutations of the string in the vector ans.\n    findPermutationsHelper(s, 0, s.length() - 1, ans);\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-integer-39-n-39-for-a-given-39-n-39-x-39-n-39-chessboard-find-a-way-to-place-39-n-39-queens-such-that-no-queen-can-attack-any-other-queen-on-the-chessboard\">You are given an integer 'N'. For a given 'N' x 'N' chessboard, find a way to place 'N' queens such that no queen can attack any other queen on the chessboard.</h4>\n\n<h4 id=\"a-queen-can-be-killed-when-it-lies-in-the-same-row-or-same-column-or-the-same-diagonal-of-any-of-the-other-queens-you-have-to-print-all-such-configurations\">A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. You have to print all such configurations.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first and the only line of input contains an integer 'N' representing the size of the chessboard and the number of queens.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Each line would be representing a single configuration.\n\nEach configuration would contain 'N '* 'N' elements printed row-wise separated by spaces. The position where we can place the queen will have the value 1 rest will have the value 0.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'N' &lt;= 10\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0\n0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 \n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>Output depicts two possible configurations of the chessboard for 4 queens.\n\nThe Chessboard matrix for the first configuration looks as follows:-\n\n0 0 1 0\n1 0 0 0\n0 0 0 1\n0 1 0 0\n\nQueen contained cell is depicted by 1. As seen, No queen is in the same row, column, or diagonal as the other queens. Hence this is a valid configuration.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Sample Output2:</h5>\n\n<pre><code>      (Blank)\n</code></pre>\n\n<h5>Explanation For Sample Input 2:</h5>\n\n<pre><code>Since no possible configuration exists for 3 Queen's.The output remains Empty.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 56,
        "link": "https://www.codingninjas.com/codestudio/problems/n-queens_759332?topList=striver-sde-sheet-problems",
        "title": "N Queens",
        "solution": "/*\n    Time Complexity : O(N!)\n    Space Complexity : O(N)\n    Where N is the number of Queens.\n*/\nvoid addSolution(int n, vector < vector < int >> & ans, vector < int > & row) {\n    vector < int > currentAnswer;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (row[j] == i) {\n                currentAnswer.push_back(1);\n            } else {\n                currentAnswer.push_back(0);\n            }\n        }\n    ans.push_back(currentAnswer);\n}\nvoid solve(int col, int n, vector < vector < int >> & ans, vector < int > & row, vector < int > & d1, vector < int > & d2) {\n    if (col == n) {\n        addSolution(n, ans, row);\n        return;\n    }\n    for (int i = 0; i < n; i++) {\n        if ((row[i] == -1) && (d1[col - i + n - 1] == -1) && (d2[col + i] == -1)) {\n            row[i] = d1[col - i + n - 1] = d2[col + i] = col;\n            solve(col + 1, n, ans, row, d1, d2);\n            row[i] = d1[col - i + n - 1] = d2[col + i] = -1;\n        }\n    }\n    return;\n}\nvector < vector < int >> solveNQueens(int n) {\n    vector < vector < int >> ans;\n    vector < int > row(30, -1), d1(30, -1), d2(30, -1);\n    solve(0, n, ans, row, d1, d2);\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-9-x-9-2d-matrix-39-matrix-39-with-some-cells-filled-with-digits-1-9-and-some-empty-cells-denoted-by-0\">You have been given a 9 X 9 2D matrix 'MATRIX' with some cells filled with digits(1 - 9), and some empty cells (denoted by 0).</h4>\n\n<h4 id=\"you-need-to-find-whether-there-exists-a-way-to-fill-all-the-empty-cells-with-some-digit-1-9-such-that-the-final-matrix-is-a-valid-sudoku-solution\">You need to find whether there exists a way to fill all the empty cells with some digit(1 - 9) such that the final matrix is a valid Sudoku solution.</h4>\n\n<h4 id=\"a-sudoku-solution-must-satisfy-all-the-following-conditions\">A Sudoku solution must satisfy all the following conditions-</h4>\n\n<pre><code>1. Each of the digits 1 - 9 must occur exactly once in each row.\n2. Each of the digits 1 - 9 must occur exactly once in each column.\n3. Each of the digits 1 - 9 must occur exactly once in each of the 9, 3 x 3 sub-matrices of the matrix.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. There will always be a cell in the matrix which is empty.\n2. The given initial matrix will always be consistent according to the rules mentioned in the problem statement.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer 'T' denoting the number of test cases.\nThen 'T' test cases follow.\n\nEvery test case contains 9 lines, with each line containing 9 single space-separated digits (0, if the cell is empty or a digit (1 - 9) otherwise).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing \u201cyes\u201d(without quotes), if there exists a Sudoku solution or \u201cno\u201d (without quotes) otherwise. Note the lowercase format of the output.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 5\nN = 9\n0 &lt;= MATRIX[i][j] &lt;= 9\n\nWhere 'N' denotes the size of the given square matrix.\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n9 0 0 0 2 0 7 5 0 \n6 0 0 0 5 0 0 4 0 \n0 2 0 4 0 0 0 1 0 \n2 0 8 0 0 0 0 0 0 \n0 7 0 5 0 9 0 6 0 \n0 0 0 0 0 0 4 0 1 \n0 1 0 0 0 5 0 8 0 \n0 9 0 0 7 0 0 0 4 \n0 8 2 0 4 0 0 0 6\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>yes\n</code></pre>\n\n<h5>Explanation of the Sample Input1:</h5>\n\n<pre><code>One of the possible solutions is:\n9 4 1 3 2 6 7 5 8\n6 3 7 1 5 8 2 4 9\n8 2 5 4 9 7 6 1 3\n2 6 8 7 1 4 3 9 5\n1 7 4 5 3 9 8 6 2\n3 5 9 6 8 2 4 7 1\n4 1 3 2 6 5 9 8 7\n5 9 6 8 7 3 1 2 4\n7 8 2 9 4 1 5 3 6\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n1 5 9 0 0 6 0 3 2\n2 7 4 0 0 0 0 0 0\n3 8 6 2 0 0 0 0 5\n4 9 2 5 0 1 0 8 0\n6 3 7 0 4 0 0 0 0\n5 1 0 8 2 0 0 0 0\n8 2 1 0 0 0 0 0 0\n7 6 0 1 0 0 4 2 0\n9 4 3 0 7 0 0 6 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>no\n</code></pre>\n\n<h5>Explanation of the Sample Input2:</h5>\n\n<pre><code>In the third column from the left, there are two empty cells out of which one has to be filled with \u20188\u2019, but we can\u2019t put 8 in any of those two cells.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 57,
        "link": "https://www.codingninjas.com/codestudio/problems/sudoku_758961?topList=striver-sde-sheet-problems",
        "title": "Valid Sudoku",
        "solution": "/*\n    Time complexity : O(9 ^ K)\n    Space complexity : O(K)\n    where 'K' denotes the number of empty cells in the matrix.\n*/\n#include <unordered_map>\n#define n 9\nbool isValid(int matrix[n][n]) {\n    unordered_map<int, int> row[n], column[n], subMatrix[3][3];\n    for (int r = 0; r < n; r++) {\n        for (int c = 0; c < n; c++) {\n            }\n            row[r][matrix[r][c]] += 1;\n            column[c][matrix[r][c]] += 1;\n            subMatrix[r / 3][c / 3][matrix[r][c]] += 1;\n            if (subMatrix[r / 3][c / 3][matrix[r][c]] > 1 || column[c][matrix[r][c]] > 1 ||\n                row[r][matrix[r][c]] > 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nbool solve(int matrix[n][n], int i, int j) {\n    if (i == n - 1 && j == n) {\n        return true;\n    }\n    if (j == n) {\n        i++;\n        j = 0;\n    }\n    if (matrix[i][j] != 0) {\n        return solve(matrix, i, j + 1);\n    }\n    for (int digit = 1; digit <= n; digit++) {\n        matrix[i][j] = digit;\n        if (isValid(matrix)) {\n            if (solve(matrix, i, j + 1)) {\n                return true;\n            }\n        }\n        matrix[i][j] = 0;\n    }\n    return false;\n}\nbool isItSudoku(int matrix[9][9]) {\n    return solve(matrix, 0, 0);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-undirected-graph-in-the-form-of-an-adjacency-matrix-along-with-an-integer-m-you-need-to-tell-if-you-can-color-the-vertices-of-the-graph-using-at-most-m-colors-such-that-no-two-adjacent-vertices-are-of-the-same-color\">You are given an undirected graph in the form of an adjacency matrix along with an integer M. You need to tell if you can color the vertices of the graph using at most M colors such that no two adjacent vertices are of the same color.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the given adjacency matrix is:\n[0 1 0]\n[1 0 1]\n[0 1 0] and M = 3.\nThe given adjacency matrix tells us that 1 is connected to 2 and 2 is connected to 3. So if we color vertex 1 with 2, vertex 2 with 1, and vertex 3 with 2, it is possible to color the given graph with 2 colors: M.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \nThen the T test cases follow.\n\nThe first line of the test case contains two space-separated integers V and M, denoting the number of vertices in the undirected graph and the number of colors respectively.\n\nEach of the next V lines contains V integers denoting the adjacency matrix of the undirected graph.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, you need to return \u201cYES\u201d if we can color the given graph with at most M colors. Otherwise, return \u201cNO\u201d. (without the inverted commas)\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 T \u2264 1000\n1 \u2264 V \u2264 20\n1 \u2264 M \u2264 V\n\nTime Limit : 1 sec \n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3\n3 3\n0 1 0\n1 0 1\n0 1 0\n3 1\n0 1 0\n1 0 1\n0 1 0\n2 1\n0 1\n1 0\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>YES\nNO\nNO\n</code></pre>\n\n<h5>Explanation of Input 1:</h5>\n\n<pre><code>The first test case has already been explained in the example.\n\nIn the second test case, the given adjacency matrix tells us that 1 is connected to 2 and 2 is connected to 3. We can see that minimum of 2 colors would be needed to color the graph. So it is not possible to color the graph in this case.\n\nThe third test case, the given adjacency matrix tells us that 1 is connected to 2. We can see that minimum 2 colors would be needed to color the graph. So it is not possible to color the graph in this case.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>3\n3 3\n0 0 0\n0 0 1\n0 1 0\n4 2\n0 1 0 0\n1 0 0 0\n0 0 0 1\n0 0 1 0\n4 1\n0 1 0 0\n1 0 0 0\n0 0 0 1\n0 0 1 0\n</code></pre>\n\n<h5>Sample Output 2</h5>\n\n<pre><code>YES\nYES\nNO\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 58,
        "link": "https://www.codingninjas.com/codestudio/problems/m-coloring-problem_981273?topList=striver-sde-sheet-problems",
        "title": "M-Coloring Problem",
        "solution": "/*\n        Time Complexity - O(M ^ V)\n        Space Complexity - O(V)\n        where V is the number of vertices in the graph\n        and M is the maximum number of colors allowed\n*/\nbool isCorrect(vector<vector<int>> &mat, int cur, vector<int> &color, int col)\n{\n    for (int i = 0; i < mat.size(); ++i)\n    {\n        if(mat[cur][i] && color[i] == col)\n        {\n            return false;\n    return true;\n}\nbool graphCol(vector<vector<int>> &mat, int m, int cur, vector<int> &color)\n{\n    if(cur == mat.size())\n    {\n        return true;\n    }\n    for (int j = 1; j <= m; ++j)\n    {\n        if(isCorrect(mat, cur, color, j))\n        {\n            color[cur] = j;\n            if(graphCol(mat, m, cur+1, color))\n            {\n                return true;\n            }\n            color[cur] = 0;\n        }\n    }\n    return false;\n}\nstring graphColoring(vector<vector<int>> &mat, int m)\n{\n    int v = mat.size();\n    vector<int> color(v, 0);\n    if(graphCol(mat, m, 0, color))\n    {\n        return \"YES\";\n    }\n    else\n    {\n        return \"NO\";\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-39-n-39-39-n-39-maze-with-a-rat-placed-at-39-maze-0-0-39-find-and-print-all-paths-that-rat-can-follow-to-reach-its-destination-i-e-39-maze-39-n-39-1-39-n-39-1-39-rat-can-move-in-any-direc-tion-left-right-up-and-down\">You are given a 'N' * 'N' maze with a rat placed at 'MAZE[0][0]'. Find and print all paths that rat can follow to reach its destination i.e. 'MAZE['N' - 1]['N' - 1]'.  Rat can move in any direction ( left, right, up and down).</h4>\n\n<h4 id=\"value-of-every-cell-in-the-39-maze-39-can-either-be-0-or-1-cells-with-value-0-are-blocked-means-the-rat-can-not-enter-into-those-cells-and-those-with-value-1-are-open\">Value of every cell in the 'MAZE' can either be 0 or 1. Cells with value 0 are blocked means the rat cannot enter into those cells and those with value 1 are open.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer 'N' representing the dimension of the maze.\n\nThe next 'N' lines of input contain 'N' space-separated integers representing the type of the cell.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the path from the start position to the destination position and only cells that are part of the solution path should be 1, rest all cells should be 0.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10\n0 &lt;= MAZE[i][j] &lt;=1\n\nWhere 'MAZE[i][j]' denotes the value in the cell of 'MAZE'.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>3\n1 0 1\n1 0 1\n1 1 1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 0 0 1 0 0 1 1 1 \n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code>Only 1 path is possible which contains coordinate &lt; (1,1), (2,1), (3,1), (3,2) and (3,3) &gt;\n\nSo our path matrix will look like this:\n\n1 0 0\n1 0 0\n1 1 1\n\nWhich is returned from left to right and then top to bottom in one line.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 0\n0 1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code> [Blank]\n</code></pre>\n\n<h5>Explanation for Sample Output 2:</h5>\n\n<pre><code>As no path is possible to the last cell, a blank vector will be returned and nothing is printed.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 59,
        "link": "https://www.codingninjas.com/codestudio/problems/rat-in-a-maze-all-paths_758966?topList=striver-sde-sheet-problems",
        "title": "Rat In a Maze All Paths",
        "solution": "/*\n    Time complexity : O(4 ^ (N ^ 2))\n    Space complexity : O(N ^ 2)\n    Where 'N' is the dimension of the matrix.\n*/\nvoid insertCurrentState(vector<vector<int>> &solution, vector<vector<int>> &ans, int n){\n    // Insert the solution matrix element by element in ans.\n    vector<int> currentState;\n    for (int i = 0; i < n; i++){\n        for (int j = 0; j < n; j++){\n            currentState.push_back(solution[i][j]);\n        }\n    }\nvoid solveMaze(vector<vector<int>> &maze, vector<vector<int>> &solution, vector<vector<int>> &ans, int x, int y, int n){\n    // Base case that we reach our destination.\n    if (x == n - 1 && y == n - 1){\n        solution[x][y] = 1;\n        // Call to add the updated solution matrix in 'ANS'.\n        insertCurrentState(solution, ans, n); \n        return;\n    }\n    // Condition of out of boundary of the maze.\n    if (x > n - 1 || x < 0 || y > n - 1 || y < 0){\n        return;\n    }\n    /*\n       Condition for 'MAZE[x][y]==0' - if that particular cell is block.\n       'SOLUTION[x][y]'' == 1 - if it is already visited or already we go through it.\n    */\n    if (maze[x][y] == 0 || solution[x][y] == 1){\n        return;\n    }\n    // No problem comes in visiting this cell so visit it.\n    solution[x][y] = 1;\n    // Recursive calls to all directions(call to function having same name with diff value of params).\n    // Up move.\n    solveMaze(maze, solution, ans, x - 1, y, n); \n    // Down move.\n    solveMaze(maze, solution, ans, x + 1, y, n); \n    // Left move.\n    solveMaze(maze, solution, ans, x, y - 1, n); \n    // Right move.\n    solveMaze(maze, solution, ans, x, y + 1, n);\n    // Backtracking if there is no further path exists.\n    solution[x][y] = 0;\n}\nvector<vector<int>> ratInAMaze(vector<vector<int>> maze, int n){\n    // Initialize the 'SOLUTION' matrix by all 0s.\n    vector<vector<int>> solution(n, vector<int>(n, 0));\n    // Vector used to store all the paths.\n    vector<vector<int>> ans;\n    // Final call to function to print the solutions.\n    solveMaze(maze, solution, ans, 0, 0, n);\n    // Return the updated ans.\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-non-empty-string-s-containing-no-spaces-and-a-dictionary-of-non-empty-strings-say-the-list-of-words-you-are-supposed-to-construct-and-return-all-possible-sentences-after-adding-spaces-in-the-originally-given-string-s-such-that-each-word-in-a-sentence-exists-in-the-given-dictionary\">You are given a non-empty string S containing no spaces\u2019 and a dictionary of non-empty strings (say the list of words). You are supposed to construct and return all possible sentences after adding spaces in the originally given string \u2018S\u2019, such that each word in a sentence exists in the given dictionary.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The same word in the dictionary can be used multiple times to make sentences.\nAssume that the dictionary does not contain duplicate words.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThen the 'T' test cases follow.\n\nThe first line contains an integer value \u2018K\u2019 which denotes the size of the dictionary.\n\nThe second line contains \u2018K\u2019 non-empty, space separated strings denoting the words of the dictionary.\n\nThe third line contains a non-empty string \u2018S\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print each possible sentence after adding spaces, in different lines.\n\nThe output of each test case is printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. You do not need to print anything, it has already been taken care of. Just implement the given function.\n2. The order in which the output sentences are returned does not matter.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= K &lt;= 100\n1 &lt;= | word | &lt;= 16\n1 &lt;= | S | &lt;= 13\n\nwhere |word| is the length of each word in the dictionary and |S| is the length of the string S.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n6\ngod is now no where here\ngodisnowherenowhere\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>god is no where no where\ngod is no where now here\ngod is now here no where\ngod is now here now here\n</code></pre>\n\n<h5>Explanation to Sample Input 1:</h5>\n\n<pre><code>One way to make sentences is to take \u201cgod\u201d and append a space, then take \u201cis\u201d  and append space, take \u201cnow\u201d from the dictionary and take \u201chere\u201d as well. \nSimilarly, for other sentences also, we can add space to get other possible sentences. Note that we can reuse dictionary words as \u201cno\u201d and \u201cnow\u201d are used two times in the same sentence.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n4\ngod is no here\ngodisnowhere\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>No output to be printed\n</code></pre>\n\n<h5>Explanation to Sample Input 2:</h5>\n\n<pre><code>We can not make any sentence because after making \u201cgod is no\u201d we will be stuck with \u201cwhere\u201d. There is no way to break \u201cwhere\u201d further such that we can get any word from the dictionary.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 60,
        "link": "https://www.codingninjas.com/codestudio/problems/word-break-ii_983635?topList=striver-sde-sheet-problems",
        "title": "Word Break II",
        "solution": "/*\n    Time Complexity : O(N * (2 ^(N - 1))\n    Space Complexity :  O(26 * K * | word |)\n    Where N is the length of string 'S', 'K' is the number of words in the dictionary and | word | is the length of each word. \n*/\nclass TrieNode\n{\npublic:\n    TrieNode *children[26];\n    bool isTerminal;\n    TrieNode()\n        for (int i = 0; i < 26; i++)\n        {\n            children[i] = NULL;\n        }\n        this->isTerminal = false;\n    }\n};\nvoid insert(TrieNode *root, string word)\n{\n    TrieNode *curr = root;\n    for (int i = 0; i < word.size(); i++)\n    {\n        // Expanding the Trie if the branch was not there yet\n        if (curr->children[word[i] - 'a'] == NULL)\n        {\n            curr->children[word[i] - 'a'] = new TrieNode();\n        }\n        curr = curr->children[word[i] - 'a'];\n    }\n    // Mark last node as leaf\n    curr->isTerminal = true;\n}\nvoid search(TrieNode *root, string &s, vector<string> &res, string temp, int pos)\n{\n    TrieNode *curr = root;\n    for (int i = pos; i < s.size(); i++)\n    {\n        if (curr->children[s[i] - 'a'] == NULL)\n        {\n            return;\n        }\n        if (curr->children[s[i] - 'a']->isTerminal == true)\n        {\n            // Last word we found with a positive lookup\n            string lastWord = temp;\n            lastWord.append(s.substr(pos, i - pos + 1));\n            // If it is also the last character of s, update res\n            if (i == s.size() - 1)\n            {\n                res.push_back(lastWord);\n            }\n            // Recursive calls otherwise\n            else\n            {\n                search(root, s, res, lastWord + \" \", i + 1);\n            }\n        }\n        curr = curr->children[s[i] - 'a'];\n    }\n    return;\n}\nvector<string> wordBreak(string &s, vector<string> &dictionary)\n{\n    // Base Trie\n    TrieNode *root = new TrieNode();\n    // Add dictionary words into trie\n    for (int i = 0; i < dictionary.size(); i++)\n    {\n        insert(root, dictionary[i]);\n    }\n    // Computing the final result\n    vector<string> res;\n    search(root, s, res, \"\", 0);\n    return res;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-positive-integers-n-and-m-you-have-to-find-the-nth-root-of-m-i-e-m-1-n\">You are given two positive integers N and M. You have to find the Nth root of M i.e. M<sup>(1/N)</sup>.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>N'th root of an integer M is a real number, which when raised to the power N gives M as a result.\n\nN'th root of the M should be correct up to 6 decimal places.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first and only line of each test case consists of two space-separated integers N and M.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a real number with precision up to 6 decimal places that denote the Nth root of M in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 300\n1 &lt;= M &lt;= 10^9\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n3 27\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3.000000\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>3rd Root of 27 is 3.000000, as (3.000000)^3 is equal to 27.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n4 69\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2.882121\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 61,
        "link": "https://www.codingninjas.com/codestudio/problems/nth-root-of-m_1062679?topList=striver-sde-sheet-problems",
        "title": "Nth Root Of M",
        "solution": "/*\n    Time Complexity: O( log(N) * log(M) )\n    Space Complexity: O( 1 )\n    Where 'N' and 'M' are given integers.\n*/\ndouble findNthRootOfM(int n, int m) {\n    // Variable to store maximum possible error in order\n    // to obtain the precision of 10^(-6) in the answer.\n    double error = 1e-7;\n    // Difference between the current answer, and the answer\n    // in next iteration, which we take as big as possible initially.\n    // Guessed answer value.\n    double xk = 2;\n    // We keep on finding the precise answer till the difference between\n    // answer of two consecutive iteration become less than 10^(-7).\n    while (diff > error) {\n        // Answer value in the next iteration.\n        double xk_1 = (pow(xk, n) * (n - 1) + m) / (n * pow(xk, n - 1));\n        // Difference of answer in consecutive states updated.\n        diff = abs(xk - xk_1);\n        // Updating the current answer with the answer of next iteration.\n        xk = xk_1;\n    }\n    // Returning the nthRootOfM with precision upto 6 decimal places which is 'xk'.\n    return xk;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-matrix-of-n-rows-and-m-columns-filled-up-with-integers-where-every-row-is-sorted-in-non-decreasing-order-your-task-is-to-find-the-overall-median-of-the-matrix-i-e-if-all-elements-of-the-matrix-are-written-in-a-single-line-then-you-need-to-return-the-median-of-that-linear-array\">You have been given a matrix of \u2018N\u2019 rows and \u2018M\u2019 columns filled up with integers where every row is sorted in non-decreasing order. Your task is to find the overall median of the matrix i.e if all elements of the matrix are written in a single line, then you need to return the median of that linear array.</h4>\n\n<h4 id=\"the-median-of-a-finite-list-of-numbers-is-the-quot-middle-quot-number-when-those-numbers-are-listed-in-order-from-smallest-to-greatest-if-there-is-an-odd-number-of-observations-the-middle-one-is-picked-for-example-consider-the-list-of-numbers-1-3-3-6-7-8-9-this-list-contains-seven-numbers-the-median-is-the-fourth-of-them-which-is-6\">The median of a finite list of numbers is the \"middle\" number when those numbers are listed in order from smallest to greatest. If there is an odd number of observations, the middle one is picked. For example, consider the list of numbers [1, 3, 3, 6, 7, 8, 9]. This list contains seven numbers. The median is the fourth of them, which is 6.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two integers \u2018N\u2019 and \u2018M\u2019 denoting the number of rows and columns, respectively.\n\nNext \u2018N\u2019 lines contain \u2018M\u2019 space-separated integers each denoting the elements in the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer which is the overall median of the given matrix.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 50\n1 &lt;= 'N' , 'M' &lt;= 100\n1 &lt;= 'MATRIX'['I']['J'] &lt;= 10 ^ 5\n'N' * 'M' is always an odd number.\n\nWhere 'MATRIX'['I']['J']  denotes the value at ('I', 'J')th cell in the matrix.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 3\n1 2 3\n3 3\n2 6 9\n1 5 11\n3 7 8\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n6\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the overall median of the matrix is 2.\n\nIn the second test case, the overall median of the matrix is 6.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n2 6 8\n1 4 7\n6 8 9\n3 5\n1 2 6 6 10\n2 4 4 5 7\n2 5 5 6 6\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2\n5\n</code></pre>\n\n<h5>Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the overall median of the matrix is 2.\n\nIn the second test case, the overall median of the matrix is 5.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 62,
        "link": "https://www.codingninjas.com/codestudio/problems/matrix-median_873378?topList=striver-sde-sheet-problems",
        "title": "Matrix Median",
        "solution": "/*\n    Time Complexity : O(N * log(M) * log(MAX - MIN) )\n    Space Complexity : O(1)\n    Where \u2018N\u2019 is the number of rows,\n    and \u2018M\u2019 is the number of columns in the given matrix,\n    and MAX and MIN are the minimum and maximum element of the matrix, respectively.\n*/\n// It returns the index of the first element in the range [first, last) which compares grater than val.\nint upper_bound(vector<int> const &arr, int first, int last, int val)\n{\n    int low = first, high = last;\n    while (low < high)\n    {\n        int mid = (low + high) / 2;\n        if (arr[mid] > val)\n        {\n            /*\n               If the current element is less than val,\n               reduce the search space to left half.\n            */\n            high = mid;\n        }\n        else\n        {\n            /*\n               If the current element is greater than or equal to val,\n               reduce the search space to right half.\n            */\n            low = mid + 1;\n        }\n    }\n    return low;\n}\nint getMedian(vector<vector<int>> &matrix)\n{\n    int n = matrix.size();\n    int m = matrix[0].size();\n    // Since, 1 <= matrix[i][j] <= 10^5, set the \"low\" and \"high\" value accordingly.\n    int low = 1, high = 100000;\n    // Loop until our search spaces convergers to single element.\n    while (low < high)\n    {\n        int mid = (low + high) / 2;\n        // To count number of elements less than or equal to \"mid\".\n        int count = 0;\n        // Iterate through each row and increment the \"count\".\n        for (int i = 0; i < n; i++)\n        {\n            /*\n               NOTE:\n               upper_bound (ForwardIterator first, ForwardIterator last, const T& val);\n               Returns an iterator\n               pointing to the first element in the range [first,last)\n               which compares greater than val.\n            */\n            count = count + upper_bound(matrix[i], 0, matrix[i].size(), mid);\n        }\n        if (count >= (n * m + 1) / 2)\n        {\n            // The median will lie in the range of [\u201cmid\u201d, \u201chigh\u201d].\n            high = mid;\n        }\n        else\n        {\n            // The median will lie in the range of [\"mid\" + 1, \"high\"].\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"nobita-wants-to-impress-shizuka-by-guessing-her-lucky-number\">Nobita wants to impress Shizuka by guessing her lucky number.</h4>\n\n<h4 id=\"shizuka-gave-nobita-a-sorted-list-of-n-numbers-such-that-every-number-occurred-twice-in-the-list-except-shizuka-s-lucky-number-which-appears-only-once\">Shizuka gave Nobita a sorted list of \u2018N\u2019 numbers such that every number occurred twice in the list except Shizuka\u2019s lucky number which appears only once.</h4>\n\n<h4 id=\"nobita-asked-doraemon-to-help-him-but-doraemon-doesn-t-have-a-gadget-that-can-find-shizuka-s-lucky-number\">Nobita asked Doraemon to help him but Doraemon doesn\u2019t have a gadget that can find Shizuka\u2019s lucky number.</h4>\n\n<h4 id=\"so-doraemon-called-you-to-find-shizuka-s-lucky-number-the-fate-of-nobita-lies-in-your-hand\">So, Doraemon called you to find Shizuka\u2019s lucky number. The fate of Nobita lies in your hand.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. Shizuka\u2019s lucky number will surely be present.\n2. There will only be a single lucky number.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019, representing the total number of elements present in Shizuka\u2019s list.\n\nThe next line contains \u2018N\u2019 single-spaced elements, representing the elements of Shizuka\u2019s list\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the lucky number of Shizuka.\n\nThe output for each test case will be printed in a separate line.    \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n0 &lt;= data &lt;= 10^9\n\nWhere \u2018data\u2019 is the value of elements of Shizuka\u2019s list. \n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample Input 1 :</h4>\n\n<pre><code>2\n5 \n1 1 3 5 5 \n7 \n2 2 4 4 5 7 7    \n</code></pre>\n\n<h4>Sample Output 1 :</h4>\n\n<pre><code>3 \n5\n</code></pre>\n\n<h5>Explanation of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1 :  \nGiven array is [1, 1, 3, 5, 5]    \nHere, 3 occurs once in the array. So, the answer is 3.\n\nTest Case 2 :\nGiven array is [2, 2, 4, 4, 5, 7, 7]    \nHere, 5 occurs once in the array. So, the answer is 5.\n</code></pre>\n\n<h4>Sample Input 2 :</h4>\n\n<pre><code>2\n5\n1 1 4 4 15\n7 \n1 1 2 2 4 6 6  \n</code></pre>\n\n<h4>Sample Output 2 :</h4>\n\n<pre><code>15\n4\n</code></pre>\n\n<h5>Explanation of Sample Input 2 :</h5>\n\n<pre><code>Test Case 1 :\nGiven array is [1, 1, 4, 4, 15].    \nHere, 3 occurs once in the array. So, the answer is 3.\n\nTest Case 2 :\nGiven array is [1, 1, 2, 2, 4, 6, 6]    \nHere, 4 occurs once in the array. So, the answer is 4.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 63,
        "link": "https://www.codingninjas.com/codestudio/problems/unique-element-in-sorted-array_1112654?topList=striver-sde-sheet-problems",
        "title": "Single Element in a Sorted Array",
        "solution": "/*\n    Time Complexity  : O(log(N))\n    Space Complexity : O(1)\n    Where N is the total number of elements in the given array.\n*/\nint uniqueElement(vector<int> arr, int n)\n{\n    int low = 0, high = n - 1, mid;\n    // Do binary search\n    while (low < high) {\n        // Calculate mid\n        mid = (low + high) / 2;\n ((      []  arr[mid - 1]) or (mid % 2 == 0 and arr[mid] == arr[mid + 1]))\n        {\n            low = mid + 1;\n        }\n        else\n        {\n            high = mid;\n        }\n    }\n    return arr[low];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"aahad-and-harshit-always-have-fun-by-solving-problems-harshit-took-a-sorted-array-consisting-of-distinct-integers-and-rotated-it-clockwise-by-an-unknown-amount-for-example-he-took-a-sorted-array-1-2-3-4-5-and-if-he-rotates-it-by-2-then-the-array-becomes-4-5-1-2-3\">Aahad and Harshit always have fun by solving problems. Harshit took a sorted array consisting of distinct integers and rotated it clockwise by an unknown amount. For example, he took a sorted array = [1, 2, 3, 4, 5] and if he rotates it by 2, then the array becomes: [4, 5, 1, 2, 3].</h4>\n\n<h4 id=\"after-rotating-a-sorted-array-aahad-needs-to-answer-q-queries-asked-by-harshit-each-of-them-is-described-by-one-integer-q-i-which-harshit-wanted-him-to-search-in-the-array-for-each-query-if-he-found-it-he-had-to-shout-the-index-of-the-number-otherwise-he-had-to-shout-1\">After rotating a sorted array, Aahad needs to answer Q queries asked by Harshit, each of them is described by one integer Q[i]. which Harshit wanted him to search in the array. For each query, if he found it, he had to shout the index of the number, otherwise, he had to shout -1.</h4>\n\n<h4 id=\"for-each-query-you-have-to-complete-the-given-method-where-39-key-39-denotes-q-i-if-the-key-exists-in-the-array-return-the-index-of-the-39-key-39-otherwise-return-1\">For each query, you have to complete the given method where 'key' denotes Q[i]. If the key exists in the array, return the index of the 'key', otherwise, return -1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Can you solve each query in O(logN) ?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains the size of the array: N\n\nThe second line contains N single space-separated integers: A[i].\n\nThe third line of input contains the number of queries: Q\n\nThe next Q lines of input contain: the number which Harshit wants Aahad to search: Q[i]\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the index of the number if found, otherwise -1.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to explicitly print the expected output, just return it and printing has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^6\n-10^9 &lt;= A[i] &lt;= 10^9\n1 &lt;= Q &lt;= 10^5\n-10^9 &lt;= Q[i] &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>4\n2 5 -3 0\n2\n5\n1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1\n-1\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>In the 1st test case, 5 is found at index 1\n\nIn the 2nd test case, 1 is not found in the array, hence return -1.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>5\n100 -2 6 10 11\n2\n100\n6\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>0\n2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 64,
        "link": "https://www.codingninjas.com/codestudio/problems/search-in-rotated-sorted-array_630450?topList=striver-sde-sheet-problems",
        "title": "Search In Rotated Sorted Array",
        "solution": "/*\n    Time complexity : O(log(N))\n    Space complextiy : O(1)\n    where N is the size of the input array\n*/\nint search(int* arr, int n, int key)\n{\n    // Initialize start and end\n    int st = 0, end = n - 1;\n    // Performing binary search\n    while (st <= end)\n    {\n        // Get the middle element\n        // The middle element is the one we are searching for\n        if (arr[mid] == key)\n        {\n            return mid;\n        }\n        else if (arr[mid] >= arr[st])\n        {\n            // Element lies towards left of mid\n            if (arr[st] <= key && key <= arr[mid])\n            {\n                end = mid - 1;\n            }\n            // Element lies towards right of mid    \n            else\n            {\n                st = mid + 1;\n            }\n        }\n        else\n        {\n            // Element lies towards right of mid\n            if (arr[end] >= key && key >= arr[mid])\n            {\n                st = mid + 1;\n            }\n            // Element lies towards left of mid\n            else\n            {\n                end = mid - 1;\n            }\n        }\n    }\n    // Element not found\n    return -1;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-sorted-arrays-39-a-39-amp-39-b-39-of-sizes-39-n-39-amp-39-m-39-you-need-to-find-the-median-of-the-two-arrays-when-merged-if-the-total-number-of-elements-i-e-n-m-is-even-then-the-median-will-be-the-mean-of-two-medians\">You are given two sorted arrays 'A' &amp; 'B' of sizes 'N' &amp; 'M'. You need to find the median of the two arrays when merged. If the total number of elements i.e., N + M is even then the median will be the mean of two medians.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let array A = { 2, 4, 6, 8 } and array B = { 1, 3, 5, 7 }. \nThe array after merging A and B will be { 1, 2, 3, 4, 5, 6, 7, 8 }.\nHere two medians are 4 &amp; 5. So the median will be a mean of 4 &amp; 5, which is 4.5.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you solve this in O(min(log N, log M)) time complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the sizes of the two arrays.\n\nThe second line of each test case contains 'N' space-separated integers representing the elements of the first array.\n\nThe third line of each test case contains 'M' space-separated integers representing the elements of the second array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the median of the combined array.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 6\n1 &lt;= M &lt;= 10 ^ 6\n1 &lt;= A[i] &lt;= 10 ^ 9\n1 &lt;= B[i] &lt;= 10 ^ 9\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4 4\n2 4 6 8\n1 3 5 7 \n5 4\n1 4 7 8 10\n11 14 17 19\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>4.5\n10.0\n</code></pre>\n\n<h5>Explanation</h5>\n\n<pre><code>Test Case 1: Refer to the example in the problem description.\n\nTest Case 2: \nThe array after merging will be { 1, 4, 7, 8, 10, 11, 14, 17, 19 }\nHere, the median will be 10 as it is in the middle.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2 3\n3 5\n1 7 8\n1 5\n5\n2 4 7 11 15\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>5.0\n6.0\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 65,
        "link": "https://www.codingninjas.com/codestudio/problems/median-of-two-sorted-arrays_985294?topList=striver-sde-sheet-problems",
        "title": "Median of two sorted arrays",
        "solution": "/*\n    Time Complexity: O(min(log N, log M))\n    Space Complexity: O(1)\n    Where 'N' & 'M' are the sizes of the arrays.\n*/\ndouble median(vector<int> a, vector<int> b)\n{\n    if(a.size() > b.size())\n    {\n        swap(a, b);\n    }\n    int n = a.size(), m = b.size();\n    int low = 0, high = n;\n    // Binary search.\n        int part = (n + m + 1) / 2 - mid;\n        // If part is greater than m\n        if(part > m)\n        {\n            low = mid + 1;\n            continue;\n        }\n        int leftMax = 0, rightMin = 1e9 + 1;\n        if(mid > 0)\n        {\n            leftMax = max(leftMax, a[mid-1]);\n        }\n        if(part > 0)\n        {\n            leftMax = max(leftMax, b[part-1]);\n        }\n        if(mid < n)\n        {\n            rightMin = min(rightMin, a[mid]);\n        }\n        if(part < m)\n        {\n            rightMin = min(rightMin, b[part]);\n        }\n        // If leftMax is less than or greater than rightMin\n        if(leftMax <= rightMin)\n        {\n            if((n + m) & 1)\n            {\n                return leftMax;\n            }\n            return (leftMax + rightMin) / 2.0;\n        }\n        // If a[mid] is less than leftMax\n        if(a[mid] < leftMax)\n        {\n            low = mid + 1;\n        }\n        else\n        {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-wants-to-serve-food-to-needy-people-so-he-bought-ladoos-from-a-sweet-shop-and-placed-them-on-plates-there-can-be-any-number-of-ladoos-present-in-a-plate\">Ninja wants to serve food to needy people. So, he bought Ladoos from a sweet shop and placed them on plates. There can be any number of Ladoos present in a plate.</h4>\n\n<h4 id=\"plates-containing-ladoos-are-placed-in-two-rows-each-row-is-sorted-in-increasing-order-by-the-number-of-ladoos-in-a-plate\">Plates containing Ladoos are placed in two rows. Each row is sorted in increasing order by the number of Ladoos in a plate.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>\u2018ROW1\u2019 :  [2, 5, 8, 17] and  \u2018ROW2\u2019 :  [1, 4, 8, 13, 20]\n</code></pre>\n\n<h4 id=\"now-people-come-one-by-one-in-a-line-to-take-plates-of-ladoos-from-ninja-ninja-picks-the-two-plates-in-front-one-from-each-row-and-gives-that-plate-to-people-in-which-the-number-of-ladoos-is-the-smallest-if-both-plates-contain-equal-numbers-of-ladoos-then-he-serves-any-plate-from-the-two-plates-and-places-the-other-plate-back-to-its-position\">Now people come one by one in a line to take plates of Ladoos from Ninja. Ninja picks the two plates in front, one from each row and gives that plate to people in which the number of ladoos is the smallest (if both plates contain equal numbers of ladoos then he serves any plate from the two plates) and places the other plate back to its position.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018ROW1\u2019 is [2, 5, 8, 17] and \u2018ROW2\u2019 is [1, 4, 8, 13, 20], then Ninja picks the first plates from each rows, plate containing 2 ladoos from \u2018ROW1\u2019 and a plate containing 1 ladoo from \u2018ROW2\u2019. \nThen he gives the plate with 1 Ladoo to the first person in line and places the other plate back to its position.\n</code></pre>\n\n<h4 id=\"can-you-tell-how-many-ladoos-the-k-39-th-person-will-get\">Can you tell how many ladoos the \u2018K'th\u2019 person will get?</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains three single space-separated integers \u2018N\u2019,  \u2018M\u2019 and \u2018K\u2019 where \u2018N\u2019 and \u2018M\u2019 denote the number of plates containing ladoos in \u2018ROW1\u2019 and \u2018ROW2\u2019  respectively and \u2018K\u2019 denotes the \u2018K\u2019th\u2019 person in line waiting to be served.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, denoting the number of ladoos in each plate of the first row i.e. \u2018ROW1\u2019.\n\nThe third line of each test case contains \u2018M\u2019 single space-separated integers, denoting the number of ladoos in each plate of the second row i.e. \u2018ROW2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the number of ladoos the K'th person will get.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N, M, K &lt;= 10^5\nK &lt;= (N + M)\n0 &lt;= ROW1[i], ROW2[i] &lt;= 10^5\n\nwhere ROW1[i] and ROW2[i] denote the number of Ladoos in i\u2019th plates of ROW1 and ROW2 respectively.\n\nTime Limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n5 4 3\n3 11 23 45 52\n4 12 14 18\n1 1 2\n1\n2\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>11\n 2\n</code></pre>\n\n<h5>Explanation for Sample Output 1 :</h5>\n\n<pre><code>For sample test case 1: \n1\u2019st person will get 3 ladoos i.e a minimum of 3 and 4. Now  \u2018ROW1\u2019 :  [11, 23, 45, 52] and  \u2018ROW2\u2019 :  [4, 12, 14, 18].\n2\u2019nd person will get 4 ladoos i.e minimum of 11 and 4. Now  \u2018ROW1\u2019 :  [11, 23, 45, 52] and  \u2018ROW2\u2019 :  [12, 14, 18].\n3\u2019rd person will get 11 ladoos i.e minimum of 11 and 12. \n\n For sample test case 2: \n1\u2019st person will get 1 ladoos i.e a minimum of 1 and 2. Now  \u2018ROW1\u2019 :  [ ] and  \u2018ROW2\u2019 :  [2].\n2\u2019st person will get 2 ladoos because we have only one element left in ROW2 . Now  \u2018ROW1\u2019 :  [] and  \u2018ROW2\u2019 :  [].\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n5 3\n1 3 6 7 10\n3 5 5 7\n3 3 2\n10 20 20\n1 2 3 \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>3 \n2\n</code></pre>\n\n<h5>Explanation for Sample Output 2 :</h5>\n\n<pre><code>For sample test case 1: \n1\u2019st person will get 1 ladoo i.e minimum of 1 and 3. Now  \u2018ROW1\u2019 :  [3, 7, 10] and  \u2018ROW2\u2019 :  [3, 5, 5, 7].\n2\u2019nd person will get 3 ladoos i.e now from both rows we will get a plate of 3 ladoos so Ninja can give any one plate containing ladoos from each row. Let us assume Ninja give a plate from \u2018ROW2\u2019. Now  \u2018ROW1\u2019 :  [3, 7, 10] and  \u2018ROW2\u2019 :  [5, 5, 7].\n3\u2019rd person will get 3 ladoos i.e minimum of 3 and 5. Now  \u2018ROW1\u2019 :  [7, 10] and  \u2018ROW2\u2019 :  [5, 5, 7].\n\nFor sample test case 2: \n1\u2019st person will get 1 ladoo i.e minimum of 10 and 1. Now  \u2018ROW1\u2019 :  [10, 20, 30] and  \u2018ROW2\u2019 :  [ 2, 3].\n2\u2019nd person will get 2 ladoos i.e  minimum of 10 and 2. Now  \u2018ROW1\u2019 :  [10, 20, 30] and  \u2018ROW2\u2019 :  [3].\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 66,
        "link": "https://www.codingninjas.com/codestudio/problems/ninja-and-ladoos_1112629?topList=striver-sde-sheet-problems",
        "title": "Kth Element of Two Sorted Arrays",
        "solution": "/*\n    Time complexity: O(log(K))\n    Space complexity: O(log(K))\n    where K denotes the Kth person in line waiting to be served.\n */\nint ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) \n{     \n    // If length of first array is smaller then length of second then swap both the arrays.    \n    if (m > n) \n    {\n        return ninjaAndLadoos(row2, row1, n, m, k);\n    if (m == 0) \n    {\n        return row2[k - 1];\n    }\n    // If k is equal to 1\n    if (k == 1) \n    {\n        return min(row1[0], row2[0]);\n    }\n    int i = min(m, k / 2);\n    int j = min(n, k / 2);\n    // If row1[i - 1] is greater than row2[j - 1]\n    if (row1[i - 1] > row2[j - 1]) \n    {\n        vector<int> newRow2;\n        newRow2.assign(row2.begin() + j, row2.end());\n        return ninjaAndLadoos(row1, newRow2, m, n - j, k - j);\n    } \n    vector<int> newRow1;\n    newRow1.assign(row1.begin() + i, row1.end());\n    return ninjaAndLadoos(newRow1, row2, m - i, n, k - i);  \n} \n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ayush-is-studying-for-ninjatest-which-will-be-held-after-39-n-39-days-and-to-score-good-marks-he-has-to-study-39-m-39-chapters-and-the-ith-chapter-requires-time-i-seconds-to-study-the-day-in-ayush-s-world-has-100-100-seconds-there-are-some-rules-that-are-followed-by-ayush-while-studying\">Ayush is studying for ninjatest which will be held after 'N' days, And to score good marks he has to study 'M' chapters and the ith chapter requires TIME[i] seconds to study. The day in Ayush\u2019s world has 100^100 seconds. There are some rules that are followed by Ayush while studying.</h4>\n\n<h4 id=\"1-he-reads-the-chapter-in-a-sequential-order-i-e-he-studies-i-1th-chapter-only-after-he-studies-ith-chapter\">1. He reads the chapter in a sequential order, i.e. he studies i+1th chapter only after he studies ith chapter.</h4>\n\n<h4 id=\"2-if-he-starts-some-chapter-on-a-particular-day-he-completes-it-that-day-itself\">2. If he starts some chapter on a particular day he completes it that day itself.</h4>\n\n<h4 id=\"3-he-wants-to-distribute-his-workload-over-39-n-39-days-so-he-wants-to-minimize-the-maximum-amount-of-time-he-studies-in-a-day\">3. He wants to distribute his workload over 'N' days, so he wants to minimize the maximum amount of time he studies in a day.</h4>\n\n<h4 id=\"your-task-is-to-find-out-the-minimal-value-of-the-maximum-amount-of-time-for-which-ayush-studies-in-a-day-in-order-to-complete-all-the-39-m-39-chapters-in-no-more-than-39-n-39-days\">Your task is to find out the minimal value of the maximum amount of time for which Ayush studies in a day, in order to complete all the 'M' chapters in no more than 'N' days.</h4>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>if Ayush want to study 6 chapters in 3 days and the time that each chapter requires is as follows:\nChapter 1 = 30\nChapter 2 = 20\nChapter 3 = 10\nChapter 4 = 40\nChapter 5 = 5\nChapter 6 = 45\n\nThen he will study the chapters in the following order \n\n| day 1 : 1 , 2 | day 2 : 3 , 4 | day 3 : 5 , 6 |\nHere we can see that he study chapters in sequential order and the maximum time to study on a day is 50, which is the minimum possible in this case.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single positive integer 'T', denoting the number of test cases.\n\nThe first line of each test case contains two space-separated positive integers 'N' and 'M', denoting the number of days he can study before the ninja test and the number of chapters he has to study for the ninja test respectively.\n\nThe second line of each test case contains 'M' space-separated positive integers, where the ith integer denotes the time required to study the ith chapter.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print a single line containing a single integer denoting the maximum time Ayush studies in a day.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N , M &lt;= 10 ^ 4\n1 &lt;= TIME[i] &lt;= 10 ^ 9 \nIt is considered that there are infinite seconds in a day, on the planet where Ayush lives.\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n3 5\n1 2 2 3 1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>The ayush will read the chapter as follows,\nDay 1 : 1 , 2         Time required : 3\nDay 2 : 3             Time required : 2\nDay 3 : 4 , 5         Time required : 4\nSo the maximum time in a day is 4.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n4 7\n2 2 3 3 4 4 1 \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>6\n</code></pre>\n\n<h5>Explanation of sample input 2:</h5>\n\n<pre><code>The ayush will read the chapter as follows,\nDay 1 : 1 , 2          Time required : 4\nDay 2 : 3 , 4          Time required : 6\nDay 3 : 5              Time required : 4\nDay 4 : 6 , 7          Time required : 5\nSo the maximum time in a day is 6.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 67,
        "link": "https://www.codingninjas.com/codestudio/problems/ayush-gives-ninjatest_1097574?topList=striver-sde-sheet-problems",
        "title": "Allocate Books",
        "solution": "/*\n    Time Complexity: O(M * log(K))\n    Space complexity: O(1),\n    where 'K' is the sum of the time required to study all the chapters \n    and 'M' is the number of chapters.\n*/\nlong long ayushGivesNinjatest(int n, int m, vector<int> time)\n{\n    long long sum = 0;\n    int maxTime = INT_MIN;\n    // We will iterate through all the chapters and calculate the sum.\n    {\n        sum += time[i];\n        maxTime = max(maxTime , time[i]);\n    }\n    // We will initialize the lower limit of binary search l with maxTime and the upper limit of binary search with sum.\n    long long l = maxTime, r = sum, answer = sum;\n    while (l <= r)\n    {\n        long long mid = (l + r) / 2;\n        long days = 1;\n        long long currentTime = 0;\n        for (int i = 0; i < m; i++)\n        {\n            currentTime += time[i];\n            if (currentTime > mid)\n            {\n                days++;\n                currentTime = time[i];\n            }\n        }\n        /*\n            If the days required to study all the chaptes is greater than n than answer is not possible\n            and we want more time to study in a given day so we will compress the range to the right hand side.\n            Else we can study all the chapters and we will update the answer with mid.\n        */\n        if (days <= n)\n        {\n            answer = mid;\n            r = mid - 1;\n        }\n        else\n        {\n            l = mid + 1;\n        }\n    }\n    // We will return the final answer.\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"chess-tournament-is-going-to-be-organized-in-ninjaland-there-will-be-c-chess-players-going-to-attend-the-tournament-all-the-players-will-be-staying-in-a-hotel-the-hotel-has-n-free-rooms-available-for-the-players-where-one-player-will-choose-one-room-to-live-in-the-ith-room-is-at-position-i-in-the-hotel-all-rooms-are-in-distinct-positions\">Chess tournament is going to be organized in Ninjaland. There will be C chess players going to attend the tournament. All the players will be staying in a hotel. The hotel has N free rooms available for the players, where one player will choose one room to live in.  The ith room is at position[i] in the hotel. All rooms are in distinct positions.</h4>\n\n<h4 id=\"focus-level-of-a-chess-player-is-defined-as-the-minimum-distance-between-his-room-and-the-room-of-another-player-the-overall-focus-of-a-tournament-is-defined-as-the-minimum-focus-level-among-all-players-you-as-an-organizer-obviously-want-the-overall-focus-as-high-as-possible-so-you-assign-the-rooms-to-players-such-that-the-overall-focus-is-as-high-as-possible\">Focus level of a chess player is defined as the minimum distance between his room and the room of another player. The overall focus of a tournament is defined as the minimum focus level among all players. You as an organizer obviously want the overall focus as high as possible so you assign the rooms to players such that the overall focus is as high as possible.</h4>\n\n<h5 id=\"for-example\">For example,</h5>\n\n<pre><code>let say we have 3 players and 5 rooms available and the rooms are at positions:  1 2 3 4 6\nHere the optimal allocation is in rooms 1 3 6 and the overall focus level is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains two positive integers N and C, which represent the number of rooms in the hotel and the number of chess players.\n\nThe next line contains N space-separated positive integers representing the position of available room in the hotel.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer, representing the maximum overall focus of the tournament.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10 ^ 4\n2 &lt;= C &lt;= N\n1 &lt;= positions[i] &lt;= 10 ^ 9\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample input 1 :</h5>\n\n<pre><code>1\n5 3\n1 2 3 4 6\n</code></pre>\n\n<h5>Sample output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5>Sample input 2 :</h5>\n\n<pre><code>2\n4 2\n5 4 2 1\n6 4\n6 7 9 13 15 11\n</code></pre>\n\n<h5>Sample output 2 :</h5>\n\n<pre><code>4\n2\n</code></pre>\n\n<h5>Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, \nwe only have to allocate rooms to 2 players so we can assign rooms that are first and last which are 1 and 5, so our answer is 5 - 1 = 4.\n\nIn test case 2, \nthere is no way by which we can allocate rooms such that every player will have the 3 or more as its least distance to other players. So the answer is 2 and one possible allocation of rooms is as follows.\n    Player1 = 6\n    Player2 = 9\n    Player3 = 11\n    Player4 = 13 \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 68,
        "link": "https://www.codingninjas.com/codestudio/problems/chess-tournament_981299?topList=striver-sde-sheet-problems",
        "title": "Chess Tournament",
        "solution": "/*\r\n\t\tTime Complexity: O(N * log(max))\r\n\t\tSpace Complexity: O(1),\r\n   \r\n\t\twhere N is the total number of rooms and max is the maximum possible position for any room.\r\n\r\n*/\r\n\r\nint chessTournament( vector<int> &positions, int n , int c) \r\n{\r\n\t// Sorting all positions of empty rooms.\r\n\tsort(positions.begin(),positions.end());   \r\n\t\r\n    // l is the least possible answer and r is the max possible answer.\r\n\tint ans=0 , l=1 , r = positions[n-1]; \r\n\t\r\n    // We will find answer by using binary search.\r\n\twhile(l<=r)\r\n    { \r\n\t\t// Lets check wether the allocation is possible for mid.\r\n\t\tint mid=(l+r)/2; \r\n\t\t\r\n        // previous_room stores the previous occupied empty room.\r\n        int count=1 , previousRoom=positions[0]; \r\n        \r\n\t\tfor(int i = 1 ; i < n ; i++) \r\n        {\r\n\t\t\t// If the diffrence between current and previous room >= mid we will allocate it.\r\n\t\t\tif(positions[i]-previousRoom >= mid) \r\n            {  \r\n\t\t\t\tcount++;\r\n\t\t\t\tpreviousRoom=positions[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Compressing length to right half if allocation is possible.\r\n\t\tif(count >= c)\r\n        { \r\n\t\t\tans=mid;\r\n\t\t\tl=mid+1;\r\n\t\t}\r\n\r\n\t\t// Compressing length to left half if allocation is not possible.\r\n\t\telse \r\n        {  \r\n\t\t\tr=mid-1;\r\n\t\t}\r\n\t}\r\n \r\n\treturn ans;\r\n}\r\n\r\n\r\n\r\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"implement-the-min-heap-data-structure-for-information-about-heap-click-here\">Implement the Min Heap data structure. For information about Heap <a href=\"https://www.codingninjas.com/codestudio/library/binary-heap\" target=\"_blank\"> click here</a>.</h4>\n\n<h4 id=\"you-will-be-given-2-types-of-queries\">You will be given 2 types of queries:-</h4>\n\n<pre><code>0 X\nInsert X in the heap.\n\n1\nPrint the minimum element from the heap and remove it.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer 'T', denoting the number of test cases.\n\nFor each test case, the first line will contain a single integer 'N', the number of queries.\n\nThen, each of the next \u2018N\u2019 lines contains two types of query either 0 \u2018X\u2019 or 1.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, output the answer for query of type 1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n1 &lt;= X &lt;= 50\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3\n0 2\n0 1\n1\n2\n0 1\n1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5>Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case:-\nInsert 2 in the heap and currently, 2 is the smallest element in the heap.\nInsert 1 in the heap and now the smallest element is 1.\nReturn and remove the smallest element which is 1.\n\nFor the second test case:-\nInsert 1 in the heap and currently, 1 is the smallest element in the heap.\nReturn the smallest element from the heap which is 1 and remove it.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n5\n0 5\n1\n0 43\n0 15\n0 5\n2\n0 4\n1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>5\n4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 69,
        "link": "https://www.codingninjas.com/codestudio/problems/min-heap_4691801?topList=striver-sde-sheet-problems",
        "title": "Min Heap",
        "solution": "/*\n    Time complexity: O( N * log( N ) )\n    Space complexity: O( N )\n    Where N is the size of heap array.\n*/\n// Left child of the node.\nint left(int k) {\n    return 2 * k + 1;\n}\n// Right child of the node.\nint right(int k) {\n    return 2 * k + 2;\n}\n// Returns the parent node.\n}\n// Heapify the heap\nint heapify(vector < int > & heap, int k, int & size) {\n    // Find the left child of the node.\n    int l = left(k);\n    // Find the right child of the node.\n    int r = right(k);\n    // Find the smallest element between the current node and its children.\n    // Check if the left child is smallest.\n    int smallest = k;\n    if (l < size && heap[l] < heap[k]) {\n        smallest = l;\n    }\n    // Check if the right node is smallest then the previous smallest.\n    if (r < size && heap[r] < heap[smallest]) {\n        smallest = r;\n    }\n    // If the smallest element is not in the current node.\n    // We have to heapify the Heap to take that element to the top.\n    if (smallest != k) {\n        // Swap the values of current node and the smallest node value.\n        int tempp = heap[k];\n        heap[k] = heap[smallest];\n        heap[smallest] = tempp;\n        // Call the heapify function on smallest value node which now contains the value of parent node.\n        heapify(heap, smallest, size);\n    }\n}\n// Insert a val in the heap.\n// Function contains heap array, val to inserted and the current size of the heap.\nvoid insert(vector < int > & heap, int val, int & size) {\n    // Insert the val at the end of the heap.\n    heap[size] = val;\n    // If There is nore than 1 node in the Heap.\n    // MinHeapify the heap by checking the val at its parent node.\n    // Also do it until the heap property is not satisfied.\n    int i = size;\n    size += 1;\n    while (i != 0 && heap[parent(i)] > heap[i]) {\n        // Swap the value of current node with its parent.\n        swap(heap[i], heap[parent(i)]);\n        // Check that if the parent element of current element is satisfying the heap property.\n        i = parent(i);\n    }\n}\nint extractMin(vector < int > & heap, int & size) {\n    // Check if the current node is the only node in the heap.\n    if (size == 1) {\n        size -= 1;\n        return heap[0];\n    }\n    // Takeout the min value and remove it from the heap.\n    int val = heap[0];\n    // Put last node on the top of heap.\n    heap[0] = heap[size - 1];\n    // Decrease the size of heap as the minimum element is removed.\n    size -= 1;\n    // Heapify the heap to satisfy the heap property.\n    heapify(heap, 0, size);\n    return val;\n}\n// minHeap function which take size of Queries and Queries as Input.\n// Returns an array out outputs depending on the query.\nvector < int > minHeap(int n, vector < vector < int >> & q) {\n    int size = 0;\n    vector < int > heap(n);\n    // Define an array which stores the min elements.\n    vector < int > ans;\n    // For each query in the array Q.\n    for (int i = 0; i < n; i++) {\n        // If query is of type 1 then insert the value in the heap.\n        // Else take min element from the heap and append it in the ans.\n        if (q[i][0] == 0) {\n            insert(heap, q[i][1], size);\n        } else {\n            ans.push_back(extractMin(heap, size));\n        }\n    }\n    // Return the ans array.\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-arr-consisting-of-n-distinct-integers-and-a-positive-integer-k-find-out-kth-smallest-and-kth-largest-element-of-the-array-it-is-guaranteed-that-k-is-not-greater-than-the-size-of-the-array\">You are given an array \u2018Arr\u2019 consisting of \u2018N\u2019 distinct integers and a positive integer \u2018K\u2019. Find out Kth smallest and Kth largest element of the array. It is guaranteed that K is not greater than the size of the array.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let \u2018N\u2019 = 4,  \u2018Arr\u2019 be [1, 2, 5, 4] and \u2018K\u2019 = 3.  \nthen the elements of this array in ascending order is [1, 2, 4, 5].  Clearly, the 3rd smallest and largest element of this array is 4 and 2 respectively.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next 2*T lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains two space-separated integers  \u2018N\u2019 and \u2018K\u2019 respectively.\n\nThe second line of the test case contains \u2018N\u2019 space-separated integers representing elements of the array \u2018Arr\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a line consisting of two space-separated integers that represent the Kth smallest and Kth largest elements of the array.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. In the given function, you need to return an array consisting of 2 integers, where the first integer gives Kth smallest element and the second integer gives the Kth largest element.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= K &lt;= N\n-10^9 &lt;= Arr[i] &lt;= 10^9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the size of array \u2018Arr\u2019 and Arr[i] is the element of the given array.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4 4\n5 6 7 2\n4 3\n1 2 5 4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>7 2 \n4 2\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nHere, \u2018N\u2019 = 4, \u2018Arr\u2019 = [5, 6, 7, 2] and \u2018K\u2019 = 3.\nElements of the array in ascending order are [2, 5, 6, 7]\nThus the 4rd smallest and 4rd largest elements of this array are 7 and 2 respectively.\n\nTest case 2:\nSee problem statement for an explanation.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code> 2\n 1 1\n 2\n 5 1\n 5 4 3 2 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code> 2 2\n 1 5\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 70,
        "link": "https://www.codingninjas.com/codestudio/problems/kth-smallest-and-largest-element-of-array_1115488?topList=striver-sde-sheet-problems",
        "title": "Kth Smallest and Largest Element of Array",
        "solution": "/*\n    Time complexity: O(N + KlogN)\n    Space complexity: O(N)\n\n    Where \u00e2\u20ac\u02dcN\u00e2\u20ac\u2122 is the size of the given array and K is given integer.\n*/\n#include <queue>\n\nvector<int> kthSmallLarge(vector<int> &arr, int n, int k)\n{\n    vector<int> result(2);\n\n    // Build Min-Heap from the given array.\n    priority_queue<int, vector<int>, greater<int>> minHeap(arr.begin(), arr.end());\n\n    // Pop from Min-Heap exactly K-1 times\n    for(int i = 1; i < k; i++) \n    {\n        minHeap.pop();\n    }\n\n    // Kth smallest element.\n    result[0] = minHeap.top();\n\n    // Build Max-Heap from the given array.\n    priority_queue<int> maxHeap(arr.begin(), arr.end());\n\n    // Pop from Max-Heap exactly K-1 times\n    for(int i = 1; i < k; i++) \n    {\n        maxHeap.pop();\n    }\n\n    //Kth largest element.\n    result[1] = maxHeap.top();\n\n    return result;\n}"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-arrays-lists-a-and-b-of-size-n-each-you-are-also-given-an-integer-k-you-have-to-find-the-k-maximum-and-valid-sum-combinations-from-all-the-possible-sum-combinations-of-the-arrays-lists-a-and-b\">You are given two arrays/lists \u2018A\u2019 and \u2018B\u2019 of size \u2018N\u2019 each. You are also given an integer \u2018K\u2019. You have to find the \u2018K\u2019 maximum and valid sum combinations from all the possible sum combinations of the arrays/lists \u2018A\u2019 and \u2018B\u2019.</h4>\n\n<h4 id=\"sum-combination-is-made-by-adding-one-element-from-array-a-and-another-element-from-array-b\">Sum combination is made by adding one element from array \u2018A\u2019 and another element from array \u2018B\u2019.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>A : [1, 3] \nB : [4, 2] \nK : 2\nThe possible sum combinations can be 5(3 + 2), 7(3 + 4), 3(1 + 2), 5(1 + 4). The 2 maximum sum combinations are 7 and 5. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T', denoting the number of test cases.\n\nThe first line of every test case contains two integers \u2018N\u2019 and \u2018K\u2019 denoting the length of the array/list and the number of required sum combinations respectively. \n\nThe second line of every test case contains \u2018N\u2019 space-separated integers denoting the elements of the array \u2018A\u2019.\n\nThe third line of every test case contains \u2018N\u2019 space-separated integers denoting the elements of the array \u2018B\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, return the maximum \u2018K\u2019 valid sum combinations in descending order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n1 &lt;= K &lt;= N\n-10^5 &lt;= A[i], B[i] &lt;= 10^5\n\nWhere 'A[i]' and 'B[i]' denotes the ith element in the given arrays/lists. \n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3 2\n1 3 5\n6 4 2\n1 1\n3\n4\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>11 9\n7\n</code></pre>\n\n<h5>Explanation of Sample Output 1 :</h5>\n\n<pre><code>In test case 1, for the given arrays/lists, all the possible sum combinations are: \n7(1 + 6), 5(1 + 4), 3(1 + 2), 9(3 + 6), 7(3 + 4), 5(3 + 2), 11(6 + 5), 9(5 + 4), 7(5 + 2).\n\nThe two maximum sum combinations from the above combinations are 11 and 9. \n\nIn test case 2, only one pair is possible with sum 7(3 + 4) from the given arrays/lists.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n1 1\n1 1\n4 1\n1 2 3 4\n4 3 2 1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>2 2\n8\n</code></pre>\n\n<h5>Explanation of sample input 2 :</h5>\n\n<pre><code>In test case 1, for the given arrays/lists, two possible sum combinations are : 2(1 + 1), 2(1 + 1).\n\nIn test case 2, for the given arrays/lists, one possible sum combination is: 8(4 + 4).\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 71,
        "link": "https://www.codingninjas.com/codestudio/problems/k-max-sum-combinations_975322?topList=striver-sde-sheet-problems",
        "title": "K Max Sum Combinations",
        "solution": "/*\n    Time Complexity: O(N * log(N))\n    Space Complexity: O(N)\n\n    Where 'N' is the number of elements the given arrays.\n*/\n\n#include<queue>\n#include<set>\n#include<algorithm>\n\nvector<int> kMaxSumCombination(vector<int> &a, vector<int> &b, int n, int k){\n\t// Sorting the arrays.\n\tsort(a.begin(), a.end());\n\tsort(b.begin(), b.end());\n\t\n\t// Using a max-heap.\n\tpriority_queue<pair<int, pair<int, int>>>maxHeap; \n\tmaxHeap.push({a[n-1] + b[n-1], {n - 1, n - 1}});\n\t\n\t// Using a set.\n\tset<pair<int, int>>mySet; \n\tmySet.insert({n - 1, n - 1}); \n\t\n\t// Output array to store the K max sum combinations.\n\tvector<int> result; \n\t\n\twhile(k > 0){\n\t\tpair<int, pair<int, int>> top = maxHeap.top();\n\t\t\n\t\t// Remove the root of the max heap.\n\t\tmaxHeap.pop();\n\t\t\n\t\tint sum = top.first;\n\t\tint x = top.second.first; \n\t\tint y = top.second.second; \n\t\t\n\t\t// Add the sum to the output array.\n\t\tresult.push_back(sum);\n\t\t\n\t\t// Check if the indices (x-1, y) are present in the set.\n\t\tif(mySet.find({x - 1, y}) == mySet.end()){\n\t\t\tmaxHeap.push({a[x - 1] + b[y], {x - 1, y}});\n\t\t\tmySet.insert({x - 1, y});\n\t\t}\n\t\t// Check if the indices (x, y-1) are present in the set.\n\t\tif(mySet.find({x, y - 1}) == mySet.end()){\n\t\t\tmaxHeap.push({a[x] + b[y - 1], {x, y - 1}});\n\t\t\tmySet.insert({x, y - 1});\n\t\t}\n\t\tk -= 1; \n\t}\n\t// Return the output array.\n\treturn result;\n}"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-stream-of-39-n-39-integers-for-every-39-i-th-39-integer-added-to-the-running-list-of-integers-print-the-resulting-median\">You are given a stream of 'N' integers. For every 'i-th' integer added to the running list of integers, print the resulting median.</h4>\n\n<h4 id=\"print-only-the-integer-part-of-the-median\">Print only the integer part of the median.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'N', denoting the number of integers in the stream.\n\nThe second line of input contains 'N' integers separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the running median for every integer added to the running list in one line (space-separated).\n</code></pre>\n\n<h5 id=\"input-constraints\">Input Constraints</h5>\n\n<pre><code>0 &lt;= N &lt;= 10 ^ 5\n1 &lt;= ARR[i] &lt;= 10 ^ 5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>6\n6 2 1 3 7 5\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>6 4 2 2 3 4\n</code></pre>\n\n<h5>Explanation of Sample Output 1 :</h5>\n\n<pre><code>S = {6}, median = 6\nS = {6, 2} -&gt; {2, 6}, median = 4\nS = {6, 2, 1} -&gt; {1, 2, 6}, median = 2\nS = {6, 2, 1, 3} -&gt; {1, 2, 3, 6}, median = 2\nS = {6, 2, 1, 3, 7} -&gt; {1, 2, 3, 6, 7}, median = 3\nS = {6, 2, 1, 3, 7, 5} -&gt; {1, 2, 3, 5, 6, 7}, median = 4\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>5\n5 4 3 2 1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>5 4 4 3 3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 72,
        "link": "https://www.codingninjas.com/codestudio/problems/running-median_625409?topList=striver-sde-sheet-problems",
        "title": "Running Median",
        "solution": "/*\n    Time Complexity: O(N * log(N))\n    Space Complexity: O(N)\n    where N is the number of elements in the array.\n*/\n#include <iostream>\n#include <vector>\n#include <queue>\nvoid findMedian(int arr[], int n)\n{\n    priority_queue<int> lowerHalf;\n    priority_queue<int, vector<int>, greater<int>> higherHalf;\n    // The variable size is the size of the current stream\n    for(int size=1; size<=n; size++)\n    {\n        if(!lowerHalf.empty() && lowerHalf.top() > arr[size-1])\n        {   \n            // Insert ARR[size-1] in lowerHalf\n            lowerHalf.push(arr[size-1]);\n            if(lowerHalf.size() > higherHalf.size() + 1)\n            {   \n                // Insert the top element of lowerHalf into higherHalf\n                higherHalf.push(lowerHalf.top());\n                lowerHalf.pop();\n            }\n        }\n        else\n        {\n            higherHalf.push(arr[size-1]);\n            if(higherHalf.size() > lowerHalf.size() + 1)\n            {   \n                // Insert the top element of higherHalf into lowerHalf\n                lowerHalf.push(higherHalf.top());\n                higherHalf.pop();\n            }\n        }\n        // Check if size is odd\n        if(size%2 == 1)\n        {   \n            if(higherHalf.size() > lowerHalf.size())\n            {\n                median = higherHalf.top();\n            }\n            else\n            {\n                median = lowerHalf.top();\n            }\n        }\n        else\n        {\n            median = (lowerHalf.top() + higherHalf.top())/2;\n        }\n        // Print the variable median\n        cout << median << \" \";\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-k-different-arrays-lists-which-are-sorted-individually-in-ascending-order-you-need-to-merge-all-the-given-arrays-list-such-that-the-output-array-list-should-be-sorted-in-ascending-order\">You have been given \u2018K\u2019 different arrays/lists, which are sorted individually (in ascending order). You need to merge all the given arrays/list such that the output array/list should be sorted in ascending order.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\n\nThe first line of each test case contains an integer that denotes the value of K.\n\nThe next 2*K lines of each test case follow: \nThe first line contains an integer \u2018N\u2019 denoting the size of the array. \n\nThe second line contains N space-separated integers. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first and only line of output contains space-separated elements of the merged and sorted array, as described in the task.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= K &lt;= 5\n1 &lt;= N &lt;= 20\n-10^5 &lt;= DATA &lt;= 10^5\n\nTime Limit: 1 sec \n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n2\n3 \n3 5 9 \n4 \n1 2 3 8   \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 3 3 5 8 9 \n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>After merging the two given arrays/lists [3, 5, 9] and [ 1, 2, 3, 8], the output sorted array will be [1, 2, 3, 3, 5, 8, 9].\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n4\n3\n1 5 9\n2\n45 90\n5\n2 6 78 100 234\n1\n0\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>0 1 2 5 6 9 45 78 90 100 234\n</code></pre>\n\n<h5>Explanation of Sample Input 2 :</h5>\n\n<pre><code>After merging the given arrays/lists [1, 5, 9], [45, 90], [2, 6, 78, 100, 234] and [0], the output sorted array will be [0, 1, 2, 5, 6, 9, 45, 78, 90, 100, 234].\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 73,
        "link": "https://www.codingninjas.com/codestudio/problems/merge-k-sorted-arrays_975379?topList=striver-sde-sheet-problems",
        "title": "Merge K Sorted Arrays",
        "solution": "/*\n    Time Complexity: O((N * K) * log(K)) \n    Space Complexity: O(N * K)\n    Where N is the total number of elements in all the arrays, and K is the number of arrays.\n*/\n#include<queue>\nvector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)\n{\n    vector<int> result; \n    // Create a min heap to store atmost k heap nodes at a time.\n    , ,  , , ,   , greater<pair<int, pair<int, int> > > > minHeap; \n    for (int i = 0; i < kArrays.size(); i++)\n    {\n        minHeap.push({ kArrays[i][0], { i, 0 } }); \n    }\n    while (minHeap.empty() == false) \n    { \n        // Remove the minimum element from the heap.\n        pair<int, pair<int, int> > curr = minHeap.top(); \n        minHeap.pop(); \n        // i is the array number and j is the index of the removed element in the ith array.\n        int i = curr.second.first; \n        int j = curr.second.second; \n        // Add the removed element to the output array.\n        result.push_back(curr.first); \n        // If the next element of the extracted element exists, add it to the heap.\n        if (j + 1 < kArrays[i].size())\n        {\n            minHeap.push({ kArrays[i][j + 1], { i, j + 1 } }); \n        }\n    } \n    // Return the output array.\n    return result; \n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-integer-array-arr-and-an-integer-k-your-task-is-to-find-the-k-most-frequent-elements-in-arr-return-the-elements-sorted-in-ascending-order\">You are given an Integer array \u2018ARR\u2019 and an Integer \u2018K\u2019. Your task is to find the \u2018K\u2019 most frequent elements in \u2018ARR\u2019. Return the elements sorted in ascending order.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>You are given \u2018ARR\u2019 = {1, 2, 2, 3, 3} and \u2018K\u2019 = 2. Then the answer will {2, 3} as 2 and 3 are the elements occurring most number of times.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer 'T', representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018K\u2019, representing the size of \u2018ARR\u2019 and given integer \u2018K\u2019, respectively.\n\nThe Second line contains \u2018N\u2019 space-separated integers representing the elements of \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the \u2018K\u2019 most frequent elements in \u2018ARR\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>It is guaranteed that a unique answer exists.\n\nYou do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5000\n1 &lt;= K &lt;= Number of unique elements in \u2018ARR\u2019\n1 &lt;= ARR[i] &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n5 2\n1 2 2 3 3 \n4 1\n1 1 1 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2 3\n1\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>For the second test case, the answer will {2, 3} as 2 and 3 are the elements occurring most number of times.\n\nFor the second test case, the answer will {1} as 1 is the element occurring most number of times.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n1 2 \n3 2\n1 4 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 2\n1 4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 74,
        "link": "https://www.codingninjas.com/codestudio/problems/k-most-frequent-elements_3167808?topList=striver-sde-sheet-problems",
        "title": "K Most Frequent Elements",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    where 'N' is the size of the input array.\n*/\n#include<map>\n#include<algorithm>\nvector<int> KMostFrequent(int n, int k, vector<int> &arr)\n{\n    map<int, int> mp;\n    // Build map where the key is element\n    // and value is how often this element appears in 'ARR'.\n        mp[ele]++;\n    }\n    vector<int> bucket[n+1];\n    for (auto x : mp) {\n        int freq = x.second;\n        // Add in correct bucket.\n        bucket[freq].push_back(x.first);\n    }\n    vector<int> ans(k);\n    int cur = 0;\n    // Add 'K' elements to answer array starting from the rightmost bucket.\n    for (int i = n; i > 0 && k > 0; i--) {\n        if (bucket[i].size() == 0) {\n            continue;\n        }\n        for (int num : bucket[i]) {\n            ans[cur++] = num;\n            k--;\n            if(k == 0){\n                break;\n            }\n        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"implement-trie-data-structure-to-support-these-operations\">Implement Trie Data Structure to support these operations:</h4>\n\n<pre><code>insert(word) - To insert a string \"word\" in Trie\nsearch(word) - To check if string \"word\" is present in Trie or not.\nstartsWith(word) - To check if there is any string in the Trie that starts with the given prefix string \"word\".\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"three-type-of-queries-denote-these-operations\">Three type of queries denote these operations:</h4>\n\n<pre><code>Type 1: To insert a string \"word\" in Trie.\n1 word\n\nType 2: To check if the string \"word\" is present in Trie or not.\n2 word\n\nType 3: To check if there is any string in the Trie that starts with the given prefix string \"word\".\n3 word\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an Integer 'Q' which denotes the number of queries to be run. Then next 'Q' lines denote each query:\n\nThe first and only line of each query contains the type of query and a string \"word\" separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each query of Type 2 print the string \"true\" if string \"word\" is present in Trie or \"false\" otherwise.\nFor each query of Type 3 print the string \"true\" if there is any string in the Trie that starts with the given prefix string \"word\" or \"false\" otherwise.\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= Q &lt;= 5*10^4\n1 &lt;= W &lt;= 10\n\nWhere 'Q' is the number of queries, and 'W' is the length of the \"word\".\nAll input of \"word\" will consist of only lowercase letters a-z.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>5\n1 hello\n1 help\n2 help\n3 hel\n2 hel \n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>true\ntrue\nfalse\n</code></pre>\n\n<h5>&nbsp;Explanation to Sample Input 1 :</h5>\n\n<pre><code>Query 1: \"hello\" is inserted\nQuery 2: \"help\" is inserted\nQuery 3: \"true\" is printed as \"help\" is present\nQuery 4: \"true\" is printed as \"hello\" and \"help\" is present having the prefix \"hel\"\nQuery 5: \"false\" is printed as \"hel\" is not present\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>10\n1 aaaa\n1 aaaaaa\n1 bcd\n2 aaaaa\n3 aaaaa\n3 bc\n2 bc\n1 bc\n3 bcda\n2 bc\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>false\ntrue\ntrue\nfalse\nfalse\ntrue\n</code></pre>\n\n<h5>&nbsp;Explanation to Sample Input 2 :</h5>\n\n<pre><code>Query 1: \"aaaa\" is inserted\nQuery 2: \"aaaaaa\" is inserted\nQuery 3: \"bcd\" is inserted\nQuery 4: \"false\" is printed as \"aaaaa\" is not present\nQuery 5: \"true\" is printed as \"aaaaaa\" is present having the prefix \"aaaaa\"\nQuery 6: \"true\" is printed as \"bcd\" is present having the prefix \"bc\"\nQuery 7: \"false\" is printed as \"bc\" is not present\nQuery 8: \"bc\" is inserted\nQuery 9: \"false\" is printed as no word is present having the prefix \"bcda\"\nQuery 10: \"true\" is printed as \"bc\" is present\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 75,
        "link": "https://www.codingninjas.com/codestudio/problems/implement-trie_631356?topList=striver-sde-sheet-problems",
        "title": "Implement Trie",
        "solution": "/*\r\n    Time Complexity : O(N*W) (insert - O(W), search - O(W), startsWith - O(W))\r\n    Where N is the number of queries and W is the average length of words.\r\n\r\n    Space Complexity : O(N*W)\r\n    Where N is the number of words inserted and W is the average length of words.\r\n*/\r\n\r\n\r\nclass TrieNode {\r\npublic:\r\n    TrieNode * child[26];\r\n    bool isEnd;\r\n    TrieNode()\r\n    {\r\n        isEnd=false;\r\n        for(int i=0;i<26;i++)\r\n            child[i]=NULL;\r\n    }\r\n    \r\n};\r\n\r\nclass Trie {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    TrieNode *root;   \r\n    Trie() {\r\n        root= new TrieNode();\r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    void insert(string word) {\r\n        TrieNode *tem=root;\r\n        for(auto x:word)\r\n        {\r\n            if(!tem->child[x-'a'])\r\n                tem->child[x-'a']= new TrieNode();\r\n            tem=tem->child[x-'a'];\r\n        }\r\n        tem->isEnd=true;\r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    bool search(string word) {\r\n        TrieNode *tem=root;\r\n        for(auto x:word)\r\n        {\r\n            if(!tem->child[x-'a'])\r\n                return false;\r\n            tem=tem->child[x-'a'];\r\n        }\r\n        return  tem->isEnd;\r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    bool startsWith(string prefix) {\r\n        TrieNode *tem=root;\r\n        for(auto x:prefix)\r\n        {\r\n            if(!tem->child[x-'a'])\r\n                return false;\r\n            tem=tem->child[x-'a'];\r\n        }\r\n        return  true;\r\n    }\r\n};"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-has-to-implement-a-data-structure-trie-from-scratch-ninja-has-to-complete-some-functions\">Ninja has to implement a data structure \u201dTRIE\u201d from scratch. Ninja has to complete some functions.</h4>\n\n<pre><code>1) Trie(): Ninja has to initialize the object of this \u201cTRIE\u201d data structure.\n\n2) insert(\u201cWORD\u201d): Ninja has to insert the string \u201cWORD\u201d  into this \u201cTRIE\u201d data structure.\n\n3) countWordsEqualTo(\u201cWORD\u201d): Ninja has to return how many times this \u201cWORD\u201d is present in this \u201cTRIE\u201d.\n\n4) countWordsStartingWith(\u201cPREFIX\u201d): Ninjas have to return how many words are there in this \u201cTRIE\u201d that have the string \u201cPREFIX\u201d as a prefix.\n\n5) erase(\u201cWORD\u201d): Ninja has to delete one occurrence of the string \u201cWORD\u201d from the \u201cTRIE\u201d.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. If erase(\u201cWORD\u201d) function is called then it is guaranteed that the \u201cWORD\u201d is present in the \u201cTRIE\u201d.\n\n2. If you are going to use variables with dynamic memory allocation then you need to release the memory associated with them at the end of your solution.\n</code></pre>\n\n<h4 id=\"can-you-help-ninja-implement-the-quot-trie-quot-data-structure\">Can you help Ninja implement the \"TRIE\" data structure?</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u201cT\u201d representing the number of test cases. \n\nThe first line of each test case will contain a single integer \u201cN\u201d which denotes how many times the functions(as discussed above) will be called.\n\nThe next \u201cN\u201d lines contain the two space-separated strings, the first one is the name of the function and the second one is a \u201cWORD\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, complete all the functions as we discussed above.\n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u201cT\u201d &lt;= 50\n1 &lt;= \u201cN\u201d &lt;= 10000\n \u201cWORD\u201d = {a to z}\n1 &lt;= | \u201cWORD\u201d | &lt;= 1000\n\nWhere \u201cT\u201d is the number of test cases, \u201cN\u201d denotes how many times the functions(as discussed above) we call, \u201cWORD\u201d denotes the string on which we have to perform all the operations as we discussed above, and | \u201cWORD\u201d | denotes the length of the string \u201cWORD\u201d.\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n5\ninsert coding\ninsert ninja\ncountWordsEqualTo coding\ncountWordsStartingWith nin\nerase coding\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1\n1   \n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>After insertion of \u201ccoding\u201d in \u201cTRIE\u201d:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/trieex1-8873.png\" alt=\"\"></p>\n\n<pre><code>After insertion of \u201cninja\u201d in \u201cTRIE\u201d:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/trieex1_2-8872.png\" alt=\"\"></p>\n\n<pre><code>Count words equal to \u201ccoding\u201d :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/trieex3-8871.png\" alt=\"\"></p>\n\n<pre><code>Count words those prefix is \u201cnin\u201d:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/trieex4-8870.png\" alt=\"\"></p>\n\n<pre><code>After deletion of the word \u201ccoding\u201d, \u201cTRIE\u201d is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/trieex1-5-8869.png\" alt=\"\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n6\ninsert samsung\ninsert samsung\ninsert vivo\nerase vivo\ncountWordsEqualTo samsung\ncountWordsStartingWith vi\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h5>Explanation for sample input 2:</h5>\n\n<pre><code>insert \u201csamsung\u201d: we are going to insert the word \u201csamsung\u201d into the \u201cTRIE\u201d.\n\ninsert \u201csamsung\u201d: we are going to insert another \u201csamsung\u201d word into the \u201cTRIE\u201d.\n\ninsert \u201cvivo\u201d: we are going to insert the word \u201cvivo\u201d into the \u201cTRIE\u201d.\n\nerase \u201cvivo\u201d: we are going to delete the word \u201cvivo\u201d from the \u201cTRIE\u201d.\n\ncountWordsEqualTo \u201csamsung\u201d: There are two instances of \u201csumsung\u201d is present in \u201cTRIE\u201d.\n\ncountWordsStartingWith \u201cvi\u201d: There is not a single word in the \u201cTRIE\u201d that starts from the prefix \u201cvi\u201d.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 76,
        "link": "https://www.codingninjas.com/codestudio/problems/implement-trie_1387095?topList=striver-sde-sheet-problems",
        "title": "Implement Trie ll",
        "solution": "/*\n    Time complexity: O(N * L) \n        insert - O(N)\n        countWordsEqualTo - O(N)\n        countWordsStartingWith - O(N)\n        erase - O(N)\n    Space complexity: O(N * L) \n    Where 'N' and 'L' represents the numbers of words \n    and the longest word in words.\n*/\nstruct TrieNode\n{\n    TrieNode *childern[26];\n    TrieNode()\n    {\n        for (int i = 0; i < 26; i++)\n        {\n            childern[i] = NULL;\n        }\n        wordCount = 0;\n        prefixCount = 0;\n    }\n    ~TrieNode()\n    {\n        for (int i = 0; i < 26; i++)\n        {\n            if (childern[i] != NULL)\n            {\n                delete childern[i];\n            }\n        }\n    }\n};\nclass Trie{\n    public:\n    // Declare a variable root that denotes the root of the Trie.\n    TrieNode *root;\n    // Initialize the Trie.\n    Trie()\n    {\n        root = new TrieNode();\n    }\n    ~Trie()\n    {\n        delete root;\n    }\n    // In this function we are inserting the word into our Trie.\n    void insert(string &word)\n    {\n        TrieNode *curr = root;\n        // Iterating through the string word.\n        for (int i = 0; i < word.length(); i++)\n        {\n            int index = word[i] - 'a';\n            if (curr->childern[index] == NULL)\n            {\n                curr->childern[index] = new TrieNode();\n            }\n            curr = curr->childern[index];\n            curr->prefixCount++;\n        }\n        curr->wordCount++;\n    }\n    int countWordsEqualTo(string &word)\n    {\n        TrieNode *curr = root;\n        // Iterating through the string word.\n        for (int i = 0; i < word.length(); i++)\n        {\n            int index = word[i] - 'a';\n            if (curr->childern[index] == NULL)\n            {\n                return 0;\n            }\n            curr = curr->childern[index];\n        }\n        return curr->wordCount;\n    }\n    int countWordsStartingWith(string &word)\n    {\n        TrieNode *curr = root;\n        // Iterating through the string word.\n        for (int i = 0; i < word.length(); i++)\n        {\n            int index = word[i] - 'a';\n            if (curr->childern[index] == NULL)\n            {\n                return 0;\n            }\n            curr = curr->childern[index];\n        }\n        return curr->prefixCount;\n    }\n    // In this function we are removing the word from \"TRIE\".\n    void erase(string &word)\n    {\n        TrieNode *curr = root;\n        TrieNode *toBeDeleted = NULL;\n        // Iterating through the string word.\n        for (int i = 0; i < word.length(); i++)\n        {\n            int index = word[i] - 'a';\n            // Store the parent of current character.\n            TrieNode *parent = curr;\n            curr = curr->childern[index];\n            // If we are removing the given word then subtract 1 from the prefixCount.\n            curr->prefixCount--;\n            if (toBeDeleted != NULL)\n            {\n                toBeDeleted = NULL;\n            }\n            if (curr->prefixCount == 0)\n            {\n                if (toBeDeleted == NULL)\n                {\n                    parent->childern[index] = NULL;\n                }\n                toBeDeleted = curr;\n            }\n        }\n        curr->wordCount--;\n        if (toBeDeleted != NULL)\n        {\n            toBeDeleted = NULL;\n        }\n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-developed-a-love-for-arrays-and-strings-so-this-time-his-teacher-gave-him-an-array-of-strings-a-of-size-n-each-element-of-this-array-is-a-string-the-teacher-taught-ninja-about-prefixes-in-the-past-so-he-wants-to-test-his-knowledge\">Ninja developed a love for arrays and strings so this time his teacher gave him an array of strings, \u2018A\u2019 of size \u2018N\u2019. Each element of this array is a string. The teacher taught Ninja about prefixes in the past, so he wants to test his knowledge.</h4>\n\n<h4 id=\"a-string-is-called-a-complete-string-if-every-prefix-of-this-string-is-also-present-in-the-array-a-ninja-is-challenged-to-find-the-longest-complete-string-in-the-array-a-if-there-are-multiple-strings-with-the-same-length-return-the-lexicographically-smallest-one-and-if-no-string-exists-return-quot-none-quot\">A string is called a complete string if every prefix of this string is also present in the array \u2018A\u2019. Ninja is challenged to find the longest complete string in the array \u2018A\u2019.If there are multiple strings with the same length, return the lexicographically smallest one and if no string exists, return \"None\".</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>String \u2018P\u2019 is lexicographically smaller than string \u2018Q\u2019, if : \n\n1. There exists some index \u2018i\u2019 such that for all \u2018j\u2019 &lt; \u2018i\u2019 , \u2018P[j] = Q[j]\u2019 and \u2018P[i] &lt; Q[i]\u2019. E.g. \u201cninja\u201d &lt; \u201cnoder\u201d.\n\n2. If \u2018P\u2019 is a prefix of string \u2018Q\u2019, e.g. \u201ccode\u201d &lt; \u201ccoder\u201d.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>N = 4\nA = [ \u201cab\u201d , \u201cabc\u201d , \u201ca\u201d , \u201cbp\u201d ] \n\nExplanation : \n\nOnly prefix of the string \u201ca\u201d is \u201ca\u201d which is present in array \u2018A\u2019. So, it is one of the possible strings.\n\nPrefixes of the string \u201cab\u201d are \u201ca\u201d and \u201cab\u201d both of which are present in array \u2018A\u2019. So, it is one of the possible strings.\n\nPrefixes of the string \u201cbp\u201d are \u201cb\u201d and \u201cbp\u201d. \u201cb\u201d is not present in array \u2018A\u2019. So, it cannot be a valid string.\n\nPrefixes of the string \u201cabc\u201d are \u201ca\u201d,\u201cab\u201d and \u201cabc\u201d all of which are present in array \u2018A\u2019. So, it is one of the possible strings.\n\nWe need to find the maximum length string, so \u201cabc\u201d is the required string.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases to be run. Then the test cases follow.\n\nThe second line of each test case contains an integer \u2018N\u2019 denoting the size of array \u2018A\u2019.\n\nThe third line of each test case contains \u2018N\u2019 space-separated strings denoting the elements of array \u2018A\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the longest string in \u2018A\u2019, such that every prefix of this string is also present in the array \u2018A\u2019. If there are multiple strings with the same length, return the lexicographically smallest one and if no string exists, return \"None\" as answer.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= A[i].length &lt;= 10^5\nA[i] only consists of lowercase english letters.\nSum of A[i].length &lt;= 10^5 over all test cases\n\nTime Limit : 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n6\nn ni nin ninj ninja ninga\n2\nab bc\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>ninja\nNone\n</code></pre>\n\n<h5>Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1 we have, \n\nAll the prefixes of \u201cninja\u201d -&gt; \u201cn\u201d, \u201cni\u201d, \u201cnin\u201d, \u201cninj\u201d and \u201cninja\u201d are present in array \u2018A\u2019. So, \u201cninja\u201d is a valid answer whereas for \u201cninga\u201d , the prefix \u201cning\u201d is not present in array \u2018A\u2019.\n\nSo we output \u201cninja\u201d.\n\nFor test case 2 we have, \n\nThe prefixes of \u201cab\u201d are \u201ca\u201d and \u201cab\u201d. \u201ca\u201d is not present in array \u2018A\u2019. So, \u201cab\u201d is not a valid answer.\n\nThe prefixes of \u201cbc\u201d are \u201cb\u201d and \u201cbc\u201d. \u201cb\u201d is not present in array \u2018A\u2019. So, \u201cab\u201d is not a valid answer.\n\nSince none of the strings is a valid answer we output \u201cNone\u201d.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n5\ng a ak szhkb hy \n4\nkez vfj vfjq vfjqo \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>ak\nNone\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 77,
        "link": "https://www.codingninjas.com/codestudio/problems/complete-string_2687860?topList=striver-sde-sheet-problems",
        "title": "Complete String",
        "solution": "/*\n    Time Complexity : O(Sum(A[i]))\n    Space Complexity : O(Sum(A[i]))\n    where 'Sum(A[i])' is the sum of size of all words 'A[i]'.\n */\n// Trie data structure class.\nstruct trieNode \n{ \n    struct trieNode *child[26]; \n    bool isEnding;\n}; \nstruct trieNode *newTrieNode(void) \n{ \n    struct trieNode *newNode = new trieNode; \n    newNode->isEnding = false;\n    return newNode; \n} \n// Functon to insert the word into the trie.\nvoid insert(struct trieNode *root, string str) \n{ \n    int len = str.length(); \n    struct trieNode *pCrawl = root; \n    for (int level = 0; level<len; level++) \n    { \n        int index = str[level]-'a'; \n        if (!pCrawl->child[index]) \n            pCrawl->child[index] = newTrieNode(); \n        pCrawl = pCrawl->child[index]; \n    } \n    // Mark the ending of this word in trie.\n    pCrawl ->isEnding = true;\n}\n  // Function to check if this word has all prefixes in array.\nbool allPrefixed(struct trieNode *root, string word) {\n    struct trieNode *pCrawl = root; \n    for (char c: word) {\n      int i = c - 'a';\n      pCrawl = pCrawl -> child[i];\n      if(pCrawl == NULL || pCrawl->isEnding == false){\n        return false;\n      }\n    }\n    // We reach here if each prefix of word is present in array.\n    return true;\n}\nstring completeString(int n, vector<string> &a) {\n    // Initialise answer as empty string.\n    string ans = \"\";\n    struct trieNode *root = newTrieNode();\n    // Insert each element of array into Trie.\n    for (string word: a)\n      insert(root, word);\n    // Traverse over strings and check which of them have all prefixes present in array.\n    for (string word: a) {\n      if (!allPrefixed(root, word))\n        continue;\n      // If current word is longer than 'ans'.\n      if (ans.size() < word.size()) {\n        ans = word;\n      }\n      // If current word is of same size as 'ans', but is lexicographically smaller than 'ans'.\n      else if (ans.size() == word.size() && word < ans) {\n        ans = word;\n      }\n    }\n    // If no valid word is present, return \"None\".\n    if (ans.size() == 0) {\n      ans = \"None\";\n    }\n    // Return the result.\n    return ans;\n  }\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-has-been-given-a-string-word-containing-lowercase-english-alphabets-having-length-n-ninja-wants-to-calculate-the-number-of-distinct-substrings-in-the-word\">Ninja has been given a string \u2018WORD\u2019 containing lowercase English alphabets having length \u2018N\u2019. Ninja wants to calculate the number of distinct substrings in the \u2018WORD\u2019.</h4>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>For \u2018WORD\u2019 = \u201cabcd\u201d and \u2018N\u2019 = 4 following are the 10 distinct substrings of \u2018WORD\u2019.\n\u201cabcd\u201d, \u201cabc\u201d, \u201cab\u201d, \u201ca\u201d, \u201cbcd\u201d, \u201cbc\u201d, \u201cb\u201d, \u201ccd\u201d, \u201cc\u201d, and \u201cd\u201d\n</code></pre>\n\n<h4 id=\"can-you-help-the-ninja-to-find-out-the-number-of-distinct-substrings-in-the-word\">Can you help the Ninja to find out the number of distinct substrings in the \u2018WORD\u2019?</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>If you are going to use variables with dynamic memory allocation then you need to release the memory associated with them at the end of your solution.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the length of the string \u2018WORD\u2019.\n\nThe second line of each test case contains the string \u2018WORD\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the number of distinct substrings in the \u2018WORD\u2019\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 3\n\u2018a\u2019 &lt;= WORD[i] &lt;= \u2018z\u2019\n\nWhere \u2018WORD[i]\u2019 denotes the element at position \u2018i\u2019 in 'WORD'.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3\naaa\n4\nabab\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n7\n</code></pre>\n\n<h4>Explanation For Sample Output 1 :</h4>\n\n<pre><code>For the first test case :\nFollowing are distinct substrings of the given string \u2018WORD\u2019.\n\u201caaa\u201d\n\u201caa\u201d   \n\u201ca\u201d\n\nFor the second test case :\nFollowing are distinct substrings of the given string \u2018WORD\u2019.\n\u201cabab\u201d\n\u201caba\u201d \n\u201cab\u201d\n\u201ca\u201d\n\u201cbab\u201d\n\u201cba\u201d\n\u201cb\u201d\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1\nz\n3\nabc    \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1\n6\n</code></pre>\n\n<h4>Explanation For Sample Output 2:</h4>\n\n<pre><code>For the first test case:\nThere is only one possible substring of the given string \u2018WORD\u2019 which is also distinct so the answer will be 1.\n\nFor the second test case :\nFollowing are distinct substrings of the given string \u2018WORD\u2019.\n\u201cabc\u201d\n\u201cab\u201d\n\u201ca\u201d\n\u201cbc\u201d\n\u201cb\u201d\n\u201cc\u201d\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 78,
        "link": "https://www.codingninjas.com/codestudio/problems/number-of-distinct-substring_1465938?topList=striver-sde-sheet-problems",
        "title": "Number Of Distinct Substring",
        "solution": "/*\r\n\t\r\n\tTime complexity: O(N ^ 3)\r\n\tSpace complexity: O(N ^ 2) \r\n\r\n\tWhere N represents the length of word.\r\n\r\n*/\r\n\r\nstruct TrieNode\r\n{\r\n\tTrieNode *childern[26];\r\n\r\n\tTrieNode()\r\n\t{\r\n\t\tfor (int i = 0; i < 26; i++)\r\n\t\t{\r\n\t\t\tchildern[i] = NULL;\r\n\t\t}\r\n\t}\r\n\t~TrieNode()\r\n    {\r\n        for (int i = 0; i < 26; i++)\r\n        {\r\n            if (childern[i] != NULL)\r\n            {\r\n                delete childern[i];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\nTrieNode *trie;\r\nint countNodes;\r\n\r\n// Add string str into the Trie.\r\nvoid insert(string &str) {\r\n\r\n\tTrieNode *curr = trie;\r\n\r\n\tfor (int i = 0; i < str.length(); i++) {\r\n\t\tint ind = str[i] - 'a';\r\n\r\n\t\tif (curr->childern[ind] == NULL) {\r\n\t\t\tcurr->childern[ind] = new TrieNode();\r\n\t\t}\r\n\t\tcurr = curr->childern[ind];\r\n\t}\r\n}\r\n\r\n// Count Nodes of the Trie.\r\nvoid countNodeInTrie(TrieNode *curr) {\r\n\r\n\tif (curr == NULL) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor (int i = 0; i < 26; i++) {\r\n\t\tif (curr->childern[i] != NULL) {\r\n\t\t\tcountNodes++;\r\n\t\t\tcountNodeInTrie(curr->childern[i]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint distinctSubstring(string &word) {\r\n\r\n\ttrie = new TrieNode();\r\n\tcountNodes = 0;\r\n\r\n\t// Iterate over the word and add it's substrings into the Trie.\r\n\tfor (int i = 0; i < word.length(); i++) {\r\n\t\tstring h = word.substr(i);\r\n\t\tinsert(h);\r\n\t}\r\n\r\n\tTrieNode *curr = trie;\r\n\tcountNodeInTrie(curr);\r\n\r\n\tdelete trie;\r\n\r\n\treturn countNodes;\r\n}"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-sorted-array-of-39-n-39-integers-you-have-to-generate-the-power-set-for-this-array-where-each-subset-of-this-power-set-is-individually-sorted\">You are given a sorted array of 'N' integers. You have to generate the power set for this array where each subset of this power set is individually sorted.</h4>\n\n<h4 id=\"a-set-is-a-well-defined-collection-of-distinct-elements-power-set-p-arr-of-a-set-39-arr-39-is-defined-as-a-set-of-all-possible-subsets-of-39-arr-39\">A set is a well-defined collection of distinct elements. Power set P(ARR) of a set 'ARR' is defined as a set of all possible subsets of 'ARR'.</h4>\n\n<h4 id=\"you-have-to-return-the-array-of-subsets-the-elements-in-the-subset-should-be-sorted-in-ascending-order-the-order-of-subsets-in-the-array-does-not-matter-hence-there-can-be-more-than-1-possible-solution-for-a-given-array\">You have to return the array of subsets. The elements in the subset should be sorted in ascending order. The order of subsets in the array does not matter. Hence there can be more than 1 possible solution for a given array.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If we are given an array ARR=[1,2,3] then the power set P(ARR) of the set ARR is: [ [], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3] ]\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>For every subset 'X' present in power set P(ARR) of set ARR, X must be sorted i.e. in the example above:\nP1(ARR) =  [ [], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3] ]\nP2(ARR) =  [ [], [1], [1,2,3], [2], [1,2], [3], [1,3], [2,3] ]\nP3(ARR) =  [ [], [1], [2], [1,2], [3], [1,3], [2,3], [2,3,1] ]\nP1(ARR) and P2(ARR) will be considered correct power sets but P3(ARR) will not be considered correct because there the last subset [2, 3, 1] is not sorted.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a number 'N' denoting the size of the array.\nThe second line contains 'N' space-separated distinct integer denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code> For each given 'N' print 2^N separate lines each denoting a subset.\n For each subset, print its element separated by space.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 15\n1 &lt;= ARR[i] &lt;= 50    \nTime limit : 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample input 1 :</h5>\n\n<pre><code>3\n1 2 3    \n</code></pre>\n\n<h5>Sample output 1 :</h5>\n\n<pre><code>1\n2\n3\n1 2\n1 3\n2 3\n\n1 2 3 \n</code></pre>\n\n<h5>Explanation of sample input 1 :</h5>\n\n<pre><code>The power set P(ARR) of set ARR = [1, 2, 3] is [ [], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3] ].\n</code></pre>\n\n<h5>Sample input 2 :</h5>\n\n<pre><code>3\n5 7 8    \n</code></pre>\n\n<h5>Sample output 2 :</h5>\n\n<pre><code>8\n7\n\n5\n5 8\n5 7\n5 7 8\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 79,
        "link": "https://www.codingninjas.com/codestudio/problems/power-set_1062667?topList=striver-sde-sheet-problems",
        "title": "Power Set",
        "solution": "/*\r\n    Time Complexity: O(N*(2^N))\r\n    Space Complexity: O(N*(2^N))\r\n\r\n    Where N is the number of elements in array\r\n*/\r\n\r\nvector<vector<int>> pwset(vector<int> arr) \r\n{\r\n    int n = arr.size();\r\n\r\n    // Create an array to store all subsets\r\n    vector<vector<int>> ans;\r\n\r\n    for (int i = 0; i <= pow(2, n); i++)\r\n    {\r\n        vector<int> temp;\r\n\r\n        // Traverse through the array ARR\r\n        for (int j = 0; j < n; j++) \r\n        {\r\n            // Check if j-th bit is set\r\n            if (i & (1 << j)) \r\n            {\r\n                temp.push_back(arr[j]);\r\n            }\r\n        }\r\n\r\n        // Insert the subset temp in ans\r\n        ans.push_back(temp);\r\n    }\r\n\r\n    // Return the array ans\r\n    return ans;\r\n}\r\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"alice-and-bob-recently-learned-about-bitwise-xor-operator-intrigued-by-this-concept-alice-gave-bob-an-array-a-of-n-integers-and-asked-him-to-select-two-indexes-x-and-y-such-that-x-lt-y-and-bitwise-xor-of-values-present-in-these-indexes-is-maximum-possible-among-all-such-pairs\">Alice and Bob recently learned about bitwise xor operator. Intrigued by this concept, Alice gave Bob an array \u2018A\u2019 of \u2018N\u2019 integers and asked him to select two indexes \u2018x\u2019 and \u2018y\u2019 such that \u2018x\u2019 &lt;= \u2018y\u2019 and bitwise xor of values present in these indexes is maximum possible among all such pairs.</h4>\n\n<h4 id=\"as-always-bob-asked-you-to-help-him-do-the-task\">As always, Bob asked you to help him do the task.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains one integer \u2018N\u2019, denoting the size of the array.\n\nThe following line contains an array \u2018A\u2019 of \u2018N\u2019 spaced integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer in a new line denoting the maximum xor value.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^4\n1 &lt;= A[i] &lt;= 10^9 \n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3\n2 1 4\n2\n3 2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>6\n1\n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, Bob can select the 1st and 3rd index leading to a xor value of 6.\nIn the second test case, there are only two elements, so Bob has to select both of them, so the final answer becomes 1.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 \n1 2 3 4\n3 \n5 3 2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>7\n7\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 80,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-xor_3119012?topList=striver-sde-sheet-problems",
        "title": "Maximum XOR of Two Numbers in an Array",
        "solution": "/*\n    Time Complexity: O(N * log (M))\n    Space Complexity: O(N)\n    Where \u2018N\u2019 is the length of the given array and 'M' the maximum value in the array.\n*/\n#include <unordered_set>\nint maximumXor(vector<int> A)\n{   \n    int ans = 0;\n    int mask = 0;\n    int n = A.size();\n    unordered_set<int> s;\n    for (int i = 30; i >= 0; i--)\n        // Setting the ith bit 1 in mask.\n        mask = mask | (1 << i);\n        for (int j = 0; j < n; j++)\n        {   \n            // Inserting prefix bitmask into the set.\n            s.insert(A[j] & mask);\n        }\n        int tempAns = ans;\n        // Setting the ith bit 1.\n        tempAns = tempAns | (1 << i);\n        for(auto it: s)\n        {   \n            // Checking if 'it' xor 'tempAns' is present in set. \n            if(s.count(it ^ tempAns))\n            {   \n                ans = tempAns;\n                break;\n            }\n        }\n        s.clear();\n    } \n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-list-arr-consisting-of-n-non-negative-integers-you-are-also-given-a-list-queries-consisting-of-m-queries-where-the-i-th-query-is-a-list-array-of-two-non-negative-integers-xi-ai-i-e-queries-i-xi-ai\">You are given an array/list \u2018ARR\u2019 consisting of \u2018N\u2019 non-negative integers.  You are also given a list \u2018QUERIES\u2019 consisting of \u2018M\u2019 queries, where the \u2018i-th\u2019 query is a list/array of two non-negative integers \u2018Xi\u2019, \u2018Ai\u2019, i.e \u2018QUERIES[i]\u2019 = [\u2018Xi\u2019, \u2018Ai\u2019].</h4>\n\n<h4 id=\"the-answer-to-the-ith-query-i-e-queries-i-is-the-maximum-bitwise-xor-value-of-xi-with-any-integer-less-than-or-equal-to-ai-in-arr\">The answer to the ith query, i.e \u2018QUERIES[i]\u2019 is the maximum bitwise xor value of \u2018Xi\u2019 with any integer less than or equal to \u2018Ai\u2019  in \u2018ARR\u2019.</h4>\n\n<h4 id=\"you-should-return-an-array-list-consisting-of-n-integers-where-the-i-th-integer-is-the-answer-of-queries-i\">You should return an array/list consisting of \u2018N\u2019 integers where the \u2018i-th\u2019 integer is the answer of \u2018QUERIES[i]\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. If all integers are greater than \u2018Ai\u2019 in array/list \u2018ARR\u2019  then the answer to this ith query will be -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the size of array/list \u2018ARR\u2019 and number of queries respectively.\n\nThe second line of each test case will contain \u2018N\u2019 space-separated integers representing array/list \u2018ARR\u2019.\n\nThe next \u2018M\u2019 line of each test case contains the description of \u2018QUERIES\u2019. The \u2018i-th\u2019 line of these \u2018M\u2019 lines consists of two space-separated integers \u2018Xi\u2019, \u2018Ai\u2019 as described in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018M\u2019 space-separated integer where the \u2018i-th\u2019 integer is the answer of the \u2018i-th\u2019 query.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N, M &lt;= 10000\n0 &lt;= ARR[i], Xi, Ai &lt;= 10^9\n\nWhere \u2018T\u2019 is the number of test cases, 'N' is the size of \u2018ARR\u2019, \u2018M\u2019  is the number of queries, \u2018ARR[i]\u2019 is an element of array/list \u2018ARR\u2019 and \u2018Xi\u2019, \u2018Ai\u2019 are the integers in \u2018QUERIES[i]\u2019.  \n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n5 2\n0 1 2 3 4\n1 3\n5 6\n1 1\n1\n1 0  \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3 7\n-1\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the answer of query [1, 3] is 3 because 1^2 = 3 and 2 &lt;= 3,  and the answer of query [5, 6] is 7 because  5 ^ 2 = 7 and 2 &lt;= 6.\n\nIn the second test case, no element is less than or equal to 0 in the given array \u2018ARR\u2019.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n6 3\n6 6 3 5 2 4\n6 3\n8 1\n12 4 \n5 2\n0 0 0 0 0\n1 0\n1 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>5 -1 15\n1 1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 81,
        "link": "https://www.codingninjas.com/codestudio/problems/max-xor-queries_1382020?topList=striver-sde-sheet-problems",
        "title": "Maximum XOR With an Element From Array",
        "solution": "/*\n    Time Complexity : O(N*(log(N)) + M*(log(M)))\n    Space Complexity : O(N + M)\n    Where 'N' is the size of \u2018ARR\u2019, and \u2018M\u2019  is the number of queries.\n*/\n#include <algorithm>\nstruct TrieNode {\n    TrieNode *children[2];\n};\nvoid insert(TrieNode *root, int num) {\n    TrieNode *ptr = root;\n            if(ptr->children[1] == NULL) {\n                ptr->children[1] = new TrieNode();\n            }\n            ptr = ptr->children[1];\n        }\n        else {\n            if(ptr->children[0] == NULL) {\n                ptr->children[0] = new TrieNode();\n            }\n            ptr = ptr->children[0];\n        }\n    }\n}\nvector<int> maxXorQueries(vector<int>& arr, vector<vector<int>>& queries)\n{\n    //  Size of array and number of queries.\n    int n = arr.size();\n    int m = queries.size();\n    vector<int> result(m, -1), order(m);\n    //  Sort \u2018arr\u2019 in non-decreasing order.\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < m; i++)\n    {\n        order[i] = i;\n    }\n    //  Order in which queries will be processed.\n    sort(order.begin(), order.end(), [&](int i, int j) -> bool {\n        return queries[i][1] < queries[j][1];\n    });\n    TrieNode *root = new TrieNode();\n    int p = 0;\n    //  Finding answer of each query.\n    for(int i = 0; i < m; i++)\n    {\n        //  Index of query process in current iteration.\n        int id = order[i];\n        //  Insert integers of 'arr' smaller or equal to queries[id][1] in trie.\n        while(p < n && arr[p] <= queries[id][1])\n        {\n            insert(root, arr[p]);\n            p++;\n        }\n        //  If trie is empty then answer to this query is -1.\n        if(root->children[0] == NULL && root->children[1] == NULL)\n        {\n            continue;\n        }\n        TrieNode *ptr = root;\n        int ans = 0;\n        for(int j = 30; j >= 0; j--)\n        {\n            // If jth bit is set in query[id][0].\n            if(queries[id][0] & (1 << j))\n            {\n                if(ptr->children[0] != NULL)\n                {\n                    ptr = ptr->children[0];\n                    ans = ans | (1 << j);\n                }\n                else\n                {\n                    ptr = ptr->children[1];\n                }\n            }\n            else\n            {\n                // If jth bit is not set in query[id][0].\n                if(ptr->children[1] != NULL) {\n                    ptr = ptr->children[1];\n                    ans = ans | (1 << j);\n                } else {\n                    ptr = ptr -> children[0];\n                }\n            }\n        }\n        result[id] = ans;\n    }\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"stack-is-a-data-structure-that-follows-the-lifo-last-in-first-out-principle-design-and-implement-a-stack-to-implement-the-following-functions\">Stack is a data structure that follows the LIFO (Last in First out) principle. Design and implement a stack to implement the following functions:</h4>\n\n<pre><code>1. Push(num): Push the given number in the stack if the stack is not full.\n2. Pop: Remove and print the top element from the stack if present, else print -1.\n3. Top: Print the top element of the stack if present, else print -1.\n4. isEmpty: Print 1 if the stack is empty, else print 0.\n5. isFull: Print 1 if the stack is full, else print 0.\n</code></pre>\n\n<h4 id=\"you-have-been-given-m-operations-which-you-need-to-perform-in-the-stack-your-task-is-to-implement-all-the-functions-of-the-stack\">You have been given \u2018M\u2019 operations which you need to perform in the stack. Your task is to implement all the functions of the stack.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>We perform the following operations on an empty stack which has capacity 2:\n\nWhen operation 1 1 is performed, we insert 1 in the stack.\n\nWhen operation 1 2  is performed, we insert 2 in the stack. \n\nWhen operation 2 is performed, we remove the top element from the stack and print 2.\n\nWhen operation 3 is performed, we print the top element of the stack, i.e., 3.\n\nWhen operation 4 is performed, we print 0 because the stack is not empty.\n\nWhen operation 5 is performed, we print 0 because the stack is size 1, which is not equal to its capacity.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two single space-separated integers, \u2018N\u2019 and \u2018M\u2019, representing the size of the stack and number of operations, respectively.\n\nThe next \u2018M\u2019 lines of each test case contain operations that have to be performed on the stack. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the results of the operations performed on the stack.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N, M &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n2 6\n1 1\n1 2\n2\n3\n4\n5\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2 1 0 0\n</code></pre>\n\n<h5>Explanation For Sample Output 1 :</h5>\n\n<pre><code>For test case 1: \nWe perform the following operations on an empty stack which has capacity 2:\n\nWhen operation 1 1 is performed, we insert 1 in the stack.\n\nWhen operation 1 2  is performed, we insert 2 in the stack. \n\nWhen operation 2 is performed, we remove the top element from the stack and print 2.\n\nWhen operation 3 is performed, we print the top element of the stack, i.e., 1.\n\nWhen operation 4 is performed, we print 0 because the stack is not empty.\n\nWhen operation 5 is performed, we print 0 because the stack is size 1, which is not equal to its capacity.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n5 5\n1 2\n2\n2 \n1 1\n3\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>2 -1 1\n</code></pre>\n\n<h5>Explanation For Sample Output 2 :</h5>\n\n<pre><code>For test case 1: \nWe perform the following operations on an empty stack which has a capacity of 5:\n\nWhen operation 1 2 is performed, we insert 2 in the stack.\n\nWhen operation 2 is performed, we remove the top element from the stack and print 2.\n\nWhen operation 2 is performed, as the stack is empty, we print -1.\n\nWhen operation 1 1 is performed, we insert 1 in the stack.\n\nWhen operation 3 is performed, we print the top element of the stack, i.e., 1.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 82,
        "link": "https://www.codingninjas.com/codestudio/problems/stack-implementation-using-array_3210209?topList=striver-sde-sheet-problems",
        "title": "Stack Implementation Using Array",
        "solution": "/*\n    Time complexity: O(1)\n    Space complexity: O(N)\n    Where 'N' is the capacity of the stack.\n*/\n// Stack class.\nclass Stack {\npublic:\n    // Declare array.\n    vector<int> myStack;\n    // Stack size.\n    int stackSize;\n    // Constructor function.\n    Stack(int n) {\n        // Initialize class objects.\n        this -> myStack.resize(n);\n        this -> stackSize = -1;\n        this -> n = n;\n    }\n    // Push function.\n    void push(int num) {\n        // Check if stack is not full.\n        if(stackSize != n - 1) {\n            // Increment stack size and update array.\n            ++stackSize;\n            myStack[stackSize] = num;\n        }\n    }\n    // Pop function.\n    int pop() {\n        // Check if stack is not empty.\n        if(stackSize != -1) {\n            // Decrease size and return element.\n            --stackSize;\n            return myStack[stackSize + 1];\n        }\n        else {\n            return -1;\n        }\n    }\n    // Top function.\n    int top() {\n        // Check if stack is not empty.\n        if(stackSize != -1) {\n            // Return element.\n            return myStack[stackSize];\n        }\n        else {\n            return -1;\n        }\n    }\n    // To check whether stack is empty or not.\n    int isEmpty() {\n        // Check if stack is not empty.\n        if(stackSize != -1) {\n            // Return element.\n            return 0;\n        }\n        else {\n            return 1;\n        }        \n    }\n    // To check whether stack is full or not.\n    int isFull() {\n        // Check if stack is not empty.\n        if(stackSize != n - 1) {\n            // Return element.\n            return 0;\n        }\n        else {\n            return 1;\n        }        \n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"implement-a-queue-data-structure-specifically-to-store-integer-data-using-a-singly-linked-list-or-an-array\">Implement a Queue Data Structure specifically to store integer data using a Singly Linked List or an array.</h4>\n\n<h4 id=\"you-need-to-implement-the-following-public-functions\">You need to implement the following public functions :</h4>\n\n<pre><code>1. Constructor: It initializes the data members as required.\n\n2. enqueue(data): This function should take one argument of type integer. It enqueues the element into the queue.\n\n3. dequeue(): It dequeues/removes the element from the front of the queue and in turn, returns the element being dequeued or removed. In case the queue is empty, it returns -1.\n\n4. front(): It returns the element being kept at the front of the queue. In case the queue is empty, it returns -1.\n\n5. isEmpty(): It returns a boolean value indicating whether the queue is empty or not.\n</code></pre>\n\n<h5 id=\"operations-performed-on-the-queue\">Operations Performed on the Queue :</h5>\n\n<pre><code>Query-1(Denoted by an integer 1): Enqueues integer data to the queue.\n\nQuery-2(Denoted by an integer 2): Dequeues the data kept at the front of the queue and returns it to the caller, return -1 if no element is present in the queue.\n\nQuery-3(Denoted by an integer 3): Fetches and returns the data being kept at the front of the queue but doesn't remove it, unlike the dequeue function, return -1 if no element is present in the queue.\n\nQuery-4(Denoted by an integer 4): Returns a boolean value denoting whether the queue is empty or not.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018t\u2019 denoting the number of test cases.\n\nFor each test case, the first line contains an integer 'q' which denotes the number of queries to be run against each operation on the queue. \n\nEvery 'q' lines represent an operation that needs to be performed.\n\nFor the enQueue operation, the input line will contain two integers separated by a single space, representing the type of the operation in the integer and the integer data being enqueued into the queue.\n\nFor the rest of the operations on the queue, the input line will contain only one integer value, representing the query being performed on the queue.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For Query-1, print the data being enqueued in the queue.\nFor Query-2, print the data being dequeued from the queue.\nFor Query-3, print the data kept on the front of the queue.\nFor Query-4, print 'true' or 'false'(without quotes).\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= t &lt;= 5\n1 &lt;= q &lt;= 5000\n1 &lt;= x &lt;= 4\n1 &lt;= data &lt;= 2^31 - 1\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n7\n1 17\n1 23\n1 11\n2\n2\n2\n2\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>17\n23\n11\n-1\n</code></pre>\n\n<h5>Explanation for Sample Output 1 :</h5>\n\n<pre><code>The first three queries are of enQueue, so we will push 17, 23, and 11 into the queue.\n\nThe next four queries are of deQueue, so we will starting removing elements from the queue, so the first element will be 17, then 23, and then 11. And after the third dequeue query, the queue is now empty so for the fourth query, we will return -1.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n3\n2\n1 10\n3\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>-1 \n10\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 83,
        "link": "https://www.codingninjas.com/codestudio/problems/queue-using-array-or-singly-linked-list_2099908?topList=striver-sde-sheet-problems",
        "title": "Implement a Queue",
        "solution": "/*\n    Time Complexity : O(q)\n    Space Complexity : O(q)\n    Where q is the number of queries.\n*/\nclass Queue {\npublic:\n    int qfront, rear, size, queueSize;\n    int q[100010];\n    Queue() {\n        // Intialise the queue with 0 elements.\n        rear = 0;\n        qfront = 0;\n        size = 0;\n        queueSize = 100010;\n    // Function to check if the queue is empty.\n    bool isEmpty() {\n        if (qfront == rear) {\n            return true;\n        }\n        return false;\n    }\n    void enqueue(int data) {\n        // Push the current element in the queue.\n        q[rear] = data;\n        rear = rear + 1;\n        // Increase the value of size.\n        size++;\n    }\n    int dequeue() {\n        // Check if the queue is empty.\n        if (isEmpty()) {\n            return -1;\n        }\n        int ans = q[qfront];\n        qfront++;\n        size--;\n        if (qfront == rear) {\n            qfront = 0;\n            rear = 0;\n        }\n        return ans;\n    }\n    int front() {\n        // Check if the queue is empty.\n        if (isEmpty()) {\n            return -1;\n        }\n        // Return the element at front.\n        return q[qfront];\n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"implement-a-stack-data-structure-specifically-to-store-integer-data-using-two-queues\">Implement a Stack Data Structure specifically to store integer data using two Queues.</h4>\n\n<h4 id=\"there-should-be-two-data-members-both-being-queues-to-store-the-data-internally-you-may-use-the-inbuilt-queue\">There should be two data members, both being Queues to store the data internally. You may use the inbuilt Queue.</h4>\n\n<h4 id=\"implement-the-following-public-functions\">Implement the following public functions :</h4>\n\n<pre><code>1. Constructor:\nIt initializes the data members(queues) as required.\n\n2. push(data) :\nThis function should take one argument of type integer. It pushes the element into the stack and returns nothing.\n\n3. pop() :\nIt pops the element from the top of the stack and, in turn, returns the element being popped or deleted. In case the stack is empty, it returns -1.\n\n4. top :\nIt returns the element being kept at the top of the stack. In case the stack is empty, it returns -1.\n\n5. size() :\nIt returns the size of the stack at any given instance of time.\n\n6. isEmpty() :\nIt returns a boolean value indicating whether the stack is empty or not.\n</code></pre>\n\n<h5 id=\"operations-performed-on-the-stack\">Operations Performed on the Stack:</h5>\n\n<pre><code>Query-1(Denoted by an integer 1): Pushes an integer data to the stack. (push function)\n\nQuery-2(Denoted by an integer 2): Pops the data kept at the top of the stack and returns it to the caller. (pop function)\n\nQuery-3(Denoted by an integer 3): Fetches and returns the data being kept at the top of the stack but doesn't remove it, unlike the pop function. (top function)\n\nQuery-4(Denoted by an integer 4): Returns the current size of the stack. (size function)\n\nQuery-5(Denoted by an integer 5): Returns a boolean value denoting whether the stack is empty or not. (isEmpty function)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'Q\u2019, which denotes the number of queries to be run against each operation in the stack. \n\nThe next 'Q' lines represent an operation that needs to be performed.\n\nFor the push operation, the input line will contain two integers separated by a single space, representing the type of the operation in integer and the integer data being pushed into the stack.\n\nFor the rest of the operations on the stack, the input line will contain only one integer value, representing the query being performed on the stack.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For Query-1, you do not need to return anything.\n\nFor Query-2, prints the data being popped from the stack.\n\nFor Query-3, print the data kept on the top of the stack.\n\nFor Query-4, print the current size of the stack.\n\nFor Query-5, print 'true' or 'false'(without quotes).\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 1000\n1 &lt;= query type &lt;= 5\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere 'Q' is the total number of queries being performed on the stack and data represents the integer pushed into the stack. \n\nTime Limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>6\n1 13\n1 47\n4\n5\n2\n3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\nfalse\n47\n13\n</code></pre>\n\n<h5>Explanation of the Sample Input 1:</h5>\n\n<pre><code>Here we have six queries in total.\n\nQuery 1: Integer 1 represents the push function. Hence we push element \u201813\u2019 onto the stack.\n\nQuery 2: Integer 1 represents the push function. Hence we push element \u201847\u2019 onto the stack.\n\nQuery 3: Integer 4 represents the size function. Hence we print the size of the stack that is 2.\n\nQuery 4: Integer 5 represents the isEmpty function. Hence here, we print false because the stack is not empty.\n\nQuery 5: Integer 2 represents the pop function. The stack contains element \u201847\u2019 at the top. We remove/pop \u201847\u2019 from the stack and print \u201847\u2019 on the new line.\n\nQuery 6: Integer 3 represents the top function. Because we have element \u201813\u2019 at the top of the stack, we print \u201813\u2019 on the new line.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 84,
        "link": "https://www.codingninjas.com/codestudio/problems/stack-using-queue_795152?topList=striver-sde-sheet-problems",
        "title": "Stack using queue",
        "solution": "/*\n    Time complexity: O(Q*N)\n    For each push operation O(N); O(1) for all other operations.\n    Space complexity: O(N)\n    where Q is the number of queries, N denotes the maximum number of elements in the queue.\n*/\n#include <queue>\nclass Stack {\n   public:\n    queue<int> *q1;\n    // Constructor.\n    }\n    int getSize() {\n        // Return the size of the queue 'q1'.\n        return q1->size();  \n    }\n    bool isEmpty() {\n        return getSize() == 0;\n    }\n    void push(int data) {\n        // Get the size of the queue.\n        int size = q1->size();  \n        // Enqueue the  new data to the queue.\n        q1->push(data);         \n        // Make the new data front of the queue.\n        for (int i = 0; i < size; i++)  \n        {\n            q1->push(q1->front());\n            q1->pop();\n        }\n    }\n    int pop() {\n        // If empty, return -1.\n        if (isEmpty()) {  \n            return -1;\n        }\n        // Simply dequeue from the queue q1.\n        int ans = q1->front();  \n        q1->pop();\n        return ans;\n    }\n    int top() {\n        if (isEmpty()) {\n            return -1;\n        }\n        int ans = q1->front();\n        return ans;\n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"implement-a-queue-data-structure-which-follows-fifo-first-in-first-out-property-using-only-the-instances-of-the-stack-data-structure\">Implement a queue data structure which follows FIFO(First In First Out) property, using only the instances of the stack data structure.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. To implement means you need to complete some predefined functions, which are supported by a normal queue such that it can efficiently handle the given input queries which are defined below.\n\n2. The implemented queue must support the following operations of a normal queue: \n\na. enQueue(data): This function should take one argument of type integer and place the integer to the back of the queue.\nb. deQueue(): This function should remove an integer from the front of the queue and also return that integer. If the queue is empty, it should return -1.\nc. peek(): This function returns the element present in the front of the queue. If the queue is empty, it should return -1.\nd. isEmpty(): This function should return true if the queue is empty and false otherwise.\n\n3. You will be given q queries of 4 types:\n\na. 1 val - For this type of query, you need to insert the integer val to the back of the queue.\nb. 2 - For this type of query, you need to remove the element from the front of the queue, and also return it.\nc. 3 - For this type of query, you need to return the element present at the front of the queue(No need to remove it from the queue).\nd. 4 - For this type of query, you need to return true if the queue is empty and false otherwise.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T\u2019, which denotes the number of queries that will be run against the implemented queue.\n\nThen 'T' lines follow. The i-th line contains the i-th query in the format as in the problem statement.\n\nFor the enQueue operation, the input line will contain two integers separated by a single space, representing the type of the operation in integer and the integer data being pushed into the queue.\n\nFor the rest of the queries, the input line will contain only one integer value, representing the query being performed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For Query-1, you do not need to return anything.\n\nFor Query-2, return the integer being deQueued from the queue.\n\nFor Query-3, return the integer present in the front of the queue\n\nFor Query-4, return \u201ctrue\u201d if the queue is empty, \u201cfalse\u201d otherwise.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You are not required to print the output, It has already been taken care of. Just implement the given function.\n\n2. You can only use the instances of the stack data structure i.e you can use the standard stack operations such as push to the top, pop the element from the top, etc.\n\n3. You can also use the inbuilt stack data structure in some languages such as  C++, Java.\n\n4. You can assume that the maximum capacity of the queue may be infinite.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 1000\n1 &lt;= type &lt;= 4\n1&lt;= data &lt;= 10^9 \n\nWhere 'type' represents the type of query and 'data' represents the integer to be enQueued. \n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>7\n1 1\n1 2\n1 3\n2\n2\n2\n3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 \n2 \n3\n-1\n</code></pre>\n\n<h5>Explanation of the Sample Output 1:</h5>\n\n<pre><code>Here we have seven queries in total.\n\nQuery 1: Insert 1 to the back of the queue. The queue: 1 \nQuery 2: Insert 2 to the back of the queue. The queue: 1 2\nQuery 3: Insert 3 to the back of the queue. The queue: 1 2 3\nQuery 4: Remove element from the front:  The queue: 2 3\nQuery 5: Remove the element from the front:  The queue: 2 \nQuery 6: Remove the element from the front:  The queue : \nQuery 7: As the queue is empty, returned -1.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 2\n4\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>false\n</code></pre>\n\n<h5>Explanation of the Sample Output 2:</h5>\n\n<pre><code>Here we have two queries in total.\n\nQuery 1: Insert 2 to the back of the queue. The queue: 2 \nQuery 2: IsEmpty() function returns 'false' as currently the queue is not empty.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 85,
        "link": "https://www.codingninjas.com/codestudio/problems/queue-using-stack_799482?topList=striver-sde-sheet-problems",
        "title": "Queue Using Stack",
        "solution": "/*\n    Time complexity: O(N * T)\n        For enQueue(): O(1) \n        For deQueue(): O(N) \n        For peek(): O(N)\n        For isEmpty(): O(1)\n    Space Complexity : O(N)\n    Where 'N' is the maximum number of elements that are in the stack at any time.\n    Where 'T' is the total number of queries which are performed.\n*/\n#include <stack>\nclass Queue {\n    Queue() {\n        // Only one user stack is used.\n        st = new stack<int>();     \n    }\n    // EnQueue item to the queue.\n    void enQueue(int val) {\n        // Push the value into the stack.\n        st->push(val);\n    }\n    // Dequeue an item from the queue.\n    int deQueue() {\n        // If stack is empty, return -1.\n        if (st->empty()) {\n            return -1;\n        }\n        // Pop the current top element.\n        int x = st->top();\n        st->pop();     \n        // Base case of the recursion.             \n        if (st->empty()) {\n            return x;                  \n        }\n        // Recursively pop the next element.\n        int nxt = deQueue();      \n        // Push this element again to the stack.\n        st->push(x);              \n        return nxt;\n    }\n    // Returns the Front element of the queue.\n    int peek() {\n        if (st->empty()) {\n            return -1;\n        }\n        int x = st->top();\n        st->pop();\n        if (st->empty()) {\n            st->push(x);\n            return x;\n        }\n        int nxt = peek();\n        st->push(x);\n        return nxt;\n    }\n    // Whether the queue is empty or not.\n    bool isEmpty() {\n        return (st->empty());\n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-39-re-given-string-str-consisting-solely-of-and-determine-whether-the-parentheses-are-balanced\">You're given  string \u2018STR\u2019 consisting solely of \u201c{\u201c, \u201c}\u201d, \u201c(\u201c, \u201c)\u201d, \u201c[\u201c and  \u201c]\u201d . Determine whether the parentheses are balanced.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first and the only line of input of each test case contains a string, as described in the task.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, the first and the only line of output prints whether the string or expression is balanced or not.\n\nThe output of every test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n\nWhere N is the length of the input string or expression.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n[()]{}{[()()]()}\n[(])\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>Balanced\nNot Balanced\n</code></pre>\n\n<h5>Explanation Of the Sample Input 1 :</h5>\n\n<pre><code>In TestCase 1 there is always an opening brace before a closing brace i.e \u2018{\u2018 before \u2018}\u2019, \u2018(\u2018 before \u2018)\u2019, \u2018[\u2018 before \u2018]\u2019.\n\nIn TestCase 2 there is closing brace for \u2018[\u2018 i.e. \u2018]\u2019 before closing brace for \u2018(\u2018 i.e. \u2018)\u2019. The balanced sequence should be \u2018[()]\u2019.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n[[}[\n[]{}()\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>Not Balanced\nBalanced\n</code></pre>\n\n<h5>Explanation Of the Sample Input 2 :</h5>\n\n<pre><code>In TestCase 1 there is no opening brace before a closing brace i.e no \u2018{\u2018 for \u2018}\u2019.\n\nIn TestCase 2 there is exactly one closing for each opening braces and each closing brace is after their corresponding opening brace.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 86,
        "link": "https://www.codingninjas.com/codestudio/problems/valid-parenthesis_795104?topList=striver-sde-sheet-problems",
        "title": "Valid Parentheses",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where N is the length of the string.\n*/\nbool isValidParenthesis(string expression) \n{   \n    // Make an inbuilt stack.\n    stack<char> s; \n    char x; \n    // Traversing the Expression.\n    for (int i = 0; i < expression.length(); i++)  \n    { \n        if (expression[i] == '(' || []    []  )  \n            // Push the element in the stack .\n            s.push(expression[i]); \n            continue; \n        } \n        /* \n            If current current character is not opening \n            bracket, then it must be closing. So stack \n            cannot be empty at this point. \n        */\n        if (s.empty()) \n        {\n            return false; \n        }\n        // Store the top element.\n        x = s.top(); \n        s.pop(); \n        // Check for opening braces in stack of corresponding closing braces.\n        switch (expression[i]) { \n        case ')': \n            if (x == '{' || x == '[') \n            {\n                return false; \n            }\n            break; \n        case '}': \n            if (x == '(' || x == '[') \n            {\n                return false; \n            }\n            break; \n        case ']': \n            if (x == '(' || x == '{')\n            {\n                return false;\n            }\n            break; \n        } \n    } \n    // Check Empty Stack.\n    return (s.empty()); \n} \n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-arr-of-length-n-you-have-to-return-a-list-of-integers-containing-the-nge-next-greater-element-of-each-element-of-the-given-array-the-nge-for-an-element-x-is-the-first-greater-element-on-the-right-side-of-x-in-the-array-elements-for-which-no-greater-element-exists-consider-the-nge-as-1\">You are given an array arr of length N. You have to return a list of integers containing the NGE(next greater element) of each element of the given array. The NGE for an element X is the first greater element on the right side of X in the array. Elements for which no greater element exists, consider the NGE as -1.</h4>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>If the given array is [1, 3, 2], then you need to return [3, -1, -1]. Because for 1, 3 is the next greater element, for 3 it does not have any greater number to its right, and similarly for 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains an integer N, representing the length of the input array(ARR).\n\nThe second line contains N single space-separated integers representing elements of the array arr.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a list of integers each representing the NGE(next greater element) of each element of the given array in a single line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n4\n1 2 4 3\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2 4 -1 -1\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n4\n9 3 6 5\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>-1 6 -1 -1\n</code></pre>\n\n<h5>Explanation for Sample Input 2 :</h5>\n\n<pre><code>For element 9, there is no next greater element. So -1 would be the next greater element.\nFor element 3, 6 is the next greater element. \nFor element 6, there is no next greater element. So -1 would be the next greater element.\nFor element 5, there is no next greater element. So -1 would be the next greater element.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 87,
        "link": "https://www.codingninjas.com/codestudio/problems/next-greater-element_799354?topList=striver-sde-sheet-problems",
        "title": "Next Greater Element",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where N is the length of the array.\n*/\n#include<stack>\nvector<int> nextGreater(vector<int> &arr, int n) {\n    vector<int> ans(n);\n    stack<int> s;\n    for (int i = n - 1; i >= 0; i--) {\n        // We will pop the elements from the stack till we get the greater element \n        while (!s.empty() && s.top() <= arr[i]) {\n            s.pop();\n        }\n        if (s.empty()) {\n            ans[i] = -1;\n        } \n        else {\n            ans[i] = s.top();\n        }\n        s.push(arr[i]);\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-re-given-a-stack-consisting-of-39-n-39-integers-your-task-is-to-sort-this-stack-in-descending-order-using-recursion\">You\u2019re given a stack consisting of 'N' integers. Your task is to sort this stack in descending order using recursion.</h4>\n\n<h4 id=\"we-can-only-use-the-following-functions-on-this-stack-s\">We can only use the following functions on this stack S.</h4>\n\n<pre><code>is_empty(S) : Tests whether stack is empty or not.\npush(S) : Adds a new element to the stack.\npop(S) : Removes top element from the stack.\ntop(S) : Returns value of the top element. Note that this function does not remove elements from the stack.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1) Use of any loop constructs like while, for..etc is not allowed. \n2) The stack may contain duplicate integers.\n3) The stack may contain any integer i.e it may either be negative, positive or zero.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer 'T' denoting the number of test cases. Then 'T' test cases follow.\n\nThe first line of each test case contains an integer 'N', the number of elements in the stack.\n\nThe second line of each test contains 'N' space separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain 'N' space separated integers denoting the stack in a sorted order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 100\n1 &lt;=  'N' &lt;= 100\n1 &lt;= |'V'| &lt;= 10^9\n\nWhere |V| denotes the absolute value of any stack element.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n5\n5 -2 9 -7 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>9 5 3 -2 -7\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>9 Is the largest element, hence it\u2019s present at the top. Similarly 5&gt;3, 3&gt;-2 and -7 being the smallest element is present at the last. \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n5\n-3 14 18 -5 30\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>30 18 14 -3 -5\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>30 is the largest element, hence it\u2019s present at the top. Similarly, 18&gt;14, 14&gt;-3 and -5 being the smallest element is present at the last. \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 88,
        "link": "https://www.codingninjas.com/codestudio/problems/sort-a-stack_985275?topList=striver-sde-sheet-problems",
        "title": "Sort a Stack",
        "solution": "/*\n    Time Complexity: O(N^2)\n    Space Complexity: O(N),\n    where N is the number of elements in the stack.\n*/\nvoid sortedInsert(stack<int> &stack, int current)\n{\n    if (stack.empty() || current > stack.top())\n    {\n        stack.push(current);\n        return;\n    }\n    // Remove the top element\n    // Recursion for the remaining elements in the stack\n    sortedInsert(stack, current);\n    // Insert the popped element back in the stack\n    stack.push(top);\n}\n// Recursive method to sort a stack\nvoid sortStack(stack<int> &stack)\n{\n    // Base case: stack is empty\n    if (stack.empty())\n    {\n        return;\n    }\n    // Remove the top element\n    int top = stack.top();\n    stack.pop();\n    // Recursion for the remaining elements in the stack\n    sortStack(stack);\n    // Insert the popped element back in the sorted stack\n    sortedInsert(stack, top);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-39-arr-39-of-integers-of-length-n-your-task-is-to-find-the-next-smaller-element-for-each-of-the-array-elements\">You are given an array 'ARR' of integers of length N. Your task is to find the next smaller element for each of the array elements.</h4>\n\n<h4 id=\"next-smaller-element-for-an-array-element-is-the-first-element-to-the-right-of-that-element-which-has-a-value-strictly-smaller-than-that-element\">Next Smaller Element for an array element is the first element to the right of that element which has a value strictly smaller than that element.</h4>\n\n<h4 id=\"if-for-any-array-element-the-next-smaller-element-does-not-exist-you-should-print-1-for-that-array-element\">If for any array element the next smaller element does not exist, you should print -1 for that array element.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>If the given array is [ 2, 3, 1], we need to return [1, 1, -1]. Because for  2, 1 is the Next Smaller element. For 3, 1 is the Next Smaller element and for 1, there is no next smaller element hence the answer for this element is -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which contains the number of test cases.\n\nThe first line of each test case contains an integer 'N' denoting the number of elements in the array 'ARR'.\n\nThe second line of each test case contains 'N' space-separated integers denoting the array 'ARR'. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing 'N' space-separated integers denoting the value of Next Smaller Element for each of the 'N' array elements.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 5\n0 &lt;= ARR [i] &lt;= 10 ^ 9\n\nTime Limit: 1sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4\n2 1 4 3\n3\n1 3 2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 -1 3 -1\n-1 2 -1\n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case : \n1) For ARR [1] = 2 ,  the next smaller element is 1. \n2) For ARR [2] = 1 ,  the next smaller element is -1 as no element in the array has value smaller than 1.\n3) For ARR [3] = 4 ,  the next smaller element is 3.\n4) For ARR [4] = 3 ,  the next smaller element is -1 as no element exists in the right of it.\nHence, we will return the array [ 1, -1, 3, -1] in this case.\n\nFor the second test case :\n1) For ARR [1] = 1 ,  the next smaller element is -1 as no element in the array has value smaller than 1.\n2) For ARR [2] = 3 ,  the next smaller element is 2.\n3) For ARR [3] = 2 ,  the next smaller element is -1 as no element exists in the right of it.\nHence we will return the array [ -1, 2, -1 ] in this case.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n2\n5 0\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-1 -1 -1 -1\n 0 -1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 89,
        "link": "https://www.codingninjas.com/codestudio/problems/next-smaller-element_1112581?topList=striver-sde-sheet-problems",
        "title": "Next Smaller Element",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    Where N denotes the number of elements in the array.\n*/\n#include <stack>\nvector<int> nextSmallerElement(vector<int>& arr, int n) \n{\n    // Defining the vector to store next smaller elements for the array. \n    vector<int> ans(n);\n    // Defining the stack and pushing -1 to it.\n    // Iterating through all the array elements from backwards.\n    for (int i = n - 1; i >= 0; i--)\n    {\n        // Removing all the elements greater than or equal to current element from the stack.\n        while (stk.top() >= arr[i])\n        {\n            stk.pop();\n        }\n        // Setting the next smaller element as the element at top of stack.\n        ans[i] = stk.top();\n        // Pushing the current element into the stack.\n        stk.push(arr[i]);\n    }\n    // Returning the final vector after all the iterations.\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"design-and-implement-a-data-structure-for-least-recently-used-lru-cache-to-support-the-following-operations\">Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"\u201d_blank\u201d\">Least Recently Used (LRU) cache</a> to support the following operations:</h4>\n\n<pre><code>1. get(key) - Return the value of the key if the key exists in the cache, otherwise return -1.\n\n2. put(key, value), Insert the value in the cache if the key is not already present or update the value of the given key if the key is already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item.\n</code></pre>\n\n<h5 id=\"you-will-be-given-q-queries-each-query-will-belong-to-one-of-these-two-types\">You will be given \u2018Q\u2019 queries. Each query will belong to one of these two types:</h5>\n\n<pre><code>Type 0: for get(key) operation.\nType 1: for put(key, value) operation.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The cache is initialized with a capacity (the maximum number of unique keys it can hold at a time).\n\n2. Access to an item or key is defined as a get or a put operation on the key. The least recently used key is the one with the oldest access time.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains two space-separated integers 'C' and 'Q', denoting the capacity of the cache and the number of operations to be performed respectively.\n\nThe next Q lines contain operations, one per line. Each operation starts with an integer which represents the type of operation. \n\nIf it is 0, then it is of the first type and is followed by one integer key. \n\nIf it is 1, it is of the second type and is followed by two space-separated integers key and value(in this order). \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each operation of type 0, print an integer on a single line, denoting the value of the key if the key exists, otherwise -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= C &lt;= 10^4\n1 &lt;= Q &lt;= 10^5\n1 &lt;= key, value &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3 11\n1 1 1\n1 2 2\n1 3 3\n1 4 5\n0 3\n0 1\n0 4\n1 2 3\n0 1\n0 3\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n-1\n5\n-1\n3\n3\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/lru-4752.png\" alt=\"alt-text\"></p>\n\n<pre><code>Initializing a cache of capacity 3, LRUCache cache = new LRUCache(3);\nThen each operation is performed as shown in the above figure.\ncache.put(1,1)\ncache.put(2,2)\ncache.put(3,3)\ncache.put(4,5)\ncache.get(3)      // returns 3\ncache.get(1)      // returns -1\ncache.get(2)      // returns 2\ncache.put(5,5)\ncache.get(4)      // returns -1\ncache.get(3)      // returns 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2 6\n1 1 1\n1 2 2\n0 2\n1 3 3\n0 3\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n3\n-1\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"></div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 90,
        "link": "https://www.codingninjas.com/codestudio/problems/lru-cache-implementation_670276?topList=striver-sde-sheet-problems",
        "title": "LRU Cache Implementation",
        "solution": "/*\n    Time Complexity: O(Q) \n    Space Complexity: O(capacity)\n    where Q is the number of the given queries and \n    capacity is the maximum number of keys LRU Cache can store.\n*/\n#include <map>\nclass Node\n{\npublic:\n    Node *left, *right;\n    int key, val;\n        this->key = key;\n        this->val = val;\n        this->left = this->right = NULL;\n    }\n};\nclass LRUCache\n{\npublic:\n    map<int, Node *> nodemap;\n    Node *head, *tail;\n    int capacity, size;\n    // Initialize LRUCache\n    LRUCache(int capacity)\n    {\n        head = tail = NULL;\n        this->capacity = capacity;\n        this->size = 0;\n    }\n    // Add node at rear of linked list,\n    void addToRear(Node *nd)\n    {\n        if (head == NULL)\n        {\n            head = tail = nd;\n            return;\n        }\n        tail->right = nd;\n        nd->left = tail;\n        tail = nd;\n        return;\n    }\n    void deleteNode(Node *nd)\n    {\n        if (nd->left != NULL)\n        {\n            nd->left->right = nd->right;\n        }\n        else\n        {\n            head = nd->right;\n        }\n        if (nd->right != NULL)\n        {\n            nd->right->left = nd->left;\n        }\n        else\n        {\n            tail = nd->left;\n        }\n        nd->left = nd->right = NULL;\n    }\n    // Return the value of the given key\n    int get(int key)\n    {\n        if (nodemap.find(key) == nodemap.end())\n        {\n            return -1;\n        }\n        deleteNode(nodemap[key]);\n        addToRear(nodemap[key]);\n        return nodemap[key]->val;\n    }\n    // Inserts a key and it's value into the LRUCache\n    void put(int key, int value)\n    {\n        if (nodemap.find(key) != nodemap.end())\n        {\n            nodemap[key]->val = value;\n            deleteNode(nodemap[key]);\n            addToRear(nodemap[key]);\n        }\n        else\n        {\n            Node *nd = new Node(key, value);\n            nodemap[key] = nd;\n            if (size == capacity)\n            {\n                nodemap.erase(head->key);\n                deleteNode(head);\n                addToRear(nd);\n            }\n            else\n            {\n                size++;\n                addToRear(nd);\n            }\n        }\n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"design-and-implement-a-least-frequently-used-lfu-cache-to-implement-the-following-functions\">Design and implement a Least Frequently Used(LFU) Cache, to implement the following functions:</h4>\n\n<pre><code>1. put(U__ID, value): Insert the value in the cache if the key(\u2018U__ID\u2019) is not already present or update the value of the given key if the key is already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting the new item.\n\n2. get(U__ID): Return the value of the key(\u2018U__ID\u2019),  present in the cache, if it\u2019s present otherwise return -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>  1) The frequency of use of an element is calculated by a number of operations with its \u2018U_ID\u2019 performed after it is inserted in the cache.\n\n  2) If multiple elements have the least frequency then we remove the element which was least recently used. \n</code></pre>\n\n<h4 id=\"you-have-been-given-m-operations-which-you-need-to-perform-in-the-cache-your-task-is-to-implement-all-the-functions-of-the-lfu-cache\">You have been given \u2018M\u2019 operations which you need to perform in the cache. Your task is to implement all the functions of the LFU cache.</h4>\n\n<pre><code>Type 1: for put(key, value) operation.\nType 2: for get(key) operation.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>We perform the following operations on an empty cache which has capacity 2:\n\nWhen operation 1 2 3 is performed, the element with 'U_ID' 2 and value 3 is inserted in the cache.\n\nWhen operation 1 2 1 is performed, the element with 'U_ID' 2\u2019s value is updated to 1.  \n\nWhen operation 2 2 is performed then the value of 'U_ID' 2 is returned i.e. 1.\n\nWhen operation 2 1 is performed then the value of 'U_ID' 1 is to be returned but it is not present in cache therefore -1 is returned.\n\nWhen operation 1 1 5 is performed, the element with 'U_ID' 1 and value 5 is inserted in the cache. \n\nWhen operation 1 6 4 is performed, the cache is full so we need to delete an element. First, we check the number of times each element is used. Element with 'U_ID' 2 is used 3 times (2 times operation of type 1 and 1-time operation of type 1). Element with 'U_ID' 1 is used 1 time (1-time operation of type 1). So element with 'U_ID' 1 is deleted. The element with 'U_ID' 6 and value 4 is inserted in the cache. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two single space-se[arated integers \u2018N\u2019 and \u2018M\u2019 representing the size of cache and number of operations respectively.\n\nNext \u2018M\u2019 lines contain operations that have to be performed on the cache.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a vector/list that contains answers of all the operations of type 2 and in the order in which they were asked.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All the operations are valid. \n2. You do not need to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 1000\n1 &lt;= U_ID &lt;= 10^3\n1 &lt;= VAL&lt;= 10^6\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n1 4 1\n2 2\n2 4    \n3 6\n1 2 7\n1 1 8\n1 2 6\n2 1\n2 5\n2 2 \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>-1 1\n8 -1 6\n</code></pre>\n\n<h4>Sample Output 1 Explanation:</h4>\n\n<pre><code>Test case1:\n\nLet\u2019s say i\u2019th operation takes place at t=i. The status after each operation is as follows.\n1 4 1 - Element with 'U_ID' 4 and value 1 is inserted in the cache.\n2 2 - No element with 'U_ID' 2 is present in the cache so -1 is returned.\n2 4 - Element with 'U_ID' 4 is present in the cache so its value i.e 1 is returned.\n\nTherefore the answer is -1 1.\n\n\nTest case 2:\n\nLet\u2019s say i\u2019th operation takes place at t=i. Status after each operation is as follows.\n1 2 7 - Element with 'U_ID' 2 and value 7 is inserted in the cache.\n1 1 8 - Element with 'U_ID' 1 and value 8 is inserted in the cache.\n1 2 6 - Element with 'U_ID' 2 is already present in the cache so value is updated to 6.\n2 1 - Element with 'U_ID' 1 is present in the cache so its value i.e 8 is returned. \n2 5 - No element with 'U_ID' 5 is present in cache so -1 is returned.\n2 2 - Element with 'U_ID' 2 is present in cache so its value i.e 6 is returned.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 3 \n1 1 1\n1 3 91\n2 1\n4 6\n1 1 7\n1 3 1\n1 2 6\n2 2\n1 2 1\n2 2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-1\n6 1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 91,
        "link": "https://www.codingninjas.com/codestudio/problems/lfucache_3114758?topList=striver-sde-sheet-problems",
        "title": "LFU Cache",
        "solution": "/*\n    Time Complexity: O(M)\n    Space Complexity: O(N)\n    Where 'N' denotes size of cache and 'M' denotes the number of operations.\n*/\n#include<unordered_map>\nstruct Node {\n    int key, val, freq;\n    Node *prev, *next;\n    Node() : prev(nullptr), next(nullptr){};\n};\nstruct DoubleLinkedList {\n    DoubleLinkedList() : currentSize(0), head(new Node()), tail(new Node()) {\n        head->next = tail;\n        tail->prev = head;\n    }\n    ~DoubleLinkedList() {\n        Node *curr = head;\n        while (curr != nullptr) {\n            Node *next = curr->next;\n            delete curr;\n            curr = next;\n        }\n    }\n    void append(Node *node) {\n        node->next = head->next;\n        node->prev = head;\n        node->next->prev = node;\n        node->prev->next = node;\n        ++currentSize;\n    }\n    void pop(Node *node) {\n        node->next->prev = node->prev;\n        node->prev->next = node->next;\n        node->next = nullptr;\n        node->prev = nullptr;\n        --currentSize;\n    }\n    Node *last() {\n        Node *node = tail->prev;\n        pop(node);\n        return node;\n    }\n};\nclass LFUCache {\npublic:\n    LFUCache(int capacity) : Cap(capacity), Mfreq(0) {\n    }\n    ~LFUCache() {\n        for (pair<int, DoubleLinkedList*> p: Lists) {\n            delete p.second;\n        }\n    }\n    int get(int key) {\n        if(Nodes.count(key) == 1) {\n            promote(key);\n            return Nodes[key]->val;\n        }\n        return -1;\n    }\n    void put(int key, int value) {\n        if (!Cap) return;\n        if (Nodes.count(key) == 1) {\n            promote(key);\n            Nodes[key]->val = value;\n        } \n        else {\n            if (Nodes.size() == Cap) {\n                evict();\n            }\n            insert(key, value);\n        }\n    }\nprivate:\n    int Cap, Mfreq;\n    unordered_map<int, DoubleLinkedList*> Lists;\n    unordered_map<int, Node*> Nodes; \n    void insert(int key, int value) {\n        Mfreq = 1;\n        Node *node = new Node();\n        node->key = key;\n        node->val = value;\n        node->freq = Mfreq;\n        Nodes[key] = node;\n        addToList(Mfreq, node);\n    }\n    void addToList(int freq, Node *node) {\n        if (Lists.count(freq) == 0) {\n            Lists[freq] = new DoubleLinkedList();\n        }\n        Lists[freq]->append(node);\n    }\n    void evict() {\n        Node *node = Lists[Mfreq]->last();\n        Nodes.erase(node->key);\n        delete node;\n        removeIfEmpty(Mfreq);\n    }\n    void removeIfEmpty(int freq) {\n        if (Lists[Mfreq]->currentSize == 0) {\n            DoubleLinkedList *del = Lists[Mfreq];\n            delete del;\n            Lists.erase(Mfreq);\n            if (freq == Mfreq)\n                ++Mfreq;\n        }\n    }\n    void promote(int key) {\n        Node *node = Nodes[key];\n        int freq = node->freq++;\n        Lists[freq]->pop(node);\n        removeIfEmpty(freq);\n        addToList(freq+1, node);\n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-an-array-list-39-heights-39-of-length-n-39-heights-39-represents-the-histogram-and-each-element-of-39-heights-39-represents-the-height-of-the-histogram-bar-consider-that-the-width-of-each-histogram-is-1\">You have been given an array/list 'HEIGHTS' of length \u2018N. 'HEIGHTS' represents the histogram and each element of 'HEIGHTS' represents the height of the histogram bar. Consider that the width of each histogram is 1.</h4>\n\n<h4 id=\"you-are-supposed-to-return-the-area-of-the-largest-rectangle-possible-in-the-given-histogram\">You are supposed to return the area of the largest rectangle possible in the given histogram.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>In the below histogram where array/list elements are {2, 1, 5, 6, 2, 3}.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/histogram-6831.PNG\" alt=\"alt text\"></p>\n\n<pre><code>The area of largest rectangle possible in the given histogram is 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements in the array/list.\n\nThe second line contains \u2018N\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print an integer denoting the area of the largest rectangle possible in the given histogram.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6\n0 &lt;= HEIGHTS[i] &lt;= 10^9\n\nWhere \u2018T\u2019 is the number of test cases.\n'N' is the length of the given array/list.\nAnd, HEIGHTS[i] denotes the height of the 'ith' histogram bar.\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n10\n1 0 1 2 2 2 2 1 0 2 \n10\n1 2 1 0 1 1 0 0 2 2 \n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>8\n4\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the area of the largest rectangle of the given histogram is 8 in the rectangle starting from index 4 to index 7 in the given array/list.\n\nIn the second test case, the area of the largest rectangle of the given histogram is 4 in the rectangle starting from index 9 to index 10 in the given array/list.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n10\n8 6 3 5 0 0 4 10 2 5 \n10\n6 1 8 10 5 7 0 4 5 8 \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>12\n20\n</code></pre>\n\n<h5>Explanation For Sample Input 2 :</h5>\n\n<pre><code>In the first test case, the area of the largest rectangle of the given histogram is 12.\n\nIn the second test case, the area of the largest rectangle of the given histogram is 20.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 92,
        "link": "https://www.codingninjas.com/codestudio/problems/largest-rectangle-in-a-histogram_1058184?topList=striver-sde-sheet-problems",
        "title": "Largest rectangle in a histogram",
        "solution": "/*\n    Time Complexity = O(N)\n    Space Complexity = O(N)\n    Where N is the number of elements in the given array/list.\n*/\n#include <stack>\nint largestRectangle(vector < int > & heights) {\n    int n = heights.size();\n    /* \n      The stack holds indexes of heights[] array.\n      The bars stored in stack are always in \n    stack < int > s;\n    // Initialize max area.\n    int maxArea = 0;\n    // To store top of stack.\n    int topOfStack;\n    // To store area with top bar as the smallest bar.\n    int areaWithTop;\n    // Run through all bars of given histogram.\n    int i = 0;\n    while (i < n) {\n        /* \n            If this bar is higher than the bar on top stack, \n            push it to stack\n        */\n        if (s.empty() || heights[s.top()] <= heights[i]) {\n            s.push(i++);\n        }\n        /* \n            If this bar is lower than top of stack, \n            then calculate area of rectangle with stack top.\n        */\n        else {\n            topOfStack = s.top();\n            s.pop();\n            /*\n                Calculate the area with heights[topOfStack] \n                stack as smallest bar.\n            */\n            if (s.empty()) {\n                areaWithTop = heights[topOfStack] * i;\n            } else {\n                areaWithTop = heights[topOfStack] * (i - s.top() - 1);\n            }\n            // Update max area, if needed.\n            if (maxArea < areaWithTop) {\n                maxArea = areaWithTop;\n            }\n        }\n    }\n    /* \n      Now pop the remaining bars from stack and calculate\n      area with every popped bar as the smallest bar.\n    */\n    while (s.empty() == false) {\n        topOfStack = s.top();\n        s.pop();\n        if (s.empty()) {\n            areaWithTop = heights[topOfStack] * i;\n        } else {\n            areaWithTop = heights[topOfStack] * (i - s.top() - 1);\n        }\n        if (maxArea < areaWithTop) {\n            maxArea = areaWithTop;\n        }\n    }\n    return maxArea;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-an-array-list-of-integers-of-length-n-there-is-a-sliding-window-of-size-k-which-moves-from-the-beginning-of-the-array-to-the-very-end-you-can-only-see-the-k-numbers-in-a-particular-window-at-a-time-for-each-of-the-39-n-39-39-k-39-1-different-windows-thus-formed-you-are-supposed-to-return-the-maximum-element-in-each-of-them-from-the-given-array-list\">Given an array/list of integers of length \u2018N\u2019, there is a sliding window of size \u2018K\u2019 which moves from the beginning of the array, to the very end. You can only see the \u2018K\u2019 numbers in a particular window at a time. For each of the 'N'-'K'+1 different windows thus formed, you are supposed to return the maximum element in each of them, from the given array/list.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The 'T' test cases follow.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018K\u2019 denoting the number of elements in the array/list and the size of the window size respectively.\n\nThe second line contains \u2018N\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the output array/list which contains the sliding window maximum in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= K &lt;= N\n0 &lt;= ARR[i] &lt;= 10^5\n\nWhere, ARR[i] denotes the i-th element in the array/list.\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3 1\n1 2 2\n5 2\n4 2 1 4 4\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 2 2\n4 2 4 4\n</code></pre>\n\n<h5>Explanation to Sample Input 1 :</h5>\n\n<pre><code>In the first test case, \nThe maximum of window {1} is 1.\nThe maximum of window {2} is 2.\nThe maximum of window {2} is 2.\nSo the output will be {1, 2, 2}.\n\nIn the second test case, \nThe maximum of window {4,2} is 4.\nThe maximum of window {2,1} is 2.\nThe maximum of window {1,4} is 4.\nThe maximum of window {4,4} is 4.\nSo the output will be {4, 2, 4, 4}.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n5 3\n2 2 2 3 3\n7 4\n2 3 1 4 5 1 5\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>2 3 3\n4 5 5 5\n</code></pre>\n\n<h5>Explanation to Sample Input 2 :</h5>\n\n<pre><code>In the first test case, \nThe maximum of window {2,2,2} is 2.\nThe maximum of window {2,2,3} is 3.\nThe maximum of window {2,3,3} is 3.\nSo the output will be {2, 3, 3}.\n\nIn the second test case, \nThe maximum of window {2,3,1,4} is 4.\nThe maximum of window {3,1,4,5} is 5.\nThe maximum of window {1,4,5,1} is 5.\nThe maximum of window {4,5,1,5} is 5.\nSo the output will be {4, 5, 5, 5}.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 93,
        "link": "https://www.codingninjas.com/codestudio/problems/sliding-window-maximum_980226?topList=striver-sde-sheet-problems",
        "title": "Maximum In Sliding Windows Of Size K",
        "solution": "/*\n    Time Complexity = O(N)\n    Space Complexity = O(N)\n    Where N is the number of elements in the given array/list.\n*/\n#include <deque>\nvector<int> slidingWindowMaximum(vector<int> &nums, int &k)\n{\n    //    Create a Double Ended Queue of capacity K.\n    deque<int> window(k);\n    vector<int> result;\n    //    For the first window.\n    for (int i = 0; i < k; i++)\n    {\n        //    For every element, the previous smaller elements are of no use so remove them from q.\n        while ((!window.empty()) && nums[i] >= nums[window.back()])\n        {\n            //    Remove from rear\n            window.pop_back();\n        }\n        //    Add new element at rear of queue.\n        window.push_back(i);\n    }\n    //    For rest of the elements from nums[k] to nums[n-1]\n    for (int i = k; i < n; i++)\n    {\n        //    The element at the front of the queue is the largest element of previous window, so add it to the result.\n        result.push_back(nums[window.front()]);\n        //    Remove the elements which are out of this window\n        while ((!window.empty()) && window.front() <= i - k)\n        {\n            //    Remove from front of queue\n            window.pop_front();\n        }\n        //    Remove all elements smaller than the currently being added element.\n        while ((!window.empty()) && nums[i] >= nums[window.back()])\n        {\n            window.pop_back();\n        }\n        //    Add current element at the rear of queue.\n        window.push_back(i);\n    }\n    //    Add the maximum element of the last window.\n    result.push_back(nums[window.front()]);\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"design-a-stack-that-supports-push-pop-top-and-retrieving-the-minimum-element-in-constant-time\">Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</h4>\n\n<pre><code>1. Push(num): Push the given number in the stack.\n2. Pop: Remove and return the top element from the stack if present, else return -1.\n3. Top: return the top element of the stack if present, else return -1.\n4. getMin: Returns minimum element of the stack if present, else return -1.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For the following input: \n1\n5\n1 1\n1 2\n4\n2\n3\n\nFor the first two operations, we will just insert 1 and then 2 into the stack which was empty earlier. So now the stack is =&gt; [2,1]\nIn the third operation, we need to return the minimum element of the stack, i.e., 1. So now the stack is =&gt; [2,1]\nFor the fourth operation, we need to pop the topmost element of the stack, i.e., 2. Now the stack is =&gt; [1]\nIn the fifth operation, we return the top element of the stack, i.e. 1 as it has one element. Now the stack is =&gt; [1]\n\nSo, the final output will be: \n1 2 1\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of the input contains a single integer \u2018T\u2019 representing the no. of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the no. of the operations.\n\nThe next \u2018N\u2019 lines of each test case contain either of the operations in the following format: - \nPush -&gt; two space-separated integers, 1 and \u2018X\u2019 like \u201c1 X\u201d. We need to push \u2018X\u2019 on top of the stack.\nPop -&gt; single integer 2. We need to remove the topmost element from the stack.\nTop -&gt; single integer 3. We need to return the topmost element from the stack.\ngetMin -&gt; single integer 4, We need to return the minimum element of the stack if present and 0 otherwise.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print the results of the operations performed on the stack separated by spaces.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints -</h4>\n\n<pre><code>1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 100000\n\u03a3N \u2264 200000\n1 \u2264 X \u2264 (10^9)\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 1\n1 2\n4\n2\n3\n4\n1 13\n2\n3\n4\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 2 1\n13 -1 -1\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>For First Case - Similar to the example explained above. \n\nFor Second Case - \nFor the first operation, we will just insert 13 into the stack which was empty earlier. So now the stack is =&gt; [13]\nIn the second operation, we need to remove the topmost element 13 and return it for printing. Now the stack is =&gt; [] (empty)\nFor the third operation, we need to return the topmost element of the stack. As the stack is empty we will return -1. Now the stack is =&gt; [] (empty)\n In the fourth operation, we return the minimum element of the stack if it is not empty, i.e. -1 as it has no elements. Now the stack is =&gt; [] (empty)\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n4 \n4\n2\n1 4\n3\n6\n1 19\n1 45\n3\n4\n2\n3\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>-1 -1 4\n45 19 45 19\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 94,
        "link": "https://www.codingninjas.com/codestudio/problems/min-stack_3843991?topList=striver-sde-sheet-problems",
        "title": "Min Stack",
        "solution": "/*\n    Time Complexity: O(N) \n    Space Complexity:O(N) \n    Where 'N' is the no. of operations performed.\n*/\nclass minStack\n{\n    stack<int> Stack, Min;\n    public:\n        // Constructor\n        minStack() { }\n        // Function to add another element equal to num at the top of stack.\n        {\n            Stack.push(num);\n            if(Min.empty() || Min.top() >= num){\n                Min.push(num);\n            }\n        }\n        // Function to remove the top element of the stack.\n        int pop()\n        {\n            if(!Min.empty() && Min.top() == Stack.top()) {\n                Min.pop();\n            }\n            int ret = -1;\n            if(!Stack.empty()) {\n                ret = Stack.top();\n                Stack.pop();\n            }\n            return ret;\n        }\n        // Function to return the top element of stack if it is present. Otherwise return -1.\n        int top()\n        {\n            int ret = -1;\n            if(!Stack.empty()){\n                ret = Stack.top();\n            }\n            return ret;\n        }\n        // Function to return minimum element of stack if it is present. Otherwise return -1.\n        int getMin()\n        {\n            int ret = -1;\n            if(!Min.empty()) {\n                ret = Min.top();\n            }\n            return ret;\n        }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-grid-containing-some-oranges-each-cell-of-this-grid-has-one-of-the-three-integers-values\">You have been given a grid containing some oranges. Each cell of this grid has one of the three integers values:</h4>\n\n<h4 id=\"value-0-representing-an-empty-cell\"><li> Value 0 -  representing an empty cell. </li></h4>\n\n<h4 id=\"value-1-representing-a-fresh-orange\"><li> Value 1 - representing a fresh orange. </li></h4>\n\n<h4 id=\"value-2-representing-a-rotten-orange\"><li> Value 2 - representing a rotten orange. </li></h4>\n\n<h4 id=\"every-second-any-fresh-orange-that-is-adjacent-4-directionally-to-a-rotten-orange-becomes-rotten\">Every second, any fresh orange that is adjacent(4-directionally) to a rotten orange becomes rotten.</h4>\n\n<h4 id=\"your-task-is-to-find-out-the-minimum-time-after-which-no-cell-has-a-fresh-orange-if-it-39-s-impossible-to-rot-all-the-fresh-oranges-then-print-1\">Your task is to find out the minimum time after which no cell has a fresh orange. If it's impossible to rot all the fresh oranges then print -1.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The grid has 0-based indexing.\n2. A rotten orange can affect the adjacent oranges 4 directionally i.e. Up, Down, Left, Right.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two single space-separated integers 'N' and 'M' representing the number of rows and columns of the grid respectively.\n\nThe next 'N' lines contain 'M' single space-separated integers each representing the rows of the grid.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output contains a single integer i.e. The minimum time after which no cell has a fresh orange. \n\nIf it's impossible to rot all oranges, print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 500\n1 &lt;= M &lt;= 500\n0 &lt;= grid[i][j] &lt;= 2\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3 3\n2 1 1\n1 1 0\n0 1 1 \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>Minimum 4 seconds are required to rot all the oranges in the grid as shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-4859.JPG\" alt=\"alt text\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>3 3\n2 1 0\n0 1 1\n1 0 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>The bottom left corner fresh orange (row 2, column 0) has no adjacent oranges. Hence, it's impossible to rot it.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 95,
        "link": "https://www.codingninjas.com/codestudio/problems/rotting-oranges_701655?topList=striver-sde-sheet-problems",
        "title": "Rotting Oranges",
        "solution": "/*\n    Time Complexity - O(N * M)\n    Space Complexity - O(N * M)\n    where N and M are the number of rows and columns of\n    the grid respectively.\n*/\n#include <queue>\nint isValid(vector<vector<bool>>& visited, int i, int j, int n, int m)\n{\n    return i >= 0 && i < n && j >= 0 && j < m && visited[i][j] == false;\n// BFS solution.\nint minTimeToRot(vector<vector<int>>& grid, int n, int m)\n{\n    int time = 0;\n    // 2D array to mark visited cells.\n    vector<vector<bool>> visited(n, vector<bool>(m, false));\n    // Queue for BFS.\n    queue<pair<int, int>> q;\n    // Push all the rotten oranges into the queue as level 0.\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n            if(grid[i][j] == 2)\n            {\n                q.push({i, j});\n                visited[i][j] = true;\n            }\n        }\n    }\n    int i, j;\n    // Array for exploring all 4 directions.\n    int dx[] = {0, 0, 1, -1};\n    int dy[] = {1, -1, 0, 0};\n    while(q.size() > 0)\n    {\n        // Current level size.\n        int levelSize = q.size();\n        while(levelSize--)\n        {\n            pair<int,int> currCell = q.front();\n            q.pop();\n            i = currCell.first;\n            j = currCell.second;\n            // Check all adjacent cells and push them in queue, if fresh and valid.\n            for(int k = 0; k < 4; k++)\n            {\n                int nextI = i + dx[k];\n                int nextJ = j + dy[k];\n                if(isValid(visited, nextI, nextJ, n, m) && grid[nextI][nextJ] == 1)\n                {\n                    q.push({nextI, nextJ});\n                    visited[nextI][nextJ] = true;\n                }\n            }\n        }\n        // Increment time for next level.\n        time++;\n    }\n    // If a fresh orange is still present, return -1.\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n            if(grid[i][j] == 1 && visited[i][j] == false)\n            {\n                return -1;\n            }\n        }\n    }\n    // Return time elapsed.\n    return max(0, time - 1);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-coin-is-a-famous-crypto-currency-in-ninja-land-ninja-has-an-array-list-price-of-size-n-where-price-i-is-the-price-of-a-ninja-coin-on-an-ith-day-in-inr-where-0-lt-39-i-39-lt-n-1\">Ninja Coin is a famous crypto-currency in Ninja Land. Ninja has an array/list \u2018PRICE\u2019 of size \u2019N\u2019 where \u2018PRICE[i]\u2019 is the price of a Ninja Coin on an ith day in INR, where 0 &lt;= 'i' &lt;= N-1.</h4>\n\n<h4 id=\"the-span-of-the-ninja-coin-price-on-an-ith-day-is-defined-as-the-maximum-number-of-consecutive-days-starting-from-the-ith-day-and-going-backward-for-which-the-price-of-a-ninja-coin-was-less-than-or-equal-to-its-price-at-ith-day\">The span of the Ninja Coin price on an ith day is defined as the maximum number of consecutive days (starting from the ith day and going backward) for which the price of a Ninja Coin was less than or equal to its price at ith day.</h4>\n\n<h4 id=\"your-task-is-to-return-an-array-list-of-size-n-where-the-ith-integer-is-the-span-of-ninja-coin-price-on-an-ith-day-go-through-the-example-for-more-clarity\">Your task is to return an array/list of size \u2018N\u2019 where the ith integer is the span of Ninja Coin price on an ith day. Go through the example for more clarity.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Let the price of Ninja Coin for 5 consecutive days is [4, 2, 3, 3, 7].\n\nThen the span of Ninja Coin on the 0th day is 1 because we cannot move backward from day 0.\n\nThe span of Ninja Coin on the 1st day is 1 because the price on day 0 is 4 which is greater than 2, so the only day 1 is counted.\n\nThe span of Ninja Coin on the 2nd day is 2 because the price on day 2 and day 1 is less than or equal to 3 and then on day 0 price is 4 which is greater than 3, so we count day 2 and day 1.\n\nThe span of Ninja Coin on the 3rd day is 3 because the price on day 3, day 2, and day 1 is less than or equal to 3, and on day 0 price is 4 which is greater than 3, so we count day 3, day 2, and day 1.\n\nThe span of Ninja Coin on the 4th day is 5 because its value is higher than all previous days values.    \n\nThus you should return an array/list [1, 1, 2, 3, 5].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run.\n\nThe first line of each test case will contain a single integer \u2018N\u2019, representing the size of \u2018PRICE\u2019 \n\nThe second line of each test case will contain \u2018N\u2019 space-separated integers representing array/list \u2018PRICE\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return an array/list containing \u2018N\u2019 integers where the ith integer is the span of Ninja Coin price on an ith day, where 0 &lt;= 'i' &lt;= N-1.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n1 &lt;= PRICE[i] &lt;= 10^9\n\n\nWhere \u2018T\u2019 is the number of test cases, 'N' is the size of \u2018PRICE\u2019, \u2018PRICE[i]\u2019  is the price of a Ninja Coin on an ith day in INR.\n\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3\n1 1 1\n5\n4 2 3 3 6\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 2 3\n1 1 2 3 5\n</code></pre>\n\n<h5>Explanation of sample input 1 :</h5>\n\n<pre><code>In the first test case, the price of Ninja Coin is the same for all three consecutive days, so its span at ith day will be the number of days till \u2018i\u2019.\n\nFor the second test case, refer to the problem statement for an explanation.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n7\n100 80 60 70 60 75 85\n5\n5 4 3 2 1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1 1 1 2 1 4 6\n1 1 1 1 1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 96,
        "link": "https://www.codingninjas.com/codestudio/problems/span-of-ninja-coin_1475049?topList=striver-sde-sheet-problems",
        "title": "Online Stock Span",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    where 'N' is the size of array/list \u2018PRICE\u2019.\n*/\n#include <stack>\nvector<int> findSpans(vector<int> &price) {\n    //  Size of array/list \u2018price\u2019.\n    int n = price.size();\n    vector<int> result(n);\n    stack<int> stk;\n        while(stk.empty() == false && price[stk.top()] <= price[i]) {\n            stk.pop();\n        }\n        //  Span on day 'i'.\n        if(stk.empty() == true) {\n            result[i] = i + 1;\n        } else {\n            result[i] = i - stk.top();\n        }\n        stk.push(i);\n    }\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-of-n-integers-you-need-to-find-the-maximum-of-minimum-for-every-window-size-the-size-of-the-window-should-vary-from-1-to-n-only\">You are given an array of \u2018N\u2019 integers, you need to find the maximum of minimum for every window size. The size of the window should vary from 1 to \u2018N\u2019 only.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>ARR = [1,2,3,4]\nMinimums of window size 1 = min(1), min(2), min(3), min(4) = 1,2,3,4\nMaximum among (1,2,3,4)  is 4\n\nMinimums of window size 2 = min(1,2), min(2,3),   min(3,4) = 1,2,3\nMaximum among (1,2,3) is 3\n\nMinimums of window size 3 = min(1,2,3), min(2,3,4) = 1,2\nMaximum among (1,2) is 2\n\nMinimums of window size 4 = min(1,2,3,4) = 1\nMaximum among them is 1\nThe output array should be [4,3,2,1].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single positive integer \u2018N\u2019 denoting the number of the elements present in the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain \u2018N\u2019 space-separated integer such that he ith integer indicates the maximum of minimums of the windows of size \u2018i\u2019.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 4 \n-10 ^ 9 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array and \u2018ARR[i]\u2019 is the size of the array elements.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n5\n3 3 4 2 4    \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>4 3 2 1\n4 3 3 2 2\n</code></pre>\n\n<h5>Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nAlready explained in the question.\n\nTest case 2:\nMinimums of window size 1 = min(3), min(3), min(4), min(2), min(4) = 3, 3, 4, 2, 4\nMaximum among (3, 3, 4, 2, 4) is 4\n\nMinimums of window size 2 = min(3,3), min(3,4), min(4,2), min(2,4) = 3, 3, 2, 2\nMaximum among (3, 3, 2, 2) is 3\n\nMinimums of window size 3 = min(3,3,4), min(3,4,2), min(4,2,4) = 3, 2, 2\nMaximum among (3, 2, 2) is 3\n\nMinimums of window size 4 = min(3,3,4,2), min(3,4,2,4) = 2, 2\nMaximum among (2, 2) is 2\n\nMinimums of window size 4 = min(3,3,4,2,4) = 2\nMaximum among them is 2\nThe output array should be [4,3,3,2,2].\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n5 \n45 -2 42 5 -11 \n6 \n-2 12 -1 1 20 1 \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code> 45 5 -2 -2 -11\n 20 1  1 -1 -1 -2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 97,
        "link": "https://www.codingninjas.com/codestudio/problems/max-of-min_982935?topList=striver-sde-sheet-problems",
        "title": "Maximum of minimum for every window size",
        "solution": "/*\n    Time Complexity: O(N)\n    Space complexity: O(N)\n    Where 'N' is the number elements present in the given array.\n */\n#include <stack>\n// This function will return an array.\n// Each ith position contains the index of previous smaller elements in the original array.\nvector<int> previousSmaller(vector<int> &arr, int n) \n{\n    vector<int> prev(n);\n    stack<int> s;\n    {\n        while (!s.empty() && arr[s.top()] >= arr[i]) \n        {\n            s.pop();\n        }\n        if (s.empty()) \n        {\n            prev[i] = -1;\n        } \n        else \n        {\n            prev[i] = s.top();\n        }\n        s.push(i);\n    }\n    return prev;\n}\n// This function will return an array.\n// Each ith position contains the index of next smaller elements in the original array.\nvector<int> nextSmaller(vector<int> &arr, int n) \n{\n    stack<int> s;\n    vector<int> next(n);\n    for (int i = n - 1; i >= 0; i--) \n    {\n        while (!s.empty() && arr[s.top()] >= arr[i]) \n        {\n            s.pop();\n        }\n        if (s.empty()) \n        {\n            next[i] = n;\n        } \n        else \n        {\n            next[i] = s.top();\n        }\n        s.push(i);\n    }\n    return next;\n}\nvector<int> maxMinWindow(vector<int> &arr, int n) \n{\n    // Definition: answer[i] will store the maximum of minimum of every window of size 'i'.\n    vector<int> answer(n, INT_MIN);\n    // Definition: next[i] will store the index of next smaller element which lie on the right hand side of 'i'.\n    vector<int> next = nextSmaller(arr, n);\n    // Definition: prev[i] will store the index of previous smaller element which lie on the left hand side of 'i'.\n    vector<int> prev = previousSmaller(arr, n);\n    for (int i = 0; i < n; i++) \n    {\n        // Length of the window in which a[i] is minimum\n        int length = next[i] - prev[i] - 1;\n        // Update the answer[length-1] ( 0 based indexing )  with a[i]\n        answer[length - 1] = max(answer[length - 1], arr[i]);\n    }\n    // Some entries in answer[] may not be filled yet.\n    // We fill them by taking maximum element from suffix starting from 'i'.\n    for (int i = n - 2; i >= 0; i--) \n    {\n        answer[i] = max(answer[i], answer[i + 1]);\n    }\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"there-are-n-people-at-a-party-each-person-has-been-assigned-a-unique-id-between-0-to-39-n-39-1-both-inclusive-a-celebrity-is-a-person-who-is-known-to-everyone-but-does-not-know-anyone-at-the-party\">There are \u2018N\u2019 people at a party. Each person has been assigned a unique id between 0 to 'N' - 1(both inclusive).  A celebrity is a person who is known to everyone but does not know anyone at the party.</h4>\n\n<h4 id=\"given-a-helper-function-knows-a-b-it-will-returns-quot-true-quot-if-the-person-having-id-a-know-the-person-having-id-b-in-the-party-quot-false-quot-otherwise-your-task-is-to-find-out-the-celebrity-at-the-party-print-the-id-of-the-celebrity-if-there-is-no-celebrity-at-the-party-then-print-1\">Given a helper function \u2018knows(A, B)\u2019, It will returns \"true\" if the person having id \u2018A\u2019 know the person having id \u2018B\u2019 in the party, \"false\" otherwise. Your task is to find out the celebrity at the party. Print the id of the celebrity, if there is no celebrity at the party then print -1.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The helper function \u2018knows\u2019 is already implemented for you.\n2. \u2018knows(A, B)\u2019 returns \"false\", if A doesn't know B.\n3. You should not implement helper function \u2018knows\u2019, or speculate about its implementation.\n4. You should minimize the number of calls to function \u2018knows(A, B)\u2019.\n5. There are at least 2 people at the party.\n6. At most one celebrity will exist.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of  \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains an integer \u2018N\u2019, representing the number of people in the party.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print an integer representing the id of the celebrity. If there is no celebrity at the party then print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n2 &lt;= N &lt;= 10^4\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of people at the party.\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n2\nCall function \u2018knows(0, 1)\u2019 // returns false\nCall function \u2018knows(1, 0)\u2019 // returns true\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, there are 2 people at the party. When we call function knows(0,1), it returns false. That means the person having id \u20180\u2019 does not know a person having id \u20181'. Similarly, the person having id \u20181\u2019  knows a person having id \u20180\u2019 as knows(1,0) returns true. Thus a person having id \u20180\u2019 is a celebrity because he is known to everyone at the party but doesn't know anyone.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n2\nCall \u2018knows(0, 1)\u2019 // returns true\nCall \u2018knows(1, 0)\u2019 // returns true\n2\nCall \u2018knows(0, 1)\u2019 // returns false\nCall \u2018knows(1, 0)\u2019 // returns false\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-1\n-1\n</code></pre>\n\n<h5>Explanation For Sample Input 2:</h5>\n\n<pre><code>In first test case, there are 2 people at the party. The person having id \u20180\u2019  knows a person having id \u20181\u2019. The person having id \u20181\u2019  knows a person having id \u20180\u2019. Thus there is no celebrity at the party, because both know each other. \nIn second test case, there are 2 people at the party. The person having id \u20180\u2019 does not knows a person having id \u20181\u2019. The person having id \u20181\u2019  also does not knows a person having id \u20180\u2019. Thus there is no celebrity at the party, because both does not know each other. \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 98,
        "link": "https://www.codingninjas.com/codestudio/problems/the-celebrity-problem_982769?topList=striver-sde-sheet-problems",
        "title": "The Celebrity Problem",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n    Where 'N' is the number of people at the party.\n*/\nint findCelebrity(int n) {\n    // Two pointers pointing at start and end of search space.\n    int p = 0, q = n-1; \n    // Finding celebrity.\n    while(p < q) {\n        if(knows(p, q)) {\n            // This means p cannot be celebrity.\n        else {\n            // This means q cannot be celebrity.\n            q--; \n        }\n    }\n    int celebrity = p;\n    bool knowAny = false, knownToAll = true;\n    // Verify whether the celebrity knows any other person.\n    for(int i = 0; i < n; i++) {\n        if(knows(celebrity, i)) {\n            knowAny = true;\n            break;\n        }\n    }\n    // Verify whether the celebrity is known to all the other person.\n    for(int i = 0; i < n; i++) {\n        if(i != celebrity and !knows(i, celebrity)) {\n            knownToAll = false;\n            break;\n        }\n    }\n    if(knowAny or !knownToAll) {\n        // If verificatin failed, then it means there is no celebrity at the party.\n        celebrity = -1;\n    }\n    return celebrity;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-string-of-length-n-you-need-to-reverse-the-string-word-by-word-there-can-be-multiple-spaces-between-two-words-and-there-can-be-leading-or-trailing-spaces-but-in-the-output-reversed-string-you-need-to-put-a-single-space-between-two-words-and-your-reversed-string-should-not-contain-leading-or-trailing-spaces\">You are given a string of length N. You need to reverse the string word by word. There can be multiple spaces between two words and there can be leading or trailing spaces but in the output reversed string you need to put a single space between two words, and your reversed string should not contain leading or trailing spaces.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If the given input string is \"  Welcome to   Coding  Ninjas\", then you should return \"Ninjas Coding to Welcome\" as the reversed string has only a single space between two words and there is no leading or trailing space.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \nThen the T test cases follow.\n\nThe first and only one of each test case contains a string that you need to reverse word by word.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print the reversed string such that there should be only one space between two strings and there should not be any trailing space.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Do not print anything. It has already been taken care of.\n\nIf the string data type is immutable in your language, consider using a mutable data type as an alternative.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow-up:</h5>\n\n<pre><code>If the string data type is mutable in your language, can you solve it in place with O(1) extra space?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\nWelcome   to Coding Ninjas\n   I am   a    star\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>Ninjas Coding to Welcome\nstar a am I\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, you need to reduce multiple spaces between two words to a single space in the reversed string and observe how the multiple spaces, leading and trailing spaces have been removed.\n\nIn the second test case, Your reversed string should not contain leading or trailing spaces.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\nHello  World!!\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>World!! Hello\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 99,
        "link": "https://www.codingninjas.com/codestudio/problems/reverse-words_696444?topList=striver-sde-sheet-problems",
        "title": "Reverse Words In A String",
        "solution": "/*\n    Time Complexity  = O(N)\n    Space Complexity = O(N)\n    Where N is the length of the string.\n*/\nstring reverseString(string str)\n{\n    // if the string is \" \" then return \"\"\n    if(str == \"\" || str == \" \")\n    {\n        return \"\";\n    }\n    string ans;\n    while(start >= 0)\n    {\n        // Skip multiple spaces\n        if(str[start] == ' ')\n        {\n            start--;\n        }\n        else\n        {\n            // Add space between words\n            if(ans.length() > 0)\n            {\n                ans.push_back(' ');\n            }\n            int j = start;\n            while(j >= 0 && str[j] != ' ')\n            {\n                j--;\n            }\n            // add current word to ans\n            ans.append(str.substr(j+1, start-j));\n            start = j;\n        }\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-string-str-of-length-n\">You are given a string (STR) of length N.</h4>\n\n<h4 id=\"your-task-is-to-find-the-longest-palindromic-substring-if-there-is-more-than-one-palindromic-substring-with-the-maximum-length-return-the-one-with-the-smaller-start-index\">Your task is to find the longest palindromic substring. If there is more than one palindromic substring with the maximum length, return the one with the smaller start index.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A substring is a contiguous segment of a string.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>The longest palindromic substring of \"ababc\" is \"aba\", since \"aba\" is a palindrome and it is the longest substring of length 3 which is a palindrome. There is another palindromic substring of length 3 is \"bab\". Since starting index of \"aba\" is less than \"bab\", so \"aba\" is the answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer 'T', representing the number of test cases or queries to be run. \nThen the 'T' test cases follow.\n\nThe first and only one of each test case contains a string (STR).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print a single line containing the longest palindromic substring. \n\nIf there are multiple possible answers then you need to print the substring which has the lowest starting index.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"follow-up\">Follow up:</h4>\n\n<pre><code>Try to solve it using O(1) space complexity.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10^3\n\nwhere 'T' is the number of test cases, 'N' is the length of the given string.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\nabccbc\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>bccb\n</code></pre>\n\n<h5>Explanation for input 1:</h5>\n\n<pre><code>For string \"abccbc\" there are multiple palindromic substrings like \"a\", \"b\", \"c\", \"cc\", \"bccb\", \"cbc\". But \"bccb\" is of the longest length. Thus, answer is \"bccb\".\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\naeiou\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>a\n</code></pre>\n\n<h5>Explanation for input 2:</h5>\n\n<pre><code>For string \"aeiou\" there are multiple palindromic substrings like \"a\", \"e\", \"I\", \"o\", \"u\", and all of the same length. But palindromic substring \"a\"  has the minimum starting index. Thus, the answer is \"a\".\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 100,
        "link": "https://www.codingninjas.com/codestudio/problems/longest-palindromic-substring_758900?topList=striver-sde-sheet-problems",
        "title": "Longest Palindromic Substring",
        "solution": "/*\n    Time Complexity : O(N ^ 2)\n    Space Complexity: O(1)\n    Where N is the length of the string.\n*/\n#include <algorithm>\nint expandAroundCenter(string str, int left, int right) \n{\n    int start = left, end = right;\n    int n = str.length();\n    // Expand the center.\n    while (start >= 0 && end < n && str[start] == str[end]) \n        end++;\n    }\n    return end - start - 1;\n}\nstring longestPalinSubstring(string str)\n{\n    int n = str.length();\n    if (n < 1) \n    {\n        return \"\";\n    }\n    int start = 0, end = 0;\n    for (int i = 0; i < n; i++) \n    {\n        // Longest odd length palindrome with center points as i.\n        int len1 = expandAroundCenter(str, i, i);\n        // Longest even length palindrome with center points as i and i + 1.\n        int len2 = expandAroundCenter(str, i, i + 1);\n        int len = max(len1, len2);\n        // Update the start and end.\n        if (len > end - start + 1) \n        {\n            start = i - (len - 1) / 2;\n            end = i + (len) / 2;\n        }\n    }\n    return str.substr(start, end - start + 1);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-string-that-represents-a-roman-number-convert-the-roman-number-to-an-integer-and-return-it\">Given a string that represents a roman number. Convert the roman number to an integer and return it.</h4>\n\n<h4 id=\"roman-numerals-are-represented-by-seven-different-symbols-i-v-x-l-c-d-and-m\">Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.</h4>\n\n<h5 id=\"table-of-values\">Table of values:</h5>\n\n<pre><code>Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>3 is written as III in Roman numeral, just three ones added together. 13 is written as XIII, which is simply X + III. The number 25 is written as XXV, which is XX + V \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Do not print anything, just return an integer denoting the equivalent integer of the given roman number\n\nIt is guaranteed that the string input is one of the characters of I, V, X, L, C, D, M.\n\nIt is guaranteed that the integer value of the given roman number will not exceed 3999.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains a string \u2018roman\u2019 representing the number's roman number representation.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, return a single integer denoting the integer value of the given roman number.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= roman.length &lt;= 15\n\nTime limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3\nXII\nXXVII\nLX\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>12\n27\n60\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\n\nWe know that \u2018X\u2019 is 10 and we have 2 \u2018I\u2019 after it. Therefore the number is 12\n\nTest Case 2: \n\nWe know that \u2018X\u2019 is 10 and \u2018V\u2019 is 5 and we have 2 \u2018I\u2019 after it. Therefore the number is 20+5+2=27\n\nTest Case 3:\n\nWe see that \u2018L\u2019 is 50 and \u2018X\u2019 is 10 so the number is 50 +10 =60\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\nXC\nMM\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>90\n2000\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 101,
        "link": "https://www.codingninjas.com/codestudio/problems/roman-number-to-integer_981308?topList=striver-sde-sheet-problems",
        "title": "Roman Numeral To Integer",
        "solution": "/*\n    Time Complexity     :   O(N)\n    Space Complexity    :   O(1)\n    Where 'N' is the length of the string.\n*/\n#include<unordered_map>\nint romanToInt(string s) {\n    int count = 0;\n    // To store previous char value.\n    int preInt = 0;\n    // Unordered map for finding interger value for roman numerals.\n    unordered_map<char, int> conv =\n         {'X', 10},\n         {'L', 50},\n         {'C', 100},\n         {'D', 500},\n         {'M', 1000}};\n    // Loop from end to start of the string.\n    for (int i = s.length() - 1; i >= 0; i--) {\n        char ch = s[i];\n        // Store current char integer value.\n        int curInt = conv[ch];\n        /*\n            If current value is greater or equal to previous value then increment count i.e., II means 1+1\n            else in case of IV, V = 5 and I = 1 here 1 < 5 then else part will execute and update count as 5 - 1 = 4.\n        */\n        if (curInt >= preInt) {\n            count += curInt;\n        } else {\n            count -= curInt;\n        }\n        // Update 'preInt' value with current value for next iteration.\n        preInt = curInt;\n    }\n    return count;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-string-str-of-length-39-n-39-implement-the-atoi-function-if-there-are-no-numbers-in-the-string-return-0\">Given a string \u2018STR\u2019 of length 'N'. Implement the atoi function. If there are no numbers in the string, return 0.</h4>\n\n<h4 id=\"in-other-words-given-a-string-str-convert-the-string-to-an-integer\">In other words, given a string \u2018STR\u2019 convert the string to an integer.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Give string : \u201d123456\u201d, we return the integer value \u2018123456\u2019.\n</code></pre>\n\n<h4 id=\"the-string-can-contain-any-ascii-characters-if-the-character-in-the-string-is-not-a-number-ignore-it\">The string can contain any ascii characters. If the character in the string is not a number, ignore it.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Given string : \u201d#messi10\u201d, we return 10 as other characters \u201cmessi\u201d are not numbers hence we skip them.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. If the first char is \u2018-\u2019 it represents a minus sign and hence we return a negative integer.\n2. If there is no number in the string, return 0.\n3. It is guaranteed that the number is less than or equal to 10^9.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThen the test cases follow.\n\nThe only line of each test case contains the string \u2018STR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the integer formed by the given string.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= N &lt;= 3*10^3\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>4\n12439\n-43534\napp546er\ncutedog\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>12439\n-43534\n546\n0\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case,\nWe can see that the string is a complete integer \u201812439\u2019 so we return 12439 as an integer\n\nFor the second test case,\nThe first character is a \u2018-\u2019, which denotes negative sign so we need to return a negative integer, hence we return -43534 as an integer. \n\nFor the Third Test case,\nWe have string : \u2019app546er\u2019 \nNow we ignore all the non-integer ascii values and return 546 as an integer, here apparently \u2018apper\u2019 is ignored.\n\nFor the Fourth Test case,\nWe have string : \u2019cutedog\u2019.\nNow since the string has no number, we ignore all the characters and we return 0.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\nApple\nban23\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>0\n23\n</code></pre>\n\n<h5>Explanation For Sample Input 2:</h5>\n\n<pre><code>For the first test case,\nWe have string : \u2019Apple\u2019.\nNow since the string has no number, we ignore all the characters and we return 0.\n\nFor the second test case,\nWe have string : \u2019ban23\u2019 \nNow we ignore all the non-integer ascii values and return 23 as an integer, here apparently \u2018ban\u2019 is ignored.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 102,
        "link": "https://www.codingninjas.com/codestudio/problems/atoi_981270?topList=striver-sde-sheet-problems",
        "title": "Implement Atoi Function",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    Where 'N' is the length of the string.\n*/\nint atoi(string str) {\n    bool isNegative = 0;\n    // Check Negative.\n    if (str[0] == '-') {\n        isNegative = 1;\n    }\n    int number = 0;\n    for (int i = 0; i < str.size(); i++) {\n            and str[i] <= '9') {\n            int digit = (char) str[i] - '0';\n            number = number * 10 + digit;\n        }\n    }\n    if (isNegative) {\n        number *= -1;\n    }\n    return number;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-arr-consisting-of-n-strings-your-task-is-to-find-the-longest-common-prefix-among-all-these-strings-if-there-is-no-common-prefix-you-have-to-return-an-empty-string\">You are given an array \u2018ARR\u2019 consisting of \u2018N\u2019 strings. Your task is to find the longest common prefix among all these strings. If there is no common prefix, you have to return an empty string.</h4>\n\n<h4 id=\"a-prefix-of-a-string-can-be-defined-as-a-substring-obtained-after-removing-some-or-all-characters-from-the-end-of-the-string\">A prefix of a string can be defined as a substring obtained after removing some or all characters from the end of the string.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Consider ARR = [\u201ccoding\u201d, \u201dcodezen\u201d, \u201dcodingninja\u201d, \u201dcoders\u201d]\nThe longest common prefix among all the given strings is \u201ccod\u201d as it is present as a prefix in all strings. Hence, the answer is \u201ccod\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer, 'T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of strings in the array.\n\nThe next line contains \u2018N\u2019 space-separated strings denoting the elements of the array \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single string corresponding to the longest common prefix.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 3000\n1 &lt;= |ARR[i]| &lt;=1000\n\nEach string consists of only lowercase letters.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4\ncoding codezen codingninja coder\n3\nnight ninja nil \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>cod\nni\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, \nThe longest common prefix among all the given strings is \u201ccod\u201d as it is present as a prefix in all strings. Hence, the answer is \u201ccod\u201d.\n\nFor the second test case,\nThe longest common prefix among all the given strings is \u201cni\u201d as it is present as a prefix in all strings. Hence, the answer is \u201cni\u201d.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n3\napplejuice applepie apple\n4\ncar cus cart carat\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>apple\nc\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 103,
        "link": "https://www.codingninjas.com/codestudio/problems/longest-common-prefix_2090383?topList=striver-sde-sheet-problems",
        "title": "Longest Common Prefix",
        "solution": "/*\n    Time Complexity: O(N*M)\n    Space Complexity: O(N*M)\n    where N is the number of strings in the array and M is the maximum length of the string present in the array.\n*/\nclass TrieNode\n{   \n    public:\n    char val;\n    vector<TrieNode*> child;\n    int childCount;\n    bool endOfWord;\n    TrieNode(char val)\n        child.resize(26, NULL);\n        childCount = 0;\n        endOfWord = false;\n    }\n    ~TrieNode()\n    {\n        for(int i = 0; i < 26; i++)\n        {\n            if(child[i] != NULL)\n            {\n                delete child[i];\n            }\n        }\n    }\n};\nvoid insert(TrieNode* root, string &word)\n{\n    TrieNode* cur = root;\n    for(int idx = 0; idx < word.size(); ++idx)\n    {   \n        int diff = word[idx] - 'a';\n        // If the child[diff] of cur is an empty node\n        if (cur->child[diff] == NULL)\n        {\n            cur->child[diff] = new TrieNode(word[idx]);\n            cur->childCount += 1;\n        }\n        cur = cur->child[diff];\n    }\n    // Marking the endOfWord of last character as true.\n    cur->endOfWord = true;    \n}\nstring longestCommonPrefix(vector<string> &arr, int n)\n{\n    // Declaring the Trie's root node\n    TrieNode* root = new TrieNode(' ');\n    // Inserting each word into Trie\n    for(int i = 0; i < arr.size(); i++)\n    {\n        string word = arr[i];\n        insert(root, word);\n    }\n    // A string to store the longest common prefix\n    string answer = \"\";\n    // We will check if string prefix is common in all strings or not\n    string prefix = arr[0];\n    for(int idx = 0; idx < prefix.size(); idx++)\n    {\n        // Check if root has only one child.\n        if (root->childCount == 1)\n        {\n            answer += prefix[idx];\n            int diff = prefix[idx] - 'a';\n            root = root->child[diff];\n        }\n        else\n        {\n            break;\n        }\n        //  Check if endOfWord of root is true.  \n        if (root->endOfWord)\n        {\n            break;\n        }\n    }\n    delete root;\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-string-str-of-length-39-n-39-and-a-string-pat-of-length-39-m-39-your-task-is-to-find-the-starting-index-of-all-the-occurrences-of-pat-in-str\">You are given a string \u2018str\u2019 of length 'N' and a string \u2018pat\u2019 of length 'M'. Your task is to find the starting index of all the occurrences of \u2018pat\u2019 in str.</h4>\n\n<h4 id=\"you-need-to-return-a-list-of-integers-that-denote-the-indices-from-which-pat-is-present-in-str-consider-0-based-indexing\">You need to return a list of integers that denote the indices from which \u2018pat\u2019 is present in \u2018str\u2019(consider 0 based indexing).</h4>\n\n<h4 id=\"for-example\">For example,</h4>\n\n<h4 id=\"let-str-aabaacaadaabaaba\">Let str= \u201cAABAACAADAABAABA\u201d</h4>\n\n<h4 id=\"and-pat-aaba\">And pat= \u201cAABA\u201d</h4>\n\n<h4 id=\"we-will-return-the-array-list-0-9-12-as-we-can-clearly-see-that-from-indices-0-9-and-12-we-have-the-same-pattern-pat-in-str\">We will return the array/list  [0,9,12] as we can clearly see that from indices 0 9 and 12 we have the same pattern \u2018pat\u2019 in \u2018str\u2019</h4>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>1. 'str' and 'pat' will consist of only uppercase English letters.\n2. Two occurrences of a pattern may overlap with each other. For example, for str = \"AAAA\" and pat = \"AA\", you need to return [0,1,2] and not [0,2].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test cases follow.\nThe first line of each test case contains the string \u2018str\u2019.\nThe second line of each test case contains the string \u2018pat\u2019        \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, return a list of integers denoting the indices where the match happens.\nIf no match happens, return an empty array.\nOutput for each test case will be printed in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= M &lt;= 5000\n1&lt;= M &lt;= N\n'str' and 'pat' will consist of only uppercase english letters.\n\n\nWhere \u2018T\u2019 is the total number of test cases, N is the length of 'str' and 'M' is the length of 'pat'. \nTime limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\nCODENCODE\nCODE\nMANGOMAN\nMAN\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>0 5\n0 5\n</code></pre>\n\n<h5>Explanation of sample input 1 :</h5>\n\n<pre><code>Test Case 1:\n\nIn the first test case,\nThe string \u2018str\u2019 is \u201cCODENCODE\u201d and the pattern is \u201cCODE\u201d. We can see that the pattern matches in the string at indices 0 and 5 so we return an array with [0,5].\n\n\nIn the second test case,\nThe string \u2018str\u2019 is \u201cMANGOMAN\u201d and the pattern is \u201cMAN\u201d. We can see that the pattern matches in the string at indices 0 and 5 so we return an array with [0,5].\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\nBEARDO\nEAR\nMANYAWARMAN\nYAWAR\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1\n3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 104,
        "link": "https://www.codingninjas.com/codestudio/problems/stringmatch-rabincarp_1115738?topList=striver-sde-sheet-problems",
        "title": "Rabin Carp",
        "solution": "/*\n    Time Complexity: O(N + M)\n    Space Complexity: O(1)\n    Where 'N' is the length of the string 'str' and 'M' is the length of pat\n*/\nvector<int> stringMatch(string &str, string &pat) {\n    int prime = 31;\n    int mod = 998244353;\n    int m = pat.length();\n    int n = str.length();\n    // Array/list to store power of prime i.e 31^i\n    primePower[0] = 1;\n    for (int i = 1; i < n; i++)\n    {\n        primePower[i] = (primePower[i - 1] * prime) % mod;\n    }\n    // Store hash values for string 'str' till each index i starting from 0\n    vector<long long> h(n + 1, 0);\n    for (int i = 0; i < n; i++)\n    {\n        h[i + 1] = (h[i] + (str[i] - 'A' + 1) * primePower[i]) % mod;\n    }\n    // Finding the hash value of pattern\n    long long hashPattern = 0;\n    for (int i = 0; i < m; i++)\n    {\n        hashPattern = (hashPattern + (pat[i] - 'A' + 1) * primePower[i]) % mod;\n    }\n    vector<int> occurences;\n    // Rolling hash\n    for (int i = 0; i + m - 1 < n; i++) \n    {\n        long long currentHash = (h[i + m] + mod - h[i]) % mod;\n        // If a match is found, insert it in our answer\n        if (currentHash == hashPattern * primePower[i] % mod)\n        {\n            occurences.push_back(i);\n        }\n    }\n    return occurences;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-re-given-a-string-s-of-length-n-and-a-string-p-of-length-m-your-task-is-to-find-the-number-of-occurrences-of-p-in-s-in-linear-time\">You\u2019re given a string S of length N and a string P of length M. Your task is to find the number of occurrences of P in S in linear time.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If S = \"ababa\", and P = \"ab\", then \"ab\" occurs twice in \"ababa\".\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The string only consists of lowercase English alphabets.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains T, the number of test cases.\n\nThe first line of each test case contains two integers N and M, the length of string S and P respectively.\n\nThe second line of each test case contains the string S.\n\nThe third line of each test case contains the string P.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain an integer denoting the number of occurrences of P in S.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N, M &lt;= 10^4\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n5 2\nababa\nab\n4 10\ncodercodes\ncode\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n2\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>In the 1st testcase,\n\"ab\" occurs two times in \"ababa\". The first occurrence is from position 1 to position 2 and the second occurrence is from position 4 to position 5.\n\nIn the 2nd testcase, \n\"code\" occurs two times in \"codercodes\". The first occurrence is from position 1 to position 4 and the second occurrence is from position 6 to position 9.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n7 3\naababba\naba\n6 2\nzzzzyz\nzz   \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1\n3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 105,
        "link": "https://www.codingninjas.com/codestudio/problems/z-algorithm_1112619?topList=striver-sde-sheet-problems",
        "title": "Z Algorithm",
        "solution": "/*\n    Time Complexity: O(N + M)\n    Space Complexity: O(K),\n    where N, M and K is the length of string S, P and concatenated string C respectively.\n*/\nint zAlgorithm(string s, string p, int n, int m)\n{\n    int count = 0, l = 0, r = 0, pos;\n    string c = p + \"#\" + s;\n    int k = c.length();\n    // Making an array(z array) of length K\n    int zarr[k];\n    zarr[0] = 0;\n    for (int i = 1; i < k; i++)\n        {\n            // Resetting L and R\n            l = i;\n            r = i;\n            // Calulting z[i]\n            while (r < k and c[r - l] == c[r] )\n            {\n                r++;\n            }\n            zarr[i] = (r--) - l;\n            // Checking if this zarr[i] is equal to the length of p or not.\n            if (zarr[i] == m)\n            {\n                count++;\n            }\n        }\n        else\n        {\n            int pos = i - l;\n            if (zarr[pos] < r - i + 1)\n            {\n                zarr[i] = zarr[pos];\n                // Checking if this zarr[i] is equal to the length of p or not.\n                if (zarr[i] == m)\n                {\n                    count++;\n                }\n            }\n            else\n            {\n                l = i;\n                // Calulting z[i]\n                while (r < k and c[r - l] == c[r])\n                {\n                    r++;\n                }\n                zarr[i] = (r--) - l;\n                // Checking if this zarr[i] is equal to the length of p or not.\n                if (zarr[i] == m)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-strings-39-s-39-and-39-p-39-consisting-of-lowercase-english-alphabets-your-task-is-to-find-whether-the-39-p-39-is-present-in-39-s-39-as-a-substring-or-not\">You are given two strings 'S' and 'P' consisting of lowercase English alphabets. Your task is to find whether the 'P' is present in 'S' as a substring or not.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. There may be more than one occurrence of 'P' in 'S'.\n2. Some alphabets in the strings may be repeated.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer 'T', representing the number of test cases\n\nThen the 'T' test cases follow.\n\nThe first line of each test case contains two space-separated strings 'P' and 'S' respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing \u201cYES\u201d if string 'P' is present in string 'S' as a substring, otherwise print \u201cNO\u201d.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |S| &lt;= 10000\n1 &lt;= |P| &lt; |S|\n\nWhere |S| and |P| represents the length of the string 'S' and 'P' respectively.\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample input 1:</h4>\n\n<pre><code>3\nxxy yxxyxxy\na baac\ncfg cgfgfc\n</code></pre>\n\n<h4>Sample output 1</h4>\n\n<pre><code>YES\nYES\nNO\n</code></pre>\n\n<h4>Explanation for sample output 1</h4>\n\n<pre><code>In the first test case, there are two substrings equal to P on index 1 and 4 in S.\n\nIn the second test case, there are two substrings equal to P on indexes 1 and 2 in S.\nIn the third test case, P does not exist in S.\n</code></pre>\n\n<h4>Sample input 2:</h4>\n\n<pre><code>3\nbbb abba\niqw hdhhdqoa\ncar caribbean \n</code></pre>\n\n<h4>Sample output 2</h4>\n\n<pre><code>NO\nNO\nYES\n</code></pre>\n\n<h4>Explanation for sample output 2</h4>\n\n<pre><code> In the first test case, P does not exist in S.\n In the second test case, P does not exist in S.\n In the third test case, there is one substring equal to P on index 1 in S.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 106,
        "link": "https://www.codingninjas.com/codestudio/problems/find-pattern-in-string_1112621?topList=striver-sde-sheet-problems",
        "title": "Find Pattern in String - KMP Algorithm",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(M)\n    Where N is the length of string s and M is length of string p.\n*/\n// Function to get the LPS.\nvoid getLps(string p, vector<int> &lps) \n{\n    int len = 0;\n    int index = 1;\n    int m = p.size();\n    while (index < m)\n    {\n        if (p[index] == p[len])\n            lps[index] = len;\n            index += 1;\n        }\n        else\n        {\n            if (len == 0)\n            {\n                lps[index] = 0;\n                index += 1;\n            }\n            else\n            {\n                // Skipping the characters.\n                len = lps[len - 1]; \n            }\n        }\n    }\n}\nbool findPattern(string p, string s)\n{\n    int m = p.size();\n    int n = s.size();\n    vector<int> lps(m, 0);\n    getLps(p, lps);\n    // We will use these indices to traverse in s and p.\n    int index1 = 0;\n    int index2 = 0;\n    while (index1 < n)\n    {\n        if (s[index1] == p[index2])\n        {\n            index2++;\n            index1++;\n            if (index2 == m)\n            {\n                return true;\n            }\n            if (index1 == n)\n            {\n                return false;\n            }\n        }\n        else\n        {\n            if (index2 == 0)\n            {\n                index1 += 1;\n            }\n            else\n            {\n                // Skipping the characters.\n                index2 = lps[index2 - 1];\n            }\n        }\n    }\n    return false;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-string-str-of-length-n-the-task-is-to-return-the-count-of-minimum-characters-to-be-added-at-front-to-make-the-string-a-palindrome\">Given a string STR of length N. The task is to return the count of minimum characters to be added at front to make the string a palindrome.</h4>\n\n<h4 id=\"for-example-for-the-given-string-deed-the-string-is-already-a-palindrome-thus-minimum-characters-needed-are-0\">For example, for the given string \u201cdeed\u201d, the string is already a palindrome, thus, minimum characters needed are 0.</h4>\n\n<h4 id=\"similarly-for-the-given-string-aabaaca-the-minimum-characters-needed-are-2-i-e-a-and-c-which-makes-the-string-acaabaaca-palindrome\">Similarly, for the given string \u201caabaaca\u201d, the minimum characters needed are 2 i.e. \u2018a\u2019 and \u2018c\u2019 which makes the string \u201cacaabaaca\u201d palindrome.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first and only line of each test case or query contains the string STR. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the count of minimum characters needed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N &lt;= 10 ^ 5 \nSTR contains only lowercase English letters.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample input 1 :</h5>\n\n<pre><code>2\nabcd\ndad \n</code></pre>\n\n<h5>Sample output 1 :</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h5>Explanation of sample input 1 :</h5>\n\n<pre><code>For test case 1 : \nMinimum characters to be added at front to make it a palindrome are 3 i.e. \u201cdcb\u201d which makes the string \u201cdcbabcd\u201d.  \n\nFor test case 2 :\nThe string is already a palindrome, we do not need to add any character.     \n</code></pre>\n\n<h5>Sample input 2 :</h5>\n\n<pre><code>2\nxxaxxa    \nabb\n</code></pre>\n\n<h5>Sample output 2 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 107,
        "link": "https://www.codingninjas.com/codestudio/problems/minimum-characters-for-palindrome_893000?topList=striver-sde-sheet-problems",
        "title": "Minimum Characters For Palindrome",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(N)\n    Where N is length of the string.    \n*/\n#include <vector>\n// Function for calculating lps array\nvector<int> calculateLPSArray(string str)\n{\n    int m = str.length();\n    vector<int> lps(m);\n    int len = 0;\n    // As, lps[0] is always 0\n    // The loop calculates lps[i] for i = 1 to M-1.\n    int i = 1;\n    while (i < m)\n    {\n        // We get new prefix and new suffix, so increase length of  current lps by 1 and go to next iteration.\n        if (str[i] == str[len])\n        {\n            len++;\n            lps[i] = len;\n            i++;\n        }\n        else\n        {\n            // Don't increment i here\n            if (len != 0)\n            {\n                len = lps[len - 1];\n            }\n            else\n            {\n                // There isn't any lps ends with pat[i], so set lps[i] = 0 and go to next iteration.\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    return lps;\n}\n// Function for reverse a string\nstring reverse(string s)\n{\n    int n = s.length();\n    for (int i = 0; i < n / 2; i++)\n    {\n        char temp = s[i];\n        s[i] = s[n - i - 1];\n        s[n - i - 1] = temp;\n    }\n    return s;\n}\nint minCharsforPalindrome(string str)\n{\n    string revStr = reverse(str);\n    // Concatenate string with $ symbol and reverse string.\n    string concat = str + \"$\" + revStr;\n    // Get LPS array of this concatenated string\n    vector<int> lps = calculateLPSArray(concat);\n    return (str.length() - lps[lps.size() - 1]);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-two-strings-39-str1-39-and-39-str2-39-you-have-to-check-whether-the-two-strings-are-anagram-to-each-other-or-not\">You have been given two strings 'STR1' and 'STR2'. You have to check whether the two strings are anagram to each other or not.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Two strings are said to be anagram if they contain the same characters, irrespective of the order of the characters.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If 'STR1' = \u201clisten\u201d and 'STR2' = \u201csilent\u201d then the output will be 1.\n\nBoth the strings contain the same set of characters.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which denotes the number of test cases. \n\nThe first and only line of each test case contains two space-separated strings 'STR1' and 'STR2', respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return true if the two strings are anagrams of each other else return false.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |STR1|, |STR2| &lt;= 10^3\n\nWhere |STR1| and |STR2| are the lengths of the string 'STR1' and 'STR2' respectively.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\nlisten silent\neast eats\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, \"listen\" and \"silent\" has same set of characters.\n\nIn test case 2, \"east\" and \"eats\" has same set of characters.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\ntriangle integral\nhearts earth\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, \"triangle\" and \"integral\" has same set of characters.\n\nIn test case 2, \"hearts\" and \"earth\" does not have same set of characters.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 108,
        "link": "https://www.codingninjas.com/codestudio/problems/check-permutation_1172164?topList=striver-sde-sheet-problems",
        "title": "Check Permutation",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(Number of different characters).\n    Where 'N' is the length of the string.\n*/\n#define NO_OF_CHARS 256\nbool areAnagram(string &str1, string &str2){\n    // Create a count array and initialize all values as 0.\n    int hash[NO_OF_CHARS] = { 0 };\n    int i;\n    int n1 = str1.length();\n    int n2 = str2.length();\n    if (n1 != n2){\n       return false;\n    }\n    /*\n       For each character in input strings, \n       increment count in the corresponding count array.\n    */\n    for (i = 0; i < n1; i++){\n        hash[str1[i]]++;\n        hash[str2[i]]--;\n    }\n    // Check if all values in hash array are 0.\n    for (i = 0; i < NO_OF_CHARS; i++){\n        if (hash[i]){\n            return false;\n        }\n    }\n    return true;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"write-as-you-speak-is-a-special-sequence-of-strings-that-starts-with-string-1-and-after-one-iteration-you-rewrite-the-sequence-as-whatever-you-speak\">Write as you speak is a  special sequence of strings that starts with string \u201c1\u201d and after one iteration you rewrite the sequence as whatever you speak.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The first few iterations of the sequence are :\nFirst iteration: \u201c1\u201d\n    As we are starting with one.\n\nSecond iteration: \u201c11\u201d\n    We speak \u201c1\u201d as   \u201cone 1\u201d then we write it as \u201c11\u201d\n\nThird iteration: \u201c21\u201d\n    We speak \u201c11\u201d as \u201cTwo 1\u201d then we write it as \u201c21\u201d\n\nFourth iteration: \u201c1211\u201d\n    We speak \u201c21\u201d as \u201cone 2, one 1\u201d  then we write it as \u201c1211\u201d\n\nFifth iteration: \u201c111221\u201d\n    We speak \u201c1211\u201d as \u201cone 1, one 2, two 1\u201d then we write it as \u201c111221\u201d\n\nSixth iteration: \u201c312211\u201d\n    We speak \u201c111221\u201d as \u201cthree 1, two 2, one 1\u201d then we write it as \u201c312211\u201d\n</code></pre>\n\n<h4 id=\"you-will-be-given-a-single-positive-integer-n-your-task-is-to-write-the-sequence-after-n-iterations\">You will be given a single positive integer N, Your task is to write the sequence after N iterations.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single positive integer T, denoting the number of test cases.\n\nThe first line of each test case contains a single integer N, denoting the number of iterations.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query print the string that represents the sequence after the nth iteration.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 30\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1\n2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1\n11\n</code></pre>\n\n<h5>Explanation For Sample Input 2:</h5>\n\n<pre><code>First iteration: \u201c1\u201d\n    As we are starting with one.\n\nSecond iteration: \u201c11\u201d\n    We speak \u201c1\u201d as   \u201cone 1\u201d then we write it as \u201c11\u201d\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n3\n4\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>21\n1211\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 109,
        "link": "https://www.codingninjas.com/codestudio/problems/write-as-you-speak_1090543?topList=striver-sde-sheet-problems",
        "title": "Count And Say",
        "solution": "/*\n    Time Complexity: O(2 ^ N)\n    Space Complexity: O(M),\n    where N is the number of iterations and M is the length of the final string.\n*/\nstring writeAsYouSpeak(int n) \n{\n    // We initialize our starting string s with \"1\".\n    string s = \"1\";\n    // We initialize the iterations with n-1.\n    int iterations = n - 1;\n    while (iterations--) \n        string temp = \"\";\n        vector<int> count;\n        // currentIndex will store the current position in string s, currentChar will store the current character that we will match with consecutive characters.\n        // And currentCount will store the count of that character.\n        int currentIndex = 0;\n        // Now we will iterate through s and we will try to make temp and count.\n        while (currentIndex < s.length()) \n        {\n            char currentChar = s[currentIndex];\n            int currentCount = 0;\n            while ((currentIndex < s.length()) && (s[currentIndex] == currentChar)) \n            {\n                currentCount++;\n                currentIndex++;\n            }\n            temp += currentChar;\n            count.push_back(currentCount);\n        }\n        // Now we will make string s for the next iteration.\n        // We will add count[i] and temp[i] to s for each position of count.\n        s = \"\";\n        for(int i = 0; i < count.size(); i++) \n        {\n            s += (char)('0' + count[i]);\n            s += temp[i];\n        }\n    }\n    return s;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-versions-numbers-a-and-b-as-a-string-your-task-is-to-compare-them-and-find-out-which-one-of-them-is-a-newer-version\">You are given two versions numbers A and B as a string. Your task is to compare them and find out which one of them is a newer version.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>There are no leading zeros in any of the strings except in the case of zero itself. Note that, the leading zeroes are not allowed even after a '.' ie: 121.005 is an invalid version, while 121.5 is an valid version.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>A = \u201c1.23.45\u201d, B = \u201c1.23.456\u201d\n\nThe first two parts of both the strings are the same i.e 1 and 23 and the third part of B is greater than the third part of A i.e. 45 &lt; 456, thus string B is the latest version.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains version A as a string.\n\nThe second line of each test case contains version B as a string.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print 1 if version A is latest, -1  if version B is latest and 0 if both versions are the same.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |A|, |B| &lt;= 10^5\n\nAll the string A and B characters contain digits and dots only and both the strings are started and terminated by a digit.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1.2.4\n1.2.3\n10.2.2\n10.2.2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case, the first two parts of both the strings are the same but the third part of the 1st version is bigger than the 2nd version. Hence our answer is 1\n\nFor the second test case, both the versions are identical here, so the answer will be 0.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n123.45\n123\n1.0.0\n1\n</code></pre>\n\n<h5>Sample output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 110,
        "link": "https://www.codingninjas.com/codestudio/problems/compare-versions_1062582?topList=striver-sde-sheet-problems",
        "title": "Compare Version Numbers",
        "solution": "/*\n    Time Complexity: O(N + M)\n    Space complexity: O(1)\n    where N and M are lengths of string A and B respectively\n*/\n// Function to remove zeros from end\nstring removeZerosFromEnd(string a) \n{\n    // First initialising answer as complete string then removing zeros from end\n    int p = a.length() - 1;\n    // Traversing the string backwards\n    for (int i = a.length() - 1; i >= 1; i -= ) \n        // Checking if the current character is 0 and there is dot to the left of it\n        // If yes, then decreasing length of desired string\n        if (a[i] == '0'  and a[i - 1] == '.') \n        {\n            p -= 2;\n        }\n        // Otherwise ending the loop\n        else \n        {\n            break;\n        }\n    }\n    // Returning the final string\n    return a.substr(0, p + 1);\n}\nint compareVersions(string a, string b) \n{\n    // Removing zeros from end of both strings\n    a = removeZerosFromEnd(a);\n    b = removeZerosFromEnd(b);\n    // Initialising the four pointers\n    int start1 = 0, start2 = 0, end1 = 0, end2 = 0;\n    // Traversing both strings\n    while (true) \n    {\n        // Finding first dot to the right of start1 in string a\n        while (end1 < a.length() and a[end1] != '.') \n        {\n            end1++;\n        }\n        // Finding first dot to the right of start2 in string b\n        while (end2 < b.length() and b[end2] != '.') \n        {\n            end2++;\n        }\n        // Finding the greater one among end1 and end2\n        if (end1 > end2) \n        {\n            return 1;\n        }\n        else if (end1 < end2) \n        {\n            return -1;\n        }\n        // Comparing both the strings character by character\n        for (int i = start1; i < end1; i++) \n        {\n            if (a[i] > b[i]) \n            {\n                return 1;\n            }\n            else if (b[i] > a[i]) \n            {\n                return -1;\n            }\n        }\n        // Check if we reached end of both strings\n        if (end1 == a.length() and end2 == b.length()) \n        {\n            return 0;\n        }\n        // Check if we reached end of string a\n        if (end1 == a.length()) \n        {\n            return -1;\n        }\n        // Check if we reached end of string b\n        if (end2 == b.length()) \n        {\n            return 1;\n        }\n        // Updating values of all the four pointers\n        start1 = end1;\n        start2 = end2;\n        end1++;\n        end2++;\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-39-n-39-nodes-where-the-nodes-have-integer-values-your-task-is-to-find-the-in-order-traversal-of-the-given-binary-tree\">You have been given a Binary Tree of 'N' nodes, where the nodes have integer values. Your task is to find the In-Order traversal of the given binary tree.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-14509.jpg\" alt=\"\"></p>\n\n<pre><code>The Inorder traversal will be [5, 3, 2, 1, 7, 4, 6].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The input for the tree is depicted in the below image:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-14510.jpg\" alt=\"\"></p>\n\n<pre><code>1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The above format was just to provide clarity on how the input is formed for a given tree. The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a vector containing the In-Order traversal of a given binary tree.\n\nThe first and only line of output of each test case prints 'N' single space-separated integers denoting the node's values in In-Order traversal.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 3000\n0 &lt;= data &lt;= 10^9     \n\nWhere 'data' denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1  6 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2 1 3 6\n2 1 3\n</code></pre>\n\n<h5>Explanation of Sample Output 1 :</h5>\n\n<pre><code> In test case 1, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-14511.jpg\" alt=\"\">    </p>\n\n<pre><code>Inorder traversal of given tree = [2, 1, 3, 6]\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-14512.jpg\" alt=\"\">    </p>\n\n<pre><code>Inorder traversal of given tree = [2, 1, 3]\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1 -1\n1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1\n5 2 3 1 4\n</code></pre>\n\n<h5>Explanation of Sample Output 2 :</h5>\n\n<pre><code>In test case 1, there is only one node, so In-Order traversal will be only [1].\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-14513.jpg\" alt=\"\"></p>\n\n<pre><code>Inorder traversal of given tree = [5, 2, 3, 1, 4]\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 111,
        "link": "https://www.codingninjas.com/codestudio/problems/inorder-traversal_3839605?topList=striver-sde-sheet-problems",
        "title": "Inorder Traversal",
        "solution": "/*\n    Time Complexity: O( N )\n    Space Complexity: O( 1 )\n    where \u2018N\u2019 is the total number of nodes in the given binary tree.\n*/\n// Morris Traversal for inOrder.\nvector<int> getInOrderTraversal(TreeNode *root)\n{\n    // Create answer array to store traversal.\n    vector<int> answer;\n    // Base case.\n    if (root == NULL)\n    {\n    // 'PREDECESSOR' and 'CURRENT' will store predecessor and current nodes, respectively.\n    TreeNode *current, *predecessor;\n    // Initialize current node as 'ROOT'.\n    current = root;\n    // Run a loop until 'CURRENT' != NULL.\n    while (current != NULL)\n    {\n        if (current->left == NULL)\n        {\n            answer.push_back(current->data);\n            current = current->right;\n        }\n        else\n        {\n            // Find the rightmost node on the left subtree of current.\n            predecessor = current->left;\n            while (predecessor->right != NULL && predecessor->right != current)\n            {\n                predecessor = predecessor->right;\n            }\n            if (predecessor->right == NULL)\n            {\n                /*\n                    Make a link between predecessor and current node\n                    So that we have a path to come back to current\n                    When we have traversed the whole left subtree.\n                */\n                predecessor->right = current;\n                current = current->left;\n            }\n            else\n            {\n                /*\n                    If right node of predecessor is not NULL then it\n                    Means we have traversed the whole left subtree.\n                    So we unlink the connection between current and predecessor\n                    And move to right node of current.\n                */\n                predecessor->right = NULL;\n                answer.push_back(current->data);\n                current = current->right;\n            }\n        }\n    }\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-39-n-39-nodes-where-the-nodes-have-integer-values-your-task-is-to-find-the-pre-order-traversal-of-the-given-binary-tree\">You have been given a Binary Tree of 'N' nodes, where the nodes have integer values. Your task is to find the Pre-Order traversal of the given binary tree.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-14509.jpg\" alt=\"\"></p>\n\n<pre><code>The Preorder traversal will be [1, 3, 5, 2, 4, 7, 6].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The input for the tree is depicted in the below image:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-14510.jpg\" alt=\"\"></p>\n\n<pre><code>1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The above format was just to provide clarity on how the input is formed for a given tree. The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a vector containing the Pre-Order traversal of a given binary tree.\n\nThe first and only line of output of each test case prints 'N' single space-separated integers denoting the node's values in Pre-Order traversal.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 3000\n0 &lt;= data &lt;= 10^9     \n\nWhere 'data' denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1  6 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 2 3 6\n1 2 3\n</code></pre>\n\n<h5>Explanation of Sample Output 1 :</h5>\n\n<pre><code> In test case 1, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-14511.jpg\" alt=\"\"></p>\n\n<pre><code>Preorder traversal of given tree = [1, 2, 3, 6]\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-14512.jpg\" alt=\"\"></p>\n\n<pre><code>Preorder traversal of given tree = [1, 2, 3]\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1 -1\n1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1\n1 2 5 3 4\n</code></pre>\n\n<h5>Explanation of Sample Output 2 :</h5>\n\n<pre><code>In test case 1, there is only one node, so Pre-Order traversal will be only [1].\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-14513.jpg\" alt=\"\"></p>\n\n<pre><code>Preorder traversal of given tree = [1, 2, 5, 3, 4]\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 112,
        "link": "https://www.codingninjas.com/codestudio/problems/preorder-traversal_3838888?topList=striver-sde-sheet-problems",
        "title": "Preorder Traversal",
        "solution": "/*\n    Time Complexity: O( N )\n    Space Complexity: O( 1 )\n    where \u2018N\u2019 is the total number of nodes in the given binary tree.\n*/\n// Morris Traversal for preOrder.\nvector<int> getPreOrderTraversal(TreeNode *root)\n{\n    // Create answer array to store traversal.\n    vector<int> answer;\n    // Base case.\n    if (root == NULL)\n    {\n    // 'PREDECESSOR' and 'CURRENT' will store predecessor and current nodes, respectively.\n    TreeNode *current, *predecessor;\n    // Initialize current node as 'ROOT'.\n    current = root;\n    // Run a loop until 'CURRENT' != NULL.\n    while (current != NULL)\n    {\n        if (current->left == NULL)\n        {\n            // Add current node data to answer.\n            answer.push_back(current->data);\n            // Move to right child of current.\n            current = current->right;\n        }\n        else\n        {\n            // Find predecessor of current node.\n            predecessor = current->left;\n            while (predecessor->right && predecessor->right != current)\n            {\n                predecessor = predecessor->right;\n            }\n            /*\n                If the right child of predecessor already points to\n                Current node then set right child as NULL and\n                Move to right subtree of current.\n            */\n            if (predecessor->right == current)\n            {\n                predecessor->right = NULL;\n                current = current->right;\n            }\n            else\n            {\n                // Add data of currrent node to answer.\n                answer.push_back(current->data);\n                // Set right subtree of predecessor as 'CURRENT'.\n                predecessor->right = current;\n                // Move to left subtree of 'CURRENT'.\n                current = current->left;\n            }\n        }\n    }\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-39-n-39-nodes-where-the-nodes-have-integer-values-your-task-is-to-find-the-post-order-traversal-of-the-given-binary-tree\">You have been given a Binary Tree of 'N' nodes, where the nodes have integer values. Your task is to find the Post-Order traversal of the given binary tree.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-14509.jpg\" alt=\"\"></p>\n\n<pre><code>The Postorder traversal will be [5, 2, 3, 7, 6, 4, 1].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases.\n\nThe first and only line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The input for the tree is depicted in the below image:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-14510.jpg\" alt=\"\"></p>\n\n<pre><code>1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The above format was just to provide clarity on how the input is formed for a given tree. The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a vector containing the Post-Order traversal of a given binary tree.\n\nThe first and only line of output of each test case prints 'N' single space-separated integers denoting the node's values in Post-Order traversal.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 3000\n0 &lt;= data &lt;= 10^9     \n\nWhere 'data' denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1  6 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2 6 3 1\n2 3 1\n</code></pre>\n\n<h5>Explanation of Sample Output 1 :</h5>\n\n<pre><code> In test case 1, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-14511.jpg\" alt=\"\"></p>\n\n<pre><code>Postorder traversal of given tree = [2, 6, 3, 1]\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-14512.jpg\" alt=\"\">    </p>\n\n<pre><code>Postorder traversal of given tree = [2, 3, 1]\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1 -1\n1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1\n5 3 2 4 1\n</code></pre>\n\n<h5>Explanation of Sample Output 2 :</h5>\n\n<pre><code>In test case 1, there is only one node, so Post-Order traversal will be only [1].\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-14513.jpg\" alt=\"\"></p>\n\n<pre><code>Postorder traversal of given tree = [5, 3, 2, 4, 1]\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 113,
        "link": "https://www.codingninjas.com/codestudio/problems/postorder-traversal_3839614?topList=striver-sde-sheet-problems",
        "title": "Postorder Traversal",
        "solution": "/*\n    Time Complexity: O( N )\n    Space Complexity: O( 1 )\n    where \u2018N\u2019 is the total number of nodes in the given binary tree.\n*/\n// Morris Traversal for inOrder.\nvector<int> getPostOrderTraversal(TreeNode *root)\n{\n    // Create answer array to store traversal.\n    vector<int> answer;\n    // Base case.\n    if (root == NULL)\n    }\n    // 'PREDECESSOR' and 'CURRENT' will store predecessor and current nodes, respectively.\n    TreeNode *current, *predecessor;\n    // Initialize current node as 'ROOT'.\n    current = root;\n    // Run a loop until 'CURRENT' != NULL.\n    while (current != NULL)\n    {\n        // Check if right subtree of node is NULL instead of left.\n        if (current->right == NULL)\n        {\n            // Add current node data to 'ANSWER'.\n            answer.push_back(current->data);\n            // Move to left child of current.\n            current = current->left;\n        }\n        else\n        {\n            // Find predecessor.\n            predecessor = current->right;\n            while (predecessor->left != NULL && predecessor->left != current)\n            {\n                predecessor = predecessor->left;\n            }\n            /*\n                If the left child of predecessor already points to\n                Current node then set left child as NULL and\n                Move to left subtree of current.\n            */\n            if (predecessor->left == current)\n            {\n                predecessor->left = NULL;\n                current = current->left;\n            }\n            else\n            {\n                // Add data of currrent node to answer.\n                answer.push_back(current->data);\n                // Set right subtree of predecessor as current.\n                predecessor->left = current;\n                // Move to right subtree of current.\n                current = current->right;\n            }\n        }\n    }\n    // Reverse all elements of 'ANSWER' array.\n    reverse(answer.begin(), answer.end());\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-find-the-left-view-of-the-binary-tree-the-left-view-of-a-binary-tree-is-the-set-of-all-nodes-that-are-visible-when-the-binary-tree-is-viewed-from-the-left-side\">You have been given a binary tree of integers. You are supposed to find the left view of the binary tree. The left view of a binary tree is the set of all nodes that are visible when the binary tree is viewed from the left side.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/leftview_0-6345.png\" alt=\"example\"></p>\n\n<pre><code>The left view of the above binary tree is  {5, 7, 14, 25}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the left view of the given binary tree separated by a single space.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10^5 and data!=-1\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3 4 -1 -1 -1 \n2 8 7 -1 5 -1 -1 1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3 4\n2 8 5 1\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, node 3 and node 4 are visible when the binary tree is viewed from the left.\n\nFor the second test case, nodes 2, 8, 5, 1 are visible when the binary tree is viewed from the left.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 3 5 12 -1 8 -1 -1 -1 -1 -1 \n9 6 3 -1 -1 4 8 -1 -1 -1 -1 \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 3 12\n9 6 4\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, nodes 1, 3, 12 are visible when the binary tree is viewed from the left.\n\nFor the second test case, nodes 9, 6, 4 are visible when the binary tree is viewed from the left.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 114,
        "link": "https://www.codingninjas.com/codestudio/problems/left-view-of-a-binary-tree_920519?topList=striver-sde-sheet-problems",
        "title": "Left View Of a Binary Tree",
        "solution": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(N)\n    Where N is the number of nodes in the Binary Tree.\n*/\nvector<int> getLeftView(TreeNode<int> *root)\n{\n    //    For storing the left view.\n    vector<int> leftView;\n    if (root == NULL)\n    {\n        return leftView;\n    }\n    queue<TreeNode<int> *> level;\n    //    Push the root in the queue.\n    level.push(root);\n    int leftMostNode;\n    while (level.empty() == false)\n    {\n        //    Get the size of the current level.\n        int queueSize = level.size();\n        //    Traverse all nodes of the current level.\n        for (int i = 0; i < queueSize; i++)\n        {\n            //    Pop the node from the front of the queue.\n            TreeNode<int> *curr = level.front();\n            level.pop();\n            //    Store the left most node of the current level.\n            if (i == 0)\n            {\n                leftMostNode = curr->data;\n            }\n            //    Push the left child into the queue.\n            if (curr->left != NULL)\n            {\n                level.push(curr->left);\n            }\n            //    Push the right child into the queue.\n            if (curr->right != NULL)\n            {\n                level.push(curr->right);\n            }\n        }\n        //    Store the left most node of the current level in the array.\n        leftView.push_back(leftMostNode);\n    }\n    //    Return the left view of the given binary tree.\n    return leftView;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-binary-tree-print-its-bottom-view-from-left-to-right-assume-the-left-and-the-right-child-make-a-45-degree-angle-with-the-parent\">Given a binary tree, print its bottom view from left to right. Assume, the left and the right child make a 45-degree angle with the parent.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-in-which-each-parent-node-has-at-most-two-children\">A binary tree is a tree in which each parent node has at most two children.</h4>\n\n<h4 id=\"a-node-will-be-in-the-bottom-view-if-it-is-the-bottom-most-node-at-its-horizontal-distance-from-the-root\">A node will be in the bottom-view if it is the bottom-most node at its horizontal distance from the root.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The horizontal distance of the root from itself is 0. The horizontal distance of the right child of the root node is 1 and the horizontal distance of the left child of the root node is -1. \n\n2. The horizontal distance of node 'n' from root = horizontal distance of its parent from root + 1, if node 'n' is the right child of its parent.\n\n3. The horizontal distance of node 'n' from root = horizontal distance of its parent from the root - 1, if node 'n' is the left child of its parent.\n\n4. If more than one node is at the same horizontal distance and is the bottom-most node for that horizontal distance, including the one which is more towards the right.\n\n5. You are not required to print the output explicitly, it has already been taken care of. Just implement the function and return the answer, which is the sequence of nodes from left to right in the bottom view.\n</code></pre>\n\n<p>For example, for the given Binary Tree\n<img src=\"https://files.codingninjas.in/first-5997.jpg\" alt=\"alt text\"></p>\n\n<pre><code>Below is the bottom view of the binary tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-5-5998.jpg\" alt=\"alt text\"></p>\n\n<pre><code>1 is the root node, so its horizontal distance = 0.\nSince 2 lies to the left of 0, its horizontal distance = 0-1= -1\n3 lies to the right of 0, its horizontal distance = 0+1 = 1\nSimilarly, horizontal distance of 4 = Horizontal distance of 2 - 1= -1-1=-2\nHorizontal distance of 5 = Horizontal distance of 2 + 1=  -1+1 = 0\nHorizontal distance of 6 = 1-1 =0\nHorizontal distance of 7 = 1+1 = 2\n\nThe bottom-most node at a horizontal distance of -2 is 4.\nThe bottom-most node at a horizontal distance of -1 is 2.\nThe bottom-most node at a horizontal distance of 0 is 5 and 6. However, 6 is more towards the right, so 6 is included.\nThe bottom-most node at a horizontal distance of 1 is 3.\nThe bottom-most node at a horizontal distance of 2 is 7.\n\nHence, the bottom view would be 4 2 6 3 7\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<p>Example :</p>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, the bottom view of the binary tree will be printed on a separate line with all the nodes included in the bottom view separated by a single space.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= DATA &lt;= 10^9\n\n Time Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample input 1 :</h4>\n\n<pre><code>2\n1 2 3 -1 -1 5 6 7 8 -1 -1 -1 -1 -1 -1\n20 8 22 5 3 -1 25 -1 -1 10 14 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h4>Sample output 1 :</h4>\n\n<pre><code>7 5 8 6\n5 10 3 14 25\n</code></pre>\n\n<h4>Explanation of sample input 1 :</h4>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/aa-6000.jpg\" alt=\"alt text\"></p>\n\n<pre><code>As shown in the above figure,\n\n1 is the root node, so its horizontal distance = 0.\nSince 2 lies to the left of 0, its horizontal distance = 0-1= -1\n3 lies to the right of 0, its horizontal distance = 0+1 = 1\nSimilarly, horizontal distance of 5 = Horizontal distance of 3 - 1= 1-1= 0\nHorizontal distance of 6 = Horizontal distance of 3 + 1=  1+1 = 2\nHorizontal distance of 7 = 0-1 =-1\nHorizontal distance of 8 = 0+1 = 1\n\nThe bottom-most node at a horizontal distance of -1 is 7.\nThe bottom-most node at a horizontal distance of 0 is 5.\nThe bottom-most node at a horizontal distance of 1 is 8.\nThe bottom-most node at a horizontal distance of 2 is 6.\n\nHence, the bottom view would be 7 5 8 6.\n\nTest case 2:\n20 is the root node, so its horizontal distance = 0.\nSince 8 lies to the left of 20, its horizontal distance = 0-1= -1\n22 lies to the right of 20, its horizontal distance = 0+1 = 1\nSimilarly, horizontal distance of 5 = Horizontal distance of 8 - 1= -1-1= -2\nHorizontal distance of 3 = Horizontal distance of 8 + 1=  -1+1 = 0\nHorizontal distance of 25 = 1+1 = 2\nHorizontal distance of 10 = 0-1 = -1\nHorizontal distance of 14 = 0+1 = 1\n\nThe bottom-most node at a horizontal distance of -2 is 5.\nThe bottom-most node at a horizontal distance of -1 is 10.\nThe bottom-most node at a horizontal distance of 0 is 3.\nThe bottom-most node at a horizontal distance of 1 is 14.\nThe bottom-most node at a horizontal distance of 2 is 25.\n\nHence, the bottom view would be  5 10 3 14 25\n</code></pre>\n\n<h4>Sample input 2 :</h4>\n\n<pre><code>2 \n1 2 3 4 -1 6 7 -1 -1 -1 8 -1 -1 -1 -1 \n1 5 -1 6 -1 7 -1 -1 -1 \n</code></pre>\n\n<h4>Sample output 2 :</h4>\n\n<pre><code>4 2 6 8 7\n7 6 5 1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 115,
        "link": "https://www.codingninjas.com/codestudio/problems/bottom-view-of-binary-tree_893110?topList=striver-sde-sheet-problems",
        "title": "Bottom View Of Binary Tree",
        "solution": "/* \n    Time complexity: O(N*log(N))\n    Space complexity: O(N)\n    Where \u2018N\u2019 is the number of nodes in the binary tree.\n*/\nvector<int> bottomView(BinaryTreeNode<int> *root) {\n    // Horizontal distance of the root is initialised to 0.\n    int horizontalDistance = 0;\n    // Map with key as horzontal distance and value as the tree node.\n    map<int, BinaryTreeNode<int> *> mp;\n    queue<pair<BinaryTreeNode<int> *, int>> q;\n    while (!q.empty()) {\n        pair<BinaryTreeNode<int> *, int> p = q.front();\n        q.pop();\n        // Update the value for every horizontal distance.\n        mp[p.second] = p.first;\n        // If left child is present, push it.\n        if (p.first->left != NULL) {\n            q.push({p.first->left, p.second - 1});\n        }\n        // If right child is present, push it.\n        if (p.first->right != NULL) {\n            q.push({p.first->right, p.second + 1});\n        }\n    }\n    vector<int> answer;\n    // Store all final set of nodes in the answer vector.\n    for (auto i = mp.begin(); i != mp.end(); i++) {\n        answer.push_back(i->second->data);\n    }\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-tree-of-integers-you-are-supposed-to-return-the-top-view-of-the-given-binary-tree-the-top-view-of-the-binary-tree-is-the-set-of-nodes-that-are-visible-when-we-see-the-tree-from-the-top\">You are given a Binary Tree of integers. You are supposed to return the top view of the given binary tree. The Top view of the binary tree is the set of nodes that are visible when we see the tree from the top.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/top_view-5246.jpg\" alt=\"Example\"></p>\n\n<pre><code>The top view of the tree will be {10, 4, 2, 1, 3, 6}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases. \n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the vector/list of all the elements of the top view of the given tree.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 1000\n0 &lt;= data &lt;= 10^6 and data != -1\n\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and 'data' is the value of the binary tree node.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>8 4 2 1 3 7\n2 1 3\n</code></pre>\n\n<h5>Explanation of Sample Output 1:</h5>\n\n<pre><code> In test case 1, \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/topview-5245.jpg\" alt=\"Example\"></p>\n\n<pre><code>From left to right, the top view of the tree will be {8,4,2,1,3,7}. Where 9,5 and 6 will be hidden when we see from the top of the tree.\n\nIn test case 2, from left to right, the top view of the tree will be {2,1,3} as there are only three nodes. There is nothing to hide.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n5 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>4 2 1 3 6\n5\n</code></pre>\n\n<h5>Explanation of Sample Output 2:</h5>\n\n<pre><code> In test case 1,  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/topview-10607.png\" alt=\"Example\"></p>\n\n<pre><code>From left to right, the top view of the tree will be {4,2,1,3,6}. Where 7 and 5 will be hidden when we see from the top of the tree.\n\nIn test case 2, There is only one node and thus the top view of the tree will be {5}.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 116,
        "link": "https://www.codingninjas.com/codestudio/problems/top-view-of-the-tree_799401?topList=striver-sde-sheet-problems",
        "title": "Top View Of Binary Tree",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the given binary tree.\n*/\n#include <queue>\nvoid getBreadth(TreeNode<int> *root, int hrDistance, int &minLeft, int &maxRight) { \n    // If root is null then return.\n    if (root == NULL){\n        return;\n    }\n    // Recur for the left subtree.\n    // Recur for the right subtree.\n    getBreadth(root->right, hrDistance + 1, minLeft, maxRight);\n    // Update the 'minLeft' and 'maxRight' with the horizontal distance of the current node.\n    minLeft = min(minLeft, hrDistance);\n    maxRight = max(maxRight, hrDistance);\n}\nvector<int> getTopView(TreeNode<int> *root) {\n    // For storing top view element\n    vector<int> topView;\n    // If root is null then return top view.\n    if (root == NULL) {\n        return topView;\n    }\n    // To store the minimum and maximum horizontal distance.\n    int minLeft = 0, maxRight = 0;\n    // Get the minimum and maximum horizontal distance.\n    getBreadth(root, 0, minLeft, maxRight);\n    // To store the nodes.\n    vector<int> visited(maxRight - minLeft + 1, -1);\n    // Offset value.\n    int offset = abs(minLeft);\n    // For iterating level by level.\n    queue<pair<TreeNode<int> *, int>> level;\n    // Append root to the level with 0 horizontal distance.\n    level.push({root, 0});\n    // Iterate untill level does not become empty.\n    while (level.size() != 0) {\n        // Get total number of node at current level.\n        int levelSize = level.size();\n        while (levelSize != 0){\n            // Get front of the queue.\n            pair<TreeNode<int> *, int> curr = level.front();\n            level.pop();\n            // Get the horizontal distance of curr node.\n            int hrDistance = curr.second;\n            // Get current node.\n            TreeNode<int> *currNode = curr.first;\n            // Check whether hDistance is visited or not. If not visited then only it will be seen by the top of the tree.\n            if (visited[hrDistance + offset] == -1) {\n                //  Make it visited.\n                visited[hrDistance + offset] = currNode->val;\n            }\n            // Append left child if it exist with horizontal distance one less than currNode.\n            if (currNode->left != NULL) {\n                level.push({currNode->left, hrDistance - 1});\n            }\n            // Append right child if it exist with horizontal distance one more than currNode.\n            if (currNode->right != NULL) {\n                level.push({currNode->right, hrDistance + 1});\n            }\n            levelSize = levelSize - 1;\n        }\n    }\n    // Now visited have the element which can be the view from the top of the tree.\n    for (auto x : visited) {\n        if (x != -1) {\n            topView.push_back(x);\n        }\n    }\n    // Return the answer sequence of nodes.\n    return topView;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-39-n-39-nodes-where-the-nodes-have-integer-values-your-task-is-to-find-the-ln-order-pre-order-and-post-order-traversals-of-the-given-binary-tree\">You have been given a Binary Tree of 'N' nodes, where the nodes have integer values. Your task is to find the ln-Order, Pre-Order, and Post-Order traversals of the given binary tree.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tt1-6639.jpg\" alt=\"Binary - Tree1\"></p>\n\n<pre><code>The Inorder traversal will be [5, 3, 2, 1, 7, 4, 6].\nThe Preorder traversal will be [1, 3, 5, 2, 4, 7, 6].\nThe Postorder traversal will be [5, 2, 3, 7, 6, 4, 1].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases. \n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The input for the tree is depicted in the below image: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tt2-6640.jpg\" alt=\"BT - 2\"></p>\n\n<pre><code>1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The above format was just to provide clarity on how the input is formed for a given tree. The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a vector/list of vector/list containing all three traversals (In-Order, Pre-Order, and Post-Order) in each vector/list in the same order.\n\nThe first line of output of each test case prints 'N' single space-separated integers denoting the node's values in In-Order traversal.\n\nThe second line of output of each test case prints 'N' single space-separated integers denoting the node's values in Pre-Order traversal.\n\nThe third and the last line of output of each test case prints 'N' single space-separated integers denoting the node's values in Post-Order traversal.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n0 &lt;= data &lt;= 10^9   \n\nWhere 'data' denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1  6 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2 1 3 6 \n1 2 3 6 \n2 6 3 1\n2 1 3 \n1 2 3 \n2 3 1\n</code></pre>\n\n<h5>Explanation of Sample Output 1 :</h5>\n\n<pre><code> In test case 1, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tt3-6641.jpg\" alt=\"BT - 3\"></p>\n\n<pre><code>Inorder traversal of given tree = [2, 1, 3, 6]\nPreorder traversal of given tree = [1, 2, 3, 6]\nPostorder traversal of given tree = [2, 6, 3, 1]\n\n In test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tt4-6642.jpg\" alt=\"BT - 4\"></p>\n\n<pre><code>Inorder traversal of given tree = [2, 1, 3]\nPreorder traversal of given tree = [1, 2, 3]\nPostorder traversal of given tree = [2, 3, 1]\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1 -1\n1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1\n1\n1\n5 2 3 1 4 \n1 2 5 3 4 \n5 3 2 4 1\n</code></pre>\n\n<h5>Explanation of Sample Output 2 :</h5>\n\n<pre><code>In test case 1, there is only one node and so all the three traversals will be the same having only one node.\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tt5-6643.jpg\" alt=\"BT - 5\"></p>\n\n<pre><code>Inorder traversal of given tree = [5, 2, 3, 1, 4]\nPreorder traversal of given tree = [1, 2, 5, 3, 4]\nPostorder traversal of given tree = [5, 3, 2, 4, 1]\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 117,
        "link": "https://www.codingninjas.com/codestudio/problems/tree-traversal_981269?topList=striver-sde-sheet-problems",
        "title": "Tree Traversals",
        "solution": "/*\n    Time Complexity  : O(N)\n    Space Complexity : O(1)\n    Where 'N' is the total number of nodes in the binary tree.\n*/\n#include <algorithm>\n// Morris Traversal for inOrder.\nvector<int> getInOrderTraversal(BinaryTreeNode<int> *root) {\n    // Create answer array to store traversal.\n    vector<int> answer;\n        return answer;\n    }\n    // 'PREDECESSOR' and 'CURRENT' will store predecessor and current nodes, respectively.\n    BinaryTreeNode<int> *current, *predecessor;\n    // Initialize 'CURRENT' node as root.\n    current = root;\n    // Run a loop until 'CURRENT' != NULL.\n    while (current != NULL) {\n        if (current->left == NULL) {\n            answer.push_back(current->data);\n            current = current->right;\n        }\n        else {\n            // Find the rightmost node on the left subtree of current.\n            predecessor = current->left;\n            while (predecessor->right != NULL && predecessor->right != current) {\n                predecessor = predecessor->right;\n            }\n            if (predecessor->right == NULL) {\n                /*\n                    Make a link between predecessor and current node\n                    So that we have a path to come back to current\n                    When we have traversed the whole left subtree.\n                */\n                predecessor->right = current;\n                current = current->left;\n            }\n            else {\n                /*\n                    If right node of predecessor is not NULL then it\n                    Means we have traversed the whole left subtree.\n                    So we unlink the connection between current and predecessor\n                    And move to right node of current.\n                */\n                predecessor->right = NULL;\n                answer.push_back(current->data);\n                current = current->right;\n            }\n        }\n    }\n    return answer;\n}\n// Morris Traversal for preOrder.\nvector<int> getPreOrderTraversal(BinaryTreeNode<int> *root) {\n    // Create answer array to store traversal.\n    vector<int> answer;\n    // Base case.\n    if (root == NULL) {\n        return answer;\n    }\n    // 'PREDECESSOR' and 'CURRENT' will store predecessor and current nodes, respectively.\n    BinaryTreeNode<int> *current, *predecessor;\n    // Initialize current node as 'ROOT'.\n    current = root;\n    // Run a loop until 'CURRENT' != NULL.\n    while (current != NULL)\n    {\n        if (current->left == NULL)\n        {\n            // Add current node data to answer.\n            answer.push_back(current->data);\n            // Move to right child of current.\n            current = current->right;\n        }\n        else\n        {\n            // Find predecessor of current node.\n            predecessor = current->left;\n            while (predecessor->right && predecessor->right != current) {\n                predecessor = predecessor->right;\n            }\n            /*\n                If the right child of predecessor already points to\n                Current node then set right child as NULL and\n                Move to right subtree of current.\n            */\n            if (predecessor->right == current) {\n                predecessor->right = NULL;\n                current = current->right;\n            }\n            else {\n                // Add data of currrent node to answer.\n                answer.push_back(current->data);\n                // Set right subtree of predecessor as 'CURRENT'.\n                predecessor->right = current;\n                // Move to left subtree of 'CURRENT'.\n                current = current->left;\n            }\n        }\n    }\n    return answer;\n}\n// Morris Traversal for postOrder.\nvector<int> getPostOrderTraversal(BinaryTreeNode<int> *root) {\n    // Create answer array to store traversal.\n    vector<int> answer;\n    // Base case.\n    if (root == NULL) {\n        return answer;\n    }\n    // 'PREDECESSOR' and 'CURRENT' will store predecessor and current nodes, respectively.\n    BinaryTreeNode<int> *current, *predecessor;\n    // Initialize current node as root.\n    current = root;\n    // Run a loop until 'CURRENT' != NULL.\n    while (current != NULL)\n    {\n        // Check if right subtree of node is NULL instead of left.\n        if (current->right == NULL)\n        {\n            // Add current node data to 'ANSWER'.\n            answer.push_back(current->data);\n            // Move to left child of current.\n            current = current->left;\n        }\n        else\n        {\n            // Find predecessor.\n            predecessor = current->right;\n            while (predecessor->left != NULL && predecessor->left != current) {\n                predecessor = predecessor->left;\n            }\n            /*\n                If the left child of predecessor already points to\n                Current node then set left child as NULL and\n                Move to left subtree of current.\n            */\n            if (predecessor->left == current) {\n                predecessor->left = NULL;\n                current = current->left;\n            }\n            else {\n                // Add data of currrent node to answer.\n                answer.push_back(current->data);\n                // Set right subtree of predecessor as current.\n                predecessor->left = current;\n                // Move to right subtree of current.\n                current = current->right;\n            }\n        }\n    }\n    // Reverse all elements of 'ANSWER' array.\n    reverse(answer.begin(), answer.end());\n    // Return answer.\n    return answer;\n}\nvector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root)\n{\n    vector<vector<int>> result(3);\n    // Call function to get inOrder Traversal.\n    result[0] = getInOrderTraversal(root);\n    // Call function to get preOrder Traversal.\n    result[1] = getPreOrderTraversal(root);\n    // Call function to get postOrder Traversal.\n    result[2] = getPostOrderTraversal(root);\n    // Return all 3 tree traversals.\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-binary-tree-return-the-vertical-order-traversal-of-the-values-of-the-nodes-of-the-given-tree\">Given a binary tree, return the vertical order traversal of the values of the nodes of the given tree.</h4>\n\n<h4 id=\"for-each-node-at-position-x-y-x-1-y-1-will-be-its-left-child-position-while-x-1-y-1-will-be-the-right-child-position\">For each node at position (X, Y), (X-1, Y-1) will be its left child position while (X+1, Y-1) will be the right child position.</h4>\n\n<h4 id=\"running-a-vertical-line-from-x-infinity-to-x-infinity-now-whenever-this-vertical-line-touches-some-nodes-we-need-to-add-those-values-of-the-nodes-in-order-starting-from-top-to-bottom-with-the-decreasing-y-coordinates\">Running a vertical line from X = -infinity to X = +infinity, now whenever this vertical line touches some nodes, we need to add those values of the nodes in order starting from top to bottom with the decreasing \u2018Y\u2019 coordinates.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If two nodes have the same position, then the value of the node that is added first will be the value that is on the left side.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the binary tree in the image below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree-5037.png\" alt=\"alt text\"></p>\n\n<pre><code>The vertical order traversal will be {2, 7, 5, 2, 6, 5, 11, 4, 9}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>For example taking a tree:\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the vertical order traversal of the given binary tree separated by single spaces.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 100\n0 &lt;= 'N' &lt;= 3000\n0 &lt;= 'VAL' &lt;= 10^5\n\nWhere 'VAL' is the value of any binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 -1 -1 -1 -1 -1\n1 -1 2 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>4 2 1 3 \n1 2 \n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the vertical order traversal of the given binary tree will be {{4}, {2}, {1}, {3}}.\n\nFor the second test case, the vertical order traversal of the given binary tree will be {{1}, {2}}.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2 1 -1 -1 -1\n0 1 2 4 5 3 6 -1 -1 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 2\n4 1 7 0 5 3 2 6 \n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, the vertical order traversal of the given binary tree will be {{1}, {2}}.\n\nFor the second test case, the vertical order traversal of the given binary tree will be {{4}, {1, 7}, {0, 5, 3}, {2}, {6}}.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 118,
        "link": "https://www.codingninjas.com/codestudio/problems/vertical-order-traversal_920533?topList=striver-sde-sheet-problems",
        "title": "Vertical Order Traversal",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the given binary tree.\n*/\n#include <queue>\nvoid getBreadth(TreeNode<int> *root, int hrDistance, int &minLeft, int &maxRight)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    // Recur for the left subtree.\n    // Recur for the right subtree.\n    getBreadth(root->right, hrDistance + 1, minLeft, maxRight);\n    // Update the 'minLeft' and 'maxRight' with the horizontal distance of the current node.\n    minLeft = min(minLeft, hrDistance);\n    maxRight = max(maxRight, hrDistance);\n}\nvector<int> verticalOrderTraversal(TreeNode<int> *root)\n{\n    // Store the final result.\n    vector<int> result;\n    // Base case\n    if (root == NULL)\n    {\n        return result;\n    }\n    //  To store the minimum and maximum horizontal distance.\n    int minLeft = 0, maxRight = 0;\n    //  Get the minimum and maximum horizontal distance.\n    getBreadth(root, 0, minLeft, maxRight);\n    // Create a map and store vertical order in map.\n    vector<vector<int>> store(maxRight - minLeft + 1, vector<int>());\n    // Initial horizontal distance.\n    int hd = 0;\n    int offset = abs(minLeft);\n    // Every pair of queue contains node and horizontal distance with respect to the root node.\n    queue<pair<TreeNode<int> *, int>> level;\n    level.push(make_pair(root, hd));\n    while (level.empty() == false)\n    {\n        // Pop element from the queue.\n        pair<TreeNode<int> *, int> temp = level.front();\n        level.pop();\n        hd = temp.second;\n        TreeNode<int> *node = temp.first;\n        // Insert the value of current node in the vector of map.\n        store[hd + offset].push_back(node->data);\n        // For the left subtree, we pass the HD as the Horizontal distance of root minus 1.\n        if (node->left != NULL)\n        {\n            level.push(make_pair(node->left, hd - 1));\n        }\n        // For the right subtree, we pass the HD as Horizontal Distance of root plus 1.\n        if (node->right != NULL)\n        {\n            level.push(make_pair(node->right, hd + 1));\n        }\n    }\n    for (int i = 0; i < store.size(); i++)\n    {\n        for (int j = 0; j < store[i].size(); ++j)\n        {\n            result.push_back(store[i][j]);\n        }\n    }\n    // Return the vertical order traversal of the given binary tree.\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-tree-with-n-number-of-nodes-and-a-node-x-your-task-is-to-print-the-path-from-the-root-node-to-the-given-node-x\">You are given a binary tree with \u2018N\u2019 number of nodes and a node \u2018X\u2019. Your task is to print the path from the root node to the given node \u2018X\u2019.</h4>\n\n<h4 id=\"a-binary-tree-is-a-hierarchical-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree is a hierarchical data structure in which each node has at most two children.</h4>\n\n<p><img src=\"https://files.codingninjas.in/tree21-14885.png\" alt=\"\"></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Here, for \u2018X \u2019= 7, the output will be 1 3 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an Integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow. \n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example below. \n\nThe second line of each test case contains a single integer \u2018X\u2019, denoting the value of the node you have to find.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-14882.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a list of integers denoting the path from the root to the node \u2018X\u2019.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n\nNo two nodes in the tree have the same data values.\n\nYou can assume that there always exists a node with data value \u2018X\u2019 in the given tree.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000\n1 &lt;= X &lt;= N\nAll the node values will be in a range from 1 to N.\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n7\n3 2 1 -1 -1 -1 -1\n1\n</code></pre>\n\n<h5>Sample output 1 :</h5>\n\n<pre><code>1 3 7\n3 1\n</code></pre>\n\n<h5>Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree21-14885.png\" alt=\"\"></p>\n\n<pre><code>Here, for \u2018X \u2019= 7, the output will be 1 3 7.\n\n\nFor the second test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree22-14886.png\" alt=\"\"></p>\n\n<pre><code>Here, for \u2018X \u2019= 1, the output will be 3 1.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 3 -1 -1 4 2 -1 -1 -1\n1\n4 -1 1 2 -1 -1 3 -1 -1\n1\n</code></pre>\n\n<h5>Sample output 2 :</h5>\n\n<pre><code>1\n4 1 \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 119,
        "link": "https://www.codingninjas.com/codestudio/problems/path-in-a-tree_3843990?topList=striver-sde-sheet-problems",
        "title": "Path In A Tree",
        "solution": "/*\n    Time Complexity:  O(N).\n    Space Complexity: O(N).\n    Where 'N' is the number of nodes in the tree.\n*/\nbool isPresent(TreeNode<int> *temp, int x, vector<int> &ans)\n{\n    // Invalid node.\n    if (temp == NULL)\n    {\n        return false;\n    }\n    // Found the node which have data value equal to 'X'.\n        return true;\n    }\n    // Check if the left subtree contains 'X' or not.\n    if (isPresent(temp->left, x, ans))\n    {\n        ans.push_back(temp->left->data);\n        return true;\n    }\n    // Check if the right subtree contains 'X' or not.\n    if (isPresent(temp->right, x, ans))\n    {\n        ans.push_back(temp->right->data);\n        return true;\n    }\n    // If the node is not present in either of the subtree.\n    return false;\n}\nvector<int> pathInATree(TreeNode<int> *root, int x)\n{\n    vector<int> ans;\n    isPresent(root, x, ans);\n    ans.push_back(root->data);\n    // Reverse the vector.\n    reverse(ans.begin(), ans.end());\n    // Finally return the vector.\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-return-the-maximum-width-of-the-given-binary-tree-the-maximum-width-of-the-tree-is-the-maximum-width-among-all-the-levels-of-the-given-tree\">You have been given a Binary Tree of integers. You are supposed to return the maximum width of the given Binary Tree. The maximum width of the tree is the maximum width among all the levels of the given tree.</h4>\n\n<h4 id=\"the-width-of-one-level-is-defined-as-the-length-between-the-leftmost-and-the-rightmost-non-null-nodes-in-the-level-where-the-null-nodes-in-between-the-leftmost-and-rightmost-are-excluded-into-length-calculation\">The width of one level is defined as the length between the leftmost and the rightmost, non-null nodes in the level, where the null nodes in between the leftmost and rightmost are excluded into length calculation.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>The maximum width will be at the third level with the length of 3, i.e. {4, 5, 6}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The only line of input contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each input, print a single line that contains a single integer that denotes the maximum width for the given tree.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= 'N' &lt;= 5 * 10 ^ 5\n0 &lt;= 'DATA' &lt;= 10 ^ 6 and data != -1\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and 'DATA' is the value of the binary tree node.\n\nTime Limit: 1sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation of Sample Input 1 :</h5>\n\n<pre><code>The maximum width will be at the third level with the length of 3, i.e. {4, 5, 6}.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation of Sample Input 2 :</h5>\n\n<pre><code>The maximum width will be at the third level i.e. {2, 6, 9} and the fourth level with the length of 3, i.e. {5, 11, 4}. So the maximum width will be 3.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 120,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-width-in-binary-tree_763671?topList=striver-sde-sheet-problems",
        "title": "Maximum Width In Binary Tree",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the given binary tree.\n*/\nint getMaxWidth(TreeNode<int> *root)\n{\n    //  Base case.\n    if (root == NULL)\n    {\n        return 0;\n    }\n    //  For level order traversal.\n    queue<TreeNode<int> *> q;\n    int maxWidth = 0;\n    //  Iterate over level by level.\n    while (q.empty() == false)\n    {\n        //  Get the width of current level.\n        int currWidth = q.size();\n        //  Check, If the width of the current level is better than older?\n        if (maxWidth < currWidth)\n        {\n            maxWidth = currWidth;\n        }\n        //  Push all the children of the root node which are at the current level.\n        while (currWidth > 0)\n        {\n            //  Get the front of queue.\n            TreeNode<int> *currNode = q.front();\n            q.pop();\n            //  Push left child of currNode if exist.\n            if (currNode->left != NULL)\n            {\n                q.push(currNode->left);\n            }\n            //  Push right child of currNode if exist.\n            if (currNode->right != NULL)\n            {\n                q.push(currNode->right);\n            }\n            currWidth = currWidth - 1;\n        }\n    }\n    return maxWidth;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-return-the-level-order-traversal-of-the-given-tree\">You have been given a Binary Tree of integers. You are supposed to return the level order traversal of the given tree.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>The level order traversal will be {1,2,3,4,5,6,7}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all the nodes in level order traversal separated by a single space.\nFor each test case, print the output in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 1000\n0 &lt;= data &lt;= 10^6 and data != -1\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n1 3 -1 2 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 5 6 7\n1 2 3\n1 3 2\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code> For the first test case, {1} is at level 1 and {2,3} are at level 2 and {4,5,6} are at level 3 and {7} is at level 4. So combinations of all levels are {1, 2, 3 ,4, 5, 6, 7}.\n\nFor the second test case, {1} is at level 1 and {2,3} are at level 2. So combinations of level are {1, 2, 3}.\n\nFor the third test case, {1} is at level 1 and {3} is at level 2 and {2} is at level 3. So combinations of all levels are {1,3,2}.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1\n1 2 3 4 -1 5 6 -1 -1 -1 -1 -1 -1  \n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2 7 5 2 6 9 5 11 4\n1 2 3 4 5 6\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, {2} is at level 1 and {7,5} are at level 2 and {2,6,9} are at level 3 and {5,11,4} are at level 4. So combinations of all levels are {2, 7, 5, 2, 6, 9, 5, 11, 4}.\n\nFor the second test case, {1} is at level 1 and {2,3} are at level 2 and {4,5,6} are at level 3. So combinations of all levels are {1, 2, 3, 4, 5, 6}.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 121,
        "link": "https://www.codingninjas.com/codestudio/problems/level-order-traversal_796002?topList=striver-sde-sheet-problems",
        "title": "Level Order Traversal",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in Binary Tree\n*/\nvector<int> getLevelOrder(BinaryTreeNode<int> *root)\n{\n    vector<int> output;\n    //  If given tree is empty\n    if (root == NULL)\n    {\n        return output;\n    //  To traverse level by level\n    queue<BinaryTreeNode<int> *> level;\n    //  Append root to the queue\n    level.push(root);\n    //  Iterater until queue does not become empty\n    while (!level.empty())\n    {\n        //  Get the size of current level\n        int levelSize = level.size();\n        //  Visit all node which are at current level and append their children if they exist\n        while (levelSize != 0)\n        {\n            //  Get the front node from queue\n            BinaryTreeNode<int> *curr = level.front();\n            level.pop();\n            //  Store in output\n            output.push_back(curr->val);\n            //  Append left child into queue if it exist\n            if (curr->left != NULL)\n            {\n                level.push(curr->left);\n            }\n            //  Append right child into queue if it exist\n            if (curr->right != NULL)\n            {\n                level.push(curr->right);\n            }\n            levelSize = levelSize - 1;\n        }\n    }\n    //  Return the output\n    return output;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-the-inorder-traversal-and-level-order-traversal-of-a-binary-tree-of-integers-your-task-is-to-calculate-the-height-of-the-binary-tree-without-constructing-it\">You have been given the Inorder Traversal and Level Order Traversal of a Binary Tree of integers. Your task is to calculate the height of the Binary tree without constructing it.</h4>\n\n<h4 id=\"the-height-of-the-binary-tree-is-the-number-of-edges-in-the-longest-path-from-the-root-node-to-any-leaf-node-in-the-tree-in-case-the-tree-has-only-one-node-the-height-is-taken-to-be-0\">The height of the binary tree is the number of edges in the longest path from the root node to any leaf node in the tree. In case the tree has only one node, the height is taken to be 0.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer  \u2018N\u2019 denoting the number of nodes of the binary tree.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, denoting the Inorder traversal of the binary tree.\n\nThe third line of each test case contains \u2018N\u2019 single space-separated integers, denoting the Level Order traversal of the binary tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the height of the binary tree.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= inorder[i] &lt;= N\n1 &lt;= levelOrder[i] &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n5\n4 2 5 1 3\n1 2 3 4 5\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5>Explanation for Sample 1:</h5>\n\n<pre><code>The binary tree(rooted at node 1) represented by the above inorder and level order traversals is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-5549.png\" alt=\"alt text\"></p>\n\n<pre><code>We can see that the height of the above binary tree is 2.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n7\n7 4 2 1 5 3 6\n1 2 3 4 5 6 7\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 122,
        "link": "https://www.codingninjas.com/codestudio/problems/calculate-the-height-of-binary-tree-using-inorder-and-level-order-traversal_841416?topList=striver-sde-sheet-problems",
        "title": "Height of the Binary Tree From Inorder and Level Order Traversal",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    Where N is the total number of nodes in the binary tree.\n*/\ntypedef struct Node{\n    // Height stores the height of the current subtree.\n    int height;\n    int leftIndex;\n    int rightIndex;\n} \nNode;\nint heightOfTheTree(vector<int>& inorder, vector<int>& levelOrder, int N){\n    queue<Node> q;\n    Node init;\n    init.height = 0;\n    init.leftIndex = 0;\n    init.rightIndex = N - 1;\n    q.push(init);\n    int pos[N+1];\n    for(int i = 0; i < N; i++){\n        pos[inorder[i]] = i;\n    }\n    int maxHeight = 0;\n    for(int i = 0; i < N; i++){\n        int curr = levelOrder[i];\n        Node now = q.front();\n        q.pop();\n        // Position of levelOrder[i] in the inorder array. \n        int currPos = pos[levelOrder[i]];\n        // There is a left child present.\n        if(currPos > now.leftIndex){\n            Node newNode;\n            // Height will increase by 1 as we are descending 1 level downwards in the tree.\n            newNode.height = now.height + 1;\n            maxHeight = max(maxHeight, newNode.height);\n            // New borders of the left subtree in the inorder array.\n            newNode.leftIndex = now.leftIndex;\n            newNode.rightIndex = currPos - 1;\n            q.push(newNode);\n        }\n        // There is a right child present.\n        if(currPos < now.rightIndex){\n            Node newNode;\n            newNode.height = now.height + 1;\n            maxHeight = max(maxHeight, newNode.height);\n            // New borders of the right subtree in the inorder array.\n            newNode.leftIndex = currPos + 1;\n            newNode.rightIndex = now.rightIndex;\n            q.push(newNode);\n        }\n    }\n    return maxHeight;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-tree-you-are-supposed-to-return-the-length-of-the-diameter-of-the-tree\">You are given a Binary Tree. You are supposed to return the length of the diameter of the tree.</h4>\n\n<h4 id=\"the-diameter-of-a-binary-tree-is-the-length-of-the-longest-path-between-any-two-end-nodes-in-a-tree\">The diameter of a binary tree is the length of the longest path between any two end nodes in a tree.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The number of edges between two nodes represents the length of the path between them.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/diameterexplaination-6262.png\" alt=\"Example\"></p>\n\n<pre><code>Nodes in the diameter are highlighted. The length of the diameter, i.e., the path length, is 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"tree\"></p>\n\n<pre><code>For Example, the input for the tree depicted in the above image would be :\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print an integer that denotes the length of the diameter of the given binary tree.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10^5\n1 &lt;= data &lt;= 10^4\n\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and 'data' is the value of the binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 7 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5>Explanation of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1: The binary tree in the given test case will look like\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-9971.png\" alt=\"\"></p>\n\n<pre><code>The length of the diameter of the above tree is the length of the path between nodes 4 and 3, i.e., 4-&gt;2-&gt;1-&gt;3. Hence the output will be 3.\n\nTest Case 2: The binary tree in the given test case will look like\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-9972.png\" alt=\"\"></p>\n\n<pre><code>The length of the diameter of the above tree is the length of the path between nodes 2 and 3, i.e., 2.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n2 4 -1 5 -1 -1 -1\n1 4 2 -1 -1 -1 3 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 123,
        "link": "https://www.codingninjas.com/codestudio/problems/diameter-of-the-binary-tree_920552?topList=striver-sde-sheet-problems",
        "title": "Diameter Of Binary Tree",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the given binary tree.\n*/\nint getDiameter(TreeNode<int> *root, int &height)\n{\n    if (root == NULL)\n    {\n        // Height and diameter of an empty tree will be 0.\n        height = 0;\n        return 0;\n    }\n    int leftHeight = 0;\n    int rightHeight = 0;\n    // Recur for left subtree and get the height as well as diameter.\n    int leftDiameter = getDiameter(root->left, leftHeight);\n    // Recur for right subtree and get the height as well as diameter.\n    int rightDiameter = getDiameter(root->right, rightHeight);\n    // Update the height of the given binary tree.\n    height = max(leftHeight, rightHeight) + 1;\n    // Diameter of given binary tree.\n    int diameter = max(leftDiameter, max(rightDiameter, leftHeight + rightHeight));\n    return diameter;\n}\nint diameterOfBinaryTree(TreeNode<int> *root)\n{\n    // Initialize a variable to store the height of the of binary tree.\n    int height = 0;\n    // Recursive function to find diameter.\n    return getDiameter(root, height);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-binary-tree-you-need-to-check-if-it-is-a-height-balanced-binary-tree\">Given a binary tree. You need to check if it is a height-balanced binary tree.</h4>\n\n<h4 id=\"height-of-a-tree-is-the-maximum-number-of-nodes-in-a-path-from-the-node-to-the-leaf-node\">Height of a tree is the maximum number of nodes in a path from the node to the leaf node.</h4>\n\n<h4 id=\"an-empty-tree-is-a-height-balanced-tree-a-non-empty-binary-tree-is-a-height-balanced-binary-tree-if\">An empty tree is a height-balanced tree. A non-empty binary tree is a height-balanced binary tree if</h4>\n\n<h4 id=\"1-the-left-subtree-of-a-binary-tree-is-already-the-height-balanced-tree\">1. The left subtree of a binary tree is already the height-balanced tree.</h4>\n\n<h4 id=\"2-the-right-subtree-of-a-binary-tree-is-also-the-height-balanced-tree\">2. The right subtree of a binary tree is also the height-balanced tree.</h4>\n\n<h4 id=\"3-the-difference-between-heights-of-left-subtree-and-right-subtree-must-not-more-than-1\">3. The difference between heights of left subtree and right subtree must not more than \u20181\u2019.</h4>\n\n<h4 id=\"consider-this-binary-tree\">Consider this binary tree:</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-104-_li-6525.jpg\" alt=\"alt text\"></p>\n\n<pre><code>Consider subtree at Node ( 7 ) \nLeft subtree height is \u20180\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20180-0 = 0\u2019 and \u20180\u2019 is not more than \u20181\u2019 so subtree at Node ( 7 ) is a height-balanced binary tree. \nSame for subtrees at Nodes ( 5, 6 ). \n\nConsider subtree at Node ( 4 ) \nLeft subtree height is \u20181\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20181-0 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 4 ) is a height-balanced binary tree.\nSame for subtree at Node ( 3)\n\nConsider subtree at Node ( 2 ) \nLeft subtree height is \u20182\u2019 and right subtree height is \u20181\u2019, the absolute height difference is \u20182-1 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 2 ) is a height-balanced binary tree.\n\nConsider subtree at Node ( 1 ) \nLeft subtree height is \u20183\u2019 and right subtree height is \u20182\u2019, the absolute height difference is \u20183-2 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 1 ) is a height-balanced binary tree.\n\nBecause the root node ( 1 ) is a height-balanced binary tree, so the complete tree is height-balanced.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function and return \u2018True\u2019 or \u2018False\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return \u2018True\u2019 or \u2018False\u2019\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 is the number of nodes in the tree, and data denotes \u2018data\u2019 contained in the node of a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 -1 -1 -1 -1 5 -1 -1\n1 2 3 4 -1 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample output 1:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-107-6523.png\" alt=\"alt text\"></p>\n\n<pre><code>Consider the root  Node ( 1 ) \nLeft subtree height is \u20183\u2019 ( 1-&gt;2-&gt;4-&gt;5) and right subtree height is \u20181\u2019 ( 1-&gt;3), the absolute height difference is \u20182-1 = 2\u2019 and \u20182\u2019 is more than \u20181\u2019 so subtree at Node ( 1 ) is not a height-balanced binary tree.\nHence we return \u2018False\u2019.\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-106-6524.png\" alt=\"alt text\"></p>\n\n<pre><code>Consider the subtree at Node ( 4 ) \nLeft subtree height is \u20180\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20180-0 = 0\u2019 and \u20180\u2019 is not more than \u20181\u2019 so subtree at Node ( 4 ) is a height-balanced binary tree.\nSame for subtree at Node ( 5 ).\n\nConsider the subtree at Node ( 2 ) \nLeft subtree height is \u20181\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20181-0 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 2 ) is a height-balanced binary tree.\nSame for subtree at Node ( 3 ).\n\nConsider the subtree at Node ( 1 ) \nLeft subtree height is \u20182\u2019 (1-&gt;2-&gt;4) and right subtree height is \u20182\u2019 (1-&gt;3-&gt;5), the absolute height difference is \u20182-2 = 0\u2019 and \u20180\u2019 is not more than \u20181\u2019 so subtree at Node ( 1 ) is a height-balanced binary tree.\n\nHence root node (1) is a height-balanced binary tree that\u2019s why the complete tree is a height-balanced binary tree. \nHence we return \u2018True\u2019.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n1 2 3 4 5 -1 -1 -1 -1 6 -1 -1 -1 \n</code></pre>\n\n<h5>Sample output 2:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 124,
        "link": "https://www.codingninjas.com/codestudio/problems/is-height-balanced-binary-tree_975497?topList=striver-sde-sheet-problems",
        "title": "Is Height Balanced Binary Tree",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(N)\n    Where 'N' is number of nodes in binary tree.\n*/\nint helperMethod(BinaryTreeNode<int>* root){\n    // Base case.\n    if(!root){\n        return 0;\n    }\n    int leftValue = helperMethod(root->left);\n    int rightValue = helperMethod(root->right);\n    // If one of them is '-1' then child subtree are not balanced.\n        return -1;\n    }\n    // Allow only '0, -1, 1' height differencein 'left' child subtree height and 'right' subtree height.\n    if(abs(leftValue-rightValue) <= 1){\n        return max(leftValue, rightValue)+1;\n    }\n    // If left and right child subtree height more than '2'.\n    return -1;\n}\nbool isBalancedBT(BinaryTreeNode<int>* root){\n    // Base condition.\n    if(!root){\n        return true;\n    }\n    // If root tree is balanced.\n    if (helperMethod(root) != -1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-distinct-integers-and-two-nodes-x-and-y-you-are-supposed-to-return-the-lca-lowest-common-ancestor-of-x-and-y\">You have been given a Binary Tree of distinct integers and two nodes \u2018X\u2019 and \u2018Y\u2019. You are supposed to return the LCA (Lowest Common Ancestor) of \u2018X\u2019 and \u2018Y\u2019.</h4>\n\n<h4 id=\"the-lca-of-x-and-y-in-the-binary-tree-is-the-shared-ancestor-of-x-and-y-that-is-located-farthest-from-the-root\">The LCA of \u2018X\u2019 and \u2018Y\u2019 in the binary tree is the shared ancestor of \u2018X\u2019 and \u2018Y\u2019 that is located farthest from the root.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You may assume that given \u2018X\u2019 and \u2018Y\u2019 definitely exist in the given binary tree.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/lca_ex1-6383.png\" alt=\"Example\"></p>\n\n<pre><code>LCA of \u2018X\u2019 and \u2018Y\u2019 is highlighted in yellow colour.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases to be run. Then the test cases follows\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains two integers \u2018X\u2019 and \u2018Y\u2019 denoting the two nodes of the binary tree.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the LCA of the given binary tree nodes.\n\nFor each test case, print the output in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 100\n0 &lt;= 'N' &lt;= 3000\n0 &lt;= 'DATA' &lt;= 10^4\n\nWhere 'DATA' is a node value of the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>3\n1 2 3 4 7 -1 -1 -1 -1 -1 -1\n4 7\n1 2 3 -1 -1 -1 -1\n2 3\n4 3 -1 -1 -1\n4 3\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2\n1\n4\n</code></pre>\n\n<h5>Explanation of Sample Input 1 :</h5>\n\n<pre><code>The tree of the first test case is shown below.    \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testcase1-6263.png\" alt=\"Example\"></p>\n\n<pre><code>For the first test case, 2 is the common ancestor of 4 and 7, which is farthest from the root node. So, the LCA is 2.\n\nFor the second test case, 1 is the only common ancestor of nodes 2 and 3.\n\nFor the third test case, 4 is the only common ancestor of nodes 4 and 3.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n2 4 -1 5 -1 -1 -1\n4 5\n1 4 2 -1 -1 -1 3 -1 -1\n4 3\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>4\n1\n</code></pre>\n\n<h5>Explanation of Sample Input 2 :</h5>\n\n<pre><code>For the first test case, 4 is the only common ancestor of nodes 4 and 5.\n\nFor the second test case, 1 is the only common ancestor of nodes 4 and 3.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 125,
        "link": "https://www.codingninjas.com/codestudio/problems/lca-of-binary-tree_920541?topList=striver-sde-sheet-problems",
        "title": "LCA Of Binary Tree",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the given binary tree.\n*/\n//    Returns the LCA of \u2018X\u2019 and \u2018Y\u2019 or return -1 if it does not exist.\nint findLCA(TreeNode<int> *root, int x, int y)\n{\n    if (root == NULL)\n    {\n        //    LCA can't exist in an empty tree.\n        return -1;\n    }\n    {\n        //   The root node itself will be the LCA.\n        return root->data;\n    }\n    else\n    {\n        //    Recur to find the LCA in the left subtree.\n        int leftLCA = findLCA(root->left, x, y);\n        //    Recur to find the LCA in the right subtree.\n        int rightLCA = findLCA(root->right, x, y);\n        if (leftLCA != -1 && rightLCA != -1)\n        {\n            //    The root must be the LCA since both \u2018X\u2019 and \u2018Y\u2019 are present in two different subtrees.\n            return root->data;\n        }\n        else if (leftLCA != -1)\n        {\n            //    LCA exists in the left subtree.\n            return leftLCA;\n        }\n        else\n        {\n            //    LCA exists in the right subtree.\n            return rightLCA;\n        }\n    }\n}\nint lowestCommonAncestor(TreeNode<int> *root, int x, int y)\n{\n    return findLCA(root, x, y);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-binary-trees-with-39-n-39-and-39-m-39-nodes-respectively-you-need-to-return-true-if-the-two-trees-are-identical-otherwise-return-false\">You are given two binary trees with 'N' and 'M' nodes respectively. You need to return true if the two trees are identical. Otherwise, return false.</h4>\n\n<h4 id=\"below-is-the-example-and-explanation-of-identical-trees\">Below is the example and explanation of Identical trees.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code> For the trees given below:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-5496.png\" alt=\"example\"></p>\n\n<pre><code>The given trees are identical as:-\n1. The number of nodes in both trees is the same. \n2. The number of edges in both trees is the same. \n3. The data for root for both the trees is the same i.e 5. \n4. The data of root -&gt; left (root\u2019s left child) for both the trees is the same i.e 2.\n5. The data of root -&gt; right (root\u2019s right child) for both the trees is the same i.e 3.\n6. The data of root -&gt; right -&gt; left ( left child of root\u2019s right child) for both the trees is the same i.e 6.\n7. Nodes with data 2 and 6 are the leaf nodes for both the binary trees. \n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer T denoting the number of queries or test cases. \n\nThe first line of every test case contains elements in the level order form for the first binary tree. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nThe second line of every test case contains elements in the level order form for the second tree. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the level order input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print in a single line either \u201cTrue\u201d (if the two trees are identical) or \u201cFalse\u201d otherwise. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10^5\n0 &lt;= M &lt;= 10^5\n1 &lt;= Node Data &lt;= 10^9 \n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample input 1 :</h5>\n\n<pre><code>2\n5 2 3 -1 6 -1 -1 -1 -1\n5 2 3 -1 6 -1 -1 -1 -1\n1 -1 2 -1 -1\n1 2 -1 -1 -1  \n</code></pre>\n\n<h5>Sample output 1 :</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5>Explanation for Sample Input 1 :</h5>\n\n<pre><code>For test case 1: Refer to the example given above in the problem description.\n\nFor test case2: The trees given in the input can be represented as below:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example2-5498.png\" alt=\"example2\"></p>\n\n<pre><code>Although the following conditions satisfy:\n\nThe number of nodes in both trees is the same.\nThe number of edges in both trees is the same. \nThe data for root for both the trees is the same i.e 1.\n\nIt\u2019s visible from the pictorial representation that the trees are not identical. Reason being:\nIn Binary tree 1, root\u2019s right is NULL but it\u2019s not true for Binary tree 2. \nIn Binary tree 1, root\u2019s left is not NULL but it\u2019s not true for Binary tree 2. \n</code></pre>\n\n<h5>Sample input 2 :</h5>\n\n<pre><code>2\n4 9 -1 1 2 -1 -1 -1 -1\n4 9 -1 1 2 -1 -1 -1 -1\n6 2 3 4 5 7 8 -1 -1 -1 -1 -1 -1 -1 -1  \n6 2 3 4 5 8 7 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5>Sample output 2 :</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 126,
        "link": "https://www.codingninjas.com/codestudio/problems/identical-trees_799364?topList=striver-sde-sheet-problems",
        "title": "Check Identical Trees",
        "solution": "/*\n    Time complexity: O(min(M, N)) \n    Space complexity: O(min(H1, H2)\n    M and N are number of nodes and H1 and H2 are heights of binary tree 1 and binary tree 2 respectively.\n*/\nbool identicalTrees(BinaryTreeNode<int>* root1, BinaryTreeNode<int>* root2) {\n    // If both are NULL trees, they are identical.       \n    if(root1 == NULL && root2 == NULL){\n        return true;\n    }\n    if(root1 == NULL || root2 == NULL){\n        return false;\n    }\n    // Check if root's data of both the trees is same. \n    // Recursively check if left subtree and right subtree of both trees is identical. \n    // Return true only if all conditions satisfy. \n    return (root1->data == root2->data) && \n            identicalTrees(root1->left, root2->left) && \n            identicalTrees(root1->right, root2->right);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-39-n-39-nodes-where-the-nodes-have-integer-values-your-task-is-to-print-the-zigzag-traversal-of-the-given-tree\">You have been given a Binary Tree of 'N' nodes, where the nodes have integer values. Your task is to print the zigzag traversal of the given tree.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>In zigzag order, level 1 is printed from left to right fashion, level 2 is printed from right to left. and level 3 is printed from left to right again, and so on\u2026..\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-6886.jpg\" alt=\"1\"></p>\n\n<pre><code>The zigzag  traversal is [1, 4, 3, 5, 2, 7, 6]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the 'T' test cases follow.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-6887.jpg\" alt=\"2\"> </p>\n\n<pre><code>1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing all the nodes value in zigzag order traversal separated by a single space in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 100\n0 &lt;= 'N' &lt;= 10^3\n0 &lt;= 'NODES' &lt;= 10^9    \n\nWhere NODES represent any node value\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1  6 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 3 2 6\n1 3 2\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code> For the first test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-6888.jpg\" alt=\"3\"></p>\n\n<pre><code>zigzag traversal of given tree = [1, 3, 2, 6]\n\nFor the second test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-6889.jpg\" alt=\"4\"></p>\n\n<pre><code>ZigZag traversal of given tree = [1, 3, 2]\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 4 2 5 3\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-6890.jpg\" alt=\"5\"></p>\n\n<pre><code>ZigZag traversal of given tree = [1, 4, 2, 5, 3] \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 127,
        "link": "https://www.codingninjas.com/codestudio/problems/zig-zag-traversal_1062662?topList=striver-sde-sheet-problems",
        "title": "Binary Tree Zigzag Traversal",
        "solution": "/*\n    Time Complexity  : O(N)\n    Space Complexity : O(N)\n    Where N is the total number of nodes in the binary tree.\n*/\nvector<int> zigZagTraversal(BinaryTreeNode<int> *root) {\n    // Declare an empty array answer to store zigzag traversal\n    vector<int> answer;\n    // Base case\n    if (root == NULL) {\n        return answer;\n    // Declare an empty queue and push root to it\n    queue<BinaryTreeNode<int>*> q;\n    q.push(root);\n    // Initialize reverseOrder as false\n    bool reverseOrder = false;\n    while (!q.empty()) {\n        // Size of queue denotes number of nodes in current level\n        int size = q.size();\n        // declare an array of size to store elements of current level\n        vector<int> currentLevelNodes;\n        // Run a loop until nodes in the current level are greater than zero and add all its nodes data to currentLevelNodes\n        for (int i = 0; i < size; i++) {\n            // Pop front node from the queue\n            BinaryTreeNode<int>* frontNode = q.front();\n            q.pop();\n            // Add data of node of current level node\n            currentLevelNodes.push_back(frontNode->data);\n            // Push left and right child of current level nodes to queue for next\n            // Level iteration\n            if (frontNode->left) {\n                q.push(frontNode->left);\n            }\n            if (frontNode->right) {\n                q.push(frontNode->right);\n            }\n        }\n        // If reverse order is true then add data of nodes from left to right\n        // Else add data of nodes in reverse order i.e. right to left\n        for (int i = 0; i < size; i++)\n        {\n            if (reverseOrder == false) {\n                answer.push_back(currentLevelNodes[i]);\n            }\n            else {\n                answer.push_back(currentLevelNodes[size - i - 1]);\n            }\n        }\n        //Change reverseOrder to false if it is true and vice-versa for the next level\n        reverseOrder ^= 1;\n    }\n    // Return the answer\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-integers-your-task-is-to-print-the-boundary-nodes-of-this-binary-tree-in-anti-clockwise-direction-starting-from-the-root-node\">You have been given a binary tree of integers. Your task is to print the boundary nodes of this binary tree in Anti-Clockwise direction starting from the root node.</h4>\n\n<h5 id=\"note\">NOTE:</h5>\n\n<pre><code>The boundary nodes of a binary tree include nodes from the left boundary, right boundary and the leaf nodes without duplicate nodes. However, the values from the nodes may contain duplicates. \n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/boundarytraversal-5149.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the boundary nodes of the given binary tree separated by single spaces.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 2^12 \n\nWhere 'N' is the total number of nodes in the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 -1 5 -1 -1 -1 -1 -1\n1 2 -1 3 -1 4 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 4 5 3 \n1 2 3 4\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, we have 1 as the root node. 2, 4 as left boundary nodes. 3, 5 as the right boundary nodes. We don't have any leaf nodes.\n\nFor the second test case, we have 1 as the root node. 2, 3 as the left boundary nodes and 4 as a leaf node. We don't have any right boundaries.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 2 4 5 6 7 3  \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 128,
        "link": "https://www.codingninjas.com/codestudio/problems/boundary-traversal_790725?topList=striver-sde-sheet-problems",
        "title": "Boundary Traversal of Binary Tree",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    Where N is the number of nodes in the Binary Tree.\n*/\n// Functions to traverse on each part.\nvoid leftBoundary(TreeNode<int>* root, vector<int>& ans);\nvoid rightBoundary(TreeNode<int>* root, vector<int>& ans);\nvoid leafNodes(TreeNode<int>* root, vector<int>& ans);\nvector<int> traverseBoundary(TreeNode<int>* root){\n    if(root == NULL){\n        return ans;\n    }\n    ans.push_back(root -> data);\n    // Traverse left boundary.\n    leftBoundary(root -> left, ans);\n    // Traverse for leaf nodes.\n    leafNodes(root -> left, ans);\n    leafNodes(root -> right, ans);\n    // Traverse right boundary.\n    rightBoundary(root -> right, ans);\n    return ans;\n}\nvoid leftBoundary(TreeNode<int>* root, vector<int>& ans){\n    if(root == NULL || (root -> left == NULL && root -> right == NULL)){\n        return;\n    }\n    ans.push_back(root -> data);\n    if(root -> left != NULL){\n        leftBoundary(root -> left, ans);\n    }\n    else{\n        leftBoundary(root -> right, ans);\n    }\n}\nvoid rightBoundary(TreeNode<int>* root, vector<int>& ans){\n    if(root == NULL || (root -> left == NULL && root -> right == NULL)){\n        return;\n    }\n    if(root -> right != NULL){\n        rightBoundary(root -> right, ans);\n    }\n    else{\n        rightBoundary(root -> left, ans);\n    }\n    ans.push_back(root -> data);\n}\nvoid leafNodes(TreeNode<int>* root, vector<int>& ans){\n    if(root == NULL){\n        return;\n    }\n    if(root -> left == NULL && root -> right == NULL){\n        ans.push_back(root -> data);\n        return;\n    }\n    leafNodes(root -> left, ans);\n    leafNodes(root -> right, ans);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-non-empty-binary-tree-where-each-node-has-a-non-negative-integer-value-return-the-maximum-possible-sum-of-path-between-any-two-leaves-of-the-given-tree\">You are given a non-empty binary tree where each node has a non-negative integer value. Return the maximum possible sum of path between any two leaves of the given tree.</h4>\n\n<h4 id=\"the-path-is-also-inclusive-of-the-leaf-nodes-and-the-maximum-path-sum-may-or-may-not-go-through-the-root-of-the-given-tree\">The path is also inclusive of the leaf nodes and the maximum path sum may or may not go through the root of the given tree.</h4>\n\n<h4 id=\"if-there-is-only-one-leaf-node-in-the-tree-then-return-1\">If there is only one leaf node in the tree, then return -1.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree3-5126.png\" alt=\"Example Input\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the maximum path sum between two leaf nodes of the given tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= data &lt;= 10^5\n\nWhere 'N' is the number of nodes in the tree.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>26\n</code></pre>\n\n<h5>Explanation of the Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/binarytree2-5129.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>The paths between the leaves are as follows :\n(1). 9-&gt;4-&gt;7               (sum = 20)\n(2). 9-&gt;4-&gt;6-&gt;3            (sum = 22)\n(3). 9-&gt;4-&gt;6-&gt;5-&gt;2         (sum = 26)\n(4). 7-&gt;4-&gt;6-&gt;3            (sum = 20)\n(5). 7-&gt;4-&gt;6-&gt;5-&gt;2         (sum = 24)\n(6). 3-&gt;6-&gt;5-&gt;2            (sum = 16)\n\nOut of all the above 6 paths, path 9-&gt;4-&gt;6-&gt;5-&gt;3 is the maximum sum path with the sum 26.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n2 3 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>The given tree has only one leaf node (3), thus the answer is -1.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 129,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-path-sum-between-two-leaves_794950?topList=striver-sde-sheet-problems",
        "title": "Maximum Path Sum Between Two Leaves",
        "solution": "/*  \n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    where 'N' is the number of nodes in the Binary Tree.\n*/\nlong long int findMaxSumPathHelper(TreeNode<int> *root, long long int &maxPathSum)\n{\n    if (root == NULL)\n    {\n        return -1;\n    }\n    if (root->left == NULL && root->right == NULL)\n    {\n    // Variable to store the maximum sum of the path from the current node to leaf in the left subtree.\n    long long int maxSumLeftPath = findMaxSumPathHelper(root->left, maxPathSum);\n    // Variable to store the maximum sum of the path from the current node to leaf in the right subtree.\n    long long int maxSumRightPath = findMaxSumPathHelper(root->right, maxPathSum);\n    // If the current node has both children, update the value of maxPathSum.\n    if (root->left != NULL && root->right != NULL)\n    {\n        maxPathSum = max(maxPathSum, maxSumLeftPath + maxSumRightPath + root->val);\n        return max(maxSumLeftPath, maxSumRightPath) + root->val;\n    }\n    else if (root->left == NULL)\n    {\n        return maxSumRightPath + root->val;\n    }\n    else\n    {\n        return maxSumLeftPath + root->val;\n    }\n}\nlong long int findMaxSumPath(TreeNode<int> *root)\n{\n    // Variable to store the maximum sum of path between two leaves for the given tree.\n    long long int maxPathSum = -1;\n    findMaxSumPathHelper(root, maxPathSum);\n    return maxPathSum;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-the-preorder-and-inorder-traversal-of-a-binary-tree-your-task-is-to-construct-a-binary-tree-using-the-given-inorder-and-preorder-traversals\">You have been given the preorder and inorder traversal of a binary tree. Your task is to construct a binary tree using the given inorder and preorder traversals.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You may assume that duplicates do not exist in the given traversals.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the preorder sequence = [1, 2, 4, 7, 3] and the inorder sequence = [4, 2, 7, 1, 3], we get the following binary tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testcase1-6263.png\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of nodes in the binary tree.\n\nThe second line of each test case contains \u2018N\u2019 integers denoting the preorder traversal of the binary tree.\n\nThe third line of each test case contains \u2018N\u2019 integers denoting the inorder traversal of the binary tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the level order traversal of the constructed binary tree separated by a single-space.\n\nFor example, the output for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/maximum-sum-of-nodes-in-a-binary-tree-such-that-no-two-nodes-are-adjacent-7840.png\" alt=\"Example\"></p>\n\n<pre><code>Level Order Traversal:   \n1\n2 3\n4 5 6\n7\n\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null\nRight child of 4 = 7\nLeft child of 5 = null\nRight child of 5 = null\nLeft child of 6 = null\nRight child of 6 = null\n\nLevel 5 :\nLeft child of 7 = null\nRight child of 7 = null\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Here, if the node is null, print nothing. The above format was just to provide clarity on how the output is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the output will be:\n\n1 2 3 4 5 6 7\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. You just need to return the root node of the constructed binary tree.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10^4\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\n\nTime Limit: 1sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow-up:</h5>\n\n<pre><code>Can you solve this in O(N) time complexity?\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3\n5\n1 2 4 7 3\n4 2 7 1 3\n2\n1 2\n2 1\n3\n1 2 3\n2 1 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 7\n1 2\n1 2 3\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the tree after the construction is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testcase1-6263.png\" alt=\"Example\"></p>\n\n<pre><code>For the second test case, the level order of the constructed tree is [1, 2]. The tree after the construction is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testcase2-9896.jpeg\" alt=\"Example\"></p>\n\n<pre><code>For the third test case, the level order of the constructed tree is [1, 2, 3]. The tree after the construction is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testcase-3-9895.jpeg\" alt=\"Example\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n3\n1 2 3\n3 2 1\n1\n7\n7\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 2 3\n7\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 130,
        "link": "https://www.codingninjas.com/codestudio/problems/construct-a-binary-tree-from-preorder-and-inorder-traversal_920539?topList=striver-sde-sheet-problems",
        "title": "Construct Binary Tree From Inorder and Preorder Traversal",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the given binary tree.\n*/\n#include <unordered_map>\n// Constructs the subtree and returns the root node.\nTreeNode<int> *constructTree(int inStart, int inEnd, int &pIndex, unordered_map<int, int> &inorderIndex, vector<int> &preorder)\n{\n    if (inStart > inEnd)\n    {\n    }\n    // Get root node value from preorder sequence.\n    int rootNode = preorder[pIndex];\n    // Increment the index denoting the first element of preorder traversal.\n    pIndex = pIndex + 1;\n    // Create the root node with \"rootNode\" value.\n    TreeNode<int> *root = new TreeNode<int>(rootNode);\n    if (inStart == inEnd)\n    {\n        // There is a single node in the given subtree.\n        return root;\n    }\n    else\n    {\n        // Get the index of root node value using the HashMap.\n        int inIndex = inorderIndex[root->data];\n        // Recur for the left subtree.\n        TreeNode<int> *leftChild = constructTree(inStart, inIndex - 1, pIndex, inorderIndex, preorder);\n        // Recur for the right subtree.\n        TreeNode<int> *rightChild = constructTree(inIndex + 1, inEnd, pIndex, inorderIndex, preorder);\n        // Link the left and right child to the root node.\n        root->left = leftChild;\n        root->right = rightChild;\n        return root;\n    }\n}\nTreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)\n{\n    // A HashMap to store the <nodeValue, index> pair of inorder sequence.\n    unordered_map<int, int> inorderIndex;\n    for (int i = 0; i < inorder.size(); i++)\n    {\n        // Storing key, value pair\n        inorderIndex[inorder[i]] = i;\n    }\n    // Index of the first element of the preorder sequence\n    int pIndex = 0;\n    return constructTree(0, inorder.size() - 1, pIndex, inorderIndex, preorder);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-has-been-given-a-postorder-and-inorder-traversal-of-a-binary-tree-of-type-integer-with-n-nodes-stored-in-an-array-list-post-x5f-order-and-in-x5f-order-ninja-has-to-create-the-binary-tree-using-the-given-two-arrays-lists-and-return-the-root-of-that-tree\">Ninja has been given a postorder and inorder traversal of a Binary Tree of type integer with \u2018N\u2019 nodes stored in an array/list \u2018POST_ ORDER\u2019 and \u2018IN_ORDER\u2019. Ninja has to create the binary tree using the given two arrays/lists and return the root of that tree.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Assume that the Binary Tree contains only unique elements.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let's assume: \u2018IN_ORDER\u2019 = [9, 3, 15, 20, 7]  and \u2018POST_ORDER\u2019= [9, 15, 7, 20, 3].\nWe get the following binary tree from Inorder and Postorder traversal:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-8456.png\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 which represents the number of nodes in the Binary Tree.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers, representing the Postorder traversal of the Binary Tree.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers, representing the Inorder traversal of the Binary Tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the level order traversal of the Binary Tree. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10000\n1 &lt;=  \u2018POST_ORDER[i]\u2019 , \u2018IN_ORDER[i]\u2019 &lt;= 100000  \n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of nodes in the tree, and  \u2018POST_ORDER[i]\u2019 and \u2018IN_ORDER[i]\u2019 represent the value of the node in Postorder-traversal and Inorder-traversal of the Binary Tree respectively.\n\nTime Limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n7\n4 5 2 6 7 3 1\n4 2 5 1 6 3 7\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 5 6 7\n</code></pre>\n\n<h4>Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \n\nWe get the following Binary Tree from the given Inorder and Postorder traversal:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/treeex1-8455.png\" alt=\"\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n6\n2 9 3 6 10 5\n2 6 3 9 5 10\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>5 6 10 2 3 9\n</code></pre>\n\n<h4>Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \n\nWe get the following Binary Tree from the given Inorder and Postorder traversal:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/treeex2-8454.png\" alt=\"\"></p>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 131,
        "link": "https://www.codingninjas.com/codestudio/problems/construct-binary-tree-from-inorder-and-postorder-traversal_1266106?topList=striver-sde-sheet-problems",
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(N)\n    Where 'N' denotes the number of nodes in the Binary tree.\n*/\nTreeNode<int>* buildTreeHelper(vector<int>& postOrder, int postStart, int postEnd, vector<int>& inOrder, int inStart, int inEnd) \n{\n    if (postStart > postEnd || inStart > inEnd) \n    {\n        return NULL;\n    }\n    // Assign rootVal as postOrder[postEnd]\n    TreeNode<int>* root = new TreeNode<int>(rootVal);\n    // Find parent element index from inOrder array.\n    int k = 0;\n    // Iterate i from inStart to inEnd\n    for (int i = inStart; i <= inEnd; i++) \n    {\n        if (rootVal == inOrder[i]) \n        {\n            k = i;\n            break;\n        }\n    }\n    // Create recursive call for left and right subtree\n    root -> left = buildTreeHelper(postOrder, postStart, postStart + k - inStart - 1, inOrder, inStart, k - 1);\n    root -> right = buildTreeHelper(postOrder, postStart + k - inStart, postEnd - 1, inOrder, k + 1, inEnd);\n    return root;\n}\nTreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) \n{\n    int n = postOrder.size();\n    int postStart = 0;\n    int postEnd = n - 1;\n    int inStart = 0;\n    int inEnd = n - 1;\n    // Call buildTreeHelper function \n    return buildTreeHelper(postOrder, postStart, postEnd, inOrder, inStart, inEnd);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-tree-where-the-data-present-in-each-node-is-an-integer-you-have-to-find-whether-the-given-tree-is-symmetric-or-not\">You are given a binary tree, where the data present in each node is an integer. You have to find whether the given tree is symmetric or not.</h4>\n\n<h4 id=\"symmetric-tree-is-a-binary-tree-whose-mirror-image-is-exactly-the-same-as-the-original-tree\">Symmetric tree is a binary tree, whose mirror image is exactly the same as the original tree.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004229.png\" alt=\"sym_tree\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The only line of input contains the binary tree node elements in the level order form. The values of nodes are separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>The output consists of a single line containing \"Symmetric\" if the given tree is symmetric, else \"Asymmetric\".\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of, Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^5\n1 &lt;= Data &lt;= 10^5\n\nWhere 'N' denotes the number of nodes in the given binary tree and 'Data' denotes the node value.\n\nTime limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1 2 2 3 4 4 3 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>Symmetric\n</code></pre>\n\n<h5>Explanation For Sample 1:</h5>\n\n<pre><code>This is a symmetric tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004229.png\" alt=\"sym_tree\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1 2 3 4 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>Asymmetric\n</code></pre>\n\n<h5>Explanation For Sample 2:</h5>\n\n<pre><code>This is an asymmetric tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004470.png\" alt=\"sym_tree\"></p>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 132,
        "link": "https://www.codingninjas.com/codestudio/problems/tree-symmetricity_630426?topList=striver-sde-sheet-problems",
        "title": "Symmetric Tree",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(H)\n    where N is the number of nodes present in the tree.\n    H is the height of the tree.\n*/\nbool checkSymmetricity(BinaryTreeNode<int>* firstRoot, BinaryTreeNode<int>* secondRoot)\n{\n    // Check if both nodes are NULL\n    if(firstRoot == NULL && secondRoot == NULL)\n    {\n        return true;\n    }\n    if( (firstRoot == NULL && secondRoot != NULL) || (firstRoot != NULL && secondRoot == NULL) )\n    {\n        return false;\n    }\n    // Check if the number present in the nodes are unequal\n    if(firstRoot->data != secondRoot->data)\n    {\n        return false;\n    }\n    // Finally, do the same for left node of firstRoot and right node of secondRoot, \n    // and right of firstRoot and left of secondRoot.\n    return checkSymmetricity(firstRoot->right, secondRoot->left) && checkSymmetricity(firstRoot->left, secondRoot->right);\n}\nbool isSymmetric(BinaryTreeNode<int>* root)\n{\n    return checkSymmetricity(root, root); \n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-tree-consisting-of-integer-values-your-task-is-to-convert-the-given-binary-tree-into-a-linked-list-where-the-nodes-of-the-linked-list-follow-the-same-order-as-the-pre-order-traversal-of-the-given-binary-tree\">You are given a binary tree consisting of integer values. Your task is to convert the given binary tree into a linked list where the nodes of the linked list follow the same order as the pre-order traversal of the given binary tree.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Use the right pointer of the binary tree as the \u201cnext\u201d pointer for the linked list and set the left pointer to NULL. \n</code></pre>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>Can you solve it using constant extra space?\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/9954-example-tree-7716.PNG\" alt=\"Example Tree\"></p>\n\n<pre><code>Consider the binary tree rooted at 15, as shown above (left). On flattening the tree into a linked list we get the resulting tree, as shown above (right). Note that the linked list follows the same order as the pre-order traversal of the given binary tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer 'T' denoting the number of queries or test cases. \n\nThe first and the only line of every test case contains elements of the binary tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, the nodes of the linked list, each separated by a single space, are printed.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just return the head of the linked list.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= No. of Nodes &lt;= 5 * 10^4\n1 &lt;= data &lt;= 10^5, data!=-1\n\nWhere 'data' is the integer data stored in a 'TreeNode' pointer.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample input 1:</h5>\n\n<pre><code>2\n15 40 62 -1 -1 10 20 -1 -1 -1 -1\n1 2 3 -1 -1 4 -1 5 -1 -1 -1\n</code></pre>\n\n<h5>Sample output 1:</h5>\n\n<pre><code>15 40 62 10 20\n1 2 3 4 5\n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1: Refer to the example given above in the problem description.\n\nFor test case2:  The binary tree is rooted at 1, as shown below (left). On flattening the tree into a linked list we get the resulting tree, as shown below (right). Note that the linked list follows the same order as the pre-order traversal of the given binary tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9954-sample-1-testcase-2-7717.PNG\" alt=\"Testcase 2 Tree\"></p>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1 2 -1 -1\n5 3 -1 2 -1 8 4 -1 -1 -1 -1 \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1 2\n5 3 2 8 4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 133,
        "link": "https://www.codingninjas.com/codestudio/problems/flatten-binary-tree-to-linked-list_1112615?topList=striver-sde-sheet-problems",
        "title": "Flatten Binary Tree to Linked List",
        "solution": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(1)\n    Where N is the number of nodes in the Binary Tree.\n*/\nTreeNode<int> *flattenBinaryTree(TreeNode<int> *root)\n{\n    TreeNode<int> *currentNode = root;\n    while (currentNode != NULL)\n    {\n        if (currentNode->left != NULL)\n        {\n            // Place the right subtree at its correct position (according to the linked list).\n            TreeNode<int> *predecessor = currentNode->left;\n            while (predecessor->right != NULL)\n            {\n                predecessor = predecessor->right;\n            }\n            // Make the right subtree of the current node as right child of \"predecessor\".\n            predecessor->right = currentNode->right;\n            // Make the left subtree of the current node as the new right subtree.\n            currentNode->right = currentNode->left;\n            currentNode->left = NULL;\n        }\n        // Set the right child of the node as the current node.\n        currentNode = currentNode->right;\n    }\n    return root;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-provided-with-a-binary-tree-and-one-of-its-leaf-nodes-you-have-to-invert-this-binary-tree-inversion-must-be-done-by-following-all-the-below-guidelines\">You are provided with a Binary Tree and one of its leaf nodes. You have to invert this binary tree. Inversion must be done by following all the below guidelines:</h4>\n\n<pre><code>\u2022 The given leaf node becomes the root after the inversion.\n\n\u2022 For a node (say, \u2018x\u2019) \n    \u25cb If there exists the left child that is not yet taken then this child must become the right child of \u2018x\u2019.\n    \u25cb If the left child is already taken then the right child is still on the right side of \u2018x\u2019.\n\n\u2022 The parent of \u2018x\u2019 must be the left child of \u2018x\u2019.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/invert-a-binary-tree-01-8578.png\" alt=\"Example-img01\">\n<br>\n<img src=\"https://files.codingninjas.in/invert-a-binary-tree-02-8579.png\" alt=\"Example-img02\"></p>\n\n<pre><code>Consider the above binary tree (image- before inversion), if the given leaf node is \u20181\u2019 then the binary tree after inversion becomes exactly the same as given in the image representing after inversion.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The given binary tree will only have distinct values of nodes.\n</code></pre>\n\n<p><be></be></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single TreeNode \u201cleaf\u201d which denotes one of the leaf nodes of the given binary tree.\n\nThe second line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the whole binary tree (according to the format as it has been given in the input) after considering the given leaf node as the new root node.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n-10^5 &lt;= DATA &lt;= 10^5\nLeaf is one of the leaf nodes of the given binary tree.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n1\n5 6 15 4 1 -5 2 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 6 -1 5 4 -1 15 -1 -1 -5 2 -1 -1 -1 -1\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, the explanation is provided in the description.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 2 3 -1 -1 -1 -1\n3\n1 2 -1 3 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2 1 -1 -1 3 -1 -1\n3 2 -1 1 -1 -1 -1\n</code></pre>\n\n<h5>Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the inverted tree will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/invert-a-binary-tree-03-8580.png\" alt=\"Explanation\"></p>\n\n<pre><code>In the second test case, the inverted tree will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/invert-a-binary-tree-04-8581.png\" alt=\"Explanation\"></p>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 134,
        "link": "https://www.codingninjas.com/codestudio/problems/invert-a-binary-tree_1281382?topList=striver-sde-sheet-problems",
        "title": "Invert a Binary Tree",
        "solution": "/*\n    Time complexity: O(N) \n    Space complexity: O(N)\n    Where 'N' is the number of nodes in the given binary tree.\n*/\n//  Function which helps in filling the required path in the stack.\nbool helper(TreeNode<int> *root, stack<TreeNode<int> *> &st, TreeNode<int> *leaf)\n{\n    // Push the current node i.e \"root\" into the stack.\n    st.push(root);\n    if (root->left == NULL && root->right == NULL)\n    {\n        // Check if this leaf is the given leaf node then return true.\n        if (root->data == leaf->data)\n        {\n            return true;\n        }\n        // Else, pop-out the current node from the stack and then return false.\n        else\n        {\n            st.pop();\n            return false;\n        }\n    }\n    // Variables to store the result obtained from left and right subtree calls.\n    bool left = false, right = false;\n    // Call for the left subtree, if there exists left child.\n    if(root->left!=NULL){\n        left = helper(root->left, st, leaf);\n    }\n    // If found the required path then return true.\n    if (left)\n    {\n        return true;\n    }\n    // Call for the right subtree, if there exists right child.\n    if(root->right!=NULL){\n        right = helper(root->right, st, leaf);\n    }\n    // If found the required path then return true.\n    if (right)\n    {\n        return true;\n    }\n    // Otherwise, pop-out the current node from the stack and then return false.\n    st.pop();\n    return false;\n}\nTreeNode<int> *invertBinaryTree(TreeNode<int> *root, TreeNode<int> *leaf)\n{\n    // If the root is NULL then return root itself.\n    if (root == NULL)\n    {\n        return root;\n    }\n    // Stack that will store the path which includes the given leaf node.\n    stack<TreeNode<int> *> st;\n    // Call the helper function.\n    helper(root, st, leaf);\n    // Node that holds the new Root i.e. the given leaf node.\n    TreeNode<int> *newRoot = st.top();\n    st.pop();\n    // Node that stores the parent of the current node while inverting the given binary tree.\n    TreeNode<int> *parent = newRoot;\n    while (!st.empty())\n    {\n        // Node that stores the current node.\n        TreeNode<int> *curNode = st.top();\n        st.pop();\n        if (curNode->left == parent)\n        {\n            curNode->left = NULL;\n            parent->left = curNode;\n        }\n        else\n        {\n            curNode->right = curNode->left;\n            curNode->left = NULL;\n            parent->left = curNode;\n        }\n        parent = parent->left;\n    }\n    return newRoot;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-binary-tree-of-nodes-39-n-39-you-need-to-modify-the-value-of-its-nodes-such-that-the-tree-holds-the-children-sum-property\">Given a binary tree of nodes 'N', you need to modify the value of its nodes, such that the tree holds the Children sum property.</h4>\n\n<h4 id=\"a-binary-tree-is-said-to-follow-the-children-sum-property-if-for-every-node-of-that-tree-the-value-of-that-node-is-equal-to-the-sum-of-the-value-s-of-all-of-its-children-nodes-left-child-and-the-right-child\">A binary tree is said to follow the children sum property if, for every node of that tree, the value of that node is equal to the sum of the value(s) of all of its children nodes( left child and the right child).</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code> 1. You can only increment the value of the nodes, in other words, the modified value must be at least equal to the original value of that node.\n 2. You can not change the structure of the original binary tree.\n 3. A binary tree is a tree in which each node has at most two children.      \n 4. You can assume the value can be 0 for a NULL node and there can also be an empty tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer 'T' representing the number of test cases. \n\nThe first and the only line of each test case will contain the values of the nodes of the tree in the level order form ( -1 for NULL node) Refer to the example for further clarification.\nExample : \nConsider the binary tree :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-45-5134.png\" alt=\"abcd\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like : \n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<p>##### Note :\n    The above format was just to provide clarity on how the input is formed for a given tree. \n    The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:</p>\n\n<pre><code>1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, you just need to update the given tree in-place. If the updated tree satisfies all the conditions, the output will be shown as \u201cValid\u201d, else the output will be \u201cInvalid\u201d.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n0 &lt;= N &lt;= 10^2\n1 &lt;= node.Value &lt;= 10^6\n\nTime Limit : 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>Valid ( One of the possible answers is : 45 35 10 32 3 8 2 -1 -1 -1 -1 -1, thus if the user modifies the given tree like this, the output printed will be valid).\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>The tree can be represented as follows :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-59-5133.png\" alt=\"altimage\"></p>\n\n<pre><code>The value at the root node is 2 which is less than the sum of its children\u2019s values (35 + 10). So we simply increase the value at the root node to 45. The node with value  = 35 has children with values 2 and 3 so their sum i.s 2 + 3 = 5 &lt; 35. As we can't decrement any value, so instead we have to increase the sum of children and thus we update 35's children (2 and 3) as 30 and 5 so that 30 + 5 = 35 and the same is done for the children of the node with value = 10.\n</code></pre>\n\n<h4>The final tree looks like this :</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-56-05-5132.png\" alt=\"altimage\"></p>\n\n<pre><code>Note that there can be many other valid solutions.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n10 5 5 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>Valid\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 135,
        "link": "https://www.codingninjas.com/codestudio/problems/childrensumproperty_790723?topList=striver-sde-sheet-problems",
        "title": "Children Sum Property",
        "solution": "/*\n    Time complexity : O(N)\n    Space complexity : O(N)\n    Where 'N' is the number of nodes.\n*/\nvoid changeTree(BinaryTreeNode<int> *root) {\n    // Base Cases.\n    if (root == NULL) {\n        return;\n    }\n    if (root->left == NULL && root->right == NULL) {\n        return;\n    }\n    int difference = root->data - ((root->left ? root->left->data : 0) + (root->right ? root->right->data : 0));\n    /*\n        if the differnce is positive, increment either\n        left or right child node.\n    */\n    if (difference > 0) {\n        if (root->left) {\n            root->left->data += difference;\n        }\n        else {\n            root->right->data += difference;\n        }\n    }\n    // Call this function again for the left and right subtree.\n    changeTree(root->left);\n    changeTree(root->right);\n    // Update root with the sum of the left and right child's data.\n    root->data =  ((root->left ? root->left->data : 0) + (root->right ? root->right->data : 0));\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"a-binary-tree-is-a-tree-where-each-node-has-at-most-two-children-i-e-left-child-and-right-child\">A binary tree is a tree where each node has at most two children i.e left child and right child.</h4>\n\n<h4 id=\"you-are-given-a-binary-tree-where-the-structure-of-the-node-is-as-follow\">You are given a binary tree, where the structure of the node is as follow -:</h4>\n\n<pre><code>class BinaryTreeNode {\n int data;      // Value of the node.\n BinaryTreeNode *left;  // Pointer to left child node.\n BinaryTreeNode *right; // Pointer to right child node.\n BinaryTreeNode *next;  // Pointer to next right node at same level. \n}\n</code></pre>\n\n<h4 id=\"your-task-is-to-connect-all-the-adjacent-nodes-at-the-same-level-in-the-given-binary-tree-you-can-do-this-by-populating-each-39-next-39-pointer-to-point-to-its-next-right-node-if-there-is-no-next-right-node-the-next-pointer-should-be-set-to-null-initially-all-the-next-pointers-are-set-to-null\">Your task is to connect all the adjacent nodes at the same level in the given binary tree. You can do this by populating each 'next' pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all the next pointers are set to NULL.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Consider the figure shown below. The left part represents the initial binary tree and right part represents the binary tree after connecting adjacent nodes at the same level.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-6821.png\" alt=\"alt text\"></p>\n\n<pre><code>In the tree shown in the picture above -:\nThe \u2018next\u2019 pointer of the node having value 2 is connected to the node having value 3.\nThe \u2018next\u2019 pointer of the node having value 4 is connected to the node having value 5.\nThe \u2018next\u2019 pointer of the node having value 5 is connected to the node having value 6.\nThe \u2018next\u2019 pointer of nodes having value 1, 3, 6 will have a value NULL as there are no next right nodes in their cases.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The structure of the \u2018Node\u2019 of a binary tree is already defined. You should not change it.   \n2. The root of the binary tree is known to you.  \n3. There is at least one node in the given binary tree.\n4. You may only use constant extra space.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThen the description of  \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the level order as connected by the next pointers, with '#' signifying the end of each level.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= DATA &lt;= 10^9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of nodes in the given binary tree and 'DATA' is the value in each node.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 # 2 3 #    \n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, the level order traversal of a binary tree is 1, 2, 3, -1, -1,  thus its root is a node with value 1, and left and right child of the root are nodes with 2 and 3 respectively.\nThe initial binary tree and the binary tree after connecting adjacent nodes are shown below\nThe output is only for convenience,  It is in level order as connected by the next pointers, with '#' signifying the end of each level.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bt-6820.png\" alt=\"alt text\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n1 2 3 4 5 -1 6 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 # 2 3 # 4 5 6 # \n</code></pre>\n\n<h5>Explanation For Sample Input 2:</h5>\n\n<pre><code>In the first test case, see problem statement for its explanation.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 136,
        "link": "https://www.codingninjas.com/codestudio/problems/connect-nodes-at-same-level_985347?topList=striver-sde-sheet-problems",
        "title": "Connect Nodes at Same Level",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n    Where 'N' is the number of nodes in a binary tree.\n*/\nvoid connectNodes(BinaryTreeNode<int> *root) {\n    // Keep the address of the first node of the current level.\n    BinaryTreeNode<int> *startNode = root;\n    while(startNode != NULL) {\n        BinaryTreeNode<int> *ptr = startNode;\n        BinaryTreeNode<int> *previous = NULL;\n        // Traversing over nodes of current level and populating 'next' pointer of nodes of next level.\n        while(ptr != NULL) {\n            if(ptr->left != NULL) {\n                if(previous != NULL) {\n                    previous->next = ptr->left;\n                }\n                // Update 'startNode' with first node of next level if not already done.\n                if(startNode == NULL) {\n                    startNode = ptr->left;\n                }\n                // Update previous pointer\n                previous = ptr->left;\n            }\n            if(ptr->right != NULL) {\n                if(previous != NULL) {\n                    previous->next = ptr->right;\n                }\n                // Update 'startNode' with first node of next level if not already done.\n                if(startNode == NULL) {\n                    startNode = ptr->right;\n                }\n                // Update previous pointer.\n                previous = ptr->right;\n            }\n            ptr = ptr->next;\n        }\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"there-is-a-binary-search-tree-bst-consisting-of-n-nodes-each-node-of-this-bst-has-some-integer-data\">There is a Binary Search Tree (BST) consisting of \u2018N\u2019 nodes. Each node of this BST has some integer data.</h4>\n\n<h4 id=\"you-are-given-a-pointer-to-the-root-node-of-this-bst-and-an-integer-x-print-quot-true-quot-if-there-is-a-node-in-bst-having-data-equals-to-x-otherwise-print-quot-false-quot\">You are given a pointer to the root node of this BST, and an integer \u2018X\u2019.  Print \"True\" if there is a node in BST having data equals to \u2018X\u2019, otherwise print \"False\".</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-that-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure that has the following properties.</h4>\n\n<pre><code>1. The left subtree of a node contains only nodes with data less than the node\u2019s data.\n2. The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n3. Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1.  It is guaranteed that all nodes have distinct data.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case contains two positive integers \u2018N and \u2018X\u2019, denoting the number of nodes in the BST and a given integer.\n\nThe second line contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, we take -1 in its place. Refer to the example below for further clarification.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bsttominheap-6482.jpg\" alt=\"image\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u201cTrue\u201d if there is a node in BST having data equals to \u2018X\u2019, otherwise print \u201cFalse\u201d.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n0 &lt;= X &lt;= 10^9\n0 &lt;= DATA &lt;=10^9\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes in the BST, \u2018X\u2019 is a given integer and \u2018DATA\u2019 is the data contained in each node of BST.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n1 1\n1 -1 -1\n7 8\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, there is only one node and it has data 1, thus we should print \u2018True\u2019. \n\nIn the second test case, there is no node having data 8. See the problem statement for the picture of this BST.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 1\n3 1 5 -1 2 -1 -1 -1 -1\n4 6\n3 1 5 -1 2 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, there is left node and it has data 1, thus we should print \u2018True\u2019. \n\nIn the second test case, there is no node having data 6. thus we should print \u2018False\u2019. \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 137,
        "link": "https://www.codingninjas.com/codestudio/problems/search-in-bst_1402878?topList=striver-sde-sheet-problems",
        "title": "Search In BST",
        "solution": "/*\n    Time Complexity : O(H)\n    Space Complexity : O(1)\n    Where 'H' is the height of the given BST.\n*/\nbool searchInBST(BinaryTreeNode<int> *root, int x) {\n    BinaryTreeNode<int> *ptr = root;\n    while(ptr != NULL) {\n        if(ptr->data == x) {\n            return true;\n        } else if(ptr->data > x) {\n            // Move 'ptr' to left child. \n            ptr = ptr->left;\n        } else {\n        }\n    }\n    return false;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-sorted-array-of-length-n-you-need-to-construct-a-balanced-binary-search-tree-from-the-array-if-there-can-be-more-than-one-possible-tree-then-you-can-return-any\">You have been given a sorted array of length \u2018N\u2019. You need to construct a balanced binary search tree from the array. If there can be more than one possible tree, then you can return any.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A balanced binary tree is a binary tree structure in which the left and right subtrees of every node differ in height by no more than 1.\n\n2. A binary search tree is a binary tree data structure, with the following properties\n    a. The left subtree of any node contains nodes with value less than the node\u2019s value.\n    b. The right subtree of any node contains nodes with values equal to or greater than the node\u2019s value.\n    c. Right, and left subtrees are also binary search trees.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Below tree, is a balanced binary search tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bbst-8418.png\" alt=\"1\"></p>\n\n<pre><code>Below tree is not a balanced tree as the height of the left subtree and right subtree of node \u20185\u2019 differs by more than 1. Moreover, the tree is also not a BST as node \u20182\u2019 is less than node \u20183\u2019 but \u20182\u2019 is the right child of \u20183\u2019.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/nbst-8419.png\" alt=\"1\"></p>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains an integer \u2018N\u2019 which denotes the number of elements in the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array in strictly increasing order.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, the output will be \u201c1\u201d if you have returned the correct answer, else it will be \u201c0\u201d.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= arr[i] &lt;= 10 ^ 5\n\nWhere 'arr[i]\u2019 is the value of i-th element of the given array\narr[0] &lt; arr[1] &lt; arr[2] . . . &lt; arr[N]. \n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample Input 1:</h4>\n\n<pre><code>2\n5\n1 2 3 4 5\n1\n12 \n</code></pre>\n\n<h4>Sample Output 1:</h4>\n\n<pre><code>1\n1\n</code></pre>\n\n<h4>Explanation of Sample Input 1:</h4>\n\n<pre><code>For the first test case, one of the possible balanced BST will look like.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1tc-8415.png\" alt=\"1\"></p>\n\n<pre><code>Level order traversal of the above tree is [ 3, 2, 5, 1, -1, 4 ], if you return this tree then you will get the output as 1.\n\nFor the second test case, the tree has only one node that is \u201812\u2019.\nLevel order traversal is [ 12 ], if you return this tree then you will get the output as 1.\n</code></pre>\n\n<h4>Sample Input 2:</h4>\n\n<pre><code>1\n2\n5 17\n</code></pre>\n\n<h4>Sample Output 2:</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4>Explanation of Sample Input 2:</h4>\n\n<pre><code>The tree will look like this.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2tc-8416.png\" alt=\"1\"></p>\n\n<pre><code>Another possible tree is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2tca-8417.png\" alt=\"1\"></p>\n\n<pre><code>Level order traversal is [ 17, 5 ] and [ 5, -1, 17 ], if you return any of this tree you will get the output as 1.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 138,
        "link": "https://www.codingninjas.com/codestudio/problems/convert-sorted-array-to-bst_1264995?topList=striver-sde-sheet-problems",
        "title": "Convert Sorted Array to BST",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(log(N))\n    where 'N' is the total number of elements in the given array.\n*/\n// NodeData struct to store root node of subtree and their respective range in given array.\nstruct nodeData\n{\n    TreeNode<int> *node;\n    // Low and high are left and right range for given 'arr'.\n    int low, high;\n    {\n        node = root;\n        low = left ;\n        high = right;\n    }\n};\nTreeNode<int>* sortedArrToBST (vector<int> &arr, int n)\n{\n    /*\n        Initialise a root node with 'val' = -1 and range [ 0:n-1 ] and push it into a stack data structure.\n        Later on we will update its 'val' to arr['mid'], where 'mid' is middle index of range [0:n-1].\n    */\n    TreeNode<int>* root = new TreeNode<int> (-1);\n    stack<nodeData> st;\n    nodeData node = nodeData(root, 0, n - 1);\n    st.push(node); \n    while (st.empty() == false)\n    {\n        nodeData curNode = st.top();\n        st.pop();\n        // Find 'mid' for the currNode and update node with arr[mid].\n        int mid = curNode.low + (curNode.high - curNode.low) / 2;\n        curNode.node -> val = arr[mid];\n        // Push the left part of array, that makes left subtree of current node.\n        if (curNode.low < mid)\n        {\n            curNode.node -> left = new TreeNode<int>(-1);\n            node = nodeData(curNode.node -> left, curNode.low, mid - 1);\n            st.push(node);\n        }\n        // Push the right part of array, that makes right subtree of current node.\n        if (curNode.high > mid) \n        {\n            curNode.node -> right = new TreeNode<int>(-1);\n            node = nodeData(curNode.node -> right, mid+1, curNode.high);\n            st.push(node);\n        }\n    }\n    // Return root of tree.\n    return root;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-preorder-traversal-of-a-binary-search-tree-your-task-is-to-find-the-tree-from-the-given-preorder-traversal\">You are given a preorder traversal of a binary search tree, your task is to find the tree from the given preorder traversal.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given preOrder = [10, 5, 1, 7, 40, 50], the binary search tree from the given preorder traversal is \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000520_1635321572_TreeFromPreOrder.jpg\" alt=\"sample1\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the size of the preorder array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the preorder traversal of the tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test, \u2018N\u2019 space-separated integers will be printed representing the inorder traversal of the tree.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code> 1 &lt;= T &lt;= 10\n 1 &lt;= N &lt;= 10^6\n 1 &lt;= preOrder[i] &lt;= 10^9\n\n It is guaranteed that the sum of \u2018N\u2019 over all test cases does not exceed 10^6.\n\nTime Limit: 1 sec.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1</h5>\n\n<pre><code>2\n6\n10 5 1 7 40 50\n6\n8 5 1 7 10 12\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 5 7 10 40 50\n1 5 7 8 10 12\n</code></pre>\n\n<h5>Explanation:</h5>\n\n<pre><code>For the first test case,  preOrder = [10, 5, 1, 7, 40, 50], the binary search tree from the given preorder traversal is \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000520_1635321572_TreeFromPreOrder.jpg\" alt=\"sample1\"></p>\n\n<pre><code>Hence the answer is [1, 5, 7, 10, 40, 50].\n\nFor the second test case,  preOrder = [8, 5, 1, 7, 10, 12], the binary search tree from the given preorder traversal is \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000521_1635323461_TreeFromPreOrder-Page-2.drawio.png\" alt=\"sample2\"></p>\n\n<pre><code>Hence the answer is [1, 5, 7, 10, 40, 50].\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n3\n2 1 3\n3\n1 3 2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 2 3\n1 2 3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 139,
        "link": "https://www.codingninjas.com/codestudio/problems/bst-from-preorder_2689307?topList=striver-sde-sheet-problems",
        "title": "Construct BST from Preorder Traversal",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    Where N is the number of nodes in the tree.\n*/\n#include<climits>\nTreeNode<int>* util(vector<int> &preOrder, int &preIndex, int startRange, int endRange){\n    // If the preIndex is greater than the length of the array return NULL.\n    if (preIndex >= preOrder.size()){\n        return NULL;\n    }\n    // If the current node lies inside the range then process the node.\n    if (currNode > startRange && currNode < endRange){\n        TreeNode<int>* root = new TreeNode<int>(currNode);\n        // Increase the index by 1.\n        preIndex += 1;\n        // If left node exists process left.\n        if (preIndex < preOrder.size()){\n            root -> left = util(preOrder, preIndex, startRange, currNode);\n        }\n        // If right node exists process right.\n        if (preIndex < preOrder.size()){\n            root -> right = util(preOrder, preIndex, currNode , endRange);\n        }\n        // Return the root.\n        return root;\n    }\n    // If node was not processed return NULL.\n    return NULL;\n}\nTreeNode<int>* preOrderTree(vector<int> &preOrder){\n    int preIndex = 0;\n    // Return the util function.\n    return util(preOrder, preIndex, INT_MIN, INT_MAX);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-binary-tree-with-n-number-of-nodes-check-if-that-input-tree-is-partial-bst-binary-search-tree-or-not-if-yes-return-true-return-false-otherwise\">Given a binary tree with N number of nodes, check if that input tree is Partial BST (Binary Search Tree) or not. If yes, return true, return false otherwise.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-said-to-be-a-partial-bst-if-it-follows-the-following-properties\">A binary search tree (BST) is said to be a Partial BST if it follows the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than and equal to the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than and equal to the node\u2019s data.\n\u2022 Both the left and right subtrees must also be partial binary search trees.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<h4 id=\"input\">Input:</h4>\n\n<p><img src=\"https://files.codingninjas.in/validate-bst-5327.png\" alt=\"BST1\"></p>\n\n<h4 id=\"answer\">Answer:</h4>\n\n<pre><code>Level 1: \n\nAll the nodes in the left subtree of 4 (2, 1, 3) are smaller \nthan 4, all the nodes in the right subtree of the 4 (5) are \nlarger than 4.\n\nLevel 2 :\n\nFor node 2:\nAll the nodes in the left subtree of 2 (1) are smaller than \n2, all the nodes in the right subtree of the 2 (3) are larger than 2.\nFor node 5:\nThe left and right subtree for node 5 is empty.\n\nLevel 3:\n\nFor node 1:\nThe left and right subtree for node 1 are empty.\nFor node 3:\nThe left and right subtree for node 3 are empty.\nBecause all the nodes follow the property of a Partial binary \nsearch tree, the above tree is a Partial binary search tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer 't', which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Image1\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return true if the binary tree is a Partial BST, else return false.\n\nOutput for every test case will be denoted in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n-10^9 &lt;= data &lt;= 10^9\nwhere N is the number of nodes in the tree, T represents the number of test cases, and data denotes data contained in the node of the binary tree.\n\nDuplicate elements can be in the right subtree or left subtree.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n3 1 5 -1 2 -1 -1 -1 -1\n3 2 5 1 4 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code> true\n false\n</code></pre>\n\n<h5>Explanation of the Sample Input1:</h5>\n\n<pre><code>Here we have 2 test cases, hence there are 2 binary trees\n\nTest Case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst1-5335.png\" alt=\"Test1\"></p>\n\n<pre><code> Level 1: \nFor node 3 all the nodes in the left subtree (1,2) are \nless than 3 and all the nodes in the right subtree (5) \nare greater than 3. \n\nLevel 2:\nFor node 1:\nThe left subtree is empty and all the nodes in the right \nsubtree (2) are greater than 1.  \nFor node 5:\nBoth right and left subtrees are empty.\n\nLevel 3:\nFor node 2, both right and left subtrees are empty.\nBecause all the nodes follow the property of a Partial binary \nsearch tree, the function should return true.\n\nTest Case 2: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/validate1-5328.png\" alt=\"Test2\"></p>\n\n<pre><code>For the root node, all the nodes in the right subtree (5) are greater than 3. But node with data 4 in the left subtree of node 3 is greater than 3, this does not satisfy the condition for the Partial binary search tree. Hence, the function should return false. \n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 140,
        "link": "https://www.codingninjas.com/codestudio/problems/validate-bst_799483?topList=striver-sde-sheet-problems",
        "title": "Partial BST",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N).\n    Where N denotes number of nodes in the binary tree\n*/\nbool helper(BinaryTreeNode<int>* root, BinaryTreeNode<int>*& prev) {\n    // Traverse the tree in inorder fashion\n    // Keep track of previous node\n    if (root) {\n        if (!helper(root->left, prev)) {  // Check left subtree\n            return false;\n        }\n        {\n            return false;\n        }\n        prev = root;\n        return helper(root->right, prev);  // Check right subtree\n    }\n    return true;\n}\nbool validateBST(BinaryTreeNode<int>* root) {\n    BinaryTreeNode<int>* prev = NULL;\n    return (helper(root, prev));\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-search-tree-of-integers-with-n-nodes-you-are-also-given-references-to-two-nodes-p-and-q-from-this-bst\">You are given a binary search tree of integers with N nodes. You are also given references to two nodes P and Q from this BST.</h4>\n\n<h4 id=\"your-task-is-to-find-the-lowest-common-ancestor-lca-of-these-two-given-nodes\">Your task is to find the lowest common ancestor(LCA) of these two given nodes.</h4>\n\n<h4 id=\"the-lowest-common-ancestor-for-two-nodes-p-and-q-is-defined-as-the-lowest-node-that-has-both-p-and-q-as-descendants-where-we-allow-a-node-to-be-a-descendant-of-itself\">The lowest common ancestor for two nodes P and Q is defined as the lowest node that has both P and Q as descendants (where we allow a node to be a descendant of itself)</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two space separated integers P and Q, the nodes whose LCA we have to find.\n\nThe second line of each test case contains the elements of the BST in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print the LCA of nodes P and Q.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= Data &lt;= 10^6 and Data != -1\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3 5\n2 1 3 -1 -1 -1 5 -1 -1\n1 3\n2 1 4 -1 -1 3 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h4>Explanation for Sample 1:</h4>\n\n<pre><code>The BST corresponding to the first test case will be-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/merge-11-6334.png\" alt=\"\"></p>\n\n<pre><code>Here, we can clearly see that LCA of node 3 and node 5 is 3.\n\nThe BST corresponding to the second test case will be- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image13-6336.png\" alt=\"\"></p>\n\n<pre><code>Here, we can clearly see that LCA of node 1 and node 3 is 2.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n1 1\n3 2 -1 1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 141,
        "link": "https://www.codingninjas.com/codestudio/problems/lca-in-a-bst_981280?topList=striver-sde-sheet-problems",
        "title": "LCA of Two Nodes In A BST",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    where N is the total number of nodes of the BST.\n*/\nTreeNode<int>* LCAinaBST(TreeNode<int>* root, TreeNode<int>* P, TreeNode<int>* Q)\n{\n    while (root != NULL)\n    {\n        if (root -> data < P -> data && root -> data < Q -> data)\n        {\n            root = root -> right;\n  (        root -> data > Q -> data)\n        {\n            root = root -> left;\n        }\n        else\n        {\n            return root;\n        }\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-search-tree-of-integers-with-n-nodes-you-are-also-given-39-key-39-which-represents-data-of-a-node-of-this-tree-your-task-is-to-find-the-predecessor-and-successor-of-the-given-node-in-the-bst\">You have been given a binary search tree of integers with \u2018N\u2019 nodes. You are also given 'KEY' which represents data of a node of this tree. Your task is to find the predecessor and successor of the given node in the BST.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The predecessor of a node in BST is that node that will be visited just before the given node in the inorder traversal of the tree. If the given node is visited first in the inorder traversal, then its predecessor is NULL.\n\n2. The successor of a node in BST is that node that will be visited immediately after the given node in the inorder traversal of the tree. If the given node is visited last in the inorder traversal, then its successor is NULL.\n\n3. The node for which predecessor and successor are to be found will always be present in the given tree.\n\n4. A binary search tree (BST) is a binary tree data structure which has the following properties.\n     \u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n     \u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n     \u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n\nThe second line of each test case contains 'KEY' representing the data of the node for which predecessor and successor are to be found.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print two single space-separated integers representing data values of the predecessor and the successor node, respectively. If any of the two doesn\u2019t exist, print -1 in place of it.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= data &lt;= 10^6 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n10\n</code></pre>\n\n<h5>Sample output 1:</h5>\n\n<pre><code>8 12\n</code></pre>\n\n<h5>Explanation of Sample output 1:</h5>\n\n<pre><code>The tree can be represented as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-14-5921.png\" alt=\"Example\"></p>\n\n<pre><code>The inorder traversal of this tree will be 8 10 12 15 16 20 25.\n\nSince the node with data 8 is on the immediate left of the node with data 10 in the inorder traversal, the node with data 8 is the predecessor.\n\nSince the node with data 12 is on the immediate right of the node with data 10 in the inorder traversal, the node with data 12 is the successor.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2 \n10 5 -1 -1 -1 -1\n5\n20 -1 -1\n20\n</code></pre>\n\n<h5>Sample output 2:</h5>\n\n<pre><code>-1 10\n-1 -1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 142,
        "link": "https://www.codingninjas.com/codestudio/problems/_893049?topList=striver-sde-sheet-problems",
        "title": "Predecessor And Successor In BST",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    where 'N' is the number of nodes in the BST.\n*/\npair<int, int> predecessorSuccessor(BinaryTreeNode<int>* root, int key)\n{\n    int predecessor = -1;\n    int successor = -1;\n    // Reach to the key.\n    while (root -> data != key)\n    {\n        if (key > root -> data)\n            root = root -> right;\n        }\n        else\n        {\n            successor = root -> data;\n            root = root -> left;\n        }\n    }\n    BinaryTreeNode<int>* rightSubtree = root -> right;\n    while (rightSubtree != NULL)\n    {\n        successor = rightSubtree -> data;\n        rightSubtree = rightSubtree -> left;\n    }\n    BinaryTreeNode<int>* leftSubtree = root -> left;\n    while (leftSubtree != NULL)\n    {\n        predecessor = leftSubtree -> data;\n        leftSubtree = leftSubtree -> right;\n    }\n    return {predecessor, successor};\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-bst-binary-search-tree-with-n-number-of-nodes-and-a-value-x-your-task-is-to-find-the-greatest-value-node-of-the-bst-which-is-smaller-than-or-equal-to-x\">You are given a BST (Binary search tree) with\u2019 N\u2019 number of nodes and a value \u2018X\u2019. Your task is to find the greatest value node of the BST  which is smaller than or equal to  \u2018X\u2019.</h4>\n\n<h4 id=\"note-x-is-not-smaller-than-the-smallest-node-of-bst\">Note :\u2018X\u2019 is not smaller than the smallest node of BST .</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"></p>\n\n<pre><code>In the above example, For the given BST  and X = 7, the greatest value node of the BST  which is smaller than or equal to  7 is 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains nodes in level order form (separated by space). If any node does not have a left or right child, take -1 in its place.\n\nThe second and the last line of each test case contain integer \u2018X\u2019.\n\nFor example, the input for the tree depicted in the below image. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"></p>\n\n<pre><code>10\n5 15\n2 6 -1 -1\n-1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 10\n\nLevel 2 :\nLeft child of 10 = 5\nRight child of 10 = 15\n\nLevel 3 :\nLeft child of 5 = 2\nRight child of 5 = 6\nLeft child of 15 = null(-1)\nRight child of 15 =  null (-1)\n\nLevel 4 :\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n10 5 15 2 6 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer \u2018M\u2019, denoting the greatest value node of the BST  which is smaller than or equal to  \u2018X\u2019.\n\nThe Output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5 * 10 ^ 3\n1 &lt;= nodeVal[i] &lt;= 10 ^ 9\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n10 5 15 2 6 -1 -1 -1 -1 -1 -1\n7\n2 1 3 -1 -1 -1 -1\n2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>6\n2\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>In the first test case, the BST looks like as below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"></p>\n\n<pre><code>The greatest value node of the BST which is smaller than or equal to  7 is 6.\n\nIn the second test case, the BST looks like as below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bstoutput2-1-11215.png\" alt=\"1\"></p>\n\n<pre><code>The greatest value node of the BST which is smaller than or equal to  2 is 2.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n5 3 10 2 4 6 15 -1 -1 -1 -1 -1 -1 -1 -1\n15\n5 3 10 2 4 6 15 -1 -1 -1 -1 -1 -1 -1 -1\n8\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>15\n6\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 143,
        "link": "https://www.codingninjas.com/codestudio/problems/floor-from-bst_920457?topList=striver-sde-sheet-problems",
        "title": "Floor in BST",
        "solution": "/*\n    Time Complexity: O(h)\n    Space Complexity: O(1)\n    Where 'h' is the height of the tree.\n*/\n// Function that minimum absolute difference of the given node 'X' from BST \nint floorInBST(TreeNode<int> * root, int X)\n{\n    // Base condition\n    if(root == NULL)\n    {\n        return INT_MAX;\n    }\n    {\n        return root -> val;\n    }\n    // If root -> data is greater than the 'X'\n    if(root -> val > X)\n    {\n        return floorInBST(root -> left, X);\n    }\n    // Else, the floor may lie in right subtree or may be equal to the root\n    int floorValue = floorInBST(root -> right, X);\n    return (floorValue <= X) ? floorValue : root -> val;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-is-given-a-binary-search-tree-and-an-integer-now-he-is-given-a-particular-key-in-the-tree-and-returns-its-ceil-value-can-you-help-ninja-solve-the-problem\">Ninja is given a binary search tree and an integer. Now he is given a particular key in the tree and returns its ceil value. Can you help Ninja solve the problem?</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Ceil of an integer is the closest integer greater than or equal to a given number.\nFor example:\narr[] = {1, 2, 5, 7, 8, 9}, key = 3.\nThe closest integer greater than 3 in the given array is 5. So, its ceil value in the given array is 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains integer X, denoting the key value.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code> The first and only line of each test case in the output contains ceil of integer X from given BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000742.PNG\" alt=\"alttext\"></p>\n\n<pre><code>for the above tree\nX=2\nceil =3\nX=7\nceil =8\nX=12\nceil =13\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 10^5\n0 &lt;= node data &lt;= 10^9\n1 &lt;= X &lt;= 10^9     \n\nTime limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n4\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n7\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>5\n7\n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code> In the first test case, we traverse the tree starting from the root node which has a value of 8. Now the value of its left child is 5 and its right child is 10. Key-value 4 is less than the left child so we traverse the left subtree. Now we reach a node with value 5 and then again repeat the above process till we reach a null node. Finally, we return 5 as our answer.\n\nIn the second test case, we traverse the tree starting from the root node which has a value of 8. Now the value of its left child is 5 and its right child is 10. Key-value 7 is less than the right child and more than the left child, so we traverse the right subtree. Now we reach a node with value 10 and then again follow the same procedure and reach a node with value 7 and stop there and return 7 as our final answer.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n55 25 82 13 34 67 86 6 21 28 47 61 70 84 92 1 10 17 24 26 29 45 54 56 65 68 81 83 85 91 \n96 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 \n34\n84 19 97 0 56 96 99 -1 8 50 83 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 \n50\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>34\n50\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 144,
        "link": "https://www.codingninjas.com/codestudio/problems/ceil-from-bst_920464?topList=striver-sde-sheet-problems",
        "title": "Ceil from BST",
        "solution": "/*\n    Time complexity: O(logN)\n    Space complexity: O(logN)\n    Where 'N' is the number of nodes of the tree\n*/\nint findCeil(BinaryTreeNode < int > * node, int x) {\n  // Initializing ceil value\n  int ceil = -1;\n  // Traverse till the node is not null\n  while (node != NULL) {\n    // If node value equals key then return it\n    if (x == node -> data) {\n      return node -> data;\n    // Traverse right sub-tree\n    if (x > node -> data) {\n      node = node -> right;\n    }\n    // Traverse left sub-tree\n    else {\n      ceil = node -> data;\n      node = node -> left;\n    }\n  }\n  // Return the ceil value\n  return ceil;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-search-tree-of-integers-with-39-n-39-nodes-your-task-is-to-return-the-k-th-largest-element-of-this-bst\">You are given a binary search tree of integers with 'N' nodes. Your task is to return the K-th largest element of this BST.</h4>\n\n<h4 id=\"if-there-is-no-k-th-largest-element-in-the-bst-return-1\">If there is no K-th largest element in the BST, return -1.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the integer \u2018K\u2019.\n\nThe second line of each test case contains the elements of the BST in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. It is not a BST. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the K-th largest element of the BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= K &lt;= 5000\n0 &lt;= Data &lt;= 10^6 and Data != -1\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3\n3 1 5 -1 2 -1 6 -1 -1 -1 -1 \n2\n2 1 -1 -1 -1 \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h4>Explanation for Sample 1:</h4>\n\n<pre><code>Test Case 1:\nThe sorted array corresponding to the first test case will be [1, 2, 3, 5, 6]. The 3rd largest element will be 3.\n\nTest Case 2:\nThe sorted array corresponding to the second test case will be [1, 2]. The 2nd largest element will be 1.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n5\n10 -1 20 -1 30 -1 40 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 145,
        "link": "https://www.codingninjas.com/codestudio/problems/k-th-largest-number_920438?topList=striver-sde-sheet-problems",
        "title": "K-th largest Number BST",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    where 'N' is the total number of nodes of the BST.\n*/\nint revInorder(TreeNode<int>* root, int &visCount, int k)\n{\n    if (root == NULL)\n    {\n        return -1;\n    }\n    // Recurse over right subtree. \n    int right = revInorder(root -> right, , );\n    if (right != -1)\n    {\n        return right;\n    }\n    visCount++;\n    if (visCount == k)\n    {\n        return root -> data;\n    }\n    // Recurse over left subtree.\n    int left = revInorder(root -> left, visCount, k);\n    return left;\n}\nint KthLargestNumber(TreeNode<int>* root, int k)\n{\n    int visCount = 0;\n    return revInorder(root, visCount, k);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-search-tree-of-integers-you-are-supposed-to-return-the-k-th-1-indexed-smallest-element-in-the-tree\">You have been given a Binary Search Tree of integers. You are supposed to return the k-th (1-indexed) smallest element in the tree.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary search tree and k = 3\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/test-explaination-9984.png\" alt=\"Example\"></p>\n\n<pre><code>The 3rd smallest node is highlighted in yellow colour.   \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases are as follows.\nThe first line of each test case contains an integer that denotes the \u2018k\u2019 as described in the problem statement.\nThe second line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/test-explaination-9984.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print an integer which denotes the K-th smallest node in the given binary search tree.\n\nFor each test case, print the output in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n1 &lt;= K &lt;= N\n-10^8 &lt;= data &lt;= 10^8 and data != -1\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary search tree, \u2018K\u2019 is the given integer and \u201cdata\u201d is the value of the binary search tree node.\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3\n3\n10 5 15 4 7 14 16 -1 -1 -1 -1 -1 -1 -1 -1\n1\n2 1 3 -1 -1 -1 -1\n2\n4 -3 5 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>7\n1\n4\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code> For the first test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree-6171.png\" alt=\"Example\"></p>\n\n<pre><code>The third-smallest node is 7.\n\nFor the second test case, the smallest node is 1.\n\nFor the third test case, the second-smallest node is 4.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2\n-2 -4 1 -5 -1 -1 -1 -1 -1\n3\n10 8 11 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>-4\n11\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, the second-smallest node is -4.\n\nFor the second test case, the third-smallest node is 11.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 146,
        "link": "https://www.codingninjas.com/codestudio/problems/kth-smallest-node-in-bst_920441?topList=striver-sde-sheet-problems",
        "title": "Kth smallest node in BST",
        "solution": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the given binary search tree.\n*/\n#include <stack>\nint kthSmallest(TreeNode<int> *root, int k)\n{\n    //  To store the nodes of the tree.\n    stack<TreeNode<int> *> st;\n    while (1)\n    {\n        while (root != NULL)\n            st.push(root);\n            root = root->left;\n        }\n        root = st.top();\n        st.pop();\n        if (k == 1)\n        {\n            return root->data;\n        }\n        //  Update the 'k'\n        k = k - 1;\n        root = root->right;\n    }\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-search-tree-bst-and-a-target-value-k-your-task-is-to-check-if-there-exist-two-unique-elements-in-the-given-bst-such-that-their-sum-is-equal-to-the-given-target-k\">You are given a Binary Search Tree (BST) and a target value \u2018K\u2019. Your task is to check if there exist two unique elements in the given BST such that their sum is equal to the given target \u2018K\u2019.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All the elements of the Binary Search Tree are unique.\n2. You can\u2019t use the same node value/element of BST twice.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, which denotes the number of test cases. Then each test case  follows. \n\nThe first line of every test case contains elements of Binary Search Tree in the level order form. The input consists of values of nodes separated by a single space in a single line. In case, a node is null, we take -1 in its place.\n\nThe second line of every test case contains a single integer \u2018K\u2019 which denotes the target value.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first-5644-9893.png\"></p>\n\n<pre><code>20 10 35 5 15 30 42 -1 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing \u201ctrue\u201d or \u201cfalse\u201d.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5    \n1 &lt;= N &lt;= 10 ^ 3\n0 &lt;= DATA &lt;= 10 ^ 9\n1 &lt;= K &lt;= 10 ^ 9 \n\nWhere \u2018DATA\u2019 denotes the value of each node in the given tree and \u2018N\u2019 denotes the number of nodes in BST.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2 \n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n13\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n19\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5>Explanation for sample input 1:</h5>\n\n<pre><code>For the first test case, the nodes with values 8 and 5 as shown in the below diagram, gives sum equal to the given target 13. Therefore, the output will be \u201ctrue\u201d i.e it is possible to find a pair in the given BST having sum equal to \u2018K\u2019.\n\nFor the second test case, there are no two elements in the given BST such that their sum is equal to the given target \u2018K\u2019 = 19.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image-5979-9894.jpg\"></p>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n20 16 -1 12 -1 8 -1 4 -1 -1 -1 \n12\n15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n57\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 147,
        "link": "https://www.codingninjas.com/codestudio/problems/pair-sum-in-bst_920493?topList=striver-sde-sheet-problems",
        "title": "Pair Sum in BST.",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    Where 'N' denotes the number of nodes in the given BST\n*/\n#include<stack>\nbool pairSumBst(BinaryTreeNode<int> *root, int k)\n{\n    /*\n        Stack 'start' and 'end' to store the smaller and larger \n        values of BST respectively.\n    BinaryTreeNode<int> *currNode = root;\n    // Storing left values of BST in 'start'.\n    while (currNode != NULL)\n    {\n        start.push(currNode);\n        currNode = currNode -> left;\n    }\n    // Setting currNode again pointing to root.\n    currNode = root;\n    // Storing right values of BST in 'end'.\n    while (currNode != NULL)\n    {\n        end.push(currNode);\n        currNode = currNode -> right;\n    }\n    while (start.top() != end.top())\n    {\n        // Storing top node's value of 'start' stack in 'val1'.\n        int val1 = start.top() -> data;\n        // Storing top node's value of 'end' stack in 'val2'.\n        int val2 = end.top() -> data;\n        // If sum of 'val1' and 'val2' is equal to 'k' then return \"true\".\n        if (val1 + val2 == k)\n        {\n            return true;\n        }\n        // Move to the next greatest closer value.\n        if (val1 + val2 < k)\n        {\n            currNode = start.top() -> right;\n            start.pop();\n            while (currNode != NULL)\n            {\n                start.push(currNode);\n                currNode = currNode -> left;\n            }\n        }\n        // Move to the next smallest closer value.\n        else\n        {\n            currNode = end.top() -> left;\n            end.pop();\n            while (currNode != NULL)\n            {\n                end.push(currNode);\n                currNode = currNode -> right;\n            }\n        }\n    }\n    // If no two nodes is found, return false.\n    return false;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-class-named-as-bstiterator-that-represents-an-iterator-over-inorder-traversal-of-a-binary-search-tree-you-need-to-implement-the-following-things-as-follows\">You are given a class named as BSTIterator that represents an iterator over inorder traversal of a binary search tree. You need to implement the following things as follows:</h4>\n\n<pre><code>1. BSTIterator(Node root) - It is a parameterized constructor in which you are given the root of the Binary search tree. It will be called whenever an object of BSTIterator is created.\n\n2. next() - This member function will return the next smallest element in the in-order traversal of the binary search tree. You need to implement this function.\n\n3. hasNext() - This function will return true if there exists the next smallest element in the traversal else it will return false. You need to implement this function\n</code></pre>\n\n<h4 id=\"the-binary-search-tree-has-n-nodes-you-need-to-print-the-inorder-traversal-of-the-tree-using-the-iterator\">The binary search tree has \u2018N\u2019 nodes you need to print the inorder traversal of the tree using the iterator.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first and the only line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bsttominheap-6482.jpg\" alt=\"image\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The single line of output for each test case should contain the inorder traversal of the binary search tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4  \n1 &lt;= A[i] &lt;= 10^9 \n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes, and A[i] is the value of a node.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n2 1 3 -1 -1 -1 -1\n10 5 -1 2 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 2 3\n2 5 10\n</code></pre>\n\n<h5>Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nThe tree will look like this :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t1-7711.png\" alt=\"image\"></p>\n\n<pre><code>The inorder traversal of the tree will be 1, 2, 3.\n\nTest case 2:\nThe tree will look like this:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000449_1621431290_temp.jpg\" alt=\"image\"></p>\n\n<pre><code>The inorder traversal of the tree will be 2, 5, 10.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n6 -1 7 -1 8 -1 -1    \n3 2 4 1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>6 7 8\n1 2 3 4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 148,
        "link": "https://www.codingninjas.com/codestudio/problems/bst-iterator_1112601?topList=striver-sde-sheet-problems",
        "title": "BST Iterator",
        "solution": "/*\n    Time Complexity: O(N)\n    Space complexity: O(N)\n    Where 'N' is the number of nodes.\n*/\n#include <stack>\nclass BSTiterator\n{\npublic:\n    // Create a stack which will store smallest element at the top\n    stack<TreeNode<int> *> st;\n        // Fill the stack with leftmost nodes present in the subtree of root\n        leftMostInorder(root);\n    }\n    int next()\n    {\n        // Pop the minimum\n        TreeNode<int> *top = st.top();\n        st.pop();\n        // Check if it has right child\n        if (top->right != NULL)\n        {\n            // Push leftmost nodes present in the subtree of right child\n            leftMostInorder(top->right);\n        }\n        return top->data;\n    }\n    bool hasNext()\n    {\n        // If size of stack is greater than zero that means there are still some nodes left for processing\n        if (st.size() > 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    // This function will used to push leftmost nodes in the stack present in the subtree of root\n    void leftMostInorder(TreeNode<int> *root)\n    {\n        while (root != NULL)\n        {\n            st.push(root);\n            root = root->left;\n        }\n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-binary-tree-with-39-n-39-nodes-your-task-is-to-return-the-size-of-the-largest-subtree-of-the-binary-tree-which-is-also-a-bst\">You are given a binary tree with 'N' nodes. Your task is to return the size of the largest subtree of the binary tree which is also a BST.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the largest size of the subtree of the binary tree which is also a BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= data &lt;= 10^5 and data!=-1\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n5 2 4 1 3 -1 -1 -1 -1 -1 -1 \n2 1 3 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n3\n</code></pre>\n\n<h4>Explanation for Sample 1:</h4>\n\n<pre><code>The BST corresponding to the first test case is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-5995.png\" alt=\"Explanation\"></p>\n\n<pre><code>The subtree rooted at 2 is a BST and its size is 3.\n\nThe BST corresponding to the second test case is -\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-5996.png\" alt=\"Explanation\"></p>\n\n<pre><code>The subtree rooted at 2 is a BST and its size is 3.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n50 -1 20 -1 30 -1 40 -1 50 -1 -1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 149,
        "link": "https://www.codingninjas.com/codestudio/problems/largest-bst-subtree_893103?topList=striver-sde-sheet-problems",
        "title": "Size of Largest BST in Binary Tree",
        "solution": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    where 'N' is the total number of nodes in the binary tree.\n*/\nstruct info \n{\n    bool isValid;\n    int size, min, max;\n};\ninfo maxSize(TreeNode<int>* currNode, int &maxBST)\n{\n    if (currNode == NULL)\n        return {true, 0, INT_MAX, INT_MIN};\n    }\n    // Information of left and right subtrees.\n    info left = maxSize(currNode -> left, maxBST);\n    info right = maxSize(currNode -> right, maxBST);\n    info currInfo;\n    // Size of current subtree.\n    currInfo.size = left.size + right.size + 1;\n    // Left and Right subtrees must be BST.\n    currInfo.isValid = left.isValid & right.isValid;\n    // Current subtree must form a BST.\n    currInfo.isValid &= (currNode -> data > left.max);\n    currInfo.isValid &= (currNode -> data < right.min);\n    // Updating min and max for current subtree.\n    currInfo.min = min(min(left.min, right.min), currNode -> data);\n    currInfo.max = max(max(left.max, right.max), currNode -> data);\n    if (currInfo.isValid == true)\n    {\n        maxBST = max(maxBST, currInfo.size);\n    }\n    return currInfo;\n}\nint largestBST(TreeNode<int>* root)\n{\n    int maxBST = 0;\n    maxSize(root, maxBST);\n    return maxBST;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-serialize-and-deserialize-refer-to-notes-the-given-binary-tree-you-can-choose-any-algorithm-to-serialize-deserialize-the-given-binary-tree-you-only-have-to-ensure-that-the-serialized-string-can-be-deserialized-to-the-original-binary-tree\">You have been given a binary tree of integers. You are supposed to serialize and deserialize (refer to notes) the given binary tree. You can choose any algorithm to serialize/deserialize the given binary tree. You only have to ensure that the serialized string can be deserialized to the original binary tree.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Serialization is the process of translating a data structure or object state into a format that can be stored or transmitted (for example, across a computer network) and reconstructed later. The opposite operation that is, extracting a data structure from stored information, is deserialization.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the level order traversal of the deserialized binary tree separated by single spaces, for NULL nodes print -1.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 5000\n1 &lt;= data &lt;= 10^5 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n1 -1 3 -1 -1\n3 4 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 -1 3 -1 -1 \n3 4 -1 -1 -1\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the level order traversal of the given tree will be \u201c1 -1 3 -1 -1\u201d where -1 denotes the null nodes.\n\nFor the second test case,  the level order traversal of the given tree will be \u201c3 4 -1 -1 -1\u201d where -1 denotes the null nodes.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 -1 4 5 -1 -1 -1 -1 -1\n2 1 3 4 -1 -1 5 -1 -1 -1 -1 \n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1 2 3 -1 4 5 -1 -1 -1 -1 -1\n2 1 3 4 -1 -1 5 -1 -1 -1 -1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 150,
        "link": "https://www.codingninjas.com/codestudio/problems/serialise-deserialise-a-binary-tree_920328?topList=striver-sde-sheet-problems",
        "title": "Serialize and Deserialize Binary Tree",
        "solution": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(N)\n    Where N is the number of nodes in the Binary Tree.\n*/\n#include <string>\nstring serializeTree(TreeNode<int> *root)\n{\n    //    Intialize serialized as an empty string\n    string serialized = \"\";\n    //    Queue for level order traversal\n    while (level.empty() == false)\n    {\n        //    Pop the Node at the front\n        TreeNode<int> *curr = level.front();\n        level.pop();\n        //    If the current node is not null.\n        if (curr != NULL)\n        {\n            //    Add the value of the curr node to the serialized string.\n            serialized.append(to_string(curr->data));\n            serialized.push_back(',');\n            //    Push the left and the right child nodes in the queue.\n            level.push(curr->left);\n            level.push(curr->right);\n        }\n        //    If the current node is null\n        else\n        {\n            //    Add -1 to the serialized string.\n            serialized.append(\"-1,\");\n        }\n    }\n    //    Return the serialized binary tree.\n    return serialized;\n}\nTreeNode<int> *deserializeTree(string &serialized)\n{\n    //    Pointer for reading elements from the serialized binary tree.\n    int ptr = 0;\n    string firstVal = \"\";\n    //    Read the first value from the string.\n    while (ptr < serialized.length() && serialized[ptr] != ',')\n    {\n        firstVal.push_back(serialized[ptr]);\n        ptr++;\n    }\n    ptr++;\n    int val = stoi(firstVal);\n    //    If the first value if -1 then return null.\n    if (val == -1)\n    {\n        return NULL;\n    }\n    //    Create a new root node.\n    TreeNode<int> *root = new TreeNode<int>(val);\n    //    Queue for level order traversal.\n    queue<TreeNode<int> *> level;\n    //    Push the root node into the queue.\n    level.push(root);\n    while (level.empty() == false)\n    {\n        //    Pop the front node from the queue.\n        TreeNode<int> *curr = level.front();\n        level.pop();\n        string leftChild = \"\";\n        //    Read the value of the left child.\n        while (ptr < serialized.length() && serialized[ptr] != ',')\n        {\n            leftChild.push_back(serialized[ptr]);\n            ptr++;\n        }\n        ptr++;\n        string rightChild = \"\";\n        //    Read the value of the right child.\n        while (ptr < serialized.length() && serialized[ptr] != ',')\n        {\n            rightChild.push_back(serialized[ptr]);\n            ptr++;\n        }\n        ptr++;\n        int leftChildValue = stoi(leftChild);\n        int rightChildValue = stoi(rightChild);\n        //    If the left child node is not null\n        if (leftChildValue != -1)\n        {\n            //    Create new left child node.\n            TreeNode<int> *leftNode = new TreeNode<int>(leftChildValue);\n            curr->left = leftNode;\n            //    Push the left child into the queue.\n            level.push(curr->left);\n        }\n        //    If the right child is not null\n        if (rightChildValue != -1)\n        {\n            //    Create new right child node.\n            TreeNode<int> *rightNode = new TreeNode<int>(rightChildValue);\n            curr->right = rightNode;\n            //    Push the right child into the queue.\n            level.push(curr->right);\n        }\n    }\n    //    Return the root of deserialized the binary tree.\n    return root;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-binary-tree-convert-this-binary-tree-to-a-doubly-linked-list\">Given a Binary Tree, convert this binary tree to a Doubly Linked List.</h4>\n\n<h4 id=\"a-binary-tree-bt-is-a-data-structure-in-which-each-node-has-at-most-two-children\">A Binary Tree (BT) is a data structure in which each node has at most two children.</h4>\n\n<h4 id=\"a-doubly-linked-list-contains-a-previous-pointer-along-with-the-next-pointer-and-data\">A Doubly Linked List contains a previous pointer, along with the next pointer and data.</h4>\n\n<h4 id=\"the-order-of-nodes-in-doubly-linked-list-must-be-the-same-as-inorder-of-the-given-binary-tree\">The order of nodes in Doubly Linked List must be the same as Inorder of the given Binary Tree.</h4>\n\n<h4 id=\"the-doubly-linked-list-should-be-returned-by-taking-the-next-pointer-as-right-and-the-previous-pointer-as-left\">The doubly linked list should be returned by taking the next pointer as right and the previous pointer as left.</h4>\n\n<h4 id=\"you-need-to-return-the-head-of-the-doubly-linked-list\">You need to return the head of the Doubly Linked List.</h4>\n\n<h4 id=\"for-the-given-binary-tree\">For the given binary tree :</h4>\n\n<p><img src=\"https://files.codingninjas.in/graph-6530.png\" alt=\"alt txt\"></p>\n\n<pre><code>You need to return the head to the doubly linked list.\nThe doubly linked list would be: 1 2 3 4 5 and can be represented as:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-1-6531.png\" alt=\"alt txt\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an Integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample :\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-1-6520.png\" alt=\"alt txt\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation  :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, you need to return the head of the Doubly Linked List.\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n-10 ^ 6 &lt;= data &lt;= 10 ^ 6 and data != -1\n\nwhere 'N' is the number of nodes in the tree, 'T' represents the number of test cases and \"data\" denotes data contained in the node of the binary tree.\n\nDuplicate elements can be in the right subtree or left subtree.\n\nTime Limit: 1 sec.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You are not required to print the expected output, and it has already been taken care of. Just implement the function.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n3 1 5 -1 2 -1 -1 -1 -1\n9 6 10 4 7 -1 11 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 2 3 5 \n4 6 7 9 10 11\n</code></pre>\n\n<h5>Explanation of Input 1 :</h5>\n\n<pre><code>Here we have 2 test cases; hence there are 2 binary trees.\n\nTest Case 1 : \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-6533.png\" alt=\"alt txt\"></p>\n\n<pre><code>We can see that the inorder traversal of the given tree is: 1 2 3 5.\n\n\nTest Case 2 : \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-6532.png\" alt=\"alt txt\"></p>\n\n<pre><code>We can see that the inorder traversal of the given tree is: 4 6 7 9 10 11.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n4 6 -1 5 -2 -1 -1 -1 -1\n1 2 3 4 4 -1 4 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>5 6 -2 4 \n4 2 4 1 3 4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 151,
        "link": "https://www.codingninjas.com/codestudio/problems/convert-a-given-binary-tree-to-doubly-linked-list_893106?topList=striver-sde-sheet-problems",
        "title": "Convert A Given Binary Tree To Doubly Linked List",
        "solution": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(N)\n    where 'N' is the number of nodes in the tree.\n*/\n/*************************************************************\n        Following is the Binary Tree node structure\n        class BinaryTreeNode \n        {\n        public : \n            T data;\n            BinaryTreeNode<T> *left;\n            BinaryTreeNode<T> *right;\n                this -> data = data;\n                left = NULL;\n                right = NULL;\n            }\n        };\n*************************************************************/\nvoid findHead(BinaryTreeNode<int> *root, BinaryTreeNode<int> **head, BinaryTreeNode<int> **prev) {\n    // Base case.\n    if(root == NULL)\n    {\n        return ;\n    }\n    findHead(root->left, head, prev);\n    if(*prev == NULL)\n    {\n        *head = root;\n    }\n    else\n    {\n        root->left = *prev;\n        (*prev)->right = root;\n    }\n    *prev = root;\n    findHead(root->right, head, prev);\n}\nBinaryTreeNode<int>* BTtoDLL(BinaryTreeNode<int>* root) {\n    BinaryTreeNode<int>* head = NULL;\n    BinaryTreeNode<int>* prev = NULL;\n    findHead(root, &head, &prev);\n    return head;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-that-integers-are-read-from-a-data-stream-your-task-is-to-find-the-median-of-the-elements-read-so-far\">Given that integers are read from a data stream. Your task is to find the median of the elements read so far.</h4>\n\n<h4 id=\"median-is-the-middle-value-in-an-ordered-integer-list-if-the-size-of-the-list-is-even-there-is-no-middle-value-so-the-median-is-the-floor-of-the-average-of-the-two-middle-values\">Median is the middle value in an ordered integer list. If the size of the list is even there is no middle value. So the median is the floor of the average of the two middle values.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>[2,3,4] - median is 3.\n[2,3] - median is floor((2+3)/2) = 2.\n</code></pre>\n\n<p><br>\n<be></be></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\nThe first line of each test case contains the number of elements, N, in the input data stream.\n\nThe second line of each test case contains N space separated elements of the input data stream.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the median of the elements after each incoming element. Each median value is separated by a single space.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, just return the vector of medians after each element is read from the stream. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n0 &lt;= data &lt;= 10^8\nWhere T is the number of test cases, N is the number of elements in the data stream.\n\nTime Limit : 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>3\n3\n1 2 3 \n2\n9 9 \n1\n4 \n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 1 2\n9 9 \n4 \n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1 \nAfter reading first element of stream , Median of [1] is 1 \nAfter reading second element of stream, Median of [1, 2]  = floor((1+2)/2)  = 1\nAfter reading third element of stream, Median of [1,2,3] = 2\nSo the output will be 1 1 2.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n3\n5 3 8\n2\n3 8\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>5 4 5\n3 5\n</code></pre>\n\n<h5>Explanation for Sample Input 2:</h5>\n\n<pre><code>For test case 1 \nAfter reading first element of stream, Median of [5] is 5\nAfter reading second element of stream, Median of [5, 3]  = floor((5+3)/2)  = 4\nAfter reading third element of stream, Median of [5,3,8] = 5 , it is the middle value of the sorted array\nSo the output will be 5 4 5.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 152,
        "link": "https://www.codingninjas.com/codestudio/problems/median-in-a-stream_975268?topList=striver-sde-sheet-problems",
        "title": "Median in a stream",
        "solution": "/*\n    Time complexity: O(N*(log(N))) \n    Space complexity: O(N)\n    where N is the total number of elements in the array.\n*/\n#include <queue>\nvector<int> findMedian(vector<int> &arr, int n){\n    // To store the medians\n    vector<int> medians;\n    // max heap\n    //min heap                            \n    priority_queue<int, vector<int>, greater<int>> hi;   \n    for(int i = 0; i < n; i++){\n        int num = arr[i];\n        // Add to max heap\n        lo.push(num);                                \n        // Balancing step, that is inserting the current element at its position that is either less than median or more than median value\n        hi.push(lo.top());                        \n        lo.pop();\n        // Maintain size property, as 'lo' can have utmost one more element than 'hi' or both have equal number of elements\n        if (lo.size() < hi.size()) {                    \n            lo.push(hi.top());\n            hi.pop();\n        }\n        int median;\n        // For odd number of elements\n        if(lo.size() > hi.size()){\n            median = lo.top();\n        }\n        // For even number of elements\n        else{\n            median = (lo.top() + hi.top())/2;  \n        }\n        medians.push_back(median);\n    }\n    return medians;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-will-be-given-a-stream-of-numbers-and-you-need-to-find-the-kth-largest-number-in-the-stream-at-any-given-time\">You will be given a stream of numbers, and you need to find the kth largest number in the stream at any given time.</h4>\n\n<h4 id=\"as-the-stream-of-numbers-can-not-be-given-during-compile-time-so-you-need-to-design-a-data-structure-which-can-accept-infinite-numbers-and-can-return-the-kth-largest-number-at-any-given-time\">As the stream of numbers can not be given during compile time, so you need to design a data structure which can accept infinite numbers and can return the kth largest number at any given time.</h4>\n\n<h4 id=\"the-stream-of-numbers-is-nothing-but-a-large-collection-of-numbers-from-which-integers-are-read-at-runtime-such-as-the-user-will-never-know-the-upper-limit-on-the-number-of-integers-which-will-be-read\">The stream of numbers is nothing but a large collection of numbers from which integers are read at runtime, such as the user will never know the upper limit on the number of integers which will be read.</h4>\n\n<h4 id=\"the-implemented-data-structure-must-support-the-following-operations\">The implemented data structure must support the following operations:</h4>\n\n<pre><code>1. add(DATA) :\n   This function should take one argument of type integer \n   and store it in its pool.\n2. int getKthLargest() :\n   This function should return the kth largest number from \n   the current pool of integers.\n</code></pre>\n\n<h4 id=\"you-will-be-given-q-queries-of-2-types\">You will be given q queries of 2 types:</h4>\n\n<pre><code>1. 1 val - For this type of query, you need to insert the integer into your current pool of integers\n2. 2 - For this type of query, you need to return the kth largest integer from the current pool of integers.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code> 1. The maximum number of integers that will be given will always be under memory limits.\n 2. You will also be given an initial pool of integers whose size will be equal to k.\n 3. The maximum queries of type 1 will be less than 10^5.\n 4. The kth largest element is not the kth distinct element but the kth largest element in the sorted order.\n 5. There will be at least one query of type 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two space-separated integers 'Q\u2019 and \u2018K\u2019,  where Q denotes the number of queries which will be run against the implemented data structure.\n\nThe second line will contain \u2018K\u2019 space-separated integers which will be the initial pool of integers.\n\nThen Q lines follow. The i-th line contains the i-th query in the format as in the problem statement\n\nFor the query of the first type, the input line will contain two integers \u2018QUERYTYPE\u2019 and \u2018DATA\u2019 separated by a single space, representing the type of the operation in integer and the integer data to be included in the pool respectively.\n\nFor the rest of the queries, the input line will contain only one integer value, representing the query being performed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For Query-1, you do not need to return anything.\n\nFor Query-2, prints the kth largest integer from the current pool.\n\nThe output of each query of type 2 has to be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given functions. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 10 ^ 4\n1 &lt;= K &lt;= 10 ^ 5\n1 &lt;= QUERYTYPE &lt;= 2\n1 &lt;= DATA &lt;= 10 ^ 9 \n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>5 3\n2 1 3\n2\n1 2 \n2\n1 3 \n2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1\n2\n2\n</code></pre>\n\n<h5>Explanation of the Sample Input1:</h5>\n\n<pre><code>The initial pool is - 2 1 3. Clearly, the 3rd largest element in this group is 1.\nWhen 2 is added the pool is now  - 2 2 1 3. Now the 3rd largest element is 2(as when we sort the pool it becomes 3 2 2 1).\nWhen 3 is added the pool is now - 2 2 1 3 3. Even now the 3rd largest element is 2 only.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1 5\n4 4 4 4 2\n2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 153,
        "link": "https://www.codingninjas.com/codestudio/problems/kthlargestnumber_800301?topList=striver-sde-sheet-problems",
        "title": "Kth Largest Element In A Stream",
        "solution": "/*\n    Time Complexity : O(N * log(K))\n    Space Complexity : O(N)\n    Where 'N' is the maximum number of integers read at runtime\n    and 'K' is the required order of number in sorted order.  \n*/\n#include<queue>\nclass Kthlargest {\npublic:\n    int size;\n    priority_queue<int, vector<int>, greater<int>> pq;\n        for (auto it:arr) {\n            pq.push(it);\n            if (pq.size() > size) {\n                /*\n                    Remove the top element from the queue as soon\n                    as its size becomes greater than k.\n                */\n                pq.pop();             \n            }\n        }\n    }\n    void add(int num) {\n        pq.push(num);\n        if (pq.size() > size) {\n            pq.pop();\n        }\n    }\n    int getKthLargest() {\n        /*\n            The kth largest element will always\n            be at the top of the queue.\n        */\n        return pq.top();     \n    }\n};\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-arr-of-size-n-and-an-integer-k-your-task-is-to-find-the-total-number-of-distinct-elements-present-in-every-k-sized-window-of-the-array-a-k-sized-window-can-also-be-viewed-as-a-series-of-continuous-k-elements-present-in-the-sequence\">You are given an array \u2018ARR\u2019 of size \u2018N\u2019 and an integer \u2018K\u2019. Your task is to find the total number of distinct elements present in every \u2018K\u2019 sized window of the array. A \u2018K\u2019 sized window can also be viewed as a series of continuous \u2018K\u2019 elements present in the sequence.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The size of \u2018ARR\u2019 will always be greater than or equal to the \u2018K\u2019.\n2. Here window refers to a subarray of \u2018ARR\u2019. Hence \u2018K\u2019 sized window means a subarray of size \u2018K\u2019.\n3. You are not required to print the output explicitly. It has already been taken care of. Just implement the function and return an array of the count of all distinct elements in the \u2018K\u2019 size window.\n</code></pre>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>Consider ARR = [ 1, 2, 1, 3, 4, 2, 3 ] and K = 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-79-6161.png\" alt=\"subsequence\"></p>\n\n<pre><code>As per the given input, we have a sequence of numbers of length 7, and we need to find the number of distinct elements present in all the windows of size 3.\n\nWindow-1 has three elements { 1, 2, 1 } and only two elements { 1, 2 } are distinct because 1 is repeating two times.\nWindow-2 has three elements { 2, 1, 3 } and all three elements are distinct { 2, 1, 3 }.\nWindow-3 has three elements { 1, 3, 4 } and all three elements are distinct { 1, 3, 4 }.\nWindow-4 has three elements { 3, 4, 2 } and all three elements are distinct { 3, 4, 2 }.\nWindow-5 has three elements { 4, 2, 3 } and all three elements are distinct { 4, 2, 3 }.\n\nHence, the count of distinct elements in all K sized windows is { 2, 3, 3, 3, 3 }.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of the input contains an integer, 'T,\u2019 denoting the number of test cases.\nThe first line of each test case contains two space-separated integers, 'N' and \u2018K\u2019, denoting the number of elements in the array and the size of the window.\nThe second line of each test case contains 'N' space-separated integers denoting the elements of the array 'ARR'.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an array that contains the number of distinct elements in all \u2018K\u2019 size windows, and the count of distinct elements must be from the left to the right window. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 5\n1 &lt;= K &lt;= N\n1 &lt;=ARR[i] &lt;= 10 ^ 9\n\nWhere 'T' denotes the number of test cases, 'N' denotes the number of elements in the array, \u2018K\u2019 denotes the size of the window, and 'ARR[i]' denotes the 'i-th' element of the array 'ARR'.\n\nTime limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n7 4\n1 2 1 3 4 2 3\n5 3\n1 1 2 1 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3 4 4 3\n2 2 3\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>Test Case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-81-6162.png\" alt=\"subsequence\"></p>\n\n<pre><code>Window-1 has four elements { 1, 2, 1, 3 } and only three elements { 1, 2, 3 } are distinct because 1 is repeating two times.\nWindow-2 has four elements { 2, 1, 3, 4 } and all four elements { 2, 1, 3, 4 } are distinct.\nWindow-3 has four element { 1, 3, 4, 2 } and all four elements { 1, 3, 4, 2 } are distinct. \nWindow-4 has four element { 3, 4, 2, 3 } and only three elements { 3, 4, 2 } are distinct because 3 is repeating two times.\n\nHence, the count of distinct elements in all windows is { 3, 4, 4, 3}.\n\nTest case 2: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-83-6163.png\" alt=\"subsequence\"></p>\n\n<pre><code>Window-1 has three elements { 1, 1, 2 } and only two elements { 1, 2 } are distinct because 1 is repeating two times.\nWindow-2 has three elements { 1, 2, 1 } and only two elements { 2, 1 } are distinct.\nWindow-3 has three elements { 2, 1, 3 } and all three elements { 2, 1, 3 } are distinct.\n\nHence, the count of distinct elements in all windows is { 2, 2, 3 }.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 1\n2 3 1 2\n5 2\n2 2 3 2 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>1 1 1 1\n1 2 2 2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 154,
        "link": "https://www.codingninjas.com/codestudio/problems/count-distinct-element-in-every-k-size-window_920336?topList=striver-sde-sheet-problems",
        "title": "Count Distinct Element in Every K Size Window",
        "solution": "/*\n    Time complexity: O(N)\n    Space complexity: O(K)\n    Where N denotes the number of elements in the array, and K denotes the size of the window.\n*/\n#include<unordered_map>\nvector<int> countDistinctElements(vector<int> &arr, int k) \n{\n    int n = arr.size();\n    // Create an array to store the number of distinct elements in all windows\n    vector <int> answer(n - k + 1);\n    unordered_map<int,int> hashMap;\n    // Add the frequency of first K element in the HashMap\n    for (int i = 0; i < k; i++) \n    {\n        hashMap[arr[i]] = hashMap[arr[i]] + 1;\n    }\n    // Insert the number of distinct elements present in the first window in the array answer\n    answer[0] = hashMap.size();\n    //  Iterate through all remaining windows\n    for (int index = k; index < n; index++) \n    {\n        // Decrement the frequency of element in the HashMap by 1\n        int element = arr[index - k];\n        hashMap[element] -= 1;\n        // Check if the frequency of element in the HashMap is 0\n        if (hashMap[element] == 0) \n        {\n            hashMap.erase(element);\n        }\n        // Increment the frequency of ARR[index] in the HashMap by 1\n        hashMap[arr[index]] = hashMap[arr[index]] + 1;\n        // Insert the number of distinct elements present in the window in the array answer\n        int windowNumber = index - k + 1;\n        answer[windowNumber] = hashMap.size();\n    }\n    // Return the array answer\n    return answer;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-consisting-of-39-n-39-distinct-positive-integers-and-a-number-39-k-39-your-task-is-to-find-the-kth-largest-element-in-the-array\">You are given an array consisting of 'N' distinct positive integers and a number 'K'. Your task is to find the kth largest element in the array.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the array {2,1,5,6,3,8} and 'K' = 3, the sorted array will be {8, 6, 5, 3, 2, 1}, and the 3rd largest element will be 5.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1) Kth largest element in an array is the kth element of the array when sorted in non-increasing order. \n\n2) All the elements of the array are pairwise distinct.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer 'T' denoting the number of test cases.\n\nThe first line of each test case contains two space- separated integers 'N' and 'K', as described in the problem statement.\n\nThe second line of each test case contains 'N' space-separated integers, representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting the kth largest number in the given array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i] &lt;= 10^9\n1 &lt;= K &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n3 1\n1 2 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation for sample input 1:</h5>\n\n<pre><code>3 is the first largest element in the array {1,2,3}.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n4 2\n5 6 7 8\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>7\n</code></pre>\n\n<h5>Explanation for sample input 2:</h5>\n\n<pre><code>7 is the second largest element in the array {5,6,7,8}.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 155,
        "link": "https://www.codingninjas.com/codestudio/problems/kth-largest-element-in-the-unsorted-array_893030?topList=striver-sde-sheet-problems",
        "title": "Kth largest element in the unsorted array",
        "solution": "/*\n    Time Complexity: O(K + (N-K) * log(K))\n    Space Complexity: O(K)\n    where 'N' is the length of the array and 'K' is order of the largest element to be found.\n*/\nint kthLargest(vector<int>& arr, int size, int K)\n{\n    // Initializing Priority queue with priority to the min element( functions as Min-Heap).\n    priority_queue<int, vector<int>, greater<int> >pq;\n    int val;\n    for (int i = 0; i < size; i++)\n    {\n            pq.push(arr[i]);\n        }\n        else\n        {\n            val = pq.top();\n            if (val < arr[i])\n            {\n                pq.pop();\n                pq.push(arr[i]);\n            }\n        }\n    }\n    return pq.top();\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-has-found-his-new-passion-for-photography-he-has-clicked-some-really-good-photos-but-in-one-of-his-images-he-doesn-t-like-the-color-of-a-particular-region-so-he-decides-to-change-the-color-of-that-region-can-you-help-him-with-this-task\">Ninja has found his new passion for photography. He has clicked some really good photos but in one of his images, he doesn\u2019t like the color of a particular region. So, he decides to change the color of that region. Can you help him with this task?</h4>\n\n<h4 id=\"the-image-is-represented-in-the-form-of-a-2d-array-of-size-m-n-each-pixel-in-the-image-is-a-positive-integer-ninja-has-given-you-the-coordinates-row-and-column-of-a-certain-pixel-and-the-new-color-value-you-need-to-replace-the-color-of-the-given-pixel-and-all-adjacent-same-colored-pixels-with-the-new-color\">The image is represented in the form of a 2D array of size M * N. Each pixel in the image is a positive integer. Ninja has given you the coordinates (row and column) of a certain pixel and the new color value. You need to replace the color of the given pixel and all adjacent same-colored pixels with the new color.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Two pixels are adjacent if they are connected to each other in any of the four directions: up, down, left, or right.\n\nDiagonal pixels are not considered adjacent.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the image of size 4*4, shown below (left). Let the coordinates of the starting pixel are (1, 2) and the new color is 8. The starting pixel, highlighted with red color, has a pixel value of 3. \n\nOn replacing the given pixel and all adjacent same-colored pixels with the new color we get the new image, shown below (right). The modified pixels are highlighted with green color.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9778-sample-1-testcase-1-7109.PNG\" alt=\"example\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of every test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019 representing the number of rows and columns in the image.\n\nEach of the next \u2018M\u2019 lines contains \u2018N\u2019 space-separated integers denoting the pixel values of the image.\n\n    The next line contains three space-separated integers \u2018X\u2019, \u2018Y\u2019, and \u2018C\u2019 denoting the row and column of the starting pixel and the new color, respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the newly colored image is printed in the form of an M * N Matrix.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100 \n1 &lt;= M, N &lt;= 50\n0 &lt;= X &lt; M\n0 &lt;= Y &lt; N\n1 &lt;= Image[i][j], C &lt;= 10^5    \n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4 4\n1 1 7 5\n1 3 3 3\n6 5 5 3\n2 2 3 3\n1 2 8\n5 6\n1 2 1 2 3 5\n1 2 2 4 3 4\n1 2 4 4 5 4\n6 2 2 2 3 4\n7 6 1 3 3 3\n3 2 4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 1 7 5\n1 8 8 8\n6 5 5 8\n2 2 8 8\n1 4 1 2 3 5\n1 4 4 4 3 4\n1 4 4 4 5 4\n6 4 4 4 3 4\n7 6 1 3 3 3\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, refer to the example explained before.\n\nFor the second test case, we are given an image of size 5*6, shown below (left). The coordinates of the starting pixel are (3, 2) and the new color is 4. The starting pixel, highlighted with red color, has a pixel value of 2. \n\nOn replacing the given pixel and all adjacent same colored pixels with the new color we get the new image, shown below (right). The modified pixels are highlighted with green color.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9778-sample-1-testcase-2-7110.PNG\" alt=\"Sample 1 - TestCase 2\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 1\n5\n0 0 6\n2 2\n1 3\n3 3\n1 1 5\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>6\n1 5\n5 5\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 156,
        "link": "https://www.codingninjas.com/codestudio/problems/flood-fill-algorithm_1089687?topList=striver-sde-sheet-problems",
        "title": "Flood Fill Algorithm",
        "solution": "/*\n    Time complexity: O(M * N)\n    Space Complexity: O(M * N)\n    Where M and N are the number of rows and columns in the image, respectively.\n*/\n#include <queue>\nvector<vector<int>> floodFill(vector<vector<int>> &image, int x, int y, int newColor)\n{\n    int oldColor = image[x][y];\n    // Number of rows.\n    int m = image.size();\n    int n = image[0].size();\n    // Queue to hold the coordinates of the pixels.\n    queue<pair<int, int>> q;\n    q.push({x, y});\n    while (!q.empty())\n    {\n        pair<int, int> currentPixel = q.front();\n        q.pop();\n        // i and j represent the row and column of the current pixel.\n        int i = currentPixel.first;\n        int j = currentPixel.second;\n        // Check if the current coordinates are valid.\n        if (i >= 0 && i < m && j >= 0 && j < n)\n        {\n            // Now, check if the current pixel has been colored or not.\n            if (image[i][j] == oldColor && image[i][j] != newColor)\n            {\n                // So, replace the old colour.\n                image[i][j] = newColor;\n                // Push the adjacent pixels into the queue.\n                q.push({i, j + 1});\n                q.push({i, j - 1});\n                q.push({i + 1, j});\n                q.push({i - 1, j});\n            }\n        }\n    }\n    return image;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-reference-address-of-a-node-in-a-connected-undirected-graph-containing-n-nodes-and-m-edges-you-are-supposed-to-return-a-clone-of-the-given-graph-which-is-nothing-but-a-deep-copy-each-node-in-the-graph-contains-an-integer-data-and-an-array-list-of-its-neighbours\">You are given a reference/address of a node in a connected undirected graph containing N nodes and M edges. You are supposed to return a clone of the given graph which is nothing but a deep copy. Each node in the graph contains an integer \u201cdata\u201d and an array/list of its neighbours.</h4>\n\n<h4 id=\"the-structure-of-the-graphnode-class-is-as-follows\">The structure of the graphNode class is as follows:</h4>\n\n<pre><code>class graphNode \n{  \n    public:\n        int data;\n        vector&lt;graphNode*&gt; neighbours;\n}\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. Nodes are numbered from 1 to N.\n\n2. Your solution will run on multiple test cases. If you are using global variables make sure to clear them.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of the test case. Then the test cases are as follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the number of nodes in the graph.\n\nThe second line of each test case contains a single integer \u2018M\u2019 representing the number of edges. \n\nThe next \u2018M\u2019 lines in each test case contain two integers \u2018U\u2019 and \u2018V\u2019 separated by a single space denoting an undirected edge between nodes U and V. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing \"true\" if the graph is cloned correctly otherwise it will print \"false\".\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 100000\n1 &lt;= M &lt;= min(N(N-1)/2,100000)\n1 &lt;= E[i][0], E[i][1] &lt;= N\n\nWhere  \u2018N\u2019 is the number of nodes in the given graph, \u2018M\u2019 denotes the number of edges and \u2018E\u2019 denotes the edge matrix.\n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n5\n6\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\n3\n2\n1 2\n1 3\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5>Explanation of Input 1 :</h5>\n\n<pre><code>In the first test case, the returned graph contains 5 nodes and 6 edges which are:\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\nSince it is similar to the given graph with different address nodes then the solution is correct.\n\nIn the second test case, the returned graph contains 3 nodes and 2 edges which are:\n1 2\n1 3\nSince it is similar to the given graph with different address nodes then the solution is correct.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n5\n4\n1 2\n2 3\n3 4\n4 5\n2\n1\n1 2\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5>Explanation of Input 2 :</h5>\n\n<pre><code>In the first test case, the returned graph contains 5 nodes and 4 edges which are:\n1 2\n2 3\n3 4\n4 5\nSince it is similar to the given graph with different address nodes then the solution is correct.\n\nIn the second test case, the returned graph contains 2 nodes and 1 edge which is:\n1 2\n\nSince it is similar to the given graph with different address nodes then the solution is correct.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 157,
        "link": "https://www.codingninjas.com/codestudio/problems/clone-graph_1103394?topList=striver-sde-sheet-problems",
        "title": "Clone Graph",
        "solution": "/*\n    Time Complexity: O(N + M)\n    Space Complexity: O(N)\n    Where N is the number of nodes\n    and M is the number of edges in the given graph.\n*/\n#include <unordered_map>\ngraphNode *cloneGraphHelper(graphNode *node, unordered_map<graphNode *, graphNode *> &copies)\n{\n    // If the current node is NULL.\n    if (node == NULL)\n    {\n        return NULL;\n    // If HashMap doesn't contain the node.\n    if (copies.find(node) == copies.end())\n    {\n        copies[node] = new graphNode(node->data, {});\n        // Go through all the neighbours.\n        for (graphNode *neighbour : node->neighbours)\n        {\n            copies[node]->neighbours.push_back(cloneGraphHelper(neighbour, copies));\n        }\n    }\n    return copies[node];\n}\ngraphNode *cloneGraph(graphNode *node)\n{\n    // Create a HashMap.\n    unordered_map<graphNode *, graphNode *> copies;\n    // Return the source node of cloned graph.\n    return cloneGraphHelper(node, copies);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-an-undirected-and-disconnected-graph-g-v-e-containing-39-v-39-vertices-and-39-e-39-edges-the-information-about-edges-is-given-using-39-graph-39-matrix-where-i-th-edge-is-between-graph-i-0-and-graph-i-1-print-its-dfs-traversal\">Given an undirected and disconnected graph G(V, E), containing 'V' vertices and 'E' edges, the information about edges is given using 'GRAPH' matrix, where i-th edge is between GRAPH[i][0] and GRAPH[i][1]. print its DFS traversal.</h4>\n\n<pre><code>V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. \n\nE is the number of edges present in graph G.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The Graph may not be connected i.e there may exist multiple components in a graph.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input will contain two Integers V and E, separated by a single space.\n\nFrom the second line onwards, the next 'E' lines will denote the undirected edge of the graphs. \n\nEvery edge is defined by two single space-separated integers 'a' and 'b', which signifies an edge between the vertices 'a' and 'b'.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first line of output will contain the size of the connected components.\n\nFor every connected component in the graph, print the vertices of the component in the sorted order of the vertex values separated with a single space.\n\nPrint each component in on a different line by making sure that the first vertex of each component is also sorted on the vertex values. \n\nA component having a smaller first vertex in sorted order will come first.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= V &lt;= 10^3\n1 &lt;= E &lt;= (5 * (10^3))\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>5 4\n0 2\n0 1\n1 2\n3 4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>2\n0 1 2\n3 4\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>If we do a DFS traversal from vertex 0 we will get a component with vertices [0, 2, 1]. If we do a DFS traversal from 3 we will get another component with vertices [3, 4]\n\nHence,  we have two disconnected components so on the first line, print 2. Now, print each component in increasing order. On the first line print 0 1 2 and on the second line, print 3 4.\n\n[0 1 2] comes before [3 4] as the first vertex 0 from the first component is smaller than the first vertex 3 from the second component.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>9 7\n0 1\n0 2\n0 5\n3 6\n7 4\n4 8\n7 8\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>3\n0 1 2 5\n3 6\n4 7 8\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 158,
        "link": "https://www.codingninjas.com/codestudio/problems/dfs-traversal_630462?topList=striver-sde-sheet-problems",
        "title": "DFS Traversal",
        "solution": "/*\n    Time Complexity     :   O((V * log(V)) + E)\n    Space Complexity    :   O(V + E)\n    Where 'V' is the number of vertex and 'E' is the number of edges in graph.\n*/\nvoid depthFirstSearchHelper(int vertex, vector<int> &visited, vector<int> &singleComponent, vector<vector<int>> &graph)\n{\n    visited[vertex] = 1;\n    singleComponent.push_back(vertex);\n    for (auto child : graph[vertex])\n    {\n        // Check if the node is visited before or not.\n        {\n            depthFirstSearchHelper(child, visited, singleComponent, graph);\n        }\n    }\n}\nvector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)\n{\n    // Creating Adjacency Matrix.\n    vector<vector<int>> graph(V);\n    for (int i = 0; i < E; i++)\n    {\n        int a, b;\n        a = edges[i][0];\n        b = edges[i][1];\n        graph[a].push_back(b);\n        graph[b].push_back(a);\n    }\n    vector<vector<int>> components;\n    vector<int> visited(V, 0);\n    for (int vertex = 0; vertex < V; vertex++)\n    {\n        if (!visited[vertex])\n        {\n            vector<int> singleComponent;\n            depthFirstSearchHelper(vertex, visited, singleComponent, graph);\n            components.push_back(singleComponent);\n        }\n    }\n    return components;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-undirected-and-disconnected-graph-g-v-e-having-v-vertices-numbered-from-0-to-v-1-and-e-edges-your-task-is-to-print-its-bfs-traversal-starting-from-the-0th-vertex\">You are given an undirected and disconnected graph G(V, E) having V vertices numbered from 0 to V-1 and E edges. Your task is to print its BFS traversal starting from the 0th vertex.</h4>\n\n<h4 id=\"bfs-or-breadth-first-traversal-of-a-graph-is-an-algorithm-used-to-visit-all-of-the-nodes-of-a-given-graph-in-this-traversal-algorithm-one-node-is-selected-and-then-all-of-the-adjacent-nodes-are-visited-one-by-one\">BFS or Breadth-First Traversal of a graph is an algorithm used to visit all of the nodes of a given graph. In this traversal algorithm, one node is selected, and then all of the adjacent nodes are visited one by one.</h4>\n\n<h4 id=\"an-undirected-graph-is-a-graph-where-all-the-edges-are-bidirectional-i-e-they-point-from-source-to-destination-and-destination-to-source\">An undirected graph is a graph where all the edges are bidirectional, i.e., they point from source to destination and destination to source.</h4>\n\n<h4 id=\"a-graph-is-disconnected-if-at-least-two-vertices-of-the-graph-are-not-connected-by-a-path\">A graph is disconnected if at least two vertices of the graph are not connected by a path.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Here, you need to consider that you need to print the BFS path starting from vertex 0 only. \n2. V is the number of vertices present in graph G, and all vertices are numbered from 0 to V-1. \n3. E is the number of edges present in graph G.\n4. Graph input is provided as the number of vertices and a list of edges.\n5. Handle for Disconnected Graphs as well.\n</code></pre>\n\n<h4 id=\"for-example-consider-graph\">For Example: Consider graph:</h4>\n\n<p><img src=\"https://files.codingninjas.in/graph01-6442.png\" alt=\"example\"></p>\n\n<pre><code>Here, starting from 0, it is connected to 1 and 2 so, BFS traversal from here will be [0, 1, 2 ]. Now, 3 is also connected to 2. So, BFS traversal becomes [0, 1, 2, 3].\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>For each node, the correct order of printing the connected nodes will be sorted order, i.e., if {3,6,9,4} are connected to 1, then the correct order of their printing is {1,3,4,6,9}.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains two integers that denote the value of V and E.\nEach of the following E lines contains space-separated two integers that denote an edge between vertex A and B.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the BFS Traversal, as described in the task.\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>0 &lt;= V &lt;= 10^4\n0 &lt;= E &lt;= (V * (V - 1)) / 2\n0 &lt;= A &lt;= V - 1\n0 &lt;= B &lt;= V - 1\n\nWhere 'V' is the number of vertices, 'E' is the number of edges, 'A' and 'B' are the vertex numbers.\nTime Limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>4 4\n0 1\n0 3\n1 2\n2 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>0 1 3 2\n</code></pre>\n\n<h5>Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/graph02-6440.png\" alt=\"example\"></p>\n\n<pre><code>Starting from 0, it is connected to 1 and 3, which will be printed. Then comes 2, which was connected to 1. \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>4 3\n0 1\n0 3\n1 3\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>0 1 3 2\n</code></pre>\n\n<h5>Explanation for sample input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/graph03-6441.png\" alt=\"example\"></p>\n\n<pre><code>Starting from 0, it is connected to 1 and 3, which will be printed. The remaining node is 2, which will be printed at the end.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Easy",
        "frontendQuestionId": 159,
        "link": "https://www.codingninjas.com/codestudio/problems/bfs-in-graph_973002?topList=striver-sde-sheet-problems",
        "title": "BFS in Graph",
        "solution": "/* \n    Time complexity: O(V + E). \n    Space complexity: O(V^2). \n    Where V is the number of vertices in the input graph and \n    E is the number of edges in the input graph.\n*/\n#include <queue>\nvoid printBFSHelper(vector<vector<int>> &adjacency_matrix, int source, vector<bool> &visited,vector<int> &result)\n{\n    queue<int> queue;\n    visited[source] = true;\n    queue.push(source);\n    while (!queue.empty())\n    {\n        int front = queue.front();\n        queue.pop();\n        result.push_back(front);\n        for (int i = 0; i < adjacency_matrix.size(); i++)\n        {\n            if (adjacency_matrix[front][i] == 1 && !visited[i])\n            {\n                visited[i] = true;\n                queue.push(i);\n            }\n        }\n    }\n}\n// Converts the given input into adjacency matrix. \nvector<vector<int>> createAdjMat(int vertex, vector<pair<int, int>> &edges)\n{\n    vector<vector<int>> adjacency_matrix(vertex);\n    for (int i = 0; i < vertex; i++)\n    {\n        adjacency_matrix[i] = vector<int>(vertex);\n        for (int j = 0; j < vertex; j++)\n        {\n            adjacency_matrix[i][j] = 0;\n        }\n    }\n    for (int i = 0; i < edges.size(); i++)\n    {\n        adjacency_matrix[edges[i].first][edges[i].second] = 1;\n        adjacency_matrix[edges[i].second][edges[i].first] = 1;\n    }\n    return adjacency_matrix;\n}\nvector<int> BFS(int vertex, vector<pair<int, int>> &edges)\n{\n    vector<vector<int>> adjacency_matrix = createAdjMat(vertex, edges);\n    vector<bool> visited(adjacency_matrix.size());\n    for(int i =0; i<vertex; i++){\n        visited[i] = false;\n    }\n    vector<int> result;\n    // Traversing through all the nodes.\n    for (int i = 0; i < adjacency_matrix.size(); i++)\n    {\n        if (!visited[i])\n        {\n            printBFSHelper(adjacency_matrix, i, visited,result);\n        }\n    }\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-an-undirected-graph-with-39-n-39-vertices-and-39-m-39-edges-the-vertices-are-labelled-from-1-to-39-n-39\">You have been given an undirected graph with 'N' vertices and 'M' edges. The vertices are labelled from 1 to 'N'.</h4>\n\n<h4 id=\"your-task-is-to-find-if-the-graph-contains-a-cycle-or-not\">Your task is to find if the graph contains a cycle or not.</h4>\n\n<h4 id=\"a-path-that-starts-from-a-given-vertex-and-ends-at-the-same-vertex-traversing-the-edges-only-once-is-called-a-cycle\">A path that starts from a given vertex and ends at the same vertex traversing the edges only once is called a cycle.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>In the below graph, there exists a cycle between vertex 1, 2 and 3. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-90-6892.png\" alt=\"Example\"></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. There are no parallel edges between two vertices.\n\n2. There are no self-loops(an edge connecting the vertex to itself) in the graph.\n\n3. The graph can be disconnected.\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>Input: N = 3 , Edges =  [[1, 2], [2, 3], [1, 3]].\nOutput: Yes\n\nExplanation : There are a total of 3 vertices in the graph. There is an edge between vertex 1 and 2, vertex 2 and 3 and vertex 1 and 3. So, there exists a cycle in the graph. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the total number of vertices and edges, respectively.\n\nThe next \u2018M\u2019 lines contain two single space-separated integers representing an edge of the graph.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output will return \u201cYes\u201d if there exists a cycle in the graph. Else print \u201cNo\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5000\n0 &lt;= M &lt;= min(5000, (N * (N - 1)) / 2)\n1 &lt;= edges[i][0] &lt;= N \n1 &lt;= edges[i][1] &lt;= N \n\nTime Limit: 1 sec \n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n3 2\n1 2\n2 3\n</code></pre>\n\n<h5>Sample output 1:</h5>\n\n<pre><code>No\n</code></pre>\n\n<h5>Explanation of Sample output 1:</h5>\n\n<pre><code> The above graph can be represented as \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-92-6893.png\" alt=\"Example\"></p>\n\n<pre><code>There are a total of 3 vertices in the graph.There is an edge between vertex 1 and 2 and vertex 2 and 3. So, there is no cycle present in the graph. \n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 0 \n4 3\n1 4\n4 3\n3 1\n</code></pre>\n\n<h5>Sample output 2:</h5>\n\n<pre><code>No\nYes\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 160,
        "link": "https://www.codingninjas.com/codestudio/problems/cycle-detection-in-undirected-graph_1062670?topList=striver-sde-sheet-problems",
        "title": "Cycle Detection In Undirected Graph",
        "solution": "/*\n    Time Complexity : O(M * log(N))\n    Space Complexity : O(N)\n    where 'N' is the number of vertices and\n    'M' is the number of edges in the graph.\n*/\nint findparent (int i, vector<int>& parent)\n{\n    if (i == parent[i])\n    {\n        return i;\n    }\n    return parent[i] = findparent (parent[i], parent);\n}\n{\n    vector<int> parent(n + 1, 0);\n    vector<int> rank(n + 1, 0);\n    for (int i = 1; i <= n; i++)\n    {\n        rank[i] = 1;\n        parent[i] = i;\n    }\n    for (vector<int>& ar : edges)\n    {\n        int u = ar[0];\n        int v = ar[1];\n        int p1 = findparent (u, parent);\n        int p2 = findparent (v, parent);\n        if (p1 != p2)\n        {\n            if (rank[p1] < rank[p2])\n            {\n                parent[p1] = p2;\n            }\n            else if (rank[p1] > rank[p1])\n            {\n                parent[p2] = p1;\n            }\n            else\n            {\n                parent[p1] = p2;\n                rank[p2]++;\n            }\n        }\n        else\n        {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-directed-graph-having-n-nodes-a-matrix-edges-of-size-m-x-2-is-given-which-represents-the-m-edges-such-that-there-is-an-edge-directed-from-node-edges-i-0-to-node-edges-i-1\">You are given a directed graph having \u2018N\u2019 nodes. A matrix \u2018EDGES\u2019 of size M x 2 is given which represents the \u2018M\u2019 edges such that there is an edge directed from node EDGES[i][0] to node EDGES[i][1].</h4>\n\n<h4 id=\"find-whether-the-graph-contains-a-cycle-or-not-return-true-if-a-cycle-is-present-in-the-given-directed-graph-else-return-false\">Find whether the graph contains a cycle or not, return true if a cycle is present in the given directed graph else return false.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>In the following directed graph has a cycle i.e. B-&gt;C-&gt;E-&gt;D-&gt;B.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/dag-6867.png\" alt=\"alt text\"></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The cycle must contain at least two nodes.\n2. It is guaranteed that the given graph has no self-loops in the graph.\n3. The graph may or may not be connected.\n4. Nodes are numbered from 1 to N.\n5. Your solution will run on multiple test cases. If you are using global variables make sure to clear them.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of the test case. Then the test cases are as follows.\n\nThe first line of each test case argument given is an integer \u2018N\u2019 representing the number of nodes in the graph.\n\nThe second line of each test case contains a given integer \u2018M\u2019 representing the number of edges. \n\nThe next \u2018M\u2019 lines in each test case contain a matrix \u2018EDGES\u2019 of size M x 2 which represents the \u2018M\u2019 edges such that there is an edge directed from node EDGES[i][0] to node EDGES[i][1].\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print true if a cycle is present in the given directed graph else print false.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 5\n\n2 &lt;= N &lt;= 100\n1 &lt;= M &lt;= min(100,N(N-1)/2)\n1 &lt;= EDGES[i][0], EDGES[i][1] &lt;= N\n\nWhere \u2018T\u2019 is the number of test cases.\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n5\n6\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>true\n</code></pre>\n\n<h5>Explanation For Input 1 :</h5>\n\n<pre><code>The given graph contains cycle 1 -&gt; 3 -&gt; 4 -&gt; 1 or the cycle 1 -&gt; 2 -&gt; 4 -&gt; 1.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n5\n4\n1 2\n2 3\n3 4\n4 5\n2\n1\n1 2\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>false\nfalse\n</code></pre>\n\n<h5>Explanation For Input 2 :</h5>\n\n<pre><code>The given graphs don\u2019t contain any cycle.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 161,
        "link": "https://www.codingninjas.com/codestudio/problems/detect-cycle-in-a-directed-graph_1062626?topList=striver-sde-sheet-problems",
        "title": "Detect Cycle In A Directed Graph",
        "solution": "/*\n    Time Complexity: O(N+M)\n    Space Complexity: O(N)\n    Where N is the number of nodes and M is the number of edges in the given graph.\n*/\n#include <list>\n#include <queue>\nclass Graph {\n    int noOfNodes;\n    // Pointer to an array containing adjacency lists.\n    list < int > * adj;\n        // Act as Constructor.\n        Graph(int noOfNodes);\n    // To add an edge to between two nodes in a Graph.\n    void addEdge(int v, int w);\n    // Returns true if there exists a cycle in the given graph.\n    bool checkCyclic();\n};\nGraph::Graph(int noOfNodes) {\n    this -> noOfNodes = noOfNodes;\n    adj = new list < int > [noOfNodes];\n}\nvoid Graph::addEdge(int a, int b) {\n    adj[a].push_back(b);\n}\nbool Graph::checkCyclic() {\n    /* \n      Create a vector to store indegrees \n      (number of incoming edges)\n      of all vertices and initialize all indegrees as 0.\n    */\n    vector < int > inDegree(noOfNodes, 0);\n    // Traverse adjacency lists to fill indegrees of vertices.\n    for (int u = 0; u < noOfNodes; u++) {\n        for (auto v: adj[u]) {\n            inDegree[v]++;\n        }\n    }\n    // Create an queue and enqueue all vertices with indegree 0.\n    queue < int > zeroInDegreeQ;\n    for (int i = 0; i < noOfNodes; i++) {\n        if (inDegree[i] == 0) {\n            zeroInDegreeQ.push(i);\n        }\n    }\n    // Initialize count of visited nodes.\n    int cnt = 0;\n    // Create a vector to store result (Topological Ordering).\n    vector < int > topoOrdering;\n    /*\n      One by one dequeue vertices from queue and \n      enqueue adjacents if indegree of adjacent becomes 0.\n    */\n    while (zeroInDegreeQ.empty() == false) {\n        // Extract front of queue and add it to topological order.\n        int u = zeroInDegreeQ.front();\n        zeroInDegreeQ.pop();\n        topoOrdering.push_back(u);\n        /*\n          Iterate through all its neighbouring nodes of \n          dequeued node and decrease their number of \n          incoming edges by 1.\n        */\n        list < int > ::iterator itr;\n        for (itr = adj[u].begin(); itr != adj[u].end(); itr++) {\n            /* \n                If the number of incoming edges becomes zero \n                then add it to the queue.\n            */\n            if (--inDegree[ * itr] == 0) {\n                zeroInDegreeQ.push( * itr);\n            }\n        }\n        cnt++;\n    }\n    // Check if there exists a cycle.\n    if (cnt != noOfNodes) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {\n    Graph directedG(n);\n    int m = edges.size();\n    for (int i = 0; i < m; i++) {\n        directedG.addEdge(edges[i].first - 1, edges[i].second - 1);\n    }\n    return directedG.checkCyclic();\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"a-directed-acyclic-graph-dag-is-a-directed-graph-that-contains-no-cycles\">A Directed Acyclic Graph (DAG) is a directed graph that contains no cycles.</h4>\n\n<h4 id=\"topological-sorting-of-dag-is-a-linear-ordering-of-vertices-such-that-for-every-directed-edge-from-vertex-u-to-vertex-v-vertex-u-comes-before-v-in-the-ordering-topological-sorting-for-a-graph-is-not-possible-if-the-graph-is-not-a-dag\">Topological Sorting of  DAG is a linear ordering of vertices such that for every directed edge from vertex \u2018u\u2019 to vertex \u2018v\u2019, vertex \u2018u\u2019 comes before \u2018v\u2019 in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.</h4>\n\n<h4 id=\"given-a-dag-consisting-of-v-vertices-and-e-edges-you-need-to-find-out-any-topological-sorting-of-this-dag-return-an-array-of-size-v-representing-the-topological-sort-of-the-vertices-of-the-given-dag\">Given a DAG consisting of \u2018V\u2019 vertices and \u2018E\u2019 edges, you need to find out any topological sorting of this DAG.  Return an array of size \u2018V\u2019  representing the topological sort of the vertices of the given DAG.</h4>\n\n<h4 id=\"for-example-consider-the-dag-shown-in-the-picture\">For example,  Consider the DAG shown in the picture.</h4>\n\n<p><img src=\"https://files.codingninjas.in/eg-6753.png\" alt=\"alt tex\"></p>\n\n<h4 id=\"in-this-graph-there-are-directed-edges-from-0-to-1-and-0-to-3-so-0-should-come-before-1-and-3-also-there-are-directed-edges-from-1-to-2-and-3-to-2-so-1-and-3-should-come-before-2\">In this graph, there are directed edges from 0 to 1 and 0 to 3, so 0 should come before 1 and 3. Also, there are directed edges from 1 to 2 and 3 to 2 so 1 and 3 should come before 2.</h4>\n\n<h4 id=\"so-the-topological-sorting-of-this-dag-is-0-1-3-2\">So, The topological sorting of this DAG is  {0 1 3 2}.</h4>\n\n<h4 id=\"note-that-there-are-multiple-topological-sortings-possible-for-a-dag-for-the-graph-given-above-one-another-topological-sorting-is-0-3-1-2\">Note that there are multiple topological sortings possible for a DAG. For the graph given above one another topological sorting is: {0, 3, 1, 2}</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. It is guaranteed that the given graph is DAG.\n2. There will be no multiple edges and self-loops in the given DAG.\n3. There can be multiple correct solutions, you can find any one of them. \n4. Don\u2019t print anything, just return an array representing the topological sort of the vertices of the given DAG.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of  \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains two space-separated integers \u2018V\u2019, \u2018E\u2019, representing the number vertices and edges in the graph respectively.\n\nThen \u2018E\u2019 lines follow,  each containing 2 space-separated integers \u2018u\u2019, \u2018v\u2019 representing that there is a directed edge from vertex \u2018u\u2019 to vertex \u2018v\u2019\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return an array representing the topological sort of the vertices of the given DAG.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= V &lt;= 10^4\n0 &lt;= E &lt;= 10^4\n0 &lt;= u, v &lt; V \n\nWhere \u2018T\u2019 is the total number of test cases, \u2018V\u2019 is the number of vertices, \u2018E\u2019 is the number of edges, and \u2018u\u2019 and \u2018v\u2019 both represent the vertex of a given graph.\n\nTime limit: 2 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n2 1\n1 0\n3 2\n0 1\n0 2\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>1 0\n0 2 1\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThe number of vertices \u2018V\u2019 = 2 and number of edges \u2018E\u2019 = 1.\nThe graph is shown in the picture: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eg1-6752.png\" alt=\"alt text\"> </p>\n\n<pre><code>The topological sorting of this graph should be {1, 0}  as there is a directed edge from vertex 1 to vertex 0, thus 1 should come before 0 according to the given definition of topological sorting.\n\nTest case 2:\nThe number of vertices \u2018V\u2019 = 3 and number of edges \u2018E\u2019 = 2.\nThe graph is shown in the picture:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eg2-6751.png\" alt=\"alt text\"></p>\n\n<pre><code>As there are two directed edges starting from 0, so 0 should come before 1 and 2 in topological sorting. \nThus the topological sorting of this graph should be {0, 2, 1} or {0, 1, 2}\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 0\n4 4\n0 1\n0 3\n1 2\n3 2\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>0\n0 1 3 2\n</code></pre>\n\n<h5>Explanation of Sample Input 2:</h5>\n\n<pre><code>Test case 1:   \nThere is only a single vertex in the graph that is 0, so its topological sort will be {0}.\n\nTest case 2:\nSee problem statement for its explanation\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 162,
        "link": "https://www.codingninjas.com/codestudio/problems/topological-sort_982938?topList=striver-sde-sheet-problems",
        "title": "Topological Sort",
        "solution": "/*\n    Time complexity: O(V+E)\n    Space complexity: O(V)\n    Where V is the number of vertices and E is the number of edges.\n*/\n#include <queue>\nvector<int> topologicalSort(vector<vector<int>> &edges, int v, int e) {\n    // Creating adjacency list.\n    vector<vector<int>> adj(v);\n    for(int i = 0; i < e; i++) {\n        adj[edges[i][0]].push_back(edges[i][1]);\n    } \n    // Calculaing indegree of each vertex.\n        indegree[edge[1]]++;\n    }\n    // Push all vertices of indegree 0 in queue.\n    queue<int> que;\n    for(int i = 0; i < v; i++) {\n        if(indegree[i] == 0) {\n            que.push(i);\n        }\n    }\n    vector<int> result; // It will store topological sort of the given graph.\n    // Finding topologial sorting\n    while(!que.empty()) {\n        int src = que.front();\n        que.pop();\n        result.push_back(src);\n        for(int node : adj[src]) {\n            indegree[node]--;\n            if(indegree[node] == 0) {\n                que.push(node);\n            }\n        }\n    }\n    return result;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-2-dimensional-array-list-having-n-rows-and-m-columns-which-is-filled-with-ones-1-and-zeroes-0-1-signifies-land-and-0-signifies-water\">You are given a 2-dimensional array/list having N rows and M columns, which is filled with ones(1) and zeroes(0). 1 signifies land, and 0 signifies water.</h4>\n\n<h4 id=\"a-cell-is-said-to-be-connected-to-another-cell-if-one-cell-lies-immediately-next-to-the-other-cell-in-any-of-the-eight-directions-two-vertical-two-horizontal-and-four-diagonals\">A cell is said to be connected to another cell, if one cell lies immediately next to the other cell, in any of the eight directions (two vertical, two horizontal, and four diagonals).</h4>\n\n<h4 id=\"a-group-of-connected-cells-having-value-1-is-called-an-island-your-task-is-to-find-the-number-of-such-islands-present-in-the-matrix\">A group of connected cells having value 1 is called an island. Your task is to find the number of such islands present in the matrix.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively, for the two-dimensional array/list.\n\nThe second line onwards, the next 'N' lines or rows represent the ith row values.\n\nEach of the i-th row constitutes 'M' column values separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line of output prints the number of islands present in the 2-dimensional array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly, it has already been taken care of. Implement the function and return the desired output.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^3 \n1 &lt;= M &lt;= 10^3\n0 &lt;= ARR[i][j] &lt;= 1\n\nTime limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>4 5\n0 1 1 0 0\n1 0 0 1 0\n0 0 1 0 0\n1 0 0 0 1\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation For Sample Input 1 :</h5>\n\n<pre><code>The first island of connected 1s is signified by: {0, 1}, {0, 2}, {1, 0}, {1, 3}, {2, 2}.\n\nThe second island being: {3, 0}.\n\nThe third island being: {3, 4}.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>4 4\n1 0 0 1\n0 1 1 0\n0 1 1 0\n1 0 0 1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 163,
        "link": "https://www.codingninjas.com/codestudio/problems/find-number-of-islands_630512?topList=striver-sde-sheet-problems",
        "title": "Find Number Of Islands",
        "solution": "/*\n    Time Complexity: O(N * M)\n    Space Complexity: O(N * M)\n    Where N and M are the number of rows and columns of the 2D array, respectively.\n*/\n#include <vector>\nint dx[] = {0, 1, 1, 1, 0, -1, -1, -1};\nint dy[] = {-1, -1, 0, 1, 1, 1, 0, -1};\n/*\n    dx[] and dy[] are the arrays that define each of the eight directions.\n    dx[0], dy[0] : West\n    dx[3], dy[3] : North-East\n    dx[4], dy[4] : East\n    dx[5], dy[5] : South-East\n    dx[6], dy[6] : South\n    dx[7], dy[7] : South-West\n*/\nvector<vector<bool>> vis;\nvoid getTotalIslandsHelper(int** mat, int n, int m, int x, int y)\n{\n    // Check if this cell is valid.\n    if(!(x >= 0 && x < n && y >= 0 && y < m && mat[x][y] == 1 && !vis[x][y]))\n    {\n        return;\n    }\n    vis[x][y] = true;\n    for(int i=0; i<8; i++)\n    {\n        int nextX = x + dx[i];\n        int nextY = y + dy[i];\n        getTotalIslandsHelper(mat, n, m, nextX, nextY);\n    }\n}\nint getTotalIslands(int** mat, int n, int m)\n{\n    vis = vector<vector<bool>>(n, vector<bool>(m, false));\n    int islands = 0;\n    for(int i=0; i<n; i++)\n    {\n        for(int j=0; j<m; j++)\n        {\n            if(mat[i][j] == 1 && !vis[i][j])\n            {\n                // We have found an undiscovered island.\n                islands++;\n                getTotalIslandsHelper(mat, n, m, i, j);\n            }\n        }\n    }\n    return islands;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-graph-check-whether-the-graph-is-bipartite-or-not-your-function-should-return-true-if-the-given-graph-39-s-vertices-can-be-divided-into-two-independent-sets-u-and-v-such-that-every-edge-u-v-either-connects-a-vertex-from-u-to-v-or-a-vertex-from-v-to-u\">Given a graph, check whether the graph is bipartite or not. Your function should return true if the given graph's vertices can be divided into two independent sets, \u2018U\u2019 and \u2018V\u2019 such that every edge (\u2018u\u2019, \u2018v\u2019) either connects a vertex from \u2018U\u2019 to \u2018V\u2019 or a vertex from \u2018V\u2019 to \u2018U\u2019.</h4>\n\n<h4 id=\"you-are-given-a-2d-array-edges-which-contains-0-and-1-where-edges-i-j-1-denotes-a-bi-directional-edge-from-i-to-j\">You are given a 2D array \u2018edges\u2019 which contains 0 and 1, where \u2018edges[i][j]\u2019 = 1 denotes a bi-directional edge from \u2018i\u2019 to \u2018j\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If edges[i][j] = 1, that implies there is a bi-directional edge between \u2018i\u2019 and \u2018j\u2019, that means there exists both edges from \u2018i\u2019 to \u2018j\u2019 and to \u2018j\u2019 to \u2018i\u2019.\n</code></pre>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>Given:\n\u2018N\u2019 = 3\n\u2018edges\u2019 = [[0, 1, 1], [0, 0, 1], [0,0,0]]. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t1-11544.png\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N,\u2019 where \u2018N\u2019 is the number of rows in \u2018edges\u2019 and the number of columns in \u2018edges\u2019.\n\nThe next \u2018N\u2019 line of each test case contains \u2018N\u2019 space-separated integers which tell if there is an edge between \u2018i\u2019 and \u2018j\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return a bool value determining whether the graph is bipartite or not.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n2 &lt;= \u2018N\u2019 &lt;= 300\n0 &lt;= \u2018edges[i][j]\u2019 &lt;= 1. \n\nTime Limit: 1sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample Input 1 :</h4>\n\n<pre><code>2\n4\n0 1 0 0 \n0 0 0 1 \n0 0 0 0 \n0 0 0 0 \n3\n0 1 1\n0 0 1\n0 0 0\n</code></pre>\n\n<h4>Sample Output 1 :</h4>\n\n<pre><code>1\n0 \n</code></pre>\n\n<h4>Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first test case, the graph is visualized as below,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t2-11545.png\" alt=\"\"></p>\n\n<pre><code>The graph can be divided into 2 disjointed sections, i.e. S1 = {0,2} and S2 = {1,3}. Therefore the answer is true.\n\nIn the second test case, the graph is visualized as below: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t1-11544.png\" alt=\"\"></p>\n\n<pre><code>The answer is 0 since there is no way this graph can be divided into 2 disjoint sets of points.\n</code></pre>\n\n<h4>Sample Input 2 :</h4>\n\n<pre><code>2\n4\n0 0 1 0 \n0 0 0 1 \n0 0 0 0 \n0 0 0 0 \n3\n0 1 1\n0 0 0 \n0 0 0\n</code></pre>\n\n<h4>Sample Output 2 :</h4>\n\n<pre><code>1\n1\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 164,
        "link": "https://www.codingninjas.com/codestudio/problems/check-graph-is-bipartite-or-not_920551?topList=striver-sde-sheet-problems",
        "title": "Check Bipartite Graph",
        "solution": "/*\n    Time Complexity : O(N * N)\n    Space Complexity : O(N)\n    Where 'N' is the number of nodes in the graph.\n*/\n#include <queue>\nbool isGraphBirpatite(vector<vector<int>> &edges) {\n    int n = edges.size();\n    vector<vector<int>> graph(n);\n    for (int i = 0 ; i < n ; i++) {\n        for (int j = 0 ; j < n ; j++) {\n                graph[j].push_back(i);\n            }\n        }\n    }\n    vector<int> color(n, -1);\n    // Marking the color of root as 0.\n    for (int i = 0 ; i < n ; i++) {\n        if (color[i] != -1) {\n            continue;\n        }\n        color[i] = 0;\n        queue<int> que;\n        que.push(i);\n        int c = 0;\n        while (!que.empty()) {\n            int node = que.front();\n            que.pop();\n            // Traversing all the neighbours of the current node.\n            for (int nbr : graph[node]) {\n                if (color[nbr] != -1 and color[nbr] == color[node]) {\n                    return false;\n                } else if (color[nbr] == -1) {\n                    color[nbr] = !color[node];\n                    que.push(nbr);\n                }\n            }\n            c = !c;\n        }\n    }\n    return true;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-unweighted-directed-graph-of-39-v-39-vertices-and-39-e-39-edges-your-task-is-to-print-all-the-strongly-connected-components-sccs-present-in-the-graph\">You are given an unweighted directed graph of 'V' vertices and 'E' edges. Your task is to print all the strongly connected components (SCCs) present in the graph.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of every test case contains two space-separated integers \u2018V\u2019 and \u2018E\u2019 denoting the number of vertices and the number of edges present in the graph. \n\nThe next \u2018E\u2019 lines contain two space-separated integers \u2018a\u2019 and \u2018b\u2019 denoting a directed edge from vertex \u2018a\u2019 to \u2018b\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Use zero-based indexing for the vertices.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print space-separated vertices present in the strongly connected components of the graph, print the output for one SCC on each line.\n\nThe order of sequence does not matter.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= 'T' &lt;= 300 \n1 &lt;= 'V' &lt;= 2000\n'V' - 1 &lt;= 'E' &lt;= 2000\n0 &lt;= 'a, b' &lt; 'V'\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>1\n5 6\n0 1\n1 2\n1 4\n2 3\n3 2\n4 0\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>0 1 4 \n2 3 \n</code></pre>\n\n<h5>Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case, the graph is shown below. There are two SCCs in the graph, which are enclosed in the boxes as shown in the image below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9441-sample-testcase1-graph1-6819.jpg\" alt=\"sample graph 1\"></p>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n1 0\n4 4\n0 1\n1 2\n2 3\n3 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>0\n0\n1 2 3\n</code></pre>\n\n<h5>Explanation for Sample Input 2:</h5>\n\n<pre><code>For the first test case, the graph has 1 node(0) but there are no edges, therefore only 1 SCC exists and that is {0}.\n\nFor the second test case, one SCC is {0} and the other is {1, 2, 3}. Therefore the answer is 0, 1 2 3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 165,
        "link": "https://www.codingninjas.com/codestudio/problems/strongly-connected-components-tarjan-s-algorithm_985311?topList=striver-sde-sheet-problems",
        "title": "Strongly Connected Components (Tarjan\u2019s Algorithm)",
        "solution": "/*\n    Time Complexity: O(V + E)\n    Space Complexity: O(V)\n    Where V is the number of vertices,\n    E is the number of edges in the graph.\n*/\n#include <stack>\n// This marks the discovery time of the nodes\nint discoveryTime = 1;\n// DFS to visit all the nodes in linear time\nvoid dfs(vector<vector<int>> &graph, int node, vector<int> &disc, vector<int> &low, vector<bool> &inStack, stack<int> &nodeStack, vector<vector<int>> &ans)\n    low[node] = discoveryTime;\n    ++discoveryTime;\n    nodeStack.push(node);\n    inStack[node] = true;\n    // Using Tarjan's algorithm here\n    for (int v : graph[node])\n    {\n        // Visiting all unvisited nodes\n        if (disc[v] == -1)\n        {\n            dfs(graph, v, disc, low, inStack, nodeStack, ans);\n            low[node] = min(low[node], low[v]);\n        }\n        else if (inStack[v])\n        {\n            low[node] = min(low[node], disc[v]);\n        }\n    }\n    // If current node is root of a SCC\n    if (low[node] == disc[node])\n    {\n        // component stores one of the possible SCCs\n        vector<int> component;\n        int u;\n        while (nodeStack.top() != node)\n        {\n            u = nodeStack.top();\n            nodeStack.pop();\n            inStack[u] = false;\n            component.push_back(u);\n        }\n        u = nodeStack.top();\n        nodeStack.pop();\n        inStack[u] = false;\n        component.push_back(u);\n        // Inserting the current SCC into the answer\n        ans.push_back(component);\n    }\n}\nvector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)\n{\n    // This stores our graph as Adjacency list\n    vector<vector<int>> graph(n);\n    for (vector<int> &edge : edges)\n    {\n        graph[edge[0]].push_back(edge[1]);\n    }\n    // Arrays to store the low-link value and discovery time of the nodes\n    vector<int> disc(n, -1);\n    vector<int> low(n, -1);\n    stack<int> nodeStack;\n    vector<bool> inStack(n, false);\n    vector<vector<int>> ans;\n    for (int i = 0; i < n; i++)\n    {\n        if (disc[i] == -1)\n        {\n            // Node 'i' has not been visited.\n            dfs(graph, i, disc, low, inStack, nodeStack, ans);\n        }\n    }\n    // Return the final answer\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-an-undirected-graph-of-v-vertices-labeled-0-1-v-1-and-e-edges-each-edge-connecting-two-nodes-x-y-will-have-a-weight-denoting-the-distance-between-node-x-and-node-y\">You have been given an undirected graph of \u2018V\u2019 vertices (labeled 0,1,..., V-1) and \u2018E\u2019 edges. Each edge connecting two nodes (\u2018X\u2019,\u2019Y\u2019) will have a weight denoting the distance between node \u2018X\u2019 and node \u2018Y\u2019.</h4>\n\n<h4 id=\"your-task-is-to-find-the-shortest-path-distance-from-the-source-node-which-is-the-node-labeled-as-0-to-all-vertices-given-in-the-graph\">Your task is to find the shortest path distance from the source node, which is the node labeled as 0, to all vertices given in the graph.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input:\n4 5\n0 1 5\n0 2 8\n1 2 9\n1 3 2\n2 3 6\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-17-6325.jpg\" alt=\"alt text\"></p>\n\n<pre><code>In the given input, the number of vertices is 4, and the number of edges is 5.\n\nIn the input, following the number of vertices and edges, three numbers are given. The first number denotes node \u2018X\u2019, the second number denotes node \u2018Y\u2019 and the third number denotes the distance between node \u2018X\u2019 and \u2018Y\u2019.\n\nAs per the input, there is an edge between node 0 and node 1 and the distance between them is 5.\n\nThe vertices 0 and 2 have an edge between them and the distance between them is 8.\nThe vertices 1 and 2 have an edge between them and the distance between them is 9.\nThe vertices 1 and 3 have an edge between them and the distance between them is 2.\nThe vertices 2 and 3 have an edge between them and the distance between them is 6.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. There are no self-loops(an edge connecting the vertex to itself) in the given graph.\n\n2. There can be parallel edges i.e. two vertices can be directly connected by more than 1 edge.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line contains an Integer 'T' which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two integers \u2018V\u2019 and \u2018E', denoting the number of vertices in the undirected graph and the number of edges in the undirected graph respectively.\n\nThe next \u2018E\u2019 lines contain three space-separated integers \u2018X\u2019, \u2018Y\u2019, and \u2018DISTANCE\u2019, denoting a node \u2018X\u2019, a node \u2018Y\u2019, and the distance between nodes \u2018X\u2019 and \u2018Y\u2019 respectively.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print a single line containing \u2018V\u2019 space-separated integers that denote the shortest distance for each node from 0 to \u2018V\u2019-1, considering that we need the shortest distance from source node 0.\n\nPrint the maximum positive integer value, i.e 2147483647, for the disconnected graph.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= V &lt;= 1000\n1 &lt;= E &lt;= 3000\n0 &lt;= X, Y &lt; V\n1 &lt;= DISTANCE[X][Y] &lt;= 10^5\n\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample input 1</h4>\n\n<pre><code>2\n5 7\n0 1 7\n0 2 1\n0 3 2\n1 2 3\n1 3 5 \n1 4 1\n3 4 7\n4 5\n0 1 5\n0 2 8\n1 2 9\n1 3 2\n2 3 6\n</code></pre>\n\n<h4>Sample output 1</h4>\n\n<pre><code>0 4 1 2 5\n0 5 8 7\n</code></pre>\n\n<h4>Explanation For Sample Output 1</h4>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-15-6327.jpg\" alt=\"alt text\"></p>\n\n<pre><code>The source node is node 0.\n\nThe shortest distance from node 0 to node 0 is 0.\n\nThe shortest distance from node 0 to node 1 is 4. In the above figure, the green path represents this distance. The path goes from node 0-&gt;2-&gt;1, giving distance = 1+3=4.\n\nThe shortest distance from node 0 to node 2 is 1. In the above figure, the red path represents this distance. The path goes from node 0-&gt;2, giving distance = 1\n\nThe shortest distance from node 0 to node 3 is 2. In the above figure, the pink path represents this distance. The path goes from node 0-&gt;3, giving distance = 2.\n\nThe shortest distance from node 0 to node 4 is 5. In the above figure, the yellow path represents this distance. The path goes from node 0-&gt;2-&gt;1-&gt;4, giving distance = 1+3+1=5.\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-16-6326.jpg\" alt=\"alt text\"></p>\n\n<pre><code>The source node is node 0.\n\nThe shortest distance from node 0 to node 0 is 0.\n\nThe shortest distance from node 0 to node 1 is 5. In the above figure, the green path represents this distance. The path goes from node 0-&gt;1, giving distance = 5.\n\nThe shortest distance from node 0 to node 2 is 8. In the above figure, the pink path represents this distance. The path goes from node 0-&gt;2, giving distance = 8.\n\nThe shortest distance from node 0 to node 3 is 7. In the above figure, the yellow path represents this distance. The path goes from node 0-&gt;1-&gt;3, giving distance = 7.\n</code></pre>\n\n<h4>Sample input 2:</h4>\n\n<pre><code>2\n9 14\n0 1 4\n0 7 8\n1 2 8\n1 7 11\n2 3 7\n2 5 4\n2 8 2 \n3 4 9\n3 5 14\n4 5 10\n5 6 2\n6 7 1\n6 8 6 \n7  8 7\n5 7\n0 1 7\n0 2 3\n1 2 1\n1 3 2\n1 4 6\n2 3 4\n3 4 4 \n</code></pre>\n\n<h4>Sample output 2:</h4>\n\n<pre><code>0 4 12 19 21 11 9 8 14\n0 4 3 6 10\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 166,
        "link": "https://www.codingninjas.com/codestudio/problems/dijkstra-s-shortest-path_920469?topList=striver-sde-sheet-problems",
        "title": "Dijkstra's shortest path",
        "solution": "/*\n    Time complexity: O(E*log(V))\n    Space complexity: O(V^2)\n    Where 'E' is the number of edges and 'V' is\n    the number of vertices in a graph.\n*/\nvector<int> dijkstraHelper(vector<vector<pair<int, int>>> &adjacencyList, int vertices, int source) {\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    vector<int> distance(vertices, INT_MAX);\n    // Push the source vertex in the priority queue.\n    // Distance of a vertex to itself is 0.\n    distance[source] = 0;\n    vector<bool> visited(vertices, false);\n    // Loop till all vertices are visited.\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        pq.pop();\n        visited[u] = true;\n        // Update the distances of the adjacent nodes.\n        for (auto it = adjacencyList[u].begin(); it != adjacencyList[u].end(); it++) {\n            int v = it -> first;\n            int dist = it -> second;\n            if (visited[v] == false && distance[v] > distance[u] + dist) {\n                distance[v] = distance[u] + dist;\n                pq.push({distance[v], v});\n            }\n        }\n    }\n    return distance;\n}\nvector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {\n    vector<vector<pair<int, int>>> adjacencyList(vertices);\n    // Create an adjacency list.\n    for (int i = 0; i < (int)vec.size(); i++) {\n        adjacencyList[vec[i][0]].push_back({vec[i][1], vec[i][2]});\n        adjacencyList[vec[i][1]].push_back({vec[i][0], vec[i][2]});\n    }\n    return dijkstraHelper(adjacencyList, vertices, 0);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-directed-weighted-graph-of-n-vertices-labeled-from-1-to-39-n-39-and-m-edges-each-edge-connecting-two-nodes-39-u-39-and-39-v-39-has-a-weight-39-w-39-denoting-the-distance-between-them\">You have been given a directed weighted graph of \u2018N\u2019 vertices labeled from 1 to 'N' and \u2018M\u2019 edges. Each edge connecting two nodes 'u' and 'v' has a weight 'w' denoting the distance between them.</h4>\n\n<h4 id=\"your-task-is-to-find-the-length-of-the-shortest-path-between-the-src-and-dest-vertex-given-to-you-in-the-graph-the-graph-may-contain-negatively-weighted-edges\">Your task is to find the length of the shortest path between the \u2018src\u2019 and \u2018dest\u2019 vertex given to you in the graph. The graph may contain negatively weighted edges.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/image-11779.png\" alt=\"Alt text\"></p>\n\n<pre><code>3 3 1 3\n1 2 2\n1 3 2\n2 3 -1\nIn the above graph, the length of the shortest path between vertex 1 and vertex 3 is 1-&gt;2-&gt;3 with a cost of 2 - 1 = 1.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>It's guaranteed that the graph doesn't contain self-loops and multiple edges. Also the graph does not contain negative weight cycles.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains four single space-separated integers \u2018N\u2019,  \u2018M\u2019 , \u2018src\u2019 and \u2018dest\u2019 denoting the number of vertices, the number of edges in the directed graph the source vertex and the destination vertex respectively.\n\nThe next \u2018M\u2019 lines each contain three single space-separated integers \u2018u\u2019, \u2018v\u2019, and \u2018w\u2019, denoting an edge from vertex \u2018u\u2019 to vertex \u2018v\u2019, having weight \u2018w\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, return an integer denoting the length of the shortest path from \u2018src\u2019 to \u2018dest\u2019. If no path is possible return 10^9. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 300\n1 &lt;= src, dest &lt;= N\n1 &lt;= u,v &lt;= N\n-10^5 &lt;= w &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1    \n4 4 1 4\n1 2 4\n1 3 3\n2 4 7 \n3 4 -2\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5>Explanation For Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/colimage-11780.png\" alt=\"Alt text\"></p>\n\n<pre><code>The optimal path from source vertex 1 to destination vertex 4 is 1-&gt;3-&gt;4 with a cost of 3 - 2 = 1.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n2 1 1 2\n2 1 3\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1000000000\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 167,
        "link": "https://www.codingninjas.com/codestudio/problems/bellmon-ford_2041977?topList=striver-sde-sheet-problems",
        "title": "Bellman Ford",
        "solution": "/*\n    Time complexity: O(N * M)\n    Space complexity: O(N)\n    where 'N' is the number of vertices in the graph and 'M' is the number of edges in the graph.\n*/\nint bellmonFord(int n, int m, int src, int dest, vector<vector<int>> &edges) {\n    // Create a vector to store the distances from source.\n    vector<int> d(n + 1, 1e9);\n    // Distance of source to source is 0.\n    d[src] = 0;\n    {\n        for (int j = 0; j < m; j++)\n        {\n            int u = edges[j][0];\n            int v = edges[j][1];\n            int w = edges[j][2];\n            if (d[u] != 1e9 && d[v] > (d[u] + w)) {\n                d[v] = d[u] + w;\n            }\n        }\n    }\n    // Return the distance of destination.\n    return d[dest];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-directed-weighted-graph-of-n-vertices-labeled-from-1-to-39-n-39-and-m-edges-each-edge-connecting-two-nodes-39-u-39-and-39-v-39-has-a-weight-39-w-39-denoting-the-distance-between-them\">You have been given a directed weighted graph of \u2018N\u2019 vertices labeled from 1 to 'N' and \u2018M\u2019 edges. Each edge connecting two nodes 'u' and 'v' has a weight 'w' denoting the distance between them.</h4>\n\n<h4 id=\"your-task-is-to-find-the-length-of-the-shortest-path-between-the-src-and-dest-vertex-given-to-you-in-the-graph-using-flloyd-warshall-s-algorithm-the-graph-may-contain-negatively-weighted-edges\">Your task is to find the length of the shortest path between the \u2018src\u2019 and \u2018dest\u2019 vertex given to you in the graph using Flloyd warshall\u2019s algorithm. The graph may contain negatively weighted edges.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<p><img src=\"https://files.codingninjas.in/image-11779.png\" alt=\"Alt text\"></p>\n\n<pre><code>3 3 1 3\n1 2 2\n1 3 2\n2 3 -1\nIn the above graph, the length of the shortest path between vertex 1 and vertex 3 is 1-&gt;2-&gt;3 with a cost of 2 - 1 = 1.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>It's guaranteed that the graph doesn't contain self-loops and multiple edges. Also the graph does not contain negative weight cycles.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains four single space-separated integers \u2018N\u2019,  \u2018M\u2019 , \u2018src\u2019 and \u2018dest\u2019 denoting the number of vertices, the number of edges in the directed graph the source vertex and the destination vertex respectively.\n\nThe next \u2018M\u2019 lines each contain three single space-separated integers \u2018u\u2019, \u2018v\u2019, and \u2018w\u2019, denoting an edge from vertex \u2018u\u2019 to vertex \u2018v\u2019, having weight \u2018w\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, return an integer denoting the length of the shortest path from \u2018src\u2019 to \u2018dest\u2019. If no path is possible return 10^9. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 300\n1 &lt;= src, dest &lt;= N\n1 &lt;= u,v &lt;= N\n-10^5 &lt;= w &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1    \n4 4 1 4\n1 2 4\n1 3 3\n2 4 7 \n3 4 -2\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5>Explanation For Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/colimage-11780.png\" alt=\"Alt text\"></p>\n\n<pre><code>The optimal path from source vertex 1 to destination vertex 4 is 1-&gt;3-&gt;4 with a cost of 3 - 2 = 1.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n2 1 1 2\n2 1 3\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1000000000\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 168,
        "link": "https://www.codingninjas.com/codestudio/problems/flloyd-warshall_2041979?topList=striver-sde-sheet-problems",
        "title": "Floyd Warshall",
        "solution": "/*\n    Time complexity: O(N^3)\n    Space complexity: O(N^2)\n    where 'N' is the number of vertices in the graph.\n*/\nint floydWarshall(int n, int m, int src, int dest, vector<vector<int>> &edges)\n{\n    // Stores the shortest path between two vertices.\n    int d[n + 1][n + 1];\n    // Initialize all the values to 1e9 except i, i which initializes to 0.\n    for (int i = 1; i <= n; i++)\n        {\n            if (i == j)\n            {\n                d[i][j] = 0;\n            }\n            else\n            {\n                d[i][j] = 1e9;\n            }\n        }\n    }\n    // Add all edges to the matrix.\n    for (int i = 0; i < m; i++)\n    {\n        int u = edges[i][0];\n        int v = edges[i][1];\n        int w = edges[i][2];\n        d[u][v] = w;\n    }\n    // Apply Flloyd Warshall's Algorithm.\n    for (int k = 1; k <= n; k++)\n    {\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= n; j++)\n            {\n                if (d[i][k] != 1e9 && d[k][j] != 1e9)\n                {\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n                }\n            }\n        }\n    }\n    // Return dist between src and dest.\n    return d[src][dest];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-undirected-connected-weighted-graph-having-n-nodes-numbered-from-1-to-39-n-39-a-matrix-e-of-size-m-x-2-is-given-which-represents-the-m-edges-such-that-there-is-an-edge-directed-from-node-e-i-0-to-node-e-i-1-you-are-supposed-to-return-the-minimum-spanning-tree-where-you-need-to-return-weight-for-each-edge-in-the-mst\">You are given an undirected connected weighted graph having \u2018N\u2019 nodes numbered from 1 to 'N'. A matrix \u2018E\u2019 of size M x 2 is given which represents the \u2018M\u2019 edges such that there is an edge directed from node E[i][0] to node E[i][1]. You are supposed to return the minimum spanning tree where you need to return weight for each edge in the MST.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/prims-mst1-7466.png\" alt=\"alt text\"></p>\n\n<pre><code>The MST (Minimum Spanning Tree) for the above graph is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/prims-mst2-7467.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer 'T' representing the number of the test case. Then the test cases are as follows.\n\nThe first line of each test case argument given is an integer \u2018N\u2019 representing the number of nodes in the graph.\n\nThe second line of each test case contains a given integer \u2018M\u2019 representing the number of edges. \n\nThe next \u2018M\u2019 lines in each test case contain a matrix \u2018E\u2019 of size M x 2 which represents the \u2018M\u2019 edges such that there is an edge directed from node E[i][0] to node E[i][1].\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum spanning tree in the form of edges and their weights which are included in the MST.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 5\n2 &lt;= N &lt;= 100\n1 &lt;= M &lt;= min(1000, N(N - 1) / 2)\n1 &lt;= E[i][0], E[i][1] &lt;= N\n\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>1\n5 14\n1 2 2\n1 4 6\n2 1 2\n2 3 3\n2 4 8\n2 5 5\n3 2 3\n3 5 7\n4 1 6\n4 2 8\n4 5 9\n5 2 5\n5 3 7\n5 4 9\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1 2 2\n1 4 6\n2 3 3\n2 5 5\n</code></pre>\n\n<h5>Explanation of Input 1 :</h5>\n\n<pre><code>The Minimum spanning tree for the given graph will contain the edges: (1,2) with weight 2, (1,4) with weight 6, (2,3) with weight 3 and (2,5) with weight 5.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>1\n5 15\n1 2 21\n1 4 16\n2 1 12\n2 3 13\n2 4 18\n2 5 15\n3 2 13\n3 5 17\n4 1 16\n4 2 18\n4 5 19\n5 1 18\n5 2 15\n5 3 17\n5 4 19\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1 2 12\n1 4 16\n2 3 13\n2 5 15\n</code></pre>\n\n<h5>Explanation of Input 2 :</h5>\n\n<pre><code>The Minimum spanning tree for the given graph will contain the edges: (1,2) with weight 12, (1,4) with weight 16, (2,3) with weight 13 and (2,5) with weight 15.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 169,
        "link": "https://www.codingninjas.com/codestudio/problems/prim-s-mst_1095633?topList=striver-sde-sheet-problems",
        "title": "Prim's MST",
        "solution": "/*\n    Time Complexity = O(M * log (N))\n    Space Complexity = O(N + M)\n    Where N is the number of nodes and M is the number of edges.\n*/\n#include <limits.h>\n#include <queue>\nvector<pair<pair<int, int>,int>> primsMST(vector<pair<int, int>> *adjList, int n)\n{\n    // Min priority queue.\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    int src = 0;\n    // Create vector for key and intilize as infinite.\n    int *weight = new int[n];\n    // To store parent arr.\n    int *parent = new int[n];\n    // To keep track of vertices which allready has been included in mst.\n    bool *inMST = new bool[n];\n    for (int i = 0; i < n; i++)\n    {\n        weight[i] = INT_MAX;\n        parent[i] = -1;\n        inMST[i] = false;\n    }\n    // Insert source as in priority queue and initialize with 0.\n    inMST[src] = true;\n    // 0 weight for current source.\n    pq.push(make_pair(0, src));\n    // Weight from source to source.\n    weight[src] = 0;\n    while (!pq.empty())\n    {\n        // The first vertex int pair is the minimum weight vertex ,extract it from priority queue and node name is stored at the second of pair( it has to be done this way to keep the vertices sorted order with respect weight) weight must be first item in pair.\n        int u = pq.top().second;\n        pq.pop();\n        // Include u to in our MST.\n        inMST[u] = true;\n        // Explore all adjacent of u and if not visited the relax them.\n        for (auto x : adjList[u])\n        {\n            int v = x.first;\n            int wt = x.second;\n            // If v is not in mst and weight of (u,v) is smaller then the current weight of v.\n            if (!inMST[v] && weight[v] > wt)\n            {\n                // Update weight of v.\n                weight[v] = wt;\n                // Insert it into the priority queue.\n                pq.push(make_pair(weight[v], v));\n                parent[v] = u;\n            }\n        }\n    }\n    delete[] adjList;\n    vector<pair<pair<int, int>, int>> result;\n    for (int i = 1; i < n; i++)\n    {\n        result.push_back({{min(parent[i]+1, i+1),max(parent[i]+1, i+1)}, weight[i]});\n    }\n    return result;\n}\nvector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)\n{\n    vector<pair<int, int>> *adjList = new vector<pair<int, int>>[n];\n    for (int i = 0; i < m; i++)\n    {\n        adjList[g[i].first.first-1].push_back(make_pair(g[i].first.second-1, g[i].second));\n        adjList[g[i].first.second-1].push_back(make_pair(g[i].first.first-1, g[i].second));\n    }\n    return primsMST(adjList, n);\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-have-been-given-a-connected-undirected-weighted-graph-your-task-is-to-find-the-weight-of-the-minimum-spanning-tree-of-the-given-graph\">You have been given a connected undirected weighted graph. Your task is to find the weight of the minimum spanning tree of the given graph.</h4>\n\n<h4 id=\"a-minimum-spanning-tree-is-a-subset-of-the-edges-of-a-connected-edge-weighted-undirected-graph-that-connects-all-the-vertices-together-without-any-cycles-and-with-the-minimum-possible-total-edge-weight-a-spanning-tree-s-weight-is-the-sum-of-weights-given-to-each-edge-of-the-spanning-tree\">A minimum spanning tree is a subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles, and with the minimum possible total edge weight. A spanning tree\u2019s weight is the sum of weights given to each edge of the spanning tree.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first input line of each test case contains two integers \u2018N\u2019 and \u2018M\u2019 denoting the number of nodes and edges in the graph, respectively.\n\nEach of the next \u2018M\u2019 lines contains three space integers \u2018U\u2019, \u2018V\u2019, and \u2018W\u2019. There is an undirected edge between node \u2018U\u2019 and \u2018V\u2019 of weight \u2018W\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the weight of the minimum spanning tree of the given graph.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't have to print the expected output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n1 &lt;= M &lt;= 10000\n1 &lt;= W &lt;= 1000\n1 &lt;= U, V &lt;= N\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n5 6\n1 2 6\n2 3 5\n3 4 4\n1 4 1\n1 3 2\n3 5 3\n2 1\n1 2 4\n</code></pre>\n\n<h5>Sample output 1 :</h5>\n\n<pre><code>11\n4\n</code></pre>\n\n<h5>Explanation of Sample output 1  :</h5>\n\n<pre><code>In test case 1, the graph is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mst1-7060.png\" alt=\"Example\"></p>\n\n<pre><code>The minimum spanning tree of the graph is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mst2-7059.png\" alt=\"Example\"></p>\n\n<pre><code>And its weight is 1 + 2 + 5 + 3 = 11.\n\nIn test case 2, the graph has only one edge. So the minimum spanning will be the graph itself. And its weight is 4.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n1 2 1\n2 3 2\n3 1 3\n4 3\n1 2 4\n2 3 5\n3 4 1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>3\n10\n</code></pre>\n\n<h5>Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, the weight of the minimum spanning tree will be 3 by considering the 1-2 (weight 1) and 2-3 edge (weight 2).\n\nIn test case 2, the weight of the minimum spanning tree will be 10 as we have to consider all the edges to make the tree connected.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 170,
        "link": "https://www.codingninjas.com/codestudio/problems/kruskal-s-minimum-spanning-tree-algorithm_1082553?topList=striver-sde-sheet-problems",
        "title": "Kruskal\u2019s Minimum Spanning Tree Algorithm",
        "solution": "/*\n    Time Complexity: O(M * log(M) + N + M)\n    Space Complexity: O(N + M)\n    Where 'N' and 'M' denotes the number of nodes and edges in the graph, respectively.\n*/\n#include <algorithm>\n// Creates a new set consisting of the new element v.\nvoid make_set(int v, vector <int> &parent, vector <int> &rank) {\n    parent[v] = v;\n    rank[v] = 0;\n}\nint find_set(int v, vector <int> &parent) {\n    if (v == parent[v]) {\n        // Current element is the parent of its set.\n        return v;\n    } else {\n        // Using path compression technique.\n        return parent[v] = find_set(parent[v], parent);\n    }\n}\n// Merges the two specified sets.\nvoid union_sets(int a, int b, vector <int> &parent, vector <int> &rank) {\n    // Find the parent of both elements.\n    a = find_set(a, parent);\n    b = find_set(b, parent);\n    if (a != b) {\n        if (rank[a] < rank[b]) {\n            // Swap.\n            swap(a, b);\n        }\n        parent[b] = a;\n        if (rank[a] == rank[b]) {\n            rank[a]++;\n        }\n    }\n}\n// Custom comparator to sort the edges.\nbool compare(vector <int> const &a, vector <int> const &b) {\n    return a[2] < b[2];\n}\nint kruskalMST(int n, int m, vector <vector<int> > &graph) {\n    // Parent and rank arrays to be used in DSU.\n    vector <int> parent(n);\n    vector <int> rank(n);\n    for (int i = 1; i <= n; i++) {\n        // Create a new set for each node.\n        make_set(i, parent, rank);\n    }\n    // To store the weight of MST.\n    int cost = 0;\n    // Sort the edges in ascending order by its weight.\n    sort(graph.begin(), graph.end(), compare);\n    // Start traversign through the edges.\n    for (auto edge: graph) {\n        // Check if both vertices of current edge belong to different sets(subtrees).\n        if (find_set(edge[0], parent) != find_set(edge[1], parent)) {\n            // Add the weight of the current edge.\n            cost = cost + edge[2];\n            // Merge the two sets(subtrees).\n            union_sets(edge[0], edge[1], parent, rank);\n        }\n    }\n    return cost;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-arr-39-39-of-integers-your-task-is-to-find-the-contiguous-subarray-within-the-array-which-has-the-largest-product-of-its-elements-you-have-to-report-this-maximum-product\">You are given an array \u201carr'' of integers. Your task is to find the contiguous subarray within the array which has the largest product of its elements. You have to report this maximum product.</h4>\n\n<pre><code>An array c is a subarray of array d if c can be obtained from d by deletion of several elements from the beginning and several elements from the end.\n\nFor e.g.- The non-empty subarrays of an array [1,2,3] will be- [1],[2],[3],[1,2],[2,3],[1,2,3]. \n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If arr = {-3,4,5}.\nAll the possible non-empty contiguous subarrays of \u201carr\u201d are {-3}, {4}, {5}, {-3,4}, {4,5} and {-3,4,5}.\nThe product of these subarrays are -3, 4, 5, -12, 20 and -60 respectively.\nThe maximum product is 20. Hence, the answer is 20.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in linear time and constant space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer 'T' which denotes the number of test cases or queries to be run. Then, the T test cases follow.\nThe first line of each test case contains a single integer N, denoting the number of elements of the array \u201carr\u201d.\nThe second line of each test case contains N space separated integers denoting the elements of the array \u201carr\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the maximum product of the contiguous non-empty subarray of the array \u201carr\u201d.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n-100 &lt;= arr[i] &lt;= 100\nwhere N is the size of the array \u201carr\u201d.\n\nTime limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4\n3 5 -2 -4\n5\n2 4 3 5 6\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>120\n720\n</code></pre>\n\n<h5>Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, all the possible non-empty contiguous subarrays of \u201carr\u201d are {3}, {5}, {-2}, {-4}, {3,5}, {5,-2}, {-2,-4}, {3,5,-2}, {5,-2,-4} and {3,5,-2,-4}. \nThe product of these subarrays are 3, 5, -2, -4, 15, -10, 8, -30, 40 and 120 respectively.\nSo, the maximum product is 120.\nFor the second test case, since all the elements in the array \u201carr\u201d are positive, we get the maximum product subarray by multiplying all the elements in the array. So, the maximum product is 720.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4\n6 0 2 -4\n3\n-1 -3 -4\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>6\n12\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 171,
        "link": "https://www.codingninjas.com/codestudio/problems/maximum-product-subarray_1115474?topList=striver-sde-sheet-problems",
        "title": "Maximum Product Subarray",
        "solution": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(1)\n    Where N is size of the array \"arr\".\n*/\n#include <algorithm>\nint maximumProduct(vector<int> &arr, int n){\n    int ans = INT_MIN;\n    int productFromFront = 1, productFromBack = 1;\n    for(int i = 0; i < n; i++){\n        productFromFront = productFromFront * [];\n            arr[n-i-1];\n        // Store the maximum of ans, productFromFront and productFromBack in the ans variable.\n        ans = max({ans, productFromFront, productFromBack});\n        // If any of the products become 0, make them 1 again.\n        if(productFromFront == 0){\n            productFromFront = 1;\n        }\n        if(productFromBack == 0){\n            productFromBack = 1;\n        }\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"for-a-given-array-with-n-elements-you-need-to-find-the-length-of-the-longest-subsequence-from-the-array-such-that-all-the-elements-of-the-subsequence-are-sorted-in-strictly-increasing-order\">For a given array with N elements, you need to find the length of the longest subsequence from the array such that all the elements of the subsequence are sorted in strictly increasing order.</h4>\n\n<h4 id=\"strictly-increasing-sequence-is-when-each-term-in-the-sequence-is-larger-than-the-preceding-term\">Strictly Increasing Sequence is when each term in the sequence is larger than the preceding term.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>[1, 2, 3, 4] is a strictly increasing array, while [2, 1, 4, 3] is not.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer 'N', representing the size of the array.\n\nThe second line of input contains 'N' space-separated integers, representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only output line contains one integer representing the length of the longest increasing subsequence.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"input-constraints\">Input Constraints</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n-10^5 &lt;= element &lt;= 10^5\n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input :</h5>\n\n<pre><code>6\n5 4 11 1 16 8\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation of Sample Input 1:</h5>\n\n<pre><code>Length of longest subsequence is 3 i.e. [5, 11, 16] or [4, 11, 16].\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>3\n1 2 2\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 172,
        "link": "https://www.codingninjas.com/codestudio/problems/longest-increasing-subsequence_630459?topList=striver-sde-sheet-problems",
        "title": "Longest Increasing Subsequence",
        "solution": "/*\n    Time Complexity : O(N * logN)\n    Space Complexity : O(N)\n    Where N is the size of the array\n*/\n#include <algorithm>\nint longestIncreasingSubsequence(int arr[], int n)\n{\n    int dp[n]; // dp[i] represents i+1'th length LIS ending at minimum integer dp[i]\n    int ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        /*\n            Since dp array stores elements in the sorted order therefore\n            arr[i] to be placed.\n            And elements are present in the dp array from 0 to ans-1 position\n            So we will be doing the binary search in this range.\n        */\n        int position = lower_bound(dp, dp + ans, arr[i]) - dp;\n        dp[position] = arr[i];\n        if (position == ans)\n        {\n            ans++;\n        }\n    }\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-two-strings-39-s-39-and-39-t-39-with-lengths-39-m-39-and-39-n-39-find-the-length-of-the-39-longest-common-subsequence-39\">Given two strings, 'S' and 'T' with lengths 'M' and 'N', find the length of the 'Longest Common Subsequence'.</h4>\n\n<h4 id=\"for-a-string-39-str-39-per-se-of-length-k-the-subsequences-are-the-strings-containing-characters-in-the-same-relative-order-as-they-are-present-in-39-str-39-but-not-necessarily-contiguous-subsequences-contain-all-the-strings-of-length-varying-from-0-to-k\">For a string 'str'(per se) of length K, the subsequences are the strings containing characters in the same relative order as they are present in 'str,' but not necessarily contiguous. Subsequences contain all the strings of length varying from 0 to K.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Subsequences of string \"abc\" are:  \"\"(empty string), a, b, c, ab, bc, ac, abc.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains the string 'S' of length 'M'.\n\nThe second line of the input contains the string 'T' of length 'N'.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return the length of the Longest Common Subsequence.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= M &lt;= 10 ^ 3\n0 &lt;= N &lt;= 10 ^ 3\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>adebc\ndcadb\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5>Explanation of the Sample Output 1 :</h5>\n\n<pre><code>Both the strings contain a common subsequence 'adb', which is the longest common subsequence with length 3. \n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>ab\ndefg\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5>Explanation of the Sample Output 2 :</h5>\n\n<pre><code>The only subsequence that is common to both the given strings is an empty string(\"\") of length 0.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 173,
        "link": "https://www.codingninjas.com/codestudio/problems/longest-common-subsequence_624879?topList=striver-sde-sheet-problems",
        "title": "Longest Common Subsequence",
        "solution": "/*\n    Time Complexity : O(N * M)\n    Space Complexity : O(N)\n    where N and M are the lengths of strings str1 and str2 respectively\n*/\nint LCSHelper(string str1, int n, string str2, int m)\n{\n    int **dp = new int *[2];\n    dp[0] = new int[m + 1];\n    dp[1] = new int[m + 1];\n    int currRowParity = 0;\n        currRowParity = i % 2;\n        for (int j = 0; j <= m; j++)\n        {\n            if (i == 0 || j == 0)\n            {\n                dp[currRowParity][j] = 0;\n            }\n            else if (str1[i - 1] != str2[j - 1])\n            {\n                /*\n                    If the ith character of str1 is not equal to the jth character of str2,\n                    we return the maximum of answers obtained by\n                */\n                dp[currRowParity][j] =\n                    max(dp[1 - currRowParity][j],\n                        dp[currRowParity][j - 1]);\n            }\n            else\n            {\n                /*\n                    If the ith character of str1 is equal to the nth character of str2,\n                    this character will be included in the subsequence.\n                    Hence, we will add 1 to the length of lcs obtained\n                    removing the mth character from the first string and the\n                    nth character from the second string.\n                */\n                dp[currRowParity][j] = dp[1 - currRowParity][j - 1] + 1;\n            }\n        }\n    }\n    int ans = dp[currRowParity][m];\n    delete[] dp[0];\n    delete[] dp[1];\n    delete[] dp;\n    return ans;\n}\nint lcs(string str1, string str2)\n{\n    return LCSHelper(str1, str1.length(), str2, str2.length());\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"a-thief-is-robbing-a-store-and-can-carry-a-maximum-weight-of-w-into-his-knapsack-there-are-39-n-39-items-available-in-the-store-and-the-weight-and-value-of-each-item-is-known-to-the-thief-considering-the-constraints-of-the-maximum-weight-that-a-knapsack-can-carry-you-have-to-find-the-maximum-profit-that-a-thief-can-generate-by-stealing-items\">A thief is robbing a store and can carry a maximum weight of \u2018W\u2019 into his knapsack. There are 'N' items available in the store and the weight and value of each item is known to the thief. Considering the constraints of the maximum weight that a knapsack can carry, you have to find the maximum profit that a thief can generate by stealing items.</h4>\n\n<h4 id=\"note-the-thief-is-not-allowed-to-break-the-items\">Note: The thief is not allowed to break the items.</h4>\n\n<h4 id=\"for-example-n-4-w-10-and-the-weights-and-values-of-items-are-weights-6-1-5-3-and-values-3-6-1-4-then-the-best-way-to-fill-the-knapsack-is-to-choose-items-with-weight-6-1-and-3-the-total-value-of-knapsack-3-6-4-13\">For example, N = 4, W = 10 and the weights and values of items are weights = [6, 1, 5, 3] and values = [3, 6, 1, 4]. Then the best way to fill the knapsack is to choose items with weight 6, 1 and  3. The total value of knapsack = 3 + 6 + 4 = 13.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer 'T' representing the number of test cases.      \nThe 'T' test cases are as follows:\n\nThe first line contains two integers 'N' and 'W', denoting the number of items and the maximum weight the thief can carry, respectively. \nThe second line contains 'N' space-separated integers, that denote the values of the weight of items. \nThe third line contains 'N' space-separated integers, that denote the values associated with the items. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first and only line of output contains the maximum profit that a thief can generate, as described in the task. \nThe output of every test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n1 &lt;= W &lt;= 10^3\n1&lt;= weights &lt;=10^3\n1 &lt;= values &lt;= 10^3\n\n\nwhere 'T' is the number of test cases, \u2018N\u2019 is the number of items, \"weights\" is the weight of each item, \"values\" is the value of each item and \u2018W\u2019 is the maximum weight the thief can carry. \n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input:</h5>\n\n<pre><code>1 \n4 5\n1 2 4 5\n5 4 8 6\n</code></pre>\n\n<h5>Sample Output:</h5>\n\n<pre><code>13\n</code></pre>\n\n<h5>Explanation of Sample output 1</h5>\n\n<pre><code>The most optimal way to fill the knapsack is to choose items with weight 4 and value 8, weight 1 and value 5.\n\nThe total value of the knapsack =  8 + 5 = 13.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n5 100\n20 24 36 40 42\n12 35 41 25 32\n</code></pre>\n\n<h5>Sample output 2:</h5>\n\n<pre><code>101\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 174,
        "link": "https://www.codingninjas.com/codestudio/problems/0-1-knapsack_1072980?topList=striver-sde-sheet-problems",
        "title": "0 1 Knapsack",
        "solution": "/*\n    Time Complexity: O(N * W)\n    Space Complexity: O(W)\n    Where N is the number of items and W is the capacity of the knapsack.\n*/\nint maxProfit(vector<int>& values, vector<int>& weights, int n, int w)\n{\n    vector<int>result(w + 1, 0); \n    // Loop to consider all the items \n    for(int i=0; i < n; i++)\n    {\n        {\n            result[j] = max(result[j], values[i] + result[j - weights[i]]);\n        }\n    }  \n    // Return the final maximum profit \n    return result[w]; \n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-two-strings-39-s-39-and-39-t-39-of-lengths-39-n-39-and-39-m-39-respectively-find-the-quot-edit-distance-quot-between-the-strings\">You are given two strings 'S' and 'T' of lengths 'N' and 'M' respectively. Find the \"Edit Distance\" between the strings.</h4>\n\n<h4 id=\"edit-distance-of-two-strings-is-the-minimum-number-of-steps-required-to-make-one-string-equal-to-the-other-in-order-to-do-so-you-can-perform-the-following-three-operations\">Edit Distance of two strings is the minimum number of steps required to make one string equal to the other. In order to do so, you can perform the following three operations:</h4>\n\n<pre><code>1. Delete a character\n2. Replace a character with another one\n3. Insert a character\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Strings don't contain spaces in between.\n</code></pre>\n\n<h5 id=\"input-format\">&nbsp;Input format:</h5>\n\n<pre><code>The first line of input contains the string 'S' of length 'N'.\n\nThe second line of the input contains the String 'T' of length 'M'.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>The only line of output prints the minimum \"Edit Distance\" between the strings.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= N &lt;= 10 ^ 3\n0 &lt;= M &lt;= 10 ^ 3\n\nTime Limit : 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>abc\ndc\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5>&nbsp;Explanation For Sample Input 1 :</h5>\n\n<pre><code>In 2 operations we can make the string T to look like string S. First, insert the character 'a' to string T, which makes it \"adc\".\n\nAnd secondly, replace the character 'd' of the string T with 'b' from the string S. This would make string T to \"abc\" which is also the string S. Hence, the minimum distance.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>whgtdwhgtdg\naswcfg\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>9\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 175,
        "link": "https://www.codingninjas.com/codestudio/problems/edit-distance_630420?topList=striver-sde-sheet-problems",
        "title": "Edit Distance",
        "solution": "/*\n    Time Complexity : O(N * M)\n    Space Complexity : O(N * M)\n    Where N is the size of first string and M is the size of second string\n*/\nint editDistance(string str1, string str2)\n{\n    int n = str1.size(), m = str2.size();\n    int **dp = new int *[n + 1];\n    // dp[i][j] stores the edit distance of the i+1th length substring of str1 and\n    // j+1th length substring of str2 starting from 0 index\n    // dynamically allocate memory of size N for each row\n    {\n        dp[i] = new int[m + 1];\n    }\n    for (int i = 0; i <= n; i++)\n    {\n        for (int j = 0; j <= m; j++)\n        {\n            // If first string is empty, only option is to\n            // insert all characters of second string considering other string of j length\n            // so min operation would be j\n            if (i == 0)\n            {\n                dp[i][j] = j;\n            }\n            else if (j == 0)\n            {\n                dp[i][j] = i;\n            }\n            // If last characters are same, then it doesnt cost anything\n            else if (str1[i - 1] == str2[j - 1])\n            {\n                dp[i][j] = dp[i - 1][j - 1];\n            }\n            // If the last character is different, consider all\n            // possibilities and find the minimum\n            else\n            {\n                dp[i][j] = 1 + min(min(dp[i][j - 1],\n                                       dp[i - 1][j]),\n                                   dp[i - 1][j - 1]);\n            }\n        }\n    }\n    int ans = dp[n][m];\n    //Clearing the dynamic array\n    for (int i = 0; i <= n; i++)\n    {\n        delete[] dp[i];\n    }\n    delete[] dp;\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-has-recently-joined-the-gym-he-decides-to-lift-dumbbells-to-build-muscles-the-rack-contains-dumbbells-with-varying-weights-his-strategy-is-to-pick-a-dumbbell-randomly-from-the-rack-and-after-exercising-place-it-back-to-its-original-position-now-for-the-next-exercise-he-can-only-pick-dumbbells-that-are-heavier-and-positioned-right-to-the-previously-used-after-completing-all-the-exercises-he-has-to-tell-the-sum-of-weights-of-all-dumbbells-he-picked-to-his-trainer\">Ninja has recently joined the gym. He decides to lift dumbbells to build muscles. The rack contains dumbbells with varying weights. His strategy is to pick a dumbbell randomly from the rack and after exercising place it back to its original position. Now for the next exercise he can only pick dumbbells that are heavier and positioned right to the previously used. After completing all the exercises he has to tell the sum of weights of all dumbbells he picked to his trainer.</h4>\n\n<h4 id=\"in-order-to-impress-his-trainer-he-wants-this-sum-to-be-as-maximum-as-possible-as-ninja-is-saving-energy-for-exercises-he-asks-you-to-help-him-choose-dumbbells-can-you-help-ninja-to-impress-his-trainer\">In order to impress his trainer he wants this sum to be as maximum as possible. As Ninja is saving energy for exercises, he asks you to help him choose dumbbells. Can you help Ninja to impress his trainer?</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the \u2018RACK\u2019 contains dumbbells with weights [5, 1,  2, 8], then the possible ways to choose dumbbells according to the given conditions are: [ 5 ], [ 1 ], [ 2 ], [ 8 ], [ 5, 8 ], [ 1, 2 ], [ 1, 2, 8 ], [ 2, 8 ].  Lifting dumbbells with weights [ 5, 8 ] gives the maximum sum of 13.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then each test case follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of dumbbells in the RACK.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, denoting the weights of the dumbbells.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum weight Ninja can lift to impress his trainer as per given conditions.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n1 &lt;= RACK[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2\n4\n9 1 2 8 \n1\n8\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>11\n8\n</code></pre>\n\n<h4>Explanation For Sample Output 1:</h4>\n\n<pre><code>For the first test case:\n[ 9 ], [ 1 ], [ 2 ], [ 8 ], [ 2, 8 ], [ 1, 2, 8 ], [ 1, 2  ], [ 1, 8 ]  these are the possible increasing dumbbell weights in which there is only one way i.e  [  1 , 2 , 8 ] to have a maximum sum of 11.\n\nFor the second test case:\nThere is only one dumbbell so the maximum weight that can be lifted is 8.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2\n6\n1 2 3 4 5 6\n3\n3 2 1\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>21\n3\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 176,
        "link": "https://www.codingninjas.com/codestudio/problems/ninja-at-the-gym_1112624?topList=striver-sde-sheet-problems",
        "title": "Maximum Sum Increasing Subsequence",
        "solution": "/*\n    Time Complexity : O(N ^ 2)\n    Space Complexity : O(N)\n    Where N is the number of Dumbbells in RACK\n*/\nint maxIncreasingDumbbellsSum(vector<int> &rack, int n)\n{\n    int dp[n];\n    int totalWeight = INT_MIN;\n    for(int i = 0; i < n; i++)\n    {\n        dp[i] = rack[i];\n    }\n    {\n        for(int j = 0; j < i; j++)\n        {\n            // Choose element which is smaller than last element.\n            if(rack[i] > rack[j] && dp[i] < dp[j] + rack[i])\n            {\n                dp[i] = dp[j] + rack[i];\n            }\n        }\n        // Store the maximum weigth in 'totalWeight'.\n        totalWeight = max(totalWeight, dp[i]);\n    }\n    return totalWeight;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-chain-of-matrices-a1-a2-a3-an-your-task-is-to-find-out-the-minimum-cost-to-multiply-these-matrices-the-cost-of-matrix-multiplication-is-defined-as-the-number-of-scalar-multiplications-a-chain-of-matrices-a1-a2-a3-an-is-represented-by-a-sequence-of-numbers-in-an-array-arr-where-the-dimension-of-1st-matrix-is-equal-to-arr-0-arr-1-2nd-matrix-is-arr-1-arr-2-and-so-on\">Given a chain of matrices A1, A2, A3,.....An. Your task is to find out the minimum cost to multiply these matrices. The cost of matrix multiplication is defined as the number of scalar multiplications. A Chain of matrices A1, A2, A3,.....An is represented by a sequence of numbers in an array \u2018arr\u2019 where the dimension of 1st matrix is equal to arr[0] * arr[1] , 2nd matrix is arr[1] * arr[2], and so on.</h4>\n\n<h3 id=\"for-example\">For example:</h3>\n\n<pre><code>For arr[ ] = { 10, 20, 30, 40}, matrix A1 = [10 * 20], A2 = [20 * 30], A3 = [30 * 40]\n\nScalar multiplication of matrix with dimension 10 * 20 is equal to 200.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains the Integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second and the last line of each test case contains \u2018N\u2019 single space-separated integers representing the elements of the array.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single integer, denoting the minimum cost of matrix multiplication.\n\nOutput of each test case will be printed on a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 100\n1 &lt;= arr[i] &lt;= 400 \n\nTime Limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h4>Sample Input 1:</h4>\n\n<pre><code>2\n4\n4 5 3 2\n4\n10 15 20 25\n</code></pre>\n\n<h4>Sample Output 1:</h4>\n\n<pre><code>8000\n70\n</code></pre>\n\n<h4>Sample Output Explanation 1:</h4>\n\n<pre><code>In the first test case, there are three matrices of dimensions A = [4 5], B = [5 3] and C = [3 2]. The most efficient order of multiplication is A * ( B * C).\nCost of ( B * C ) = 5 * 3 * 2 = 30  and (B * C) = [5 2] and A * (B * C) = [ 4 5] * [5 2] = 4 * 5 * 2 = 40. So the overall cost is equal to 30 + 40 =70.\n\nIn the second test case, there are two ways to multiply the chain - A1*(A2*A3) or (A1*A2)*A3.\n\nIf we multiply in order- A1*(A2*A3), then the number of multiplications required is 11250.\n\nIf we multiply in order- (A1*A2)*A3, then the number of multiplications required is 8000.\n\nThus a minimum number of multiplications required is 8000. \n</code></pre>\n\n<h4>Sample Input 2:</h4>\n\n<pre><code>1\n4\n1 4 3 2\n</code></pre>\n\n<h4>Sample Output 2:</h4>\n\n<pre><code>18\n</code></pre>\n\n<h4>Explanation of Sample Output 2:</h4>\n\n<pre><code>In the first test case, there are three matrices of dimensions A = [1 4], B = [4 3] and C = [3 2]. The most efficient order of multiplication is (A *  B) * C .\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 177,
        "link": "https://www.codingninjas.com/codestudio/problems/matrix-chain-multiplication_975344?topList=striver-sde-sheet-problems",
        "title": "Matrix Chain Multiplication",
        "solution": "/*\n    Time Complexity: O(N ^ 3) \n    Note: It is the upper bound. In real Time Complexity will be much lesser.\n    Space Complexity: O(N * N)\n    Where 'N' is the number of elements in the array.\n*/ \n// Function to find minimum cost(scalar multiplication) of matrix multipication\nint matrixMultiplication(vector<int> &arr, int N)\n{\n    /* \n        For simplicity of the program, one\n    */\n    int dp[N][N];\n    /* \n        State: dp[i, j] = Minimum number of scalar\n        multiplications needed to compute the\n        matrix A[i]A[i+1]...A[j] = A[i..j] where\n        dimension of A[i] is arr[i-1] x arr[i] \n    */\n    // The cost of multiplying one matrix is 0\n    for (int i = 1; i < N; i++)\n    {\n        // Make dp[i][i] 0\n        dp[i][i] = 0;\n    }\n    // Run a loop from length 2 to n-1 \n    for (int l = 2; l < N; l++)\n    {\n        for (int i = 1; i < N - l + 1; i++)\n        {\n            int j = i + l - 1;\n            // Initialize dp[i][j] with maximum value\n            dp[i][j] = INT_MAX;\n            for (int k = i; k <= j - 1; k++)\n            {\n                // Store the temporary cost (scalar multiplications) in 'temp' \n                int temp = dp[i][k] + dp[k + 1][j]  + arr[i - 1] * arr[k] * arr[j];\n                // If temporary answer 'temp' is less than actual aswer then update actual ans i.e dp[i][j]\n                dp[i][j] = min(dp[i][j], temp);\n            }\n        }\n    }\n    // Return dp[1][N-1]\n    return dp[1][N - 1];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninjaland-is-a-country-in-the-shape-of-a-2-dimensional-grid-39-grid-39-with-39-n-39-rows-and-39-m-39-columns-each-point-in-the-grid-has-some-cost-associated-with-it\">Ninjaland is a country in the shape of a 2-Dimensional grid 'GRID', with 'N' rows and 'M' columns. Each point in the grid has some cost associated with it.</h4>\n\n<h4 id=\"find-a-path-from-top-left-i-e-0-0-to-the-bottom-right-i-e-39-n-39-1-39-m-39-1-which-minimizes-the-sum-of-the-cost-of-all-the-numbers-along-the-path-you-need-to-tell-the-minimum-sum-of-that-path\">Find a path from top left i.e. (0, 0) to the bottom right i.e. ('N' - 1, 'M' - 1) which minimizes the sum of the cost of all the numbers along the path. You need to tell the minimum sum of that path.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You can only move down or right at any point in time.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer 'T' denoting the number of test cases. \n\nThe first line of each test case contains two space-separated integers 'N' and \u2018M\u2019 representing the number of rows and number of columns in the grid, respectively. \n\nNext 'N' lines will have 'M' space-separated integers, each line denotes cost values of that row.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the minimum sum of the path from top left to bottom right.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don't need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in O(1) space complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= N, M &lt;= 10^2\n1 &lt;= GRID[i][j] &lt;= 10^5\n\nWhere 'GRID[i][j]' denotes the value of the cell in the matrix.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n2 3\n5 9 6\n11 5 2\n1 1\n5\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>21\n5\n</code></pre>\n\n<h5>Explanation For Sample Output 1:</h5>\n\n<pre><code>In test case 1, Consider a grid of 2*3:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first1-6822.PNG\" alt=\"\"></p>\n\n<pre><code>For this the grid the path with minimum value is (0,0) -&gt; (0,1) -&gt; (1,1) -&gt; (1,2). And the sum along this path is 5 + 9 +5 + 2 = 21. So the ans is 21.\n\nIn test case 2, The given grid is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first2-6823.PNG\" alt=\"\"></p>\n\n<pre><code>For this the grid the path with minimum value is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2).The sum along this path is 1 + 2 + 3 + 4 + 9 = 19.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n5 6\n1 2\n3 3\n1 2 3\n4 5 4\n7 5 9\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>8\n19\n</code></pre>\n\n<h5>Explanation For Sample Output 2:</h5>\n\n<pre><code>In test case 1, For this the grid the path with minimum value is (0,0) -&gt; (1,0) -&gt; (1,1). The sum along this path is 5 + 1 + 2 = 8.\n\nIn test case 2, The given grid is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first2-6823.PNG\" alt=\"\"></p>\n\n<pre><code>For this the grid the path with minimum value is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2).The sum along this path is 1 + 2 + 3 + 4 + 9 = 19.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 178,
        "link": "https://www.codingninjas.com/codestudio/problems/minimum-path-sum_985349?topList=striver-sde-sheet-problems",
        "title": "Minimum Path Sum",
        "solution": "/*\n    Time Complexity: O(N * M)\n    Space Complexity: O(1)\n    Where 'N' is the number of rows and 'M' is the number of columns in grid.\n*/\nint minSumPath(vector<vector<int>> &grid) {\n    int n = grid.size();\n    int m = grid[0].size();\n    // Iterating all the grid cells.\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = m - 1; j >= 0; j--) {   \n            // If it is the bottom rightmost cell.\n            if (i == n - 1 && j == m - 1) {\n            // If the cell is in last row.\n            else if (i == n - 1) {\n                grid[i][j] = grid[i][j] + grid[i][j + 1];\n            }\n            // If the cell is in last column.\n            else if (j == m - 1) {\n                grid[i][j] = grid[i][j] + grid[i + 1][j];\n            }\n            // Else store the value which will be minimum of both the directions.\n            else {\n                grid[i][j] = grid[i][j] + min(grid[i + 1][j], grid[i][j + 1]);\n            }\n        }\n    }\n    // Return the minimum path sum.\n    return grid[0][0];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-infinite-supply-of-coins-of-each-of-denominations-d-d0-d1-d2-d3-dn-1-you-need-to-figure-out-the-total-number-of-ways-w-in-which-you-can-make-a-change-for-value-v-using-coins-of-denominations-from-d-print-0-if-a-change-isn-39-t-possible\">You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make a change for value V using coins of denominations from D. Print 0, if a change isn't possible.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer N, representing the total number of denominations.\n\nThe second line of input contains N integers values separated by a single space. Each integer value represents the denomination value.\n\nThe third line of input contains the value of V, representing the value for which the change needs to be generated.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer denoting the total number of ways W, in which a change for V is possible.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= N &lt;= 10\n1 &lt;= D[i] &lt;=10^5\n1 &lt;= V &lt;= 2 * 10^3\n\nWhere 'D[i]' represent the value of ith denomination. \n\nTime Limit: 1sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>3\n1 2 3\n4\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5>Explanation for Sample Output 1:</h5>\n\n<pre><code>We can make a change for the value V = 4 in four ways.\n1. (1,1,1,1), \n2. (1,1, 2), [One thing to note here is, (1, 1, 2) is same as that of (2, 1, 1) and (1, 2, 1)]\n3. (1, 3), and \n4. (2, 2)\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>3\n5 3 2\n1\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>0\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 179,
        "link": "https://www.codingninjas.com/codestudio/problems/ways-to-make-coin-change_630471?topList=striver-sde-sheet-problems",
        "title": "Ways To Make Coin Change",
        "solution": "/*\n    Time Complexity: O(N * V)\n    Space Complexity: O(V)\n    where N is the length of denominations array and V is the value.\n*/\nlong countWaysToMakeChange(int *denominations, int n, int value)\n{\n    // Dp[i] will be storing the number of solutions for value i.\n    long *dp = new long[value + 1]();\n    dp[0] = 1;\n    for (int i = 0; i < n; i++)\n         (   [];   value; j++)\n        {\n            dp[j] += dp[j - denominations[i]];\n        }\n    }\n    return dp[value];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-an-array-list-arr-of-n-positive-integers-and-an-integer-k-your-task-is-to-check-if-there-exists-a-subset-in-arr-with-a-sum-equal-to-k\">You are given an array/list \u2018ARR\u2019 of \u2018N\u2019 positive integers and an integer \u2018K\u2019. Your task is to check if there exists a subset in \u2018ARR\u2019 with a sum equal to \u2018K\u2019.</h4>\n\n<h4 id=\"note-return-true-if-there-exists-a-subset-with-sum-equal-to-k-otherwise-return-false\">Note: Return true if there exists a subset with sum equal to \u2018K\u2019. Otherwise, return false.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018ARR\u2019 is {1,2,3,4} and \u2018K\u2019 = 4, then there exists 2 subsets with sum = 4. These are {1,3} and {4}. Hence, return true.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018K\u2019 representing the size of the input \u2018ARR\u2019 and the required sum as discussed above.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers that represent the elements of the \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return true or false as discussed above.\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^3\n0 &lt;= ARR[i] &lt;= 10^9\n0 &lt;= K &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n4 5\n4 3 2 1\n5 4\n2 5 1 6 7\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>In example 1, \u2018ARR\u2019 is {4,3,2,1} and \u2018K\u2019 = 5. There exist 2 subsets with sum = 5. These are {4,1} and {3,2}. Hence, return true.\nIn example 2, \u2018ARR\u2019 is {2,5,1,6,7} and \u2018K\u2019 = 4. There are no subsets with sum = 4. Hence, return false.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 4\n6 1 2 1\n5 6\n1 7 2 9 10\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5>Explanation For Sample Input 2:</h5>\n\n<pre><code>In example 1, \u2018ARR\u2019 is {6,1,2,1} and \u2018K\u2019 = 4. There exist 1 subset with sum = 4. That is {1,2,1}. Hence, return true.\nIn example 2, \u2018ARR\u2019 is {1,7,2,9,10} and \u2018K\u2019 = 6. There are no subsets with sum = 6. Hence, return false.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 180,
        "link": "https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?topList=striver-sde-sheet-problems",
        "title": "Subset Sum Equal To K",
        "solution": "/*\n    Time Complexity : O(N * K)\n    Space Complexity : O(N * K)\n    Where N is the number of elements in the array and\n    K is the target sum. \n*/\nbool subsetSumToK(int n, int k, vector < int > & arr) {\n    // Declaring dp array.\n    vector < vector < bool >> dp(n + 1, vector < bool > (k + 1));\n    for (int i = 0; i <= n; i++) {\n        dp[i][0] = true;\n    }\n    // If size of array = 0, answer always false.\n    for (int i = 1; i <= k; i++) {\n        dp[0][i] = false;\n    }\n    // Filling dp array.\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= k; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (arr[i - 1] <= j) {\n                dp[i][j] = dp[i][j] || dp[i - 1][j - arr[i - 1]];\n            }\n        }\n    }\n    return dp[n][k];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-rod-of-length-n-units-the-rod-can-be-cut-into-different-sizes-and-each-size-has-a-cost-associated-with-it-determine-the-maximum-cost-obtained-by-cutting-the-rod-and-selling-its-pieces\">Given a rod of length \u2018N\u2019 units. The rod can be cut into different sizes and each size has a cost associated with it. Determine the maximum cost obtained by cutting the rod and selling its pieces.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The sizes will range from 1 to \u2018N\u2019 and will be integers.\n\n2. The sum of the pieces cut should be equal to \u2018N\u2019.\n\n3. Consider 1-based indexing.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next 2 * T lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the length of the rod.\n\nThe second line of each test case contains a vector \u2019A\u2019, of size \u2018N\u2019 representing the cost of different lengths, where each index of the array is the sub-length and the element at that index is the cost for that sub-length.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Since 1-based indexing is considered, the 0th index of the vector will represent sub-length 1 of the rod. Hence the (N - 1)th index would represent the cost for the length \u2018N\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a single line that contains a single integer which is the maximum cost obtained by selling the pieces.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= A[i] &lt;= 100\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the length of the rod, and A[i] is the cost of sub-length.\n\nTime limit: 1 sec.\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n5\n2 5 7 8 10\n8\n3 5 8 9 10 17 17 20\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>12\n24\n</code></pre>\n\n<h5>Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\n\nAll possible partitions are:\n1,1,1,1,1           max_cost=(2+2+2+2+2)=10\n1,1,1,2             max_cost=(2+2+2+5)=11\n1,1,3               max_cost=(2+2+7)=11\n1,4                 max_cost=(2+8)=10\n5                   max_cost=(10)=10\n2,3                 max_cost=(5+7)=12\n1,2,2               max _cost=(1+5+5)=12    \n\nClearly, if we cut the rod into lengths 1,2,2, or 2,3, we get the maximum cost which is 12.\n\n\nTest case 2:\n\nPossible partitions are:\n1,1,1,1,1,1,1,1         max_cost=(3+3+3+3+3+3+3+3)=24\n1,1,1,1,1,1,2           max_cost=(3+3+3+3+3+3+5)=23\n1,1,1,1,2,2             max_cost=(3+3+3+3+5+5)=22\nand so on\u2026.\n\nIf we cut the rod into 8 pieces of length 1, for each piece 3 adds up to the cost. Hence for 8 pieces, we get 8*3 = 24.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>1\n6\n3 5 6 7 10 12\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>18\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 181,
        "link": "https://www.codingninjas.com/codestudio/problems/rod-cutting-problem_800284?topList=striver-sde-sheet-problems",
        "title": "Rod cutting problem",
        "solution": "/*\n    Time complexity = O(N ^ 2)\n    Space complexity = O(N)\n    Where 'N' is the length of the rod.\n*/\nint cutRod(vector<int> &price, int n)\n{\n    int cost[n + 1];\n    cost[0] = 0;\n    int i, j;\n    for (i = 1; i <= n; i++)\n    {\n        int maxCost = INT_MIN;\n        // Build the table in bottom up manner.\n            maxCost = max(maxCost, price[j] + cost[i - j - 1]);\n        }\n        // Contains maximum cost obtained from the rod of length 'i'.\n        cost[i] = maxCost;\n    }\n    // Last entry conatins maximum cost obtained from the rod of length 'n'.\n    return cost[n];\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"ninja-is-a-log-cutter-he-has-a-k-number-of-axes-and-an-infinite-amount-of-logs-but-ninja-has-a-log-cutting-stand-that-has-a-capacity-of-n-which-means-he-can-only-try-to-cut-at-max-n-logs-in-one-go-all-the-axes-are-exactly-the-same-and-can-cut-up-to-some-logs-in-one-go-if-we-try-to-cut-more-logs-than-its-capacity-the-axe-will-break\">Ninja is a log cutter. He has a \u2018K\u2019 number of axes and an infinite amount of logs. But, Ninja has a log cutting stand that has a capacity of \u2018N\u2019, which means he can only try to cut at max \u2018N\u2019 logs in one go. All the axes are exactly the same and can cut up to some logs in one go. If we try to cut more logs than its capacity the axe will break.</h4>\n\n<h4 id=\"to-improve-efficiency-ninja-wants-to-know-how-many-logs-he-can-cut-with-an-axe-in-one-go-without-breaking-it-but-he-wants-to-know-this-is-the-minimum-number-of-moves-and-in-the-allotted-number-of-axes\">To improve efficiency, Ninja wants to know how many logs he can cut with an axe in one go without breaking it. But, he wants to know this is the minimum number of moves and in the allotted number of axes.</h4>\n\n<h4 id=\"can-you-calculate-the-minimum-number-of-moves-in-which-ninja-can-know-the-limit-of-axes\">Can you calculate the minimum number of moves in which Ninja can know the limit of axes?</h4>\n\n<h5 id=\"some-points-to-notice-about-axes-are\">Some points to notice about axes are:</h5>\n\n<pre><code>1. An axe that is used to cut a lesser or equal number of logs than its limit can be used again.\n\n2. An axe that is used to cut more logs than its limit will be broken. Thus, it cannot be used again.\n\n3. All the axes have the same limit of cutting logs until broken.\n\n4. An axe may also cut N logs or may not even cut a single log.\n</code></pre>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>Let the number of axes (K) be 2 &amp; the capacity of the log cutting stand (N) be 6.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_2020-12-21-untitled-diagram-drawio-diagrams-net-1-6744.png\" alt=\"Example\"></p>\n\n<pre><code>From the above example, we can see that the maximum number of moves is 3 for 2 axes and a capacity of 6 logs.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of queries or test cases. \n\nThe first and only line of each input consists of 2 space-separated integers \u2018K\u2019 and \u2018N\u2019 denoting the number of axes and the capacity of log cutting stand simultaneously.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the minimum number of moves required to know the limit of the axe.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you solve this in the worst-case time complexity of N ^ (1/3)\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= K &lt;= 100\n1 &lt;= N &lt;= 10000\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1:</h5>\n\n<pre><code>2\n2 6\n3 3\n</code></pre>\n\n<h5>Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5>Explanation:</h5>\n\n<pre><code>For test case 1: Refer to the example explained above.\n\nFor test case 2:\nFirst, try to cut 2 logs:\nIf it cuts 2 logs, try to cut 3 logs.\nIf it couldn\u2019t cut 2 logs, try to cut 1 log.\n\nThus, the maximum number of moves required are 3.\n</code></pre>\n\n<h5>Sample Input 2:</h5>\n\n<pre><code>2\n4 11\n3 8\n</code></pre>\n\n<h5>Sample Output 2:</h5>\n\n<pre><code>4\n4\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 182,
        "link": "https://www.codingninjas.com/codestudio/problems/cut-logs_982770?topList=striver-sde-sheet-problems",
        "title": "Cut Logs",
        "solution": "/*\n    Time Complexity: O(N ^ 1/3 + T * logN)\n    Space Complexity: O(N ^ 1/3)\n    Where N is capacity of log cutting stand.\n*/\n#include <vector>\n#include <cmath>\n// Create an array dp\nvector<vector<int>> dp(15, vector<int>(1, 0));\nvoid preComp()\n{\n    for(int i=0; 1; i++)\n    {\n        int cur = dp[3][i] + (i*(i+1))/2 + 1;\n        // Check if cur is greater than 10000\n        if(cur > 10000)\n        {\n            break;\n        }\n    }\n    // Iterate i from 4 to 14\n    for(int i=4; i <= 14; i++)\n    {\n        for(int j=0; 1; j++)\n        {\n            int cur = dp[i][j] + dp[i-1][j] + 1;\n            dp[i].push_back(cur);\n            // Check if cur is greater than 10000\n            if(cur > 10000)\n            {\n                break;\n            }\n        }\n    }\n}\nint cutLogs(int k, int n)\n{   \n    // Check if K is equal to 1\n    if(k == 1)\n    {\n        return n;\n    }\n    // Check if K is equal to 2\n    if(k == 2)\n    {\n        return ceil((-1.0 + sqrt(1 + 8 * n)) / 2.0);\n    }\n    if(dp[3].size() == 1)\n    {\n        preComp();\n    }\n    // Update K with minimum value of K and 14\n    k = min(k, 14);\n    // Find the lower bound\n    int ans = lower_bound(dp[k].begin(), dp[k].end(), n) - dp[k].begin();\n    return ans;\n}\n"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"you-are-given-a-list-of-n-strings-a-your-task-is-to-check-whether-you-can-form-a-given-target-string-using-a-combination-of-one-or-more-strings-of-a\">You are given a list of \u201cN\u201d strings A. Your task is to check whether you can form a given target string using a combination of one or more strings of A.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You can use any string of A multiple times.\n</code></pre>\n\n<h5 id=\"examples\">Examples :</h5>\n\n<pre><code>A =[\u201ccoding\u201d, \u201dninjas\u201d, \u201cis\u201d, \u201cawesome\u201d]  target = \u201ccodingninjas\u201d\nAns = true as we use \u201ccoding\u201d and \u201cninjas\u201d to form \u201ccodingninjas\u201d\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \nThen the T test cases follow.\n\nThe first line of each test contains a single integer N denoting the total number of strings in A.\n\nThe second line of each test contains \u201cN\u201d space-separated strings of A.\n\nThe third line of each test contains a single string target. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print 1 if you can form a target string else print 0.\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5 \n1 &lt;= N, | target | &lt;= 10^2\n1 &lt;= | A[i] | &lt;= 10\n\nWhere | A[i] | denotes length of string i,| target | denotes the length of the string target and A[i] contains only lowercase English characters.\n\nTime limit: 1 sec\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>2 \n2\nab cd\nabcd\n2\ndo the\nhello\n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5>Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, A = [ \u201cab\u201d, \u201ccd\u201d], target = \u201cabcd\u201d\nWe can get \u201cabcd\u201d using \u201cab\u201d and \u201ccd\u201d\nSo answer will be 1.\n\nFor the second test case, A = [ \u201cdo\u201d, \u201cthe\u201d], target = \u201chello\u201d\nWe can\u2019t make a target using one or more strings of A.\nSo the answer will be 0.\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>2 \n2\naa a\naaaaa\n1\ndo\nd\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5>Explanation For Sample Input 2:</h5>\n\n<pre><code>For the first test case, A =[ \u201caa\u201d, \u201ca\u201d], target = \u201caaaaa\u201d\nWe can use \u201ca\u201d 5 times to get \u201caaaaa\u201d.\nSo the answer will be 1.\n\nFor the second test case, A =[ \u201cdo\u201d], target = \u201cd\u201d\nWe can\u2019t make d using [\u201cdo\u201d].\nSo the answer will be 0.\n</code></pre>\n</div><!----><!----><!----></div>",
        "difficulty": "Medium",
        "frontendQuestionId": 183,
        "link": "https://www.codingninjas.com/codestudio/problems/word-break_1094901?topList=striver-sde-sheet-problems",
        "title": "Word Break",
        "solution": "/*\r\n    Time Complexity  : O(N ^ 2)\r\n    Space Complexity : O(N)\r\n\r\n    Where N is the length of target string.\r\n*/\r\n\r\n#include <unordered_set>\r\n\r\n#include <queue>\r\n\r\nbool wordBreak(vector < string > & arr, int n, string & target) {\r\n    // Declare a hash map.\r\n    unordered_set < string > hashMap;\r\n\r\n    // Insert all strings of a into hashmap.\r\n    for (string s: arr) {\r\n        hashMap.insert(s);\r\n    }\r\n\r\n    // Declare an empty queue.\r\n    queue < int > q;\r\n\r\n    // Declare an empty hash map to keep track of visited nodes.\r\n    unordered_set < int > visited;\r\n\r\n    // Push 0 to queue.\r\n    q.push(0);\r\n\r\n    // Run a loop until q is not empty.\r\n    while (q.size() > 0) {\r\n        // Pop front element of queue.\r\n        int frontElement = q.front();\r\n        q.pop();\r\n\r\n        // Check if front element is already visited or  not.\r\n        if (visited.find(frontElement) == visited.end()) {\r\n            // Mark front element as visited.\r\n            visited.insert(frontElement);\r\n\r\n            // Run a loop from front element to size of target string.\r\n            for (int j = frontElement; j < target.size(); j++) {\r\n                /*\r\n                    If substring starting from j does not exist in\r\n                    hash map then push it to queue.\r\n                */\r\n                if (hashMap.find(target.substr(frontElement, j - frontElement + 1)) != hashMap.end()) {\r\n                    q.push(j + 1);\r\n\r\n                    /*\r\n                        If we have reached at the end of target\r\n                        String then return true.\r\n                    */\r\n                    if (j + 1 == target.size())\r\n                        return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}"
      },
      {
        "content": "<div _ngcontent-serverapp-c196=\"\" class=\"problem-description-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title-container\"><div _ngcontent-serverapp-c196=\"\" class=\"problem-statement-title\">Problem Statement</div><div _ngcontent-serverapp-c196=\"\" class=\"suggest-edit ng-star-inserted\"> Suggest Edit </div><!----><!----><!----></div><div _ngcontent-serverapp-c196=\"\" disableselect=\"\" class=\"description prevent-select ng-star-inserted\"><h4 id=\"given-a-string-str-find-the-minimum-number-of-partitions-to-make-in-the-string-such-that-every-partition-of-the-string-is-a-palindrome\">Given a string \u2018str\u2019. Find the minimum number of partitions to make in the string such that every partition of the string is a palindrome.</h4>\n\n<h4 id=\"given-a-string-make-cuts-in-that-string-to-make-partitions-containing-substrings-with-size-at-least-1-and-also-each-partition-is-a-palindrome-for-example-consider-aaccb-we-can-make-a-valid-partition-like-a-a-cc-b-among-all-such-valid-partitions-return-the-minimum-number-of-cuts-to-be-made-such-that-the-resulting-substrings-in-the-partitions-are-palindromes\">Given a string, make cuts in that string to make partitions containing substrings with size at least 1, and also each partition is a palindrome. For example, consider \u201cAACCB\u201d we can make a valid partition like A | A | CC | B. Among all such valid partitions, return the minimum number of cuts to be made such that the resulting substrings in the partitions are palindromes.</h4>\n\n<h4 id=\"the-minimum-number-of-cuts-for-the-above-example-will-be-aa-cc-b-i-e-2-cuts\">The minimum number of cuts for the above example will be AA | CC | B. i.e 2 cuts</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1) We can partition the string after the first index and before the last index.\n\n2) Each substring after partition must be a palindrome.\n\n3) For a string of length \u2018n\u2019, if the string is a palindrome, then a minimum 0 cuts are needed.  \n\n4) If the string contains all different characters, then \u2018n-1\u2019 cuts are needed.\n\n5) The string consists of upper case English alphabets only with no spaces.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nEach test case on a separate line contains a string \u2018str\u2019 denoting the string to be partitioned.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code> For each test case, return the minimum number of cuts to be done so that each partitioned substring is a palindrome.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= length(string) &lt;= 100\n\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018length(string)\u2019 denotes the length of the string.\n\nTime limit: 1 second\n</code></pre>\n</div><div _ngcontent-serverapp-c196=\"\" class=\"description ng-star-inserted\"><h5>Sample Input 1 :</h5>\n\n<pre><code>3\nBABABCBADCEDE\nNITIN\nABBAC  \n</code></pre>\n\n<h5>Sample Output 1 :</h5>\n\n<pre><code>4\n0\n1\n</code></pre>\n\n<h5>Explanation of sample input 1 :</h5>\n\n<pre><code>Test case 1 :\n\nFor the first test case, we can do the cuts in the following way.\n\nBABABCBADCEDE                                                    \nBAB | ABCBA | D | C  | EDE\n\nAfter making the first cut at position 3, we get a substring \u2018BAB\u2019 which is a palindrome. Making the second cut at position 8, we get a substring \u2018ABCBA\u2019 which is a palindrome. Making the third cut at position 9, we get a char \u2018D\u2019, and furthermore making cuts at position 10 and 11 we get \u2018C\u2019 and \u2018EDE\u2019 respectively.\n\nWe can see after putting the partitions, every substring made by partitions is a palindrome and it is not possible to partition this string with less than 4 partitions such that each partition is a palindrome. Hence we return 4 which is the number of partitions to be made.\n\n\nTest case 2 :\n\nNITIN is already a palindrome so we do not need to do any cuts, Hence we return 0 which is the number of partitions to be made.\n\n\n\nTest case 3 :\n\nWe can make cuts in the following way:\n\nABBAC  -&gt;   ABBA | C\n\nAfter making the first cut at position 4, we get the substring \u201cABBA\u201d which is a palindrome. The remaining string is a single character \u2018C\u2019 which is a palindrome.\n\nWe can see after putting the partitions, every substring made by partitions are palindrome and it is not possible to partition this string with less than 1 partitions such that each partition is a palindrome\n</code></pre>\n\n<h5>Sample Input 2 :</h5>\n\n<pre><code>3\nCODINGNINJAS\nGOOGLE\nAPPLE\n</code></pre>\n\n<h5>Sample Output 2 :</h5>\n\n<pre><code>7\n2\n3\n</code></pre>\n\n<h5>Explanation of sample input 2 :</h5>\n\n<pre><code>Take the example of APPLE as shown below:\n\nWe can clearly see that we needed 3 cuts to partition the string into palindromic substrings.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/palindrome-5778.png\" alt=\"palindrome Apple\"></p>\n</div><!----><!----><!----></div>",
        "difficulty": "Hard",
        "frontendQuestionId": 184,
        "link": "https://www.codingninjas.com/codestudio/problems/palindrome-partitioning_873266?topList=striver-sde-sheet-problems",
        "title": "Palindrome Partitioning ll",
        "solution": "/*\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n\n    Where 'n' is the length of the string\n*/\n\nint palindromePartitioning(string str) {\n    // Get the length of the string\n    int n = str.size();\n\n    /* Create two arrays to build the solution\n       in bottom up manner cuts[i][j] = Minimum number of cuts needed for palindrome partitioning of substring str[i..j]\n       isPalindrome[i][j] = true if substring str[i..j] is  palindrome, else false\n       cuts[i][j] is 0 if isPalindrome[i][j] is true */\n\n    int cuts[n];\n    bool isPalindrome[n][n];\n\n    int i, j, k, L;  // different looping variables\n\n    // Every substring of length 1 is a palindrome\n    for (i = 0; i < n; i++) {\n        isPalindrome[i][i] = true;\n    }\n\n    /* L is substring length. Build the solution in bottom up manner by\n       considering all substrings of length starting from 2 to n. */\n    for (L = 2; L <= n; L++) {\n        // For substring of length L, set different possible starting indexes\n        for (i = 0; i < n - L + 1; i++) {\n            j = i + L - 1;  // Set ending index\n\n            /* If L is 2, then we just need to compare two characters. Else\n               need to check two corner characters and value of isPalindrome[i+1][j-1] */\n            if (L == 2) {\n                isPalindrome[i][j] = (str[i] == str[j]);\n            } else {\n                isPalindrome[i][j] = (str[i] == str[j]) && isPalindrome[i + 1][j - 1];\n            }\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        if (isPalindrome[0][i] == true) {\n            cuts[i] = 0;\n        } else {\n            cuts[i] = INT_MAX;\n            for (j = 0; j < i; j++) {\n                if (isPalindrome[j + 1][i] == true && 1 + cuts[j] < cuts[i]) cuts[i] = 1 + cuts[j];\n            }\n        }\n    }\n\n    // Return the min cut value for complete string. i.e., str[0..n-1]\n    return cuts[n - 1];\n}\n"
      }
    ],
    "Blitz 75": [
      {
        "title": "Merge Strings Alternately",
        "titleSlug": "merge-strings-alternately",
        "difficulty": "Easy",
        "frontendQuestionId": 1768
      },
      {
        "title": "Greatest Common Divisor of Strings",
        "titleSlug": "greatest-common-divisor-of-strings",
        "difficulty": "Easy",
        "frontendQuestionId": 1071
      },
      {
        "title": "Kids With the Greatest Number of Candies",
        "titleSlug": "kids-with-the-greatest-number-of-candies",
        "difficulty": "Easy",
        "frontendQuestionId": 1431
      },
      {
        "title": "Can Place Flowers",
        "titleSlug": "can-place-flowers",
        "difficulty": "Easy",
        "frontendQuestionId": 605
      },
      {
        "title": "Reverse Vowels of a String",
        "titleSlug": "reverse-vowels-of-a-string",
        "difficulty": "Easy",
        "frontendQuestionId": 345
      },
      {
        "title": "Reverse Words in a String",
        "titleSlug": "reverse-words-in-a-string",
        "difficulty": "Medium",
        "frontendQuestionId": 151
      },
      {
        "title": "Product of Array Except Self",
        "titleSlug": "product-of-array-except-self",
        "difficulty": "Medium",
        "frontendQuestionId": 238
      },
      {
        "title": "Increasing Triplet Subsequence",
        "titleSlug": "increasing-triplet-subsequence",
        "difficulty": "Medium",
        "frontendQuestionId": 334
      },
      {
        "title": "String Compression",
        "titleSlug": "string-compression",
        "difficulty": "Medium",
        "frontendQuestionId": 443
      },
      {
        "title": "Move Zeroes",
        "titleSlug": "move-zeroes",
        "difficulty": "Easy",
        "frontendQuestionId": 283
      },
      {
        "title": "Is Subsequence",
        "titleSlug": "is-subsequence",
        "difficulty": "Easy",
        "frontendQuestionId": 392
      },
      {
        "title": "Container With Most Water",
        "titleSlug": "container-with-most-water",
        "difficulty": "Medium",
        "frontendQuestionId": 11
      },
      {
        "title": "Max Number of K-Sum Pairs",
        "titleSlug": "max-number-of-k-sum-pairs",
        "difficulty": "Medium",
        "frontendQuestionId": 1679
      },
      {
        "title": "Maximum Average Subarray I",
        "titleSlug": "maximum-average-subarray-i",
        "difficulty": "Easy",
        "frontendQuestionId": 643
      },
      {
        "title": "Maximum Number of Vowels in a Substring of Given Length",
        "titleSlug": "maximum-number-of-vowels-in-a-substring-of-given-length",
        "difficulty": "Medium",
        "frontendQuestionId": 1456
      },
      {
        "title": "Max Consecutive Ones III",
        "titleSlug": "max-consecutive-ones-iii",
        "difficulty": "Medium",
        "frontendQuestionId": 1004
      },
      {
        "title": "Longest Subarray of 1's After Deleting One Element",
        "titleSlug": "longest-subarray-of-1s-after-deleting-one-element",
        "difficulty": "Medium",
        "frontendQuestionId": 1493
      },
      {
        "title": "Find the Highest Altitude",
        "titleSlug": "find-the-highest-altitude",
        "difficulty": "Easy",
        "frontendQuestionId": 1732
      },
      {
        "title": "Find Pivot Index",
        "titleSlug": "find-pivot-index",
        "difficulty": "Easy",
        "frontendQuestionId": 724
      },
      {
        "title": "Find the Difference of Two Arrays",
        "titleSlug": "find-the-difference-of-two-arrays",
        "difficulty": "Easy",
        "frontendQuestionId": 2215
      },
      {
        "title": "Unique Number of Occurrences",
        "titleSlug": "unique-number-of-occurrences",
        "difficulty": "Easy",
        "frontendQuestionId": 1207
      },
      {
        "title": "Determine if Two Strings Are Close",
        "titleSlug": "determine-if-two-strings-are-close",
        "difficulty": "Medium",
        "frontendQuestionId": 1657
      },
      {
        "title": "Equal Row and Column Pairs",
        "titleSlug": "equal-row-and-column-pairs",
        "difficulty": "Medium",
        "frontendQuestionId": 2352
      },
      {
        "title": "Removing Stars From a String",
        "titleSlug": "removing-stars-from-a-string",
        "difficulty": "Medium",
        "frontendQuestionId": 2390
      },
      {
        "title": "Asteroid Collision",
        "titleSlug": "asteroid-collision",
        "difficulty": "Medium",
        "frontendQuestionId": 735
      },
      {
        "title": "Decode String",
        "titleSlug": "decode-string",
        "difficulty": "Medium",
        "frontendQuestionId": 394
      },
      {
        "title": "Number of Recent Calls",
        "titleSlug": "number-of-recent-calls",
        "difficulty": "Easy",
        "frontendQuestionId": 933
      },
      {
        "title": "Dota2 Senate",
        "titleSlug": "dota2-senate",
        "difficulty": "Medium",
        "frontendQuestionId": 649
      },
      {
        "title": "Delete the Middle Node of a Linked List",
        "titleSlug": "delete-the-middle-node-of-a-linked-list",
        "difficulty": "Medium",
        "frontendQuestionId": 2095
      },
      {
        "title": "Odd Even Linked List",
        "titleSlug": "odd-even-linked-list",
        "difficulty": "Medium",
        "frontendQuestionId": 328
      },
      {
        "title": "Reverse Linked List",
        "titleSlug": "reverse-linked-list",
        "difficulty": "Easy",
        "frontendQuestionId": 206
      },
      {
        "title": "Maximum Twin Sum of a Linked List",
        "titleSlug": "maximum-twin-sum-of-a-linked-list",
        "difficulty": "Medium",
        "frontendQuestionId": 2130
      },
      {
        "title": "Maximum Depth of Binary Tree",
        "titleSlug": "maximum-depth-of-binary-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 104
      },
      {
        "title": "Leaf-Similar Trees",
        "titleSlug": "leaf-similar-trees",
        "difficulty": "Easy",
        "frontendQuestionId": 872
      },
      {
        "title": "Count Good Nodes in Binary Tree",
        "titleSlug": "count-good-nodes-in-binary-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 1448
      },
      {
        "title": "Path Sum III",
        "titleSlug": "path-sum-iii",
        "difficulty": "Medium",
        "frontendQuestionId": 437
      },
      {
        "title": "Longest ZigZag Path in a Binary Tree",
        "titleSlug": "longest-zigzag-path-in-a-binary-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 1372
      },
      {
        "title": "Lowest Common Ancestor of a Binary Tree",
        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 236
      },
      {
        "title": "Binary Tree Right Side View",
        "titleSlug": "binary-tree-right-side-view",
        "difficulty": "Medium",
        "frontendQuestionId": 199
      },
      {
        "title": "Maximum Level Sum of a Binary Tree",
        "titleSlug": "maximum-level-sum-of-a-binary-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 1161
      },
      {
        "title": "Search in a Binary Search Tree",
        "titleSlug": "search-in-a-binary-search-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 700
      },
      {
        "title": "Delete Node in a BST",
        "titleSlug": "delete-node-in-a-bst",
        "difficulty": "Medium",
        "frontendQuestionId": 450
      },
      {
        "title": "Keys and Rooms",
        "titleSlug": "keys-and-rooms",
        "difficulty": "Medium",
        "frontendQuestionId": 841
      },
      {
        "title": "Number of Provinces",
        "titleSlug": "number-of-provinces",
        "difficulty": "Medium",
        "frontendQuestionId": 547
      },
      {
        "title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "difficulty": "Medium",
        "frontendQuestionId": 1466
      },
      {
        "title": "Evaluate Division",
        "titleSlug": "evaluate-division",
        "difficulty": "Medium",
        "frontendQuestionId": 399
      },
      {
        "title": "Nearest Exit from Entrance in Maze",
        "titleSlug": "nearest-exit-from-entrance-in-maze",
        "difficulty": "Medium",
        "frontendQuestionId": 1926
      },
      {
        "title": "Rotting Oranges",
        "titleSlug": "rotting-oranges",
        "difficulty": "Medium",
        "frontendQuestionId": 994
      },
      {
        "title": "Kth Largest Element in an Array",
        "titleSlug": "kth-largest-element-in-an-array",
        "difficulty": "Medium",
        "frontendQuestionId": 215
      },
      {
        "title": "Smallest Number in Infinite Set",
        "titleSlug": "smallest-number-in-infinite-set",
        "difficulty": "Medium",
        "frontendQuestionId": 2336
      },
      {
        "title": "Maximum Subsequence Score",
        "titleSlug": "maximum-subsequence-score",
        "difficulty": "Medium",
        "frontendQuestionId": 2542
      },
      {
        "title": "Total Cost to Hire K Workers",
        "titleSlug": "total-cost-to-hire-k-workers",
        "difficulty": "Medium",
        "frontendQuestionId": 2462
      },
      {
        "title": "Guess Number Higher or Lower",
        "titleSlug": "guess-number-higher-or-lower",
        "difficulty": "Easy",
        "frontendQuestionId": 374
      },
      {
        "title": "Successful Pairs of Spells and Potions",
        "titleSlug": "successful-pairs-of-spells-and-potions",
        "difficulty": "Medium",
        "frontendQuestionId": 2300
      },
      {
        "title": "Find Peak Element",
        "titleSlug": "find-peak-element",
        "difficulty": "Medium",
        "frontendQuestionId": 162
      },
      {
        "title": "Koko Eating Bananas",
        "titleSlug": "koko-eating-bananas",
        "difficulty": "Medium",
        "frontendQuestionId": 875
      },
      {
        "title": "Letter Combinations of a Phone Number",
        "titleSlug": "letter-combinations-of-a-phone-number",
        "difficulty": "Medium",
        "frontendQuestionId": 17
      },
      {
        "title": "Combination Sum III",
        "titleSlug": "combination-sum-iii",
        "difficulty": "Medium",
        "frontendQuestionId": 216
      },
      {
        "title": "N-th Tribonacci Number",
        "titleSlug": "n-th-tribonacci-number",
        "difficulty": "Easy",
        "frontendQuestionId": 1137
      },
      {
        "title": "Min Cost Climbing Stairs",
        "titleSlug": "min-cost-climbing-stairs",
        "difficulty": "Easy",
        "frontendQuestionId": 746
      },
      {
        "title": "House Robber",
        "titleSlug": "house-robber",
        "difficulty": "Medium",
        "frontendQuestionId": 198
      },
      {
        "title": "Domino and Tromino Tiling",
        "titleSlug": "domino-and-tromino-tiling",
        "difficulty": "Medium",
        "frontendQuestionId": 790
      },
      {
        "title": "Unique Paths",
        "titleSlug": "unique-paths",
        "difficulty": "Medium",
        "frontendQuestionId": 62
      },
      {
        "title": "Longest Common Subsequence",
        "titleSlug": "longest-common-subsequence",
        "difficulty": "Medium",
        "frontendQuestionId": 1143
      },
      {
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "difficulty": "Medium",
        "frontendQuestionId": 714
      },
      {
        "title": "Edit Distance",
        "titleSlug": "edit-distance",
        "difficulty": "Medium",
        "frontendQuestionId": 72
      },
      {
        "title": "Counting Bits",
        "titleSlug": "counting-bits",
        "difficulty": "Easy",
        "frontendQuestionId": 338
      },
      {
        "title": "Single Number",
        "titleSlug": "single-number",
        "difficulty": "Easy",
        "frontendQuestionId": 136
      },
      {
        "title": "Minimum Flips to Make a OR b Equal to c",
        "titleSlug": "minimum-flips-to-make-a-or-b-equal-to-c",
        "difficulty": "Medium",
        "frontendQuestionId": 1318
      },
      {
        "title": "Implement Trie (Prefix Tree)",
        "titleSlug": "implement-trie-prefix-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 208
      },
      {
        "title": "Search Suggestions System",
        "titleSlug": "search-suggestions-system",
        "difficulty": "Medium",
        "frontendQuestionId": 1268
      },
      {
        "title": "Non-overlapping Intervals",
        "titleSlug": "non-overlapping-intervals",
        "difficulty": "Medium",
        "frontendQuestionId": 435
      },
      {
        "title": "Minimum Number of Arrows to Burst Balloons",
        "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
        "difficulty": "Medium",
        "frontendQuestionId": 452
      },
      {
        "title": "Daily Temperatures",
        "titleSlug": "daily-temperatures",
        "difficulty": "Medium",
        "frontendQuestionId": 739
      },
      {
        "title": "Online Stock Span",
        "titleSlug": "online-stock-span",
        "difficulty": "Medium",
        "frontendQuestionId": 901
      }
    ],
    "AlgoQuest 150": [
      {
        "title": "Merge Sorted Array",
        "titleSlug": "merge-sorted-array",
        "difficulty": "Easy",
        "frontendQuestionId": 88
      },
      {
        "title": "Remove Element",
        "titleSlug": "remove-element",
        "difficulty": "Easy",
        "frontendQuestionId": 27
      },
      {
        "title": "Remove Duplicates from Sorted Array",
        "titleSlug": "remove-duplicates-from-sorted-array",
        "difficulty": "Easy",
        "frontendQuestionId": 26
      },
      {
        "title": "Remove Duplicates from Sorted Array II",
        "titleSlug": "remove-duplicates-from-sorted-array-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 80
      },
      {
        "title": "Majority Element",
        "titleSlug": "majority-element",
        "difficulty": "Easy",
        "frontendQuestionId": 169
      },
      {
        "title": "Rotate Array",
        "titleSlug": "rotate-array",
        "difficulty": "Medium",
        "frontendQuestionId": 189
      },
      {
        "title": "Best Time to Buy and Sell Stock",
        "titleSlug": "best-time-to-buy-and-sell-stock",
        "difficulty": "Easy",
        "frontendQuestionId": 121
      },
      {
        "title": "Best Time to Buy and Sell Stock II",
        "titleSlug": "best-time-to-buy-and-sell-stock-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 122
      },
      {
        "title": "Jump Game",
        "titleSlug": "jump-game",
        "difficulty": "Medium",
        "frontendQuestionId": 55
      },
      {
        "title": "Jump Game II",
        "titleSlug": "jump-game-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 45
      },
      {
        "title": "H-Index",
        "titleSlug": "h-index",
        "difficulty": "Medium",
        "frontendQuestionId": 274
      },
      {
        "title": "Insert Delete GetRandom O(1)",
        "titleSlug": "insert-delete-getrandom-o1",
        "difficulty": "Medium",
        "frontendQuestionId": 380
      },
      {
        "title": "Product of Array Except Self",
        "titleSlug": "product-of-array-except-self",
        "difficulty": "Medium",
        "frontendQuestionId": 238
      },
      {
        "title": "Gas Station",
        "titleSlug": "gas-station",
        "difficulty": "Medium",
        "frontendQuestionId": 134
      },
      {
        "title": "Candy",
        "titleSlug": "candy",
        "difficulty": "Hard",
        "frontendQuestionId": 135
      },
      {
        "title": "Trapping Rain Water",
        "titleSlug": "trapping-rain-water",
        "difficulty": "Hard",
        "frontendQuestionId": 42
      },
      {
        "title": "Roman to Integer",
        "titleSlug": "roman-to-integer",
        "difficulty": "Easy",
        "frontendQuestionId": 13
      },
      {
        "title": "Integer to Roman",
        "titleSlug": "integer-to-roman",
        "difficulty": "Medium",
        "frontendQuestionId": 12
      },
      {
        "title": "Length of Last Word",
        "titleSlug": "length-of-last-word",
        "difficulty": "Easy",
        "frontendQuestionId": 58
      },
      {
        "title": "Longest Common Prefix",
        "titleSlug": "longest-common-prefix",
        "difficulty": "Easy",
        "frontendQuestionId": 14
      },
      {
        "title": "Reverse Words in a String",
        "titleSlug": "reverse-words-in-a-string",
        "difficulty": "Medium",
        "frontendQuestionId": 151
      },
      {
        "title": "Zigzag Conversion",
        "titleSlug": "zigzag-conversion",
        "difficulty": "Medium",
        "frontendQuestionId": 6
      },
      {
        "title": "Find the Index of the First Occurrence in a String",
        "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
        "difficulty": "Easy",
        "frontendQuestionId": 28
      },
      {
        "title": "Text Justification",
        "titleSlug": "text-justification",
        "difficulty": "Hard",
        "frontendQuestionId": 68
      },
      {
        "title": "Valid Palindrome",
        "titleSlug": "valid-palindrome",
        "difficulty": "Easy",
        "frontendQuestionId": 125
      },
      {
        "title": "Is Subsequence",
        "titleSlug": "is-subsequence",
        "difficulty": "Easy",
        "frontendQuestionId": 392
      },
      {
        "title": "Two Sum II - Input Array Is Sorted",
        "titleSlug": "two-sum-ii-input-array-is-sorted",
        "difficulty": "Medium",
        "frontendQuestionId": 167
      },
      {
        "title": "Container With Most Water",
        "titleSlug": "container-with-most-water",
        "difficulty": "Medium",
        "frontendQuestionId": 11
      },
      {
        "title": "3Sum",
        "titleSlug": "3sum",
        "difficulty": "Medium",
        "frontendQuestionId": 15
      },
      {
        "title": "Minimum Size Subarray Sum",
        "titleSlug": "minimum-size-subarray-sum",
        "difficulty": "Medium",
        "frontendQuestionId": 209
      },
      {
        "title": "Longest Substring Without Repeating Characters",
        "titleSlug": "longest-substring-without-repeating-characters",
        "difficulty": "Medium",
        "frontendQuestionId": 3
      },
      {
        "title": "Substring with Concatenation of All Words",
        "titleSlug": "substring-with-concatenation-of-all-words",
        "difficulty": "Hard",
        "frontendQuestionId": 30
      },
      {
        "title": "Minimum Window Substring",
        "titleSlug": "minimum-window-substring",
        "difficulty": "Hard",
        "frontendQuestionId": 76
      },
      {
        "title": "Valid Sudoku",
        "titleSlug": "valid-sudoku",
        "difficulty": "Medium",
        "frontendQuestionId": 36
      },
      {
        "title": "Spiral Matrix",
        "titleSlug": "spiral-matrix",
        "difficulty": "Medium",
        "frontendQuestionId": 54
      },
      {
        "title": "Rotate Image",
        "titleSlug": "rotate-image",
        "difficulty": "Medium",
        "frontendQuestionId": 48
      },
      {
        "title": "Set Matrix Zeroes",
        "titleSlug": "set-matrix-zeroes",
        "difficulty": "Medium",
        "frontendQuestionId": 73
      },
      {
        "title": "Game of Life",
        "titleSlug": "game-of-life",
        "difficulty": "Medium",
        "frontendQuestionId": 289
      },
      {
        "title": "Ransom Note",
        "titleSlug": "ransom-note",
        "difficulty": "Easy",
        "frontendQuestionId": 383
      },
      {
        "title": "Isomorphic Strings",
        "titleSlug": "isomorphic-strings",
        "difficulty": "Easy",
        "frontendQuestionId": 205
      },
      {
        "title": "Word Pattern",
        "titleSlug": "word-pattern",
        "difficulty": "Easy",
        "frontendQuestionId": 290
      },
      {
        "title": "Valid Anagram",
        "titleSlug": "valid-anagram",
        "difficulty": "Easy",
        "frontendQuestionId": 242
      },
      {
        "title": "Group Anagrams",
        "titleSlug": "group-anagrams",
        "difficulty": "Medium",
        "frontendQuestionId": 49
      },
      {
        "title": "Two Sum",
        "titleSlug": "two-sum",
        "difficulty": "Easy",
        "frontendQuestionId": 1
      },
      {
        "title": "Happy Number",
        "titleSlug": "happy-number",
        "difficulty": "Easy",
        "frontendQuestionId": 202
      },
      {
        "title": "Contains Duplicate II",
        "titleSlug": "contains-duplicate-ii",
        "difficulty": "Easy",
        "frontendQuestionId": 219
      },
      {
        "title": "Longest Consecutive Sequence",
        "titleSlug": "longest-consecutive-sequence",
        "difficulty": "Medium",
        "frontendQuestionId": 128
      },
      {
        "title": "Summary Ranges",
        "titleSlug": "summary-ranges",
        "difficulty": "Easy",
        "frontendQuestionId": 228
      },
      {
        "title": "Merge Intervals",
        "titleSlug": "merge-intervals",
        "difficulty": "Medium",
        "frontendQuestionId": 56
      },
      {
        "title": "Insert Interval",
        "titleSlug": "insert-interval",
        "difficulty": "Medium",
        "frontendQuestionId": 57
      },
      {
        "title": "Minimum Number of Arrows to Burst Balloons",
        "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
        "difficulty": "Medium",
        "frontendQuestionId": 452
      },
      {
        "title": "Valid Parentheses",
        "titleSlug": "valid-parentheses",
        "difficulty": "Easy",
        "frontendQuestionId": 20
      },
      {
        "title": "Simplify Path",
        "titleSlug": "simplify-path",
        "difficulty": "Medium",
        "frontendQuestionId": 71
      },
      {
        "title": "Min Stack",
        "titleSlug": "min-stack",
        "difficulty": "Medium",
        "frontendQuestionId": 155
      },
      {
        "title": "Evaluate Reverse Polish Notation",
        "titleSlug": "evaluate-reverse-polish-notation",
        "difficulty": "Medium",
        "frontendQuestionId": 150
      },
      {
        "title": "Basic Calculator",
        "titleSlug": "basic-calculator",
        "difficulty": "Hard",
        "frontendQuestionId": 224
      },
      {
        "title": "Linked List Cycle",
        "titleSlug": "linked-list-cycle",
        "difficulty": "Easy",
        "frontendQuestionId": 141
      },
      {
        "title": "Add Two Numbers",
        "titleSlug": "add-two-numbers",
        "difficulty": "Medium",
        "frontendQuestionId": 2
      },
      {
        "title": "Merge Two Sorted Lists",
        "titleSlug": "merge-two-sorted-lists",
        "difficulty": "Easy",
        "frontendQuestionId": 21
      },
      {
        "title": "Copy List with Random Pointer",
        "titleSlug": "copy-list-with-random-pointer",
        "difficulty": "Medium",
        "frontendQuestionId": 138
      },
      {
        "title": "Reverse Linked List II",
        "titleSlug": "reverse-linked-list-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 92
      },
      {
        "title": "Reverse Nodes in k-Group",
        "titleSlug": "reverse-nodes-in-k-group",
        "difficulty": "Hard",
        "frontendQuestionId": 25
      },
      {
        "title": "Remove Nth Node From End of List",
        "titleSlug": "remove-nth-node-from-end-of-list",
        "difficulty": "Medium",
        "frontendQuestionId": 19
      },
      {
        "title": "Remove Duplicates from Sorted List II",
        "titleSlug": "remove-duplicates-from-sorted-list-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 82
      },
      {
        "title": "Rotate List",
        "titleSlug": "rotate-list",
        "difficulty": "Medium",
        "frontendQuestionId": 61
      },
      {
        "title": "Partition List",
        "titleSlug": "partition-list",
        "difficulty": "Medium",
        "frontendQuestionId": 86
      },
      {
        "title": "LRU Cache",
        "titleSlug": "lru-cache",
        "difficulty": "Medium",
        "frontendQuestionId": 146
      },
      {
        "title": "Maximum Depth of Binary Tree",
        "titleSlug": "maximum-depth-of-binary-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 104
      },
      {
        "title": "Same Tree",
        "titleSlug": "same-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 100
      },
      {
        "title": "Invert Binary Tree",
        "titleSlug": "invert-binary-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 226
      },
      {
        "title": "Symmetric Tree",
        "titleSlug": "symmetric-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 101
      },
      {
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "difficulty": "Medium",
        "frontendQuestionId": 105
      },
      {
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "difficulty": "Medium",
        "frontendQuestionId": 106
      },
      {
        "title": "Populating Next Right Pointers in Each Node II",
        "titleSlug": "populating-next-right-pointers-in-each-node-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 117
      },
      {
        "title": "Flatten Binary Tree to Linked List",
        "titleSlug": "flatten-binary-tree-to-linked-list",
        "difficulty": "Medium",
        "frontendQuestionId": 114
      },
      {
        "title": "Path Sum",
        "titleSlug": "path-sum",
        "difficulty": "Easy",
        "frontendQuestionId": 112
      },
      {
        "title": "Sum Root to Leaf Numbers",
        "titleSlug": "sum-root-to-leaf-numbers",
        "difficulty": "Medium",
        "frontendQuestionId": 129
      },
      {
        "title": "Binary Tree Maximum Path Sum",
        "titleSlug": "binary-tree-maximum-path-sum",
        "difficulty": "Hard",
        "frontendQuestionId": 124
      },
      {
        "title": "Binary Search Tree Iterator",
        "titleSlug": "binary-search-tree-iterator",
        "difficulty": "Medium",
        "frontendQuestionId": 173
      },
      {
        "title": "Count Complete Tree Nodes",
        "titleSlug": "count-complete-tree-nodes",
        "difficulty": "Medium",
        "frontendQuestionId": 222
      },
      {
        "title": "Lowest Common Ancestor of a Binary Tree",
        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 236
      },
      {
        "title": "Binary Tree Right Side View",
        "titleSlug": "binary-tree-right-side-view",
        "difficulty": "Medium",
        "frontendQuestionId": 199
      },
      {
        "title": "Average of Levels in Binary Tree",
        "titleSlug": "average-of-levels-in-binary-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 637
      },
      {
        "title": "Binary Tree Level Order Traversal",
        "titleSlug": "binary-tree-level-order-traversal",
        "difficulty": "Medium",
        "frontendQuestionId": 102
      },
      {
        "title": "Binary Tree Zigzag Level Order Traversal",
        "titleSlug": "binary-tree-zigzag-level-order-traversal",
        "difficulty": "Medium",
        "frontendQuestionId": 103
      },
      {
        "title": "Minimum Absolute Difference in BST",
        "titleSlug": "minimum-absolute-difference-in-bst",
        "difficulty": "Easy",
        "frontendQuestionId": 530
      },
      {
        "title": "Kth Smallest Element in a BST",
        "titleSlug": "kth-smallest-element-in-a-bst",
        "difficulty": "Medium",
        "frontendQuestionId": 230
      },
      {
        "title": "Validate Binary Search Tree",
        "titleSlug": "validate-binary-search-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 98
      },
      {
        "title": "Number of Islands",
        "titleSlug": "number-of-islands",
        "difficulty": "Medium",
        "frontendQuestionId": 200
      },
      {
        "title": "Surrounded Regions",
        "titleSlug": "surrounded-regions",
        "difficulty": "Medium",
        "frontendQuestionId": 130
      },
      {
        "title": "Clone Graph",
        "titleSlug": "clone-graph",
        "difficulty": "Medium",
        "frontendQuestionId": 133
      },
      {
        "title": "Evaluate Division",
        "titleSlug": "evaluate-division",
        "difficulty": "Medium",
        "frontendQuestionId": 399
      },
      {
        "title": "Course Schedule",
        "titleSlug": "course-schedule",
        "difficulty": "Medium",
        "frontendQuestionId": 207
      },
      {
        "title": "Course Schedule II",
        "titleSlug": "course-schedule-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 210
      },
      {
        "title": "Snakes and Ladders",
        "titleSlug": "snakes-and-ladders",
        "difficulty": "Medium",
        "frontendQuestionId": 909
      },
      {
        "title": "Minimum Genetic Mutation",
        "titleSlug": "minimum-genetic-mutation",
        "difficulty": "Medium",
        "frontendQuestionId": 433
      },
      {
        "title": "Word Ladder",
        "titleSlug": "word-ladder",
        "difficulty": "Hard",
        "frontendQuestionId": 127
      },
      {
        "title": "Implement Trie (Prefix Tree)",
        "titleSlug": "implement-trie-prefix-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 208
      },
      {
        "title": "Design Add and Search Words Data Structure",
        "titleSlug": "design-add-and-search-words-data-structure",
        "difficulty": "Medium",
        "frontendQuestionId": 211
      },
      {
        "title": "Word Search II",
        "titleSlug": "word-search-ii",
        "difficulty": "Hard",
        "frontendQuestionId": 212
      },
      {
        "title": "Letter Combinations of a Phone Number",
        "titleSlug": "letter-combinations-of-a-phone-number",
        "difficulty": "Medium",
        "frontendQuestionId": 17
      },
      {
        "title": "Combinations",
        "titleSlug": "combinations",
        "difficulty": "Medium",
        "frontendQuestionId": 77
      },
      {
        "title": "Permutations",
        "titleSlug": "permutations",
        "difficulty": "Medium",
        "frontendQuestionId": 46
      },
      {
        "title": "Combination Sum",
        "titleSlug": "combination-sum",
        "difficulty": "Medium",
        "frontendQuestionId": 39
      },
      {
        "title": "N-Queens II",
        "titleSlug": "n-queens-ii",
        "difficulty": "Hard",
        "frontendQuestionId": 52
      },
      {
        "title": "Generate Parentheses",
        "titleSlug": "generate-parentheses",
        "difficulty": "Medium",
        "frontendQuestionId": 22
      },
      {
        "title": "Word Search",
        "titleSlug": "word-search",
        "difficulty": "Medium",
        "frontendQuestionId": 79
      },
      {
        "title": "Convert Sorted Array to Binary Search Tree",
        "titleSlug": "convert-sorted-array-to-binary-search-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 108
      },
      {
        "title": "Sort List",
        "titleSlug": "sort-list",
        "difficulty": "Medium",
        "frontendQuestionId": 148
      },
      {
        "title": "Construct Quad Tree",
        "titleSlug": "construct-quad-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 427
      },
      {
        "title": "Merge k Sorted Lists",
        "titleSlug": "merge-k-sorted-lists",
        "difficulty": "Hard",
        "frontendQuestionId": 23
      },
      {
        "title": "Maximum Subarray",
        "titleSlug": "maximum-subarray",
        "difficulty": "Medium",
        "frontendQuestionId": 53
      },
      {
        "title": "Maximum Sum Circular Subarray",
        "titleSlug": "maximum-sum-circular-subarray",
        "difficulty": "Medium",
        "frontendQuestionId": 918
      },
      {
        "title": "Search Insert Position",
        "titleSlug": "search-insert-position",
        "difficulty": "Easy",
        "frontendQuestionId": 35
      },
      {
        "title": "Search a 2D Matrix",
        "titleSlug": "search-a-2d-matrix",
        "difficulty": "Medium",
        "frontendQuestionId": 74
      },
      {
        "title": "Find Peak Element",
        "titleSlug": "find-peak-element",
        "difficulty": "Medium",
        "frontendQuestionId": 162
      },
      {
        "title": "Search in Rotated Sorted Array",
        "titleSlug": "search-in-rotated-sorted-array",
        "difficulty": "Medium",
        "frontendQuestionId": 33
      },
      {
        "title": "Find First and Last Position of Element in Sorted Array",
        "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
        "difficulty": "Medium",
        "frontendQuestionId": 34
      },
      {
        "title": "Find Minimum in Rotated Sorted Array",
        "titleSlug": "find-minimum-in-rotated-sorted-array",
        "difficulty": "Medium",
        "frontendQuestionId": 153
      },
      {
        "title": "Median of Two Sorted Arrays",
        "titleSlug": "median-of-two-sorted-arrays",
        "difficulty": "Hard",
        "frontendQuestionId": 4
      },
      {
        "title": "Kth Largest Element in an Array",
        "titleSlug": "kth-largest-element-in-an-array",
        "difficulty": "Medium",
        "frontendQuestionId": 215
      },
      {
        "title": "IPO",
        "titleSlug": "ipo",
        "difficulty": "Hard",
        "frontendQuestionId": 502
      },
      {
        "title": "Find K Pairs with Smallest Sums",
        "titleSlug": "find-k-pairs-with-smallest-sums",
        "difficulty": "Medium",
        "frontendQuestionId": 373
      },
      {
        "title": "Find Median from Data Stream",
        "titleSlug": "find-median-from-data-stream",
        "difficulty": "Hard",
        "frontendQuestionId": 295
      },
      {
        "title": "Add Binary",
        "titleSlug": "add-binary",
        "difficulty": "Easy",
        "frontendQuestionId": 67
      },
      {
        "title": "Reverse Bits",
        "titleSlug": "reverse-bits",
        "difficulty": "Easy",
        "frontendQuestionId": 190
      },
      {
        "title": "Number of 1 Bits",
        "titleSlug": "number-of-1-bits",
        "difficulty": "Easy",
        "frontendQuestionId": 191
      },
      {
        "title": "Single Number",
        "titleSlug": "single-number",
        "difficulty": "Easy",
        "frontendQuestionId": 136
      },
      {
        "title": "Single Number II",
        "titleSlug": "single-number-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 137
      },
      {
        "title": "Bitwise AND of Numbers Range",
        "titleSlug": "bitwise-and-of-numbers-range",
        "difficulty": "Medium",
        "frontendQuestionId": 201
      },
      {
        "title": "Palindrome Number",
        "titleSlug": "palindrome-number",
        "difficulty": "Easy",
        "frontendQuestionId": 9
      },
      {
        "title": "Plus One",
        "titleSlug": "plus-one",
        "difficulty": "Easy",
        "frontendQuestionId": 66
      },
      {
        "title": "Factorial Trailing Zeroes",
        "titleSlug": "factorial-trailing-zeroes",
        "difficulty": "Medium",
        "frontendQuestionId": 172
      },
      {
        "title": "Sqrt(x)",
        "titleSlug": "sqrtx",
        "difficulty": "Easy",
        "frontendQuestionId": 69
      },
      {
        "title": "Pow(x, n)",
        "titleSlug": "powx-n",
        "difficulty": "Medium",
        "frontendQuestionId": 50
      },
      {
        "title": "Max Points on a Line",
        "titleSlug": "max-points-on-a-line",
        "difficulty": "Hard",
        "frontendQuestionId": 149
      },
      {
        "title": "Climbing Stairs",
        "titleSlug": "climbing-stairs",
        "difficulty": "Easy",
        "frontendQuestionId": 70
      },
      {
        "title": "House Robber",
        "titleSlug": "house-robber",
        "difficulty": "Medium",
        "frontendQuestionId": 198
      },
      {
        "title": "Word Break",
        "titleSlug": "word-break",
        "difficulty": "Medium",
        "frontendQuestionId": 139
      },
      {
        "title": "Coin Change",
        "titleSlug": "coin-change",
        "difficulty": "Medium",
        "frontendQuestionId": 322
      },
      {
        "title": "Longest Increasing Subsequence",
        "titleSlug": "longest-increasing-subsequence",
        "difficulty": "Medium",
        "frontendQuestionId": 300
      },
      {
        "title": "Triangle",
        "titleSlug": "triangle",
        "difficulty": "Medium",
        "frontendQuestionId": 120
      },
      {
        "title": "Minimum Path Sum",
        "titleSlug": "minimum-path-sum",
        "difficulty": "Medium",
        "frontendQuestionId": 64
      },
      {
        "title": "Unique Paths II",
        "titleSlug": "unique-paths-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 63
      },
      {
        "title": "Longest Palindromic Substring",
        "titleSlug": "longest-palindromic-substring",
        "difficulty": "Medium",
        "frontendQuestionId": 5
      },
      {
        "title": "Interleaving String",
        "titleSlug": "interleaving-string",
        "difficulty": "Medium",
        "frontendQuestionId": 97
      },
      {
        "title": "Edit Distance",
        "titleSlug": "edit-distance",
        "difficulty": "Medium",
        "frontendQuestionId": 72
      },
      {
        "title": "Best Time to Buy and Sell Stock III",
        "titleSlug": "best-time-to-buy-and-sell-stock-iii",
        "difficulty": "Hard",
        "frontendQuestionId": 123
      },
      {
        "title": "Best Time to Buy and Sell Stock IV",
        "titleSlug": "best-time-to-buy-and-sell-stock-iv",
        "difficulty": "Hard",
        "frontendQuestionId": 188
      },
      {
        "title": "Maximal Square",
        "titleSlug": "maximal-square",
        "difficulty": "Medium",
        "frontendQuestionId": 221
      }
    ],
    "BrainTease 100": [
      {
        "title": "Letter Combinations of a Phone Number",
        "titleSlug": "letter-combinations-of-a-phone-number",
        "difficulty": "Medium",
        "frontendQuestionId": 17
      },
      {
        "title": "Generate Parentheses",
        "titleSlug": "generate-parentheses",
        "difficulty": "Medium",
        "frontendQuestionId": 22
      },
      {
        "title": "Combination Sum",
        "titleSlug": "combination-sum",
        "difficulty": "Medium",
        "frontendQuestionId": 39
      },
      {
        "title": "Permutations",
        "titleSlug": "permutations",
        "difficulty": "Medium",
        "frontendQuestionId": 46
      },
      {
        "title": "N-Queens",
        "titleSlug": "n-queens",
        "difficulty": "Hard",
        "frontendQuestionId": 51
      },
      {
        "title": "Subsets",
        "titleSlug": "subsets",
        "difficulty": "Medium",
        "frontendQuestionId": 78
      },
      {
        "title": "Word Search",
        "titleSlug": "word-search",
        "difficulty": "Medium",
        "frontendQuestionId": 79
      },
      {
        "title": "Palindrome Partitioning",
        "titleSlug": "palindrome-partitioning",
        "difficulty": "Medium",
        "frontendQuestionId": 131
      },
      {
        "title": "Median of Two Sorted Arrays",
        "titleSlug": "median-of-two-sorted-arrays",
        "difficulty": "Hard",
        "frontendQuestionId": 4
      },
      {
        "title": "Search in Rotated Sorted Array",
        "titleSlug": "search-in-rotated-sorted-array",
        "difficulty": "Medium",
        "frontendQuestionId": 33
      },
      {
        "title": "Find First and Last Position of Element in Sorted Array",
        "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
        "difficulty": "Medium",
        "frontendQuestionId": 34
      },
      {
        "title": "Search Insert Position",
        "titleSlug": "search-insert-position",
        "difficulty": "Easy",
        "frontendQuestionId": 35
      },
      {
        "title": "Search a 2D Matrix",
        "titleSlug": "search-a-2d-matrix",
        "difficulty": "Medium",
        "frontendQuestionId": 74
      },
      {
        "title": "Binary Tree Maximum Path Sum",
        "titleSlug": "binary-tree-maximum-path-sum",
        "difficulty": "Hard",
        "frontendQuestionId": 124
      },
      {
        "title": "Find Minimum in Rotated Sorted Array",
        "titleSlug": "find-minimum-in-rotated-sorted-array",
        "difficulty": "Medium",
        "frontendQuestionId": 153
      },
      {
        "title": "Binary Tree Inorder Traversal",
        "titleSlug": "binary-tree-inorder-traversal",
        "difficulty": "Easy",
        "frontendQuestionId": 94
      },
      {
        "title": "Validate Binary Search Tree",
        "titleSlug": "validate-binary-search-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 98
      },
      {
        "title": "Symmetric Tree",
        "titleSlug": "symmetric-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 101
      },
      {
        "title": "Binary Tree Level Order Traversal",
        "titleSlug": "binary-tree-level-order-traversal",
        "difficulty": "Medium",
        "frontendQuestionId": 102
      },
      {
        "title": "Maximum Depth of Binary Tree",
        "titleSlug": "maximum-depth-of-binary-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 104
      },
      {
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "difficulty": "Medium",
        "frontendQuestionId": 105
      },
      {
        "title": "Convert Sorted Array to Binary Search Tree",
        "titleSlug": "convert-sorted-array-to-binary-search-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 108
      },
      {
        "title": "Flatten Binary Tree to Linked List",
        "titleSlug": "flatten-binary-tree-to-linked-list",
        "difficulty": "Medium",
        "frontendQuestionId": 114
      },
      {
        "title": "Binary Tree Right Side View",
        "titleSlug": "binary-tree-right-side-view",
        "difficulty": "Medium",
        "frontendQuestionId": 199
      },
      {
        "title": "Invert Binary Tree",
        "titleSlug": "invert-binary-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 226
      },
      {
        "title": "Kth Smallest Element in a BST",
        "titleSlug": "kth-smallest-element-in-a-bst",
        "difficulty": "Medium",
        "frontendQuestionId": 230
      },
      {
        "title": "Lowest Common Ancestor of a Binary Tree",
        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 236
      },
      {
        "title": "Path Sum III",
        "titleSlug": "path-sum-iii",
        "difficulty": "Medium",
        "frontendQuestionId": 437
      },
      {
        "title": "Diameter of Binary Tree",
        "titleSlug": "diameter-of-binary-tree",
        "difficulty": "Easy",
        "frontendQuestionId": 543
      },
      {
        "title": "Longest Palindromic Substring",
        "titleSlug": "longest-palindromic-substring",
        "difficulty": "Medium",
        "frontendQuestionId": 5
      },
      {
        "title": "Longest Valid Parentheses",
        "titleSlug": "longest-valid-parentheses",
        "difficulty": "Hard",
        "frontendQuestionId": 32
      },
      {
        "title": "Unique Paths",
        "titleSlug": "unique-paths",
        "difficulty": "Medium",
        "frontendQuestionId": 62
      },
      {
        "title": "Minimum Path Sum",
        "titleSlug": "minimum-path-sum",
        "difficulty": "Medium",
        "frontendQuestionId": 64
      },
      {
        "title": "Climbing Stairs",
        "titleSlug": "climbing-stairs",
        "difficulty": "Easy",
        "frontendQuestionId": 70
      },
      {
        "title": "Edit Distance",
        "titleSlug": "edit-distance",
        "difficulty": "Medium",
        "frontendQuestionId": 72
      },
      {
        "title": "Pascal's Triangle",
        "titleSlug": "pascals-triangle",
        "difficulty": "Easy",
        "frontendQuestionId": 118
      },
      {
        "title": "Word Break",
        "titleSlug": "word-break",
        "difficulty": "Medium",
        "frontendQuestionId": 139
      },
      {
        "title": "Maximum Product Subarray",
        "titleSlug": "maximum-product-subarray",
        "difficulty": "Medium",
        "frontendQuestionId": 152
      },
      {
        "title": "House Robber",
        "titleSlug": "house-robber",
        "difficulty": "Medium",
        "frontendQuestionId": 198
      },
      {
        "title": "Perfect Squares",
        "titleSlug": "perfect-squares",
        "difficulty": "Medium",
        "frontendQuestionId": 279
      },
      {
        "title": "Longest Increasing Subsequence",
        "titleSlug": "longest-increasing-subsequence",
        "difficulty": "Medium",
        "frontendQuestionId": 300
      },
      {
        "title": "Coin Change",
        "titleSlug": "coin-change",
        "difficulty": "Medium",
        "frontendQuestionId": 322
      },
      {
        "title": "Partition Equal Subset Sum",
        "titleSlug": "partition-equal-subset-sum",
        "difficulty": "Medium",
        "frontendQuestionId": 416
      },
      {
        "title": "Longest Common Subsequence",
        "titleSlug": "longest-common-subsequence",
        "difficulty": "Medium",
        "frontendQuestionId": 1143
      },
      {
        "title": "Number of Islands",
        "titleSlug": "number-of-islands",
        "difficulty": "Medium",
        "frontendQuestionId": 200
      },
      {
        "title": "Course Schedule",
        "titleSlug": "course-schedule",
        "difficulty": "Medium",
        "frontendQuestionId": 207
      },
      {
        "title": "Rotting Oranges",
        "titleSlug": "rotting-oranges",
        "difficulty": "Medium",
        "frontendQuestionId": 994
      },
      {
        "title": "Jump Game II",
        "titleSlug": "jump-game-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 45
      },
      {
        "title": "Jump Game",
        "titleSlug": "jump-game",
        "difficulty": "Medium",
        "frontendQuestionId": 55
      },
      {
        "title": "Best Time to Buy and Sell Stock",
        "titleSlug": "best-time-to-buy-and-sell-stock",
        "difficulty": "Easy",
        "frontendQuestionId": 121
      },
      {
        "title": "Partition Labels",
        "titleSlug": "partition-labels",
        "difficulty": "Medium",
        "frontendQuestionId": 763
      },
      {
        "title": "Two Sum",
        "titleSlug": "two-sum",
        "difficulty": "Easy",
        "frontendQuestionId": 1
      },
      {
        "title": "Group Anagrams",
        "titleSlug": "group-anagrams",
        "difficulty": "Medium",
        "frontendQuestionId": 49
      },
      {
        "title": "Longest Consecutive Sequence",
        "titleSlug": "longest-consecutive-sequence",
        "difficulty": "Medium",
        "frontendQuestionId": 128
      },
      {
        "title": "Subarray Sum Equals K",
        "titleSlug": "subarray-sum-equals-k",
        "difficulty": "Medium",
        "frontendQuestionId": 560
      },
      {
        "title": "Kth Largest Element in an Array",
        "titleSlug": "kth-largest-element-in-an-array",
        "difficulty": "Medium",
        "frontendQuestionId": 215
      },
      {
        "title": "Find Median from Data Stream",
        "titleSlug": "find-median-from-data-stream",
        "difficulty": "Hard",
        "frontendQuestionId": 295
      },
      {
        "title": "Top K Frequent Elements",
        "titleSlug": "top-k-frequent-elements",
        "difficulty": "Medium",
        "frontendQuestionId": 347
      },
      {
        "title": "Add Two Numbers",
        "titleSlug": "add-two-numbers",
        "difficulty": "Medium",
        "frontendQuestionId": 2
      },
      {
        "title": "Remove Nth Node From End of List",
        "titleSlug": "remove-nth-node-from-end-of-list",
        "difficulty": "Medium",
        "frontendQuestionId": 19
      },
      {
        "title": "Merge Two Sorted Lists",
        "titleSlug": "merge-two-sorted-lists",
        "difficulty": "Easy",
        "frontendQuestionId": 21
      },
      {
        "title": "Merge k Sorted Lists",
        "titleSlug": "merge-k-sorted-lists",
        "difficulty": "Hard",
        "frontendQuestionId": 23
      },
      {
        "title": "Swap Nodes in Pairs",
        "titleSlug": "swap-nodes-in-pairs",
        "difficulty": "Medium",
        "frontendQuestionId": 24
      },
      {
        "title": "Reverse Nodes in k-Group",
        "titleSlug": "reverse-nodes-in-k-group",
        "difficulty": "Hard",
        "frontendQuestionId": 25
      },
      {
        "title": "Copy List with Random Pointer",
        "titleSlug": "copy-list-with-random-pointer",
        "difficulty": "Medium",
        "frontendQuestionId": 138
      },
      {
        "title": "Linked List Cycle",
        "titleSlug": "linked-list-cycle",
        "difficulty": "Easy",
        "frontendQuestionId": 141
      },
      {
        "title": "Linked List Cycle II",
        "titleSlug": "linked-list-cycle-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 142
      },
      {
        "title": "LRU Cache",
        "titleSlug": "lru-cache",
        "difficulty": "Medium",
        "frontendQuestionId": 146
      },
      {
        "title": "Sort List",
        "titleSlug": "sort-list",
        "difficulty": "Medium",
        "frontendQuestionId": 148
      },
      {
        "title": "Intersection of Two Linked Lists",
        "titleSlug": "intersection-of-two-linked-lists",
        "difficulty": "Easy",
        "frontendQuestionId": 160
      },
      {
        "title": "Reverse Linked List",
        "titleSlug": "reverse-linked-list",
        "difficulty": "Easy",
        "frontendQuestionId": 206
      },
      {
        "title": "Palindrome Linked List",
        "titleSlug": "palindrome-linked-list",
        "difficulty": "Easy",
        "frontendQuestionId": 234
      },
      {
        "title": "Rotate Image",
        "titleSlug": "rotate-image",
        "difficulty": "Medium",
        "frontendQuestionId": 48
      },
      {
        "title": "Spiral Matrix",
        "titleSlug": "spiral-matrix",
        "difficulty": "Medium",
        "frontendQuestionId": 54
      },
      {
        "title": "Set Matrix Zeroes",
        "titleSlug": "set-matrix-zeroes",
        "difficulty": "Medium",
        "frontendQuestionId": 73
      },
      {
        "title": "Search a 2D Matrix II",
        "titleSlug": "search-a-2d-matrix-ii",
        "difficulty": "Medium",
        "frontendQuestionId": 240
      },
      {
        "title": "Longest Substring Without Repeating Characters",
        "titleSlug": "longest-substring-without-repeating-characters",
        "difficulty": "Medium",
        "frontendQuestionId": 3
      },
      {
        "title": "Minimum Window Substring",
        "titleSlug": "minimum-window-substring",
        "difficulty": "Hard",
        "frontendQuestionId": 76
      },
      {
        "title": "Sliding Window Maximum",
        "titleSlug": "sliding-window-maximum",
        "difficulty": "Hard",
        "frontendQuestionId": 239
      },
      {
        "title": "Find All Anagrams in a String",
        "titleSlug": "find-all-anagrams-in-a-string",
        "difficulty": "Medium",
        "frontendQuestionId": 438
      },
      {
        "title": "Valid Parentheses",
        "titleSlug": "valid-parentheses",
        "difficulty": "Easy",
        "frontendQuestionId": 20
      },
      {
        "title": "Largest Rectangle in Histogram",
        "titleSlug": "largest-rectangle-in-histogram",
        "difficulty": "Hard",
        "frontendQuestionId": 84
      },
      {
        "title": "Min Stack",
        "titleSlug": "min-stack",
        "difficulty": "Medium",
        "frontendQuestionId": 155
      },
      {
        "title": "Decode String",
        "titleSlug": "decode-string",
        "difficulty": "Medium",
        "frontendQuestionId": 394
      },
      {
        "title": "Daily Temperatures",
        "titleSlug": "daily-temperatures",
        "difficulty": "Medium",
        "frontendQuestionId": 739
      },
      {
        "title": "Container With Most Water",
        "titleSlug": "container-with-most-water",
        "difficulty": "Medium",
        "frontendQuestionId": 11
      },
      {
        "title": "3Sum",
        "titleSlug": "3sum",
        "difficulty": "Medium",
        "frontendQuestionId": 15
      },
      {
        "title": "Trapping Rain Water",
        "titleSlug": "trapping-rain-water",
        "difficulty": "Hard",
        "frontendQuestionId": 42
      },
      {
        "title": "Move Zeroes",
        "titleSlug": "move-zeroes",
        "difficulty": "Easy",
        "frontendQuestionId": 283
      },
      {
        "title": "Implement Trie (Prefix Tree)",
        "titleSlug": "implement-trie-prefix-tree",
        "difficulty": "Medium",
        "frontendQuestionId": 208
      },
      {
        "title": "Next Permutation",
        "titleSlug": "next-permutation",
        "difficulty": "Medium",
        "frontendQuestionId": 31
      },
      {
        "title": "First Missing Positive",
        "titleSlug": "first-missing-positive",
        "difficulty": "Hard",
        "frontendQuestionId": 41
      },
      {
        "title": "Maximum Subarray",
        "titleSlug": "maximum-subarray",
        "difficulty": "Medium",
        "frontendQuestionId": 53
      },
      {
        "title": "Merge Intervals",
        "titleSlug": "merge-intervals",
        "difficulty": "Medium",
        "frontendQuestionId": 56
      },
      {
        "title": "Sort Colors",
        "titleSlug": "sort-colors",
        "difficulty": "Medium",
        "frontendQuestionId": 75
      },
      {
        "title": "Single Number",
        "titleSlug": "single-number",
        "difficulty": "Easy",
        "frontendQuestionId": 136
      },
      {
        "title": "Majority Element",
        "titleSlug": "majority-element",
        "difficulty": "Easy",
        "frontendQuestionId": 169
      },
      {
        "title": "Rotate Array",
        "titleSlug": "rotate-array",
        "difficulty": "Medium",
        "frontendQuestionId": 189
      },
      {
        "title": "Product of Array Except Self",
        "titleSlug": "product-of-array-except-self",
        "difficulty": "Medium",
        "frontendQuestionId": 238
      },
      {
        "title": "Find the Duplicate Number",
        "titleSlug": "find-the-duplicate-number",
        "difficulty": "Medium",
        "frontendQuestionId": 287
      }
    ]
  }
  