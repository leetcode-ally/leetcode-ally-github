{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2411",
      "title": "Smallest Subarrays With Maximum Bitwise OR",
      "titleSlug": "smallest-subarrays-with-maximum-bitwise-or",
      "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of length <code>n</code>, consisting of non-negative integers. For each index <code>i</code> from <code>0</code> to <code>n - 1</code>, you must determine the size of the <strong>minimum sized</strong> non-empty subarray of <code>nums</code> starting at <code>i</code> (<strong>inclusive</strong>) that has the <strong>maximum</strong> possible <strong>bitwise OR</strong>.</p>\n\n<ul>\n\t<li>In other words, let <code>B<sub>ij</sub></code> be the bitwise OR of the subarray <code>nums[i...j]</code>. You need to find the smallest subarray starting at <code>i</code>, such that bitwise OR of this subarray is equal to <code>max(B<sub>ik</sub>)</code> where <code>i &lt;= k &lt;= n - 1</code>.</li>\n</ul>\n\n<p>The bitwise OR of an array is the bitwise OR of all the numbers in it.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> of size </em><code>n</code><em> where </em><code>answer[i]</code><em> is the length of the <strong>minimum</strong> sized subarray starting at </em><code>i</code><em> with <strong>maximum</strong> bitwise OR.</em></p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,2,1,3]\n<strong>Output:</strong> [3,3,2,2,1]\n<strong>Explanation:</strong>\nThe maximum possible bitwise OR starting at any index is 3. \n- Starting at index 0, the shortest subarray that yields it is [1,0,2].\n- Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1].\n- Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1].\n- Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3].\n- Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3].\nTherefore, we return [3,3,2,2,1]. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2]\n<strong>Output:</strong> [2,1]\n<strong>Explanation:\n</strong>Starting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2.\nStarting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1.\nTherefore, we return [2,1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 535,
      "dislikes": 23,
      "similarQuestions": "[{\"title\": \"Merge k Sorted Lists\", \"titleSlug\": \"merge-k-sorted-lists\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Bitwise ORs of Subarrays\", \"titleSlug\": \"bitwise-ors-of-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Subarray With Maximum Bitwise AND\", \"titleSlug\": \"longest-subarray-with-maximum-bitwise-and\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Binary Search",
          "slug": "binary-search"
        },
        {
          "name": "Bit Manipulation",
          "slug": "bit-manipulation"
        },
        {
          "name": "Sliding Window",
          "slug": "sliding-window"
        }
      ],
      "stats": "{\"totalAccepted\": \"11.4K\", \"totalSubmission\": \"26.6K\", \"totalAcceptedRaw\": 11449, \"totalSubmissionRaw\": 26637, \"acRate\": \"43.0%\"}",
      "hints": [
        "Consider trying to solve the problem for each bit position separately.",
        "For each bit position, find the position of the next number that has a 1 in that position, if any.",
        "Take the maximum distance to such a number, including the current number.",
        "Iterate backwards to achieve a linear complexity."
      ]
    },
    "similar": [
      {
        "difficulty": "Hard",
        "titleSlug": "merge-k-sorted-lists",
        "title": "Merge k Sorted Lists",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "bitwise-ors-of-subarrays",
        "title": "Bitwise ORs of Subarrays",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "longest-subarray-with-maximum-bitwise-and",
        "title": "Longest Subarray With Maximum Bitwise AND",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Consider trying to solve the problem for each bit position separately.",
      "For each bit position, find the position of the next number that has a 1 in that position, if any.",
      "Take the maximum distance to such a number, including the current number.",
      "Iterate backwards to achieve a linear complexity."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Bit Manipulation",
        "slug": "bit-manipulation"
      },
      {
        "name": "Sliding Window",
        "slug": "sliding-window"
      }
    ]
  }
}