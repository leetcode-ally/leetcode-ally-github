{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2709",
      "title": "Greatest Common Divisor Traversal",
      "titleSlug": "greatest-common-divisor-traversal",
      "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and you are allowed to <strong>traverse</strong> between its indices. You can traverse between index <code>i</code> and index <code>j</code>, <code>i != j</code>, if and only if <code>gcd(nums[i], nums[j]) &gt; 1</code>, where <code>gcd</code> is the <strong>greatest common divisor</strong>.</p>\n\n<p>Your task is to determine if for <strong>every pair</strong> of indices <code>i</code> and <code>j</code> in nums, where <code>i &lt; j</code>, there exists a <strong>sequence of traversals</strong> that can take us from <code>i</code> to <code>j</code>.</p>\n\n<p>Return <code>true</code><em> if it is possible to traverse between all such pairs of indices,</em><em> or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -&gt; 2 -&gt; 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 &gt; 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 &gt; 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,9,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,12,8]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 308,
      "dislikes": 27,
      "similarQuestions": "[{\"title\": \"Graph Connectivity With Threshold\", \"titleSlug\": \"graph-connectivity-with-threshold\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Math",
          "slug": "math"
        },
        {
          "name": "Union Find",
          "slug": "union-find"
        },
        {
          "name": "Number Theory",
          "slug": "number-theory"
        }
      ],
      "stats": "{\"totalAccepted\": \"8.1K\", \"totalSubmission\": \"35.7K\", \"totalAcceptedRaw\": 8133, \"totalSubmissionRaw\": 35700, \"acRate\": \"22.8%\"}",
      "hints": [
        "Create a (prime) factor-numbers list for all the indices.",
        "Add an edge between the neighbors of the (prime) factor-numbers list. The order of the numbers doesn’t matter. We only need edges between 2 neighbors instead of edges for all pairs.",
        "The problem is now similar to checking if all the numbers (nodes of the graph) are in the same connected component.",
        "Any algorithm (i.e., BFS, DFS, or Union-Find Set) should work to find or check connected components"
      ]
    },
    "similar": [
      {
        "difficulty": "Hard",
        "titleSlug": "graph-connectivity-with-threshold",
        "title": "Graph Connectivity With Threshold",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Create a (prime) factor-numbers list for all the indices.",
      "Add an edge between the neighbors of the (prime) factor-numbers list. The order of the numbers doesn’t matter. We only need edges between 2 neighbors instead of edges for all pairs.",
      "The problem is now similar to checking if all the numbers (nodes of the graph) are in the same connected component.",
      "Any algorithm (i.e., BFS, DFS, or Union-Find Set) should work to find or check connected components"
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "Union Find",
        "slug": "union-find"
      },
      {
        "name": "Number Theory",
        "slug": "number-theory"
      }
    ]
  }
}