{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2907",
            "title": "Maximum Profitable Triplets With Increasing Prices I",
            "titleSlug": "maximum-profitable-triplets-with-increasing-prices-i",
            "content": null,
            "isPaidOnly": true,
            "difficulty": "Medium",
            "likes": 18,
            "dislikes": 1,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1K\", \"totalSubmission\": \"1.8K\", \"totalAcceptedRaw\": 1044, \"totalSubmissionRaw\": 1832, \"acRate\": \"57.0%\"}",
            "hints": [
                "Let's fix the middle chosen item.",
                "For a fixed item with an index <code>j</code>, iterate over items with an index <code>k > j</code> such that <code>prices[k] > prices[j]</code>.",
                "Find the maximum <code>profit[k]</code> with the above condition. Let's call this maximum value <code>max_right</code>.",
                "Do the same for items with an index <code>i < j</code> such that <code>prices[i] < prices[j]</code> and find the maximum <code>profit[i]</code> among them. Let's call this maximum value <code>max_left</code>.",
                "Now the profit when an item with the index <code>j</code> is the middle one would be <code>profit[j] + max_right + max_left</code>.",
                "Finally, do the above procedure for all <code>j</code>'s and find the maximum profit among them. That would be the final answer."
            ]
        },
        "similar": [],
        "hints": [
            "Let's fix the middle chosen item.",
            "For a fixed item with an index <code>j</code>, iterate over items with an index <code>k > j</code> such that <code>prices[k] > prices[j]</code>.",
            "Find the maximum <code>profit[k]</code> with the above condition. Let's call this maximum value <code>max_right</code>.",
            "Do the same for items with an index <code>i < j</code> such that <code>prices[i] < prices[j]</code> and find the maximum <code>profit[i]</code> among them. Let's call this maximum value <code>max_left</code>.",
            "Now the profit when an item with the index <code>j</code> is the middle one would be <code>profit[j] + max_right + max_left</code>.",
            "Finally, do the above procedure for all <code>j</code>'s and find the maximum profit among them. That would be the final answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ]
    }
}