{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3180",
            "title": "Maximum Total Reward Using Operations I",
            "titleSlug": "maximum-total-reward-using-operations-i",
            "content": "<p>You are given an integer array <code>rewardValues</code> of length <code>n</code>, representing the values of rewards.</p>\n\n<p>Initially, your total reward <code>x</code> is 0, and all indices are <strong>unmarked</strong>. You are allowed to perform the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an <strong>unmarked</strong> index <code>i</code> from the range <code>[0, n - 1]</code>.</li>\n\t<li>If <code>rewardValues[i]</code> is <strong>greater</strong> than your current total reward <code>x</code>, then add <code>rewardValues[i]</code> to <code>x</code> (i.e., <code>x = x + rewardValues[i]</code>), and <strong>mark</strong> the index <code>i</code>.</li>\n</ul>\n\n<p>Return an integer denoting the <strong>maximum </strong><em>total reward</em> you can collect by performing the operations optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,1,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,6,4,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rewardValues.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= rewardValues[i] &lt;= 2000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 145,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.3K\", \"totalSubmission\": \"77.7K\", \"totalAcceptedRaw\": 22315, \"totalSubmissionRaw\": 77653, \"acRate\": \"28.7%\"}",
            "hints": [
                "Sort the rewards array first.",
                "If we decide to apply some rewards, it's always optimal to apply them in order.",
                "Let <code>dp[i][j]</code> (true/false) be the state after the first <code>i</code> rewards, indicating whether we can get exactly <code>j</code> points.",
                "The transition is given by: <code>dp[i][j] = dp[i - 1][j \u2212 rewardValues[i]]</code> if <code>j \u2212 rewardValues[i] < rewardValues[i]</code>."
            ]
        },
        "similar": [],
        "hints": [
            "Sort the rewards array first.",
            "If we decide to apply some rewards, it's always optimal to apply them in order.",
            "Let <code>dp[i][j]</code> (true/false) be the state after the first <code>i</code> rewards, indicating whether we can get exactly <code>j</code> points.",
            "The transition is given by: <code>dp[i][j] = dp[i - 1][j \u2212 rewardValues[i]]</code> if <code>j \u2212 rewardValues[i] < rewardValues[i]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}