{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1617",
      "title": "Count Subtrees With Max Distance Between Cities",
      "titleSlug": "count-subtrees-with-max-distance-between-cities",
      "content": "<p>There are <code>n</code> cities numbered from <code>1</code> to <code>n</code>. You are given an array <code>edges</code> of size <code>n-1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents a bidirectional edge between cities <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. There exists a unique path between each pair of cities. In other words, the cities form a <strong>tree</strong>.</p>\r\n\r\n<p>A <strong>subtree</strong> is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.</p>\r\n\r\n<p>For each <code>d</code> from <code>1</code> to <code>n-1</code>, find the number of subtrees in which the <strong>maximum distance</strong> between any two cities in the subtree is equal to <code>d</code>.</p>\r\n\r\n<p>Return <em>an array of size</em> <code>n-1</code> <em>where the </em><code>d<sup>th</sup></code><em> </em><em>element <strong>(1-indexed)</strong> is the number of subtrees in which the <strong>maximum distance</strong> between any two cities is equal to </em><code>d</code>.</p>\r\n\r\n<p><strong>Notice</strong>&nbsp;that&nbsp;the <strong>distance</strong> between the two cities is the number of edges in the path between them.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/p1.png\" style=\"width: 161px; height: 181px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 4, edges = [[1,2],[2,3],[2,4]]\r\n<strong>Output:</strong> [3,4,0]\r\n<strong>Explanation:\r\n</strong>The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\r\nThe subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\r\nNo subtree has two nodes where the max distance between them is 3.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 2, edges = [[1,2]]\r\n<strong>Output:</strong> [1]\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 3, edges = [[1,2],[2,3]]\r\n<strong>Output:</strong> [2,1]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= n &lt;= 15</code></li>\r\n\t<li><code>edges.length == n-1</code></li>\r\n\t<li><code>edges[i].length == 2</code></li>\r\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\r\n\t<li>All pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are distinct.</li>\r\n</ul>",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 510,
      "dislikes": 38,
      "similarQuestions": "[{\"title\": \"Tree Diameter\", \"titleSlug\": \"tree-diameter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Bit Manipulation",
          "slug": "bit-manipulation"
        },
        {
          "name": "Tree",
          "slug": "tree"
        },
        {
          "name": "Enumeration",
          "slug": "enumeration"
        },
        {
          "name": "Bitmask",
          "slug": "bitmask"
        }
      ],
      "stats": "{\"totalAccepted\": \"9.3K\", \"totalSubmission\": \"14.3K\", \"totalAcceptedRaw\": 9338, \"totalSubmissionRaw\": 14295, \"acRate\": \"65.3%\"}",
      "hints": [
        "Iterate through every possible subtree by doing a bitmask on which vertices to include. How can you determine if a subtree is valid (all vertices are connected)?",
        "To determine connectivity, count the number of reachable vertices starting from any included vertex and only traveling on edges connecting 2 vertices in the subtree. The count should be the same as the number of 1s in the bitmask.",
        "The diameter is basically the maximum distance between any two nodes. Root the tree at a vertex. The answer is the max of the heights of the two largest subtrees or the longest diameter in any of the subtrees."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "tree-diameter",
        "title": "Tree Diameter",
        "isPaidOnly": true
      }
    ],
    "hints": [
      "Iterate through every possible subtree by doing a bitmask on which vertices to include. How can you determine if a subtree is valid (all vertices are connected)?",
      "To determine connectivity, count the number of reachable vertices starting from any included vertex and only traveling on edges connecting 2 vertices in the subtree. The count should be the same as the number of 1s in the bitmask.",
      "The diameter is basically the maximum distance between any two nodes. Root the tree at a vertex. The answer is the max of the heights of the two largest subtrees or the longest diameter in any of the subtrees."
    ],
    "relatedTopics": [
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Bit Manipulation",
        "slug": "bit-manipulation"
      },
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Enumeration",
        "slug": "enumeration"
      },
      {
        "name": "Bitmask",
        "slug": "bitmask"
      }
    ]
  }
}