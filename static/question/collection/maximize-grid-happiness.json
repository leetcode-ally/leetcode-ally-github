{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1659",
      "title": "Maximize Grid Happiness",
      "titleSlug": "maximize-grid-happiness",
      "content": "<p>You are given four integers, <code>m</code>, <code>n</code>, <code>introvertsCount</code>, and <code>extrovertsCount</code>. You have an <code>m x n</code> grid, and there are two types of people: introverts and extroverts. There are <code>introvertsCount</code> introverts and <code>extrovertsCount</code> extroverts.</p>\n\n<p>You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you <strong>do not</strong> have to have all the people living in the grid.</p>\n\n<p>The <strong>happiness</strong> of each person is calculated as follows:</p>\n\n<ul>\n\t<li>Introverts <strong>start</strong> with <code>120</code> happiness and <strong>lose</strong> <code>30</code> happiness for each neighbor (introvert or extrovert).</li>\n\t<li>Extroverts <strong>start</strong> with <code>40</code> happiness and <strong>gain</strong> <code>20</code> happiness for each neighbor (introvert or extrovert).</li>\n</ul>\n\n<p>Neighbors live in the directly adjacent cells north, east, south, and west of a person&#39;s cell.</p>\n\n<p>The <strong>grid happiness</strong> is the <strong>sum</strong> of each person&#39;s happiness. Return<em> the <strong>maximum possible grid happiness</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/grid_happiness.png\" style=\"width: 261px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\n<strong>Output:</strong> 240\n<strong>Explanation:</strong> Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person&#39;s happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\n<strong>Output:</strong> 260\n<strong>Explanation:</strong> Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\n<strong>Output:</strong> 240\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 5</code></li>\n\t<li><code>0 &lt;= introvertsCount, extrovertsCount &lt;= min(m * n, 6)</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 325,
      "dislikes": 53,
      "similarQuestions": "[]",
      "topicTags": [
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Bit Manipulation",
          "slug": "bit-manipulation"
        },
        {
          "name": "Memoization",
          "slug": "memoization"
        },
        {
          "name": "Bitmask",
          "slug": "bitmask"
        }
      ],
      "stats": "{\"totalAccepted\": \"5.2K\", \"totalSubmission\": \"13.1K\", \"totalAcceptedRaw\": 5161, \"totalSubmissionRaw\": 13061, \"acRate\": \"39.5%\"}",
      "hints": [
        "For each cell, it has 3 options, either it is empty, or contains an introvert, or an extrovert.",
        "You can do DP where you maintain the state of the previous row, the number of remaining introverts and extroverts, the current row and column, and try the 3 options for each cell.",
        "Assume that the previous columns in the current row already belong to the previous row."
      ]
    },
    "similar": [],
    "hints": [
      "For each cell, it has 3 options, either it is empty, or contains an introvert, or an extrovert.",
      "You can do DP where you maintain the state of the previous row, the number of remaining introverts and extroverts, the current row and column, and try the 3 options for each cell.",
      "Assume that the previous columns in the current row already belong to the previous row."
    ],
    "relatedTopics": [
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Bit Manipulation",
        "slug": "bit-manipulation"
      },
      {
        "name": "Memoization",
        "slug": "memoization"
      },
      {
        "name": "Bitmask",
        "slug": "bitmask"
      }
    ]
  }
}