{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1614",
      "title": "Maximum Nesting Depth of the Parentheses",
      "titleSlug": "maximum-nesting-depth-of-the-parentheses",
      "content": "<p>A string is a <strong>valid parentheses string</strong> (denoted <strong>VPS</strong>) if it meets one of the following:</p>\n\n<ul>\n\t<li>It is an empty string <code>&quot;&quot;</code>, or a single character not equal to <code>&quot;(&quot;</code> or <code>&quot;)&quot;</code>,</li>\n\t<li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are <strong>VPS</strong>&#39;s, or</li>\n\t<li>It can be written as <code>(A)</code>, where <code>A</code> is a <strong>VPS</strong>.</li>\n</ul>\n\n<p>We can similarly define the <strong>nesting depth</strong> <code>depth(S)</code> of any VPS <code>S</code> as follows:</p>\n\n<ul>\n\t<li><code>depth(&quot;&quot;) = 0</code></li>\n\t<li><code>depth(C) = 0</code>, where <code>C</code> is a string with a single character not equal to <code>&quot;(&quot;</code> or <code>&quot;)&quot;</code>.</li>\n\t<li><code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are <strong>VPS</strong>&#39;s.</li>\n\t<li><code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>, where <code>A</code> is a <strong>VPS</strong>.</li>\n</ul>\n\n<p>For example, <code>&quot;&quot;</code>, <code>&quot;()()&quot;</code>, and <code>&quot;()(()())&quot;</code> are <strong>VPS</strong>&#39;s (with nesting depths 0, 1, and 2), and <code>&quot;)(&quot;</code> and <code>&quot;(()&quot;</code> are not <strong>VPS</strong>&#39;s.</p>\n\n<p>Given a <strong>VPS</strong> represented as string <code>s</code>, return <em>the <strong>nesting depth</strong> of </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(1+(2*3)+((<u>8</u>)/4))+1&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Digit 8 is inside of 3 nested parentheses in the string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(1)+((2))+(((<u>3</u>)))&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of digits <code>0-9</code> and characters <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.</li>\n\t<li>It is guaranteed that parentheses expression <code>s</code> is a <strong>VPS</strong>.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": 1787,
      "dislikes": 283,
      "similarQuestions": "[{\"title\": \"Maximum Nesting Depth of Two Valid Parentheses Strings\", \"titleSlug\": \"maximum-nesting-depth-of-two-valid-parentheses-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "String",
          "slug": "string"
        },
        {
          "name": "Stack",
          "slug": "stack"
        }
      ],
      "stats": "{\"totalAccepted\": \"167.6K\", \"totalSubmission\": \"205.4K\", \"totalAcceptedRaw\": 167615, \"totalSubmissionRaw\": 205407, \"acRate\": \"81.6%\"}",
      "hints": [
        "The depth of any character in the VPS is the ( number of left brackets before it ) - ( number of right brackets before it )"
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
        "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "The depth of any character in the VPS is the ( number of left brackets before it ) - ( number of right brackets before it )"
    ],
    "relatedTopics": [
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Stack",
        "slug": "stack"
      }
    ]
  }
}