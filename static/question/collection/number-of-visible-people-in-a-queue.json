{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1944",
      "title": "Number of Visible People in a Queue",
      "titleSlug": "number-of-visible-people-in-a-queue",
      "content": "<p>There are <code>n</code> people standing in a queue, and they numbered from <code>0</code> to <code>n - 1</code> in <strong>left to right</strong> order. You are given an array <code>heights</code> of <strong>distinct</strong> integers where <code>heights[i]</code> represents the height of the <code>i<sup>th</sup></code> person.</p>\n\n<p>A person can <strong>see</strong> another person to their right in the queue if everybody in between is <strong>shorter</strong> than both of them. More formally, the <code>i<sup>th</sup></code> person can see the <code>j<sup>th</sup></code> person if <code>i &lt; j</code> and <code>min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], ..., heights[j-1])</code>.</p>\n\n<p>Return <em>an array </em><code>answer</code><em> of length </em><code>n</code><em> where </em><code>answer[i]</code><em> is the <strong>number of people</strong> the </em><code>i<sup>th</sup></code><em> person can <strong>see</strong> to their right in the queue</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/29/queue-plane.jpg\" style=\"width: 600px; height: 247px;\" /></p>\n\n<pre>\n<strong>Input:</strong> heights = [10,6,8,5,11,9]\n<strong>Output:</strong> [3,1,2,1,1,0]\n<strong>Explanation:</strong>\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> heights = [5,1,2,3,10]\n<strong>Output:</strong> [4,1,1,1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == heights.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>All the values of <code>heights</code> are <strong>unique</strong>.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 1580,
      "dislikes": 45,
      "similarQuestions": "[{\"title\": \"Buildings With an Ocean View\", \"titleSlug\": \"buildings-with-an-ocean-view\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Subarray Ranges\", \"titleSlug\": \"sum-of-subarray-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Total Strength of Wizards\", \"titleSlug\": \"sum-of-total-strength-of-wizards\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of People That Can Be Seen in a Grid\", \"titleSlug\": \"number-of-people-that-can-be-seen-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Building Where Alice and Bob Can Meet\", \"titleSlug\": \"find-building-where-alice-and-bob-can-meet\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Stack",
          "slug": "stack"
        },
        {
          "name": "Monotonic Stack",
          "slug": "monotonic-stack"
        }
      ],
      "stats": "{\"totalAccepted\": \"42.7K\", \"totalSubmission\": \"62.2K\", \"totalAcceptedRaw\": 42678, \"totalSubmissionRaw\": 62203, \"acRate\": \"68.6%\"}",
      "hints": [
        "How to solve this problem in quadratic complexity ?",
        "For every subarray start at index i, keep finding new maximum values until a value larger than arr[i] is found.",
        "Since the limits are high, you need a linear solution.",
        "Use a stack to keep the values of the array sorted as you iterate the array from the end to the start.",
        "Keep popping from the stack the elements in sorted order until a value larger than arr[i] is found, these are the ones that person i can see."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "buildings-with-an-ocean-view",
        "title": "Buildings With an Ocean View",
        "isPaidOnly": true
      },
      {
        "difficulty": "Medium",
        "titleSlug": "sum-of-subarray-ranges",
        "title": "Sum of Subarray Ranges",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "sum-of-total-strength-of-wizards",
        "title": "Sum of Total Strength of Wizards",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "number-of-people-that-can-be-seen-in-a-grid",
        "title": "Number of People That Can Be Seen in a Grid",
        "isPaidOnly": true
      },
      {
        "difficulty": "Hard",
        "titleSlug": "find-building-where-alice-and-bob-can-meet",
        "title": "Find Building Where Alice and Bob Can Meet",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "How to solve this problem in quadratic complexity ?",
      "For every subarray start at index i, keep finding new maximum values until a value larger than arr[i] is found.",
      "Since the limits are high, you need a linear solution.",
      "Use a stack to keep the values of the array sorted as you iterate the array from the end to the start.",
      "Keep popping from the stack the elements in sorted order until a value larger than arr[i] is found, these are the ones that person i can see."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Stack",
        "slug": "stack"
      },
      {
        "name": "Monotonic Stack",
        "slug": "monotonic-stack"
      }
    ]
  }
}