{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "336",
      "title": "Palindrome Pairs",
      "titleSlug": "palindrome-pairs",
      "content": "<p>You are given a <strong>0-indexed</strong> array of <strong>unique</strong> strings <code>words</code>.</p>\n\n<p>A <strong>palindrome pair</strong> is a pair of integers <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j &lt; words.length</code>,</li>\n\t<li><code>i != j</code>, and</li>\n\t<li><code>words[i] + words[j]</code> (the concatenation of the two strings) is a <span data-keyword=\"palindrome-string\">palindrome</span>.</li>\n</ul>\n\n<p>Return <em>an array of all the <strong>palindrome pairs</strong> of </em><code>words</code>.</p>\n\n<p>You must write an algorithm with&nbsp;<code>O(sum of words[i].length)</code>&nbsp;runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]\n<strong>Output:</strong> [[0,1],[1,0],[3,2],[2,4]]\n<strong>Explanation:</strong> The palindromes are [&quot;abcddcba&quot;,&quot;dcbaabcd&quot;,&quot;slls&quot;,&quot;llssssll&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n<strong>Explanation:</strong> The palindromes are [&quot;battab&quot;,&quot;tabbat&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n<strong>Explanation:</strong> The palindromes are [&quot;a&quot;,&quot;a&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= words[i].length &lt;= 300</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 4399,
      "dislikes": 452,
      "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Palindrome\", \"titleSlug\": \"shortest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Palindrome by Concatenating Two Letter Words\", \"titleSlug\": \"longest-palindrome-by-concatenating-two-letter-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Maximum Number of String Pairs\", \"titleSlug\": \"find-maximum-number-of-string-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Hash Table",
          "slug": "hash-table"
        },
        {
          "name": "String",
          "slug": "string"
        },
        {
          "name": "Trie",
          "slug": "trie"
        }
      ],
      "stats": "{\"totalAccepted\": \"199.8K\", \"totalSubmission\": \"569.4K\", \"totalAcceptedRaw\": 199780, \"totalSubmissionRaw\": 569388, \"acRate\": \"35.1%\"}",
      "hints": [
        "Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.",
        "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?",
        "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "longest-palindromic-substring",
        "title": "Longest Palindromic Substring",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "shortest-palindrome",
        "title": "Shortest Palindrome",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "longest-palindrome-by-concatenating-two-letter-words",
        "title": "Longest Palindrome by Concatenating Two Letter Words",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "find-maximum-number-of-string-pairs",
        "title": "Find Maximum Number of String Pairs",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.",
      "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?",
      "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Trie",
        "slug": "trie"
      }
    ]
  }
}