{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2233",
      "title": "Maximum Product After K Increments",
      "titleSlug": "maximum-product-after-k-increments",
      "content": "<p>You are given an array of non-negative integers <code>nums</code> and an integer <code>k</code>. In one operation, you may choose <strong>any</strong> element from <code>nums</code> and <strong>increment</strong> it by <code>1</code>.</p>\n\n<p>Return<em> the <strong>maximum</strong> <strong>product</strong> of </em><code>nums</code><em> after <strong>at most</strong> </em><code>k</code><em> operations. </em>Since the answer may be very large, return it <b>modulo</b> <code>10<sup>9</sup> + 7</code>. Note that you should maximize the product before taking the modulo.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,4], k = 5\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Increment the first number 5 times.\nNow nums = [5, 4], with a product of 5 * 4 = 20.\nIt can be shown that 20 is maximum product possible, so we return 20.\nNote that there may be other ways to increment nums to have the maximum product.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,3,3,2], k = 2\n<strong>Output:</strong> 216\n<strong>Explanation:</strong> Increment the second number 1 time and increment the fourth number 1 time.\nNow nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216.\nIt can be shown that 216 is maximum product possible, so we return 216.\nNote that there may be other ways to increment nums to have the maximum product.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 659,
      "dislikes": 43,
      "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Increment to Make Array Unique\", \"titleSlug\": \"minimum-increment-to-make-array-unique\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make the Array Increasing\", \"titleSlug\": \"minimum-operations-to-make-the-array-increasing\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Greedy",
          "slug": "greedy"
        },
        {
          "name": "Heap (Priority Queue)",
          "slug": "heap-priority-queue"
        }
      ],
      "stats": "{\"totalAccepted\": \"27.3K\", \"totalSubmission\": \"66.2K\", \"totalAcceptedRaw\": 27341, \"totalSubmissionRaw\": 66205, \"acRate\": \"41.3%\"}",
      "hints": [
        "If you can increment only once, which number should you increment?",
        "We should always prioritize the smallest number. What kind of data structure could we use?",
        "Use a min heap to hold all the numbers. Each time we do an operation, replace the top of the heap x by x + 1."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "minimum-size-subarray-sum",
        "title": "Minimum Size Subarray Sum",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "minimum-increment-to-make-array-unique",
        "title": "Minimum Increment to Make Array Unique",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "minimum-operations-to-make-the-array-increasing",
        "title": "Minimum Operations to Make the Array Increasing",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "If you can increment only once, which number should you increment?",
      "We should always prioritize the smallest number. What kind of data structure could we use?",
      "Use a min heap to hold all the numbers. Each time we do an operation, replace the top of the heap x by x + 1."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Heap (Priority Queue)",
        "slug": "heap-priority-queue"
      }
    ]
  }
}