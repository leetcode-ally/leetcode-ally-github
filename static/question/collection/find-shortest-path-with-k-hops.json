{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2714",
      "title": "Find Shortest Path with K Hops",
      "titleSlug": "find-shortest-path-with-k-hops",
      "content": null,
      "isPaidOnly": true,
      "difficulty": "Hard",
      "likes": 23,
      "dislikes": 0,
      "similarQuestions": "[]",
      "topicTags": [
        {
          "name": "Graph",
          "slug": "graph"
        },
        {
          "name": "Heap (Priority Queue)",
          "slug": "heap-priority-queue"
        },
        {
          "name": "Shortest Path",
          "slug": "shortest-path"
        }
      ],
      "stats": "{\"totalAccepted\": \"625\", \"totalSubmission\": \"1K\", \"totalAcceptedRaw\": 625, \"totalSubmissionRaw\": 1045, \"acRate\": \"59.8%\"}",
      "hints": [
        "Let's construct a new graph and run Dijkstra on it to get the answer to the problem.",
        "We define the new graph as follows: Each node of this graph is a pair (v, c) where v is a node from the given graph and c is any number between 0 and k (inclusive).",
        "Try to make edges of the defined graph in such a way that if we run Dijkstra on the node (s, 0), then the shortest path to node (d, k) would be the final answer.",
        "Edge type one: If the edge (v, u, w) belongs to the initial graph, we put an edge with the weight of w between nodes (v, c) and (u, c) for any c between 0 and k (inclusive) in the new graph.",
        "Edge type two: If the edge (v, u, w) belongs to the initial graph, we put an edge with the weight of 0 between nodes (v, c) and (u, c + 1), also between (u, c) and (v, c + 1) for any c between 0 and k - 1 (inclusive) in the new graph.",
        "For the matter of time complexity, note that you **don’t need** to literally construct the described graph."
      ]
    },
    "similar": [],
    "hints": [
      "Let's construct a new graph and run Dijkstra on it to get the answer to the problem.",
      "We define the new graph as follows: Each node of this graph is a pair (v, c) where v is a node from the given graph and c is any number between 0 and k (inclusive).",
      "Try to make edges of the defined graph in such a way that if we run Dijkstra on the node (s, 0), then the shortest path to node (d, k) would be the final answer.",
      "Edge type one: If the edge (v, u, w) belongs to the initial graph, we put an edge with the weight of w between nodes (v, c) and (u, c) for any c between 0 and k (inclusive) in the new graph.",
      "Edge type two: If the edge (v, u, w) belongs to the initial graph, we put an edge with the weight of 0 between nodes (v, c) and (u, c + 1), also between (u, c) and (v, c + 1) for any c between 0 and k - 1 (inclusive) in the new graph.",
      "For the matter of time complexity, note that you **don’t need** to literally construct the described graph."
    ],
    "relatedTopics": [
      {
        "name": "Graph",
        "slug": "graph"
      },
      {
        "name": "Heap (Priority Queue)",
        "slug": "heap-priority-queue"
      },
      {
        "name": "Shortest Path",
        "slug": "shortest-path"
      }
    ]
  }
}