{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1286",
      "title": "Iterator for Combination",
      "titleSlug": "iterator-for-combination",
      "content": "<p>Design the <code>CombinationIterator</code> class:</p>\n\n<ul>\n\t<li><code>CombinationIterator(string characters, int combinationLength)</code> Initializes the object with a string <code>characters</code> of <strong>sorted distinct</strong> lowercase English letters and a number <code>combinationLength</code> as arguments.</li>\n\t<li><code>next()</code> Returns the next combination of length <code>combinationLength</code> in <strong>lexicographical order</strong>.</li>\n\t<li><code>hasNext()</code> Returns <code>true</code> if and only if there exists a next combination.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;CombinationIterator&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[&quot;abc&quot;, 2], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, &quot;ab&quot;, true, &quot;ac&quot;, true, &quot;bc&quot;, false]\n\n<strong>Explanation</strong>\nCombinationIterator itr = new CombinationIterator(&quot;abc&quot;, 2);\nitr.next();    // return &quot;ab&quot;\nitr.hasNext(); // return True\nitr.next();    // return &quot;ac&quot;\nitr.hasNext(); // return True\nitr.next();    // return &quot;bc&quot;\nitr.hasNext(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= combinationLength &lt;= characters.length &lt;= 15</code></li>\n\t<li>All the characters of <code>characters</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>next</code> and <code>hasNext</code>.</li>\n\t<li>It is guaranteed that all calls of the function <code>next</code> are valid.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 1348,
      "dislikes": 103,
      "similarQuestions": "[]",
      "topicTags": [
        {
          "name": "String",
          "slug": "string"
        },
        {
          "name": "Backtracking",
          "slug": "backtracking"
        },
        {
          "name": "Design",
          "slug": "design"
        },
        {
          "name": "Iterator",
          "slug": "iterator"
        }
      ],
      "stats": "{\"totalAccepted\": \"70.7K\", \"totalSubmission\": \"96.6K\", \"totalAcceptedRaw\": 70693, \"totalSubmissionRaw\": 96595, \"acRate\": \"73.2%\"}",
      "hints": [
        "Generate all combinations as a preprocessing.",
        "Use bit masking to generate all the combinations."
      ]
    },
    "similar": [],
    "hints": [
      "Generate all combinations as a preprocessing.",
      "Use bit masking to generate all the combinations."
    ],
    "relatedTopics": [
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Backtracking",
        "slug": "backtracking"
      },
      {
        "name": "Design",
        "slug": "design"
      },
      {
        "name": "Iterator",
        "slug": "iterator"
      }
    ]
  }
}