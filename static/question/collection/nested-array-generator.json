{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2649",
      "title": "Nested Array Generator",
      "titleSlug": "nested-array-generator",
      "content": "<p>Given a&nbsp;<strong>multi-dimensional array</strong> of integers, return&nbsp;a generator object which&nbsp;yields integers in the same order as&nbsp;<strong>inorder traversal</strong>.</p>\n\n<p>A&nbsp;<strong>multi-dimensional array</strong>&nbsp;is a recursive data structure that contains both integers and other&nbsp;<strong>multi-dimensional arrays</strong>.</p>\n\n<p><strong>inorder traversal</strong>&nbsp;iterates over&nbsp;each array from left to right, yielding any integers it encounters or applying&nbsp;<strong>inorder traversal</strong>&nbsp;to any arrays it encounters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [[[6]],[1,3],[]]\n<strong>Output:</strong> [6,1,3]\n<strong>Explanation:</strong>\nconst generator = inorderTraversal(arr);\ngenerator.next().value; // 6\ngenerator.next().value; // 1\ngenerator.next().value; // 3\ngenerator.next().done; // true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no integers so the generator doesn&#39;t yield anything.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= arr.flat().length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= arr.flat()[i]&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>maxNestingDepth &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Can you solve this without creating a new flattened version of the array?</strong>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 153,
      "dislikes": 10,
      "similarQuestions": "[{\"title\": \"Flatten Deeply Nested Array\", \"titleSlug\": \"flatten-deeply-nested-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Generate Fibonacci Sequence\", \"titleSlug\": \"generate-fibonacci-sequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Design Cancellable Function\", \"titleSlug\": \"design-cancellable-function\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [],
      "stats": "{\"totalAccepted\": \"10.1K\", \"totalSubmission\": \"12.6K\", \"totalAcceptedRaw\": 10053, \"totalSubmissionRaw\": 12621, \"acRate\": \"79.7%\"}",
      "hints": [
        "Generator functions can pass control to another generator function with \"yield*\" syntax.",
        "Generator functions can recursively yield control to themselves.",
        "You don't need to worry about recursion depth for this problem."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "flatten-deeply-nested-array",
        "title": "Flatten Deeply Nested Array",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "generate-fibonacci-sequence",
        "title": "Generate Fibonacci Sequence",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "design-cancellable-function",
        "title": "Design Cancellable Function",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Generator functions can pass control to another generator function with \"yield*\" syntax.",
      "Generator functions can recursively yield control to themselves.",
      "You don't need to worry about recursion depth for this problem."
    ],
    "relatedTopics": []
  }
}