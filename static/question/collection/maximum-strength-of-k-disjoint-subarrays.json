{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3077",
            "title": "Maximum Strength of K Disjoint Subarrays",
            "titleSlug": "maximum-strength-of-k-disjoint-subarrays",
            "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> <strong>odd</strong> integer <code>k</code>.</p>\n\n<p>The strength of <code>x</code> subarrays is defined as <code>strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1</code> where <code>sum[i]</code> is the sum of the elements in the <code>i<sup>th</sup></code> subarray. Formally, strength is sum of <code>(-1)<sup>i+1</sup> * sum[i] * (x - i + 1)</code> over all <code>i</code>&#39;s such that <code>1 &lt;= i &lt;= x</code>.</p>\n\n<p>You need to select <code>k</code> <strong>disjoint <span data-keyword=\"subarray-nonempty\">subarrays</span></strong> from <code>nums</code>, such that their <strong>strength</strong> is <strong>maximum</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>strength</strong> that can be obtained</em>.</p>\n\n<p><strong>Note</strong> that the selected subarrays <strong>don&#39;t</strong> need to cover the entire array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,-1,2], k = 3\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 = 22.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [12,-2,-2,-2,-2], k = 5\n<strong>Output:</strong> 64\n<strong>Explanation:</strong> The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n\t<li><code>1 &lt;= n * k &lt;= 10<sup>6</sup></code></li>\n\t<li><code>k</code> is odd.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 121,
            "dislikes": 74,
            "similarQuestions": "[{\"title\": \"Partition Array into Disjoint Intervals\", \"titleSlug\": \"partition-array-into-disjoint-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Strength of a Group\", \"titleSlug\": \"maximum-strength-of-a-group\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.8K\", \"totalSubmission\": \"21K\", \"totalAcceptedRaw\": 5822, \"totalSubmissionRaw\": 20996, \"acRate\": \"27.7%\"}",
            "hints": [
                "Let <code>dp[i][j][x == 0/1]</code> be the maximum strength to select <code>j</code> disjoint subarrays from the original array\u2019s suffix (<code>nums[i..(n - 1)]</code>), x denotes whether we select the element or not.",
                "Initially <code>dp[n][0][0] == 0</code>.",
                "We have \r\n<code>dp[i][j][1] = nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])</code> where <code>get(j) = j</code> if <code>j</code> is odd, otherwise <code>-j</code>.",
                "We can select <code>nums[i]</code> as a separate subarray or select at least <code>nums[i]</code> and <code>nums[i + 1]</code> as the first subarray.\r\n<code>dp[i][j][0] = max(dp[i + 1][j][0], dp[i][j][1])</code>.",
                "The answer is <code>dp[0][k][0]</code>."
            ]
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-array-into-disjoint-intervals",
                "title": "Partition Array into Disjoint Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-strength-of-a-group",
                "title": "Maximum Strength of a Group",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i][j][x == 0/1]</code> be the maximum strength to select <code>j</code> disjoint subarrays from the original array\u2019s suffix (<code>nums[i..(n - 1)]</code>), x denotes whether we select the element or not.",
            "Initially <code>dp[n][0][0] == 0</code>.",
            "We have \r\n<code>dp[i][j][1] = nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])</code> where <code>get(j) = j</code> if <code>j</code> is odd, otherwise <code>-j</code>.",
            "We can select <code>nums[i]</code> as a separate subarray or select at least <code>nums[i]</code> and <code>nums[i + 1]</code> as the first subarray.\r\n<code>dp[i][j][0] = max(dp[i + 1][j][0], dp[i][j][1])</code>.",
            "The answer is <code>dp[0][k][0]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ]
    }
}