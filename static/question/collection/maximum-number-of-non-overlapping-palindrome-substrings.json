{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2472",
      "title": "Maximum Number of Non-overlapping Palindrome Substrings",
      "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
      "content": "<p>You are given a string <code>s</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>Select a set of <strong>non-overlapping</strong> substrings from the string <code>s</code> that satisfy the following conditions:</p>\n\n<ul>\n\t<li>The <strong>length</strong> of each substring is <strong>at least</strong> <code>k</code>.</li>\n\t<li>Each substring is a <strong>palindrome</strong>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of substrings in an optimal selection</em>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abaccdbbd&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can select the substrings underlined in s = &quot;<u><strong>aba</strong></u>cc<u><strong>dbbd</strong></u>&quot;. Both &quot;aba&quot; and &quot;dbbd&quot; are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adbcda&quot;, k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no palindrome substring of length at least 2 in the string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 430,
      "dislikes": 9,
      "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning\", \"titleSlug\": \"palindrome-partitioning\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning II\", \"titleSlug\": \"palindrome-partitioning-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning III\", \"titleSlug\": \"palindrome-partitioning-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-Overlapping Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning IV\", \"titleSlug\": \"palindrome-partitioning-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "String",
          "slug": "string"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        }
      ],
      "stats": "{\"totalAccepted\": \"13.2K\", \"totalSubmission\": \"33.7K\", \"totalAcceptedRaw\": 13173, \"totalSubmissionRaw\": 33707, \"acRate\": \"39.1%\"}",
      "hints": [
        "Try to use dynamic programming to solve the problem.",
        "let dp[i] be the answer for the prefix s[0…i].",
        "The final answer to the problem will be dp[n-1]. How do you compute this dp?"
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "longest-palindromic-substring",
        "title": "Longest Palindromic Substring",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "palindrome-partitioning",
        "title": "Palindrome Partitioning",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "palindrome-partitioning-ii",
        "title": "Palindrome Partitioning II",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "palindrome-partitioning-iii",
        "title": "Palindrome Partitioning III",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "maximum-number-of-non-overlapping-substrings",
        "title": "Maximum Number of Non-Overlapping Substrings",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "palindrome-partitioning-iv",
        "title": "Palindrome Partitioning IV",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Try to use dynamic programming to solve the problem.",
      "let dp[i] be the answer for the prefix s[0…i].",
      "The final answer to the problem will be dp[n-1]. How do you compute this dp?"
    ],
    "relatedTopics": [
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      }
    ]
  }
}