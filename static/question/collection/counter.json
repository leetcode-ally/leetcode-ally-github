{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2620",
      "title": "Counter",
      "titleSlug": "counter",
      "content": "<p>Given an integer&nbsp;<code>n</code>,&nbsp;return a <code>counter</code> function. This <code>counter</code> function initially returns&nbsp;<code>n</code>&nbsp;and then returns 1 more than the previous value every subsequent time it is called (<code>n</code>, <code>n + 1</code>, <code>n + 2</code>, etc).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nn = 10 \n[&quot;call&quot;,&quot;call&quot;,&quot;call&quot;]\n<strong>Output:</strong> [10,11,12]\n<strong>Explanation: \n</strong>counter() = 10 // The first time counter() is called, it returns n.\ncounter() = 11 // Returns 1 more than the previous time.\ncounter() = 12 // Returns 1 more than the previous time.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nn = -2\n[&quot;call&quot;,&quot;call&quot;,&quot;call&quot;,&quot;call&quot;,&quot;call&quot;]\n<strong>Output:</strong> [-2,-1,0,1,2]\n<strong>Explanation:</strong> counter() initially returns -2. Then increases after each sebsequent call.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-1000<sup>&nbsp;</sup>&lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= calls.length &lt;= 1000</code></li>\n\t<li><code>calls[i] === &quot;call&quot;</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": 1031,
      "dislikes": 74,
      "similarQuestions": "[{\"title\": \"Memoize\", \"titleSlug\": \"memoize\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Function Composition\", \"titleSlug\": \"function-composition\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Counter II\", \"titleSlug\": \"counter-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
      "topicTags": [],
      "stats": "{\"totalAccepted\": \"220.3K\", \"totalSubmission\": \"276.6K\", \"totalAcceptedRaw\": 220260, \"totalSubmissionRaw\": 276634, \"acRate\": \"79.6%\"}",
      "hints": [
        "In JavaScript, a function can return a closure. A closure is defined as a function and the variables declared around it (it's lexical environment).",
        "A count variable can be initialized in the outer function and mutated in the inner function."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "memoize",
        "title": "Memoize",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "function-composition",
        "title": "Function Composition",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "counter-ii",
        "title": "Counter II",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "In JavaScript, a function can return a closure. A closure is defined as a function and the variables declared around it (it's lexical environment).",
      "A count variable can be initialized in the outer function and mutated in the inner function."
    ],
    "relatedTopics": []
  }
}