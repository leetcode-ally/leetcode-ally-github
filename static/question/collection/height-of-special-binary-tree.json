{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2773",
            "title": "Height of Special Binary Tree",
            "titleSlug": "height-of-special-binary-tree",
            "content": null,
            "isPaidOnly": true,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": 33,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"717\", \"totalSubmission\": \"967\", \"totalAcceptedRaw\": 717, \"totalSubmissionRaw\": 967, \"acRate\": \"74.1%\"}",
            "hints": [
                "To solve the problem, we must first distinguish leaves from internal nodes.",
                "For some node v, if v.left == null or v.right == null, then v is not a leaf.",
                "If the previous condition does not hold, and v.left.right == v, then v is a leaf node.",
                "Now that we can check if some node is a leaf, we can make the function \u201cheightOfTree\u201d a recursive function that returns the tree's height in which its input is the root of that subtree."
            ]
        },
        "similar": [],
        "hints": [
            "To solve the problem, we must first distinguish leaves from internal nodes.",
            "For some node v, if v.left == null or v.right == null, then v is not a leaf.",
            "If the previous condition does not hold, and v.left.right == v, then v is a leaf node.",
            "Now that we can check if some node is a leaf, we can make the function \u201cheightOfTree\u201d a recursive function that returns the tree's height in which its input is the root of that subtree."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}