{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1139",
      "title": "Largest 1-Bordered Square",
      "titleSlug": "largest-1-bordered-square",
      "content": "<p>Given a 2D <code>grid</code> of <code>0</code>s and <code>1</code>s, return the number of elements in&nbsp;the largest <strong>square</strong>&nbsp;subgrid that has all <code>1</code>s on its <strong>border</strong>, or <code>0</code> if such a subgrid&nbsp;doesn&#39;t exist in the <code>grid</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]]\r\n<strong>Output:</strong> 9\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> grid = [[1,1,0,0]]\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= grid.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= grid[0].length &lt;= 100</code></li>\r\n\t<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code></li>\r\n</ul>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 689,
      "dislikes": 107,
      "similarQuestions": "[]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Matrix",
          "slug": "matrix"
        }
      ],
      "stats": "{\"totalAccepted\": \"23.9K\", \"totalSubmission\": \"47.6K\", \"totalAcceptedRaw\": 23873, \"totalSubmissionRaw\": 47568, \"acRate\": \"50.2%\"}",
      "hints": [
        "For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming.",
        "Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1)."
      ]
    },
    "similar": [],
    "hints": [
      "For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming.",
      "Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1)."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      }
    ]
  }
}