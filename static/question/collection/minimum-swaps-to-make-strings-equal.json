{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1247",
      "title": "Minimum Swaps to Make Strings Equal",
      "titleSlug": "minimum-swaps-to-make-strings-equal",
      "content": "<p>You are given two strings <code>s1</code> and <code>s2</code> of equal length consisting of letters <code>&quot;x&quot;</code> and <code>&quot;y&quot;</code> <strong>only</strong>. Your task is to make these two strings equal to each other. You can swap any two characters that belong to <strong>different</strong> strings, which means: swap <code>s1[i]</code> and <code>s2[j]</code>.</p>\n\n<p>Return the minimum number of swaps required to make <code>s1</code> and <code>s2</code> equal, or return <code>-1</code> if it is impossible to do so.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;xx&quot;, s2 = &quot;yy&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Swap s1[0] and s2[1], s1 = &quot;yx&quot;, s2 = &quot;yx&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;xy&quot;, s2 = &quot;yx&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Swap s1[0] and s2[0], s1 = &quot;yy&quot;, s2 = &quot;xx&quot;.\nSwap s1[0] and s2[1], s1 = &quot;xy&quot;, s2 = &quot;xy&quot;.\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to &quot;yx&quot;, cause we can only swap chars in different strings.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;xx&quot;, s2 = &quot;xy&quot;\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>s1, s2</code> only contain <code>&#39;x&#39;</code> or <code>&#39;y&#39;</code>.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 1303,
      "dislikes": 234,
      "similarQuestions": "[{\"title\": \"Determine if Two Strings Are Close\", \"titleSlug\": \"determine-if-two-strings-are-close\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Make Number of Distinct Characters Equal\", \"titleSlug\": \"make-number-of-distinct-characters-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Math",
          "slug": "math"
        },
        {
          "name": "String",
          "slug": "string"
        },
        {
          "name": "Greedy",
          "slug": "greedy"
        }
      ],
      "stats": "{\"totalAccepted\": \"36.8K\", \"totalSubmission\": \"57.2K\", \"totalAcceptedRaw\": 36829, \"totalSubmissionRaw\": 57151, \"acRate\": \"64.4%\"}",
      "hints": [
        "First, ignore all the already matched positions, they don't affect the answer at all. For the unmatched positions, there are three basic cases (already given in the examples):",
        "(\"xx\", \"yy\") => 1 swap, (\"xy\", \"yx\") => 2 swaps",
        "So the strategy is, apply case 1 as much as possible, then apply case 2 if the last two unmatched are in this case, or fall into impossible if only one pair of unmatched left. This can be done via a simple math."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "determine-if-two-strings-are-close",
        "title": "Determine if Two Strings Are Close",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "make-number-of-distinct-characters-equal",
        "title": "Make Number of Distinct Characters Equal",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "First, ignore all the already matched positions, they don't affect the answer at all. For the unmatched positions, there are three basic cases (already given in the examples):",
      "(\"xx\", \"yy\") => 1 swap, (\"xy\", \"yx\") => 2 swaps",
      "So the strategy is, apply case 1 as much as possible, then apply case 2 if the last two unmatched are in this case, or fall into impossible if only one pair of unmatched left. This can be done via a simple math."
    ],
    "relatedTopics": [
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      }
    ]
  }
}