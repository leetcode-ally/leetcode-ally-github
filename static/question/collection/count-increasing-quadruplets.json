{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2552",
      "title": "Count Increasing Quadruplets",
      "titleSlug": "count-increasing-quadruplets",
      "content": "<p>Given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code> containing all numbers from <code>1</code> to <code>n</code>, return <em>the number of increasing quadruplets</em>.</p>\n\n<p>A quadruplet <code>(i, j, k, l)</code> is increasing if:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; k &lt; l &lt; n</code>, and</li>\n\t<li><code>nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,4,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- When i = 0, j = 1, k = 2, and l = 3, nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l].\n- When i = 0, j = 1, k = 2, and l = 4, nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]. \nThere are no other quadruplets, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] &lt; nums[k], we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>4 &lt;= nums.length &lt;= 4000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>. <code>nums</code> is a permutation.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 352,
      "dislikes": 62,
      "similarQuestions": "[{\"title\": \"Increasing Triplet Subsequence\", \"titleSlug\": \"increasing-triplet-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Special Quadruplets\", \"titleSlug\": \"count-special-quadruplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Binary Indexed Tree",
          "slug": "binary-indexed-tree"
        },
        {
          "name": "Enumeration",
          "slug": "enumeration"
        },
        {
          "name": "Prefix Sum",
          "slug": "prefix-sum"
        }
      ],
      "stats": "{\"totalAccepted\": \"8.3K\", \"totalSubmission\": \"25.2K\", \"totalAcceptedRaw\": 8312, \"totalSubmissionRaw\": 25232, \"acRate\": \"32.9%\"}",
      "hints": [
        "Can you loop over all possible (j, k) and find the answer?",
        "We can pre-compute all possible (i, j) and (k, l) and store them in 2 matrices.",
        "The answer will the sum of prefix[j][k] * suffix[k][j]."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "increasing-triplet-subsequence",
        "title": "Increasing Triplet Subsequence",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "count-special-quadruplets",
        "title": "Count Special Quadruplets",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "count-good-triplets-in-an-array",
        "title": "Count Good Triplets in an Array",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Can you loop over all possible (j, k) and find the answer?",
      "We can pre-compute all possible (i, j) and (k, l) and store them in 2 matrices.",
      "The answer will the sum of prefix[j][k] * suffix[k][j]."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Binary Indexed Tree",
        "slug": "binary-indexed-tree"
      },
      {
        "name": "Enumeration",
        "slug": "enumeration"
      },
      {
        "name": "Prefix Sum",
        "slug": "prefix-sum"
      }
    ]
  }
}