{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2100",
      "title": "Find Good Days to Rob the Bank",
      "titleSlug": "find-good-days-to-rob-the-bank",
      "content": "<p>You and a gang of thieves are planning on robbing a bank. You are given a <strong>0-indexed</strong> integer array <code>security</code>, where <code>security[i]</code> is the number of guards on duty on the <code>i<sup>th</sup></code> day. The days are numbered starting from <code>0</code>. You are also given an integer <code>time</code>.</p>\n\n<p>The <code>i<sup>th</sup></code> day is a good day to rob the bank if:</p>\n\n<ul>\n\t<li>There are at least <code>time</code> days before and after the <code>i<sup>th</sup></code> day,</li>\n\t<li>The number of guards at the bank for the <code>time</code> days <strong>before</strong> <code>i</code> are <strong>non-increasing</strong>, and</li>\n\t<li>The number of guards at the bank for the <code>time</code> days <strong>after</strong> <code>i</code> are <strong>non-decreasing</strong>.</li>\n</ul>\n\n<p>More formally, this means day <code>i</code> is a good day to rob the bank if and only if <code>security[i - time] &gt;= security[i - time + 1] &gt;= ... &gt;= security[i] &lt;= ... &lt;= security[i + time - 1] &lt;= security[i + time]</code>.</p>\n\n<p>Return <em>a list of <strong>all</strong> days <strong>(0-indexed) </strong>that are good days to rob the bank</em>.<em> The order that the days are returned in does<strong> </strong><strong>not</strong> matter.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> security = [5,3,3,3,5,6,2], time = 2\n<strong>Output:</strong> [2,3]\n<strong>Explanation:</strong>\nOn day 2, we have security[0] &gt;= security[1] &gt;= security[2] &lt;= security[3] &lt;= security[4].\nOn day 3, we have security[1] &gt;= security[2] &gt;= security[3] &lt;= security[4] &lt;= security[5].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> security = [1,1,1,1,1], time = 0\n<strong>Output:</strong> [0,1,2,3,4]\n<strong>Explanation:</strong>\nSince time equals 0, every day is a good day to rob the bank, so return every day.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> security = [1,2,3,4,5,6], time = 2\n<strong>Output:</strong> []\n<strong>Explanation:</strong>\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= security.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= security[i], time &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 847,
      "dislikes": 45,
      "similarQuestions": "[{\"title\": \"Non-decreasing Array\", \"titleSlug\": \"non-decreasing-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Mountain in Array\", \"titleSlug\": \"longest-mountain-in-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find in Mountain Array\", \"titleSlug\": \"find-in-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Ascending Subarray Sum\", \"titleSlug\": \"maximum-ascending-subarray-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find All Good Indices\", \"titleSlug\": \"find-all-good-indices\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Prefix Sum",
          "slug": "prefix-sum"
        }
      ],
      "stats": "{\"totalAccepted\": \"24.1K\", \"totalSubmission\": \"48.8K\", \"totalAcceptedRaw\": 24084, \"totalSubmissionRaw\": 48812, \"acRate\": \"49.3%\"}",
      "hints": [
        "The trivial solution is to check the time days before and after each day. There are a lot of repeated operations using this solution. How could we optimize this solution?",
        "We can use precomputation to make the solution faster.",
        "Use an array to store the number of days before the i<sup>th</sup> day that is non-increasing, and another array to store the number of days after the i<sup>th</sup> day that is non-decreasing."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "non-decreasing-array",
        "title": "Non-decreasing Array",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "longest-mountain-in-array",
        "title": "Longest Mountain in Array",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "find-in-mountain-array",
        "title": "Find in Mountain Array",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "maximum-ascending-subarray-sum",
        "title": "Maximum Ascending Subarray Sum",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "find-all-good-indices",
        "title": "Find All Good Indices",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "The trivial solution is to check the time days before and after each day. There are a lot of repeated operations using this solution. How could we optimize this solution?",
      "We can use precomputation to make the solution faster.",
      "Use an array to store the number of days before the i<sup>th</sup> day that is non-increasing, and another array to store the number of days after the i<sup>th</sup> day that is non-decreasing."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Prefix Sum",
        "slug": "prefix-sum"
      }
    ]
  }
}