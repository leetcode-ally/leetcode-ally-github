{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2258",
      "title": "Escape the Spreading Fire",
      "titleSlug": "escape-the-spreading-fire",
      "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>grid</code> of size <code>m x n</code> which represents a field. Each cell has one of three values:</p>\n\n<ul>\n\t<li><code>0</code> represents grass,</li>\n\t<li><code>1</code> represents fire,</li>\n\t<li><code>2</code> represents a wall that you and fire cannot pass through.</li>\n</ul>\n\n<p>You are situated in the top-left cell, <code>(0, 0)</code>, and you want to travel to the safehouse at the bottom-right cell, <code>(m - 1, n - 1)</code>. Every minute, you may move to an <strong>adjacent</strong> grass cell. <strong>After</strong> your move, every fire cell will spread to all <strong>adjacent</strong> cells that are not walls.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse</em>. If this is impossible, return <code>-1</code>. If you can <strong>always</strong> reach the safehouse regardless of the minutes stayed, return <code>10<sup>9</sup></code>.</p>\n\n<p>Note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.</p>\n\n<p>A cell is <strong>adjacent</strong> to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/ex1new.jpg\" style=\"width: 650px; height: 404px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The figure above shows the scenario where you stay in the initial position for 3 minutes.\nYou will still be able to safely reach the safehouse.\nStaying for more than 3 minutes will not allow you to safely reach the safehouse.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/ex2new2.jpg\" style=\"width: 515px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The figure above shows the scenario where you immediately move towards the safehouse.\nFire will spread to any cell you move towards and it is impossible to safely reach the safehouse.\nThus, -1 is returned.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/10/ex3new.jpg\" style=\"width: 174px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,0],[2,2,0],[1,2,0]]\n<strong>Output:</strong> 1000000000\n<strong>Explanation:</strong> The figure above shows the initial grid.\nNotice that the fire is contained by walls and you will always be able to safely reach the safehouse.\nThus, 10<sup>9</sup> is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>4 &lt;= m * n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n\t<li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 666,
      "dislikes": 26,
      "similarQuestions": "[{\"title\": \"Rotting Oranges\", \"titleSlug\": \"rotting-oranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Last Day Where You Can Still Cross\", \"titleSlug\": \"last-day-where-you-can-still-cross\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Weighted Subgraph With the Required Paths\", \"titleSlug\": \"minimum-weighted-subgraph-with-the-required-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Points From Grid Queries\", \"titleSlug\": \"maximum-number-of-points-from-grid-queries\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Binary Search",
          "slug": "binary-search"
        },
        {
          "name": "Breadth-First Search",
          "slug": "breadth-first-search"
        },
        {
          "name": "Matrix",
          "slug": "matrix"
        }
      ],
      "stats": "{\"totalAccepted\": \"9.2K\", \"totalSubmission\": \"26.4K\", \"totalAcceptedRaw\": 9169, \"totalSubmissionRaw\": 26435, \"acRate\": \"34.7%\"}",
      "hints": [
        "For some tile (x, y), how can we determine when, if ever, the fire will reach it?",
        "We can use multi-source BFS to find the earliest time the fire will reach each cell.",
        "Then, starting with a given t minutes of staying in the initial position, we can check if there is a safe path to the safehouse using the obtained information about the fire.",
        "We can use binary search to efficiently find the maximum t that allows us to reach the safehouse."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "rotting-oranges",
        "title": "Rotting Oranges",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "last-day-where-you-can-still-cross",
        "title": "Last Day Where You Can Still Cross",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "minimum-weighted-subgraph-with-the-required-paths",
        "title": "Minimum Weighted Subgraph With the Required Paths",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "maximum-number-of-points-from-grid-queries",
        "title": "Maximum Number of Points From Grid Queries",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "For some tile (x, y), how can we determine when, if ever, the fire will reach it?",
      "We can use multi-source BFS to find the earliest time the fire will reach each cell.",
      "Then, starting with a given t minutes of staying in the initial position, we can check if there is a safe path to the safehouse using the obtained information about the fire.",
      "We can use binary search to efficiently find the maximum t that allows us to reach the safehouse."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Breadth-First Search",
        "slug": "breadth-first-search"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      }
    ]
  }
}