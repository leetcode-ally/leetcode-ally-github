{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "720",
      "title": "Longest Word in Dictionary",
      "titleSlug": "longest-word-in-dictionary",
      "content": "<p>Given an array of strings <code>words</code> representing an English Dictionary, return <em>the longest word in</em> <code>words</code> <em>that can be built one character at a time by other words in</em> <code>words</code>.</p>\n\n<p>If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.</p>\n\n<p>Note that the word should be built from left to right with each additional character being added to the end of a previous word.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;,&quot;world&quot;]\n<strong>Output:</strong> &quot;world&quot;\n<strong>Explanation:</strong> The word &quot;world&quot; can be built one character at a time by &quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, and &quot;worl&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;banana&quot;,&quot;app&quot;,&quot;appl&quot;,&quot;ap&quot;,&quot;apply&quot;,&quot;apple&quot;]\n<strong>Output:</strong> &quot;apple&quot;\n<strong>Explanation:</strong> Both &quot;apply&quot; and &quot;apple&quot; can be built from other words in the dictionary. However, &quot;apple&quot; is lexicographically smaller than &quot;apply&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 1886,
      "dislikes": 1470,
      "similarQuestions": "[{\"title\": \"Longest Word in Dictionary through Deleting\", \"titleSlug\": \"longest-word-in-dictionary-through-deleting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Implement Magic Dictionary\", \"titleSlug\": \"implement-magic-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Word With All Prefixes\", \"titleSlug\": \"longest-word-with-all-prefixes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Hash Table",
          "slug": "hash-table"
        },
        {
          "name": "String",
          "slug": "string"
        },
        {
          "name": "Trie",
          "slug": "trie"
        },
        {
          "name": "Sorting",
          "slug": "sorting"
        }
      ],
      "stats": "{\"totalAccepted\": \"144.8K\", \"totalSubmission\": \"277.5K\", \"totalAcceptedRaw\": 144838, \"totalSubmissionRaw\": 277461, \"acRate\": \"52.2%\"}",
      "hints": [
        "For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "longest-word-in-dictionary-through-deleting",
        "title": "Longest Word in Dictionary through Deleting",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "implement-magic-dictionary",
        "title": "Implement Magic Dictionary",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "longest-word-with-all-prefixes",
        "title": "Longest Word With All Prefixes",
        "isPaidOnly": true
      }
    ],
    "hints": [
      "For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Trie",
        "slug": "trie"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      }
    ]
  }
}