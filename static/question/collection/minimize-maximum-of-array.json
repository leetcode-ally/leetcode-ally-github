{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2439",
      "title": "Minimize Maximum of Array",
      "titleSlug": "minimize-maximum-of-array",
      "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> comprising of <code>n</code> non-negative integers.</p>\n\n<p>In one operation, you must:</p>\n\n<ul>\n\t<li>Choose an integer <code>i</code> such that <code>1 &lt;= i &lt; n</code> and <code>nums[i] &gt; 0</code>.</li>\n\t<li>Decrease <code>nums[i]</code> by 1.</li>\n\t<li>Increase <code>nums[i - 1]</code> by 1.</li>\n</ul>\n\n<p>Return<em> the <strong>minimum</strong> possible value of the <strong>maximum</strong> integer of </em><code>nums</code><em> after performing <strong>any</strong> number of operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,7,1,6]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nOne set of optimal operations is as follows:\n1. Choose i = 1, and nums becomes [4,6,1,6].\n2. Choose i = 3, and nums becomes [4,6,2,5].\n3. Choose i = 1, and nums becomes [5,5,2,5].\nThe maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5.\nTherefore, we return 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,1]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong>\nIt is optimal to leave nums as is, and since 10 is the maximum value, we return 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 2339,
      "dislikes": 597,
      "similarQuestions": "[{\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Speed to Arrive on Time\", \"titleSlug\": \"minimum-speed-to-arrive-on-time\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Complete Trips\", \"titleSlug\": \"minimum-time-to-complete-trips\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Binary Search",
          "slug": "binary-search"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Greedy",
          "slug": "greedy"
        },
        {
          "name": "Prefix Sum",
          "slug": "prefix-sum"
        }
      ],
      "stats": "{\"totalAccepted\": \"77.1K\", \"totalSubmission\": \"165.1K\", \"totalAcceptedRaw\": 77069, \"totalSubmissionRaw\": 165081, \"acRate\": \"46.7%\"}",
      "hints": [
        "Try a binary search approach.",
        "Perform a binary search over the minimum value that can be achieved for the maximum number of the array.",
        "In each binary search iteration, iterate through the array backwards, greedily decreasing the current element until it is within the limit."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "maximum-candies-allocated-to-k-children",
        "title": "Maximum Candies Allocated to K Children",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "minimum-speed-to-arrive-on-time",
        "title": "Minimum Speed to Arrive on Time",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "minimum-time-to-complete-trips",
        "title": "Minimum Time to Complete Trips",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Try a binary search approach.",
      "Perform a binary search over the minimum value that can be achieved for the maximum number of the array.",
      "In each binary search iteration, iterate through the array backwards, greedily decreasing the current element until it is within the limit."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Prefix Sum",
        "slug": "prefix-sum"
      }
    ]
  }
}