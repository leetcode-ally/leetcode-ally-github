{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1654",
      "title": "Minimum Jumps to Reach Home",
      "titleSlug": "minimum-jumps-to-reach-home",
      "content": "<p>A certain bug&#39;s home is on the x-axis at position <code>x</code>. Help them get there from position <code>0</code>.</p>\n\n<p>The bug jumps according to the following rules:</p>\n\n<ul>\n\t<li>It can jump exactly <code>a</code> positions <strong>forward</strong> (to the right).</li>\n\t<li>It can jump exactly <code>b</code> positions <strong>backward</strong> (to the left).</li>\n\t<li>It cannot jump backward twice in a row.</li>\n\t<li>It cannot jump to any <code>forbidden</code> positions.</li>\n</ul>\n\n<p>The bug may jump forward <strong>beyond</strong> its home, but it <strong>cannot jump</strong> to positions numbered with <strong>negative</strong> integers.</p>\n\n<p>Given an array of integers <code>forbidden</code>, where <code>forbidden[i]</code> means that the bug cannot jump to the position <code>forbidden[i]</code>, and integers <code>a</code>, <code>b</code>, and <code>x</code>, return <em>the minimum number of jumps needed for the bug to reach its home</em>. If there is no possible sequence of jumps that lands the bug on position <code>x</code>, return <code>-1.</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 jumps forward (0 -&gt; 3 -&gt; 6 -&gt; 9) will get the bug home.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One jump forward (0 -&gt; 16) then one jump backward (16 -&gt; 7) will get the bug home.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= forbidden.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= a, b, forbidden[i] &lt;= 2000</code></li>\n\t<li><code>0 &lt;= x &lt;= 2000</code></li>\n\t<li>All the elements in <code>forbidden</code> are distinct.</li>\n\t<li>Position <code>x</code> is not forbidden.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 1438,
      "dislikes": 259,
      "similarQuestions": "[{\"title\": \"Reachable Nodes With Restrictions\", \"titleSlug\": \"reachable-nodes-with-restrictions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Jumps to Reach the Last Index\", \"titleSlug\": \"maximum-number-of-jumps-to-reach-the-last-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Breadth-First Search",
          "slug": "breadth-first-search"
        }
      ],
      "stats": "{\"totalAccepted\": \"40.5K\", \"totalSubmission\": \"138.1K\", \"totalAcceptedRaw\": 40502, \"totalSubmissionRaw\": 138055, \"acRate\": \"29.3%\"}",
      "hints": [
        "Think of the line as a graph",
        "to handle the no double back jumps condition you can handle it by holding the state of your previous jump"
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "reachable-nodes-with-restrictions",
        "title": "Reachable Nodes With Restrictions",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
        "title": "Maximum Number of Jumps to Reach the Last Index",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Think of the line as a graph",
      "to handle the no double back jumps condition you can handle it by holding the state of your previous jump"
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Breadth-First Search",
        "slug": "breadth-first-search"
      }
    ]
  }
}