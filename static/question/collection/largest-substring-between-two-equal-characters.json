{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1624",
      "title": "Largest Substring Between Two Equal Characters",
      "titleSlug": "largest-substring-between-two-equal-characters",
      "content": "<p>Given a string <code>s</code>, return <em>the length of the longest substring between two equal characters, excluding the two characters.</em> If there is no such substring return <code>-1</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The optimal substring here is an empty substring between the two <code>&#39;a&#39;s</code>.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abca&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The optimal substring here is &quot;bc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbzxy&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no characters that appear twice in s.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 300</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": 978,
      "dislikes": 51,
      "similarQuestions": "[]",
      "topicTags": [
        {
          "name": "Hash Table",
          "slug": "hash-table"
        },
        {
          "name": "String",
          "slug": "string"
        }
      ],
      "stats": "{\"totalAccepted\": \"89.4K\", \"totalSubmission\": \"135.9K\", \"totalAcceptedRaw\": 89395, \"totalSubmissionRaw\": 135886, \"acRate\": \"65.8%\"}",
      "hints": [
        "Try saving the first and last position of each character",
        "Try finding every pair of indexes with equal characters"
      ]
    },
    "similar": [],
    "hints": [
      "Try saving the first and last position of each character",
      "Try finding every pair of indexes with equal characters"
    ],
    "relatedTopics": [
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "String",
        "slug": "string"
      }
    ]
  }
}