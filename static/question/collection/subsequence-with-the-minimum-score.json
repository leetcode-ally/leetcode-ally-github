{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2565",
      "title": "Subsequence With the Minimum Score",
      "titleSlug": "subsequence-with-the-minimum-score",
      "content": "<p>You are given two strings <code>s</code> and <code>t</code>.</p>\n\n<p>You are allowed to remove any number of characters from the string <code>t</code>.</p>\n\n<p>The score of the string is <code>0</code> if no characters are removed from the string <code>t</code>, otherwise:</p>\n\n<ul>\n\t<li>Let <code>left</code> be the minimum index among all removed characters.</li>\n\t<li>Let <code>right</code> be the maximum index among all removed characters.</li>\n</ul>\n\n<p>Then the score of the string is <code>right - left + 1</code>.</p>\n\n<p>Return <em>the minimum possible score to make </em><code>t</code><em>&nbsp;a subsequence of </em><code>s</code><em>.</em></p>\n\n<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abacaba&quot;, t = &quot;bzaa&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In this example, we remove the character &quot;z&quot; at index 1 (0-indexed).\nThe string t becomes &quot;baa&quot; which is a subsequence of the string &quot;abacaba&quot; and the score is 1 - 1 + 1 = 1.\nIt can be proven that 1 is the minimum score that we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cde&quot;, t = &quot;xyz&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In this example, we remove characters &quot;x&quot;, &quot;y&quot; and &quot;z&quot; at indices 0, 1, and 2 (0-indexed).\nThe string t becomes &quot;&quot; which is a subsequence of the string &quot;cde&quot; and the score is 2 - 0 + 1 = 3.\nIt can be proven that 3 is the minimum score that we can achieve.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of only lowercase English letters.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 352,
      "dislikes": 6,
      "similarQuestions": "[{\"title\": \"Longest Common Subsequence\", \"titleSlug\": \"longest-common-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Two Pointers",
          "slug": "two-pointers"
        },
        {
          "name": "String",
          "slug": "string"
        },
        {
          "name": "Binary Search",
          "slug": "binary-search"
        }
      ],
      "stats": "{\"totalAccepted\": \"6.2K\", \"totalSubmission\": \"19.9K\", \"totalAcceptedRaw\": 6170, \"totalSubmissionRaw\": 19865, \"acRate\": \"31.1%\"}",
      "hints": [
        "Maintain two pointers: i and j. We need to perform a similar operation: while t[0:i] + t[j:n] is not a subsequence of the string s, increase j.",
        "We can check the condition greedily. Create the array leftmost[i] which denotes minimum index k, such that in prefix s[0:k] exists subsequence t[0:i]. Similarly, we define rightmost[i].",
        "If leftmost[i] < rightmost[j] then t[0:i] + t[j:n] is the subsequence of s."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "longest-common-subsequence",
        "title": "Longest Common Subsequence",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Maintain two pointers: i and j. We need to perform a similar operation: while t[0:i] + t[j:n] is not a subsequence of the string s, increase j.",
      "We can check the condition greedily. Create the array leftmost[i] which denotes minimum index k, such that in prefix s[0:k] exists subsequence t[0:i]. Similarly, we define rightmost[i].",
      "If leftmost[i] < rightmost[j] then t[0:i] + t[j:n] is the subsequence of s."
    ],
    "relatedTopics": [
      {
        "name": "Two Pointers",
        "slug": "two-pointers"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      }
    ]
  }
}