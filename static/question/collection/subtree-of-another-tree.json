{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "572",
      "title": "Subtree of Another Tree",
      "titleSlug": "subtree-of-another-tree",
      "content": "<p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of<code> subRoot</code> and <code>false</code> otherwise.</p>\n\n<p>A subtree of a binary tree <code>tree</code> is a tree that consists of a node in <code>tree</code> and all of this node&#39;s descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg\" style=\"width: 532px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> root = [3,4,5,1,2], subRoot = [4,1,2]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg\" style=\"width: 502px; height: 458px;\" />\n<pre>\n<strong>Input:</strong> root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the <code>root</code> tree is in the range <code>[1, 2000]</code>.</li>\n\t<li>The number of nodes in the <code>subRoot</code> tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": 7934,
      "dislikes": 463,
      "similarQuestions": "[{\"title\": \"Count Univalue Subtrees\", \"titleSlug\": \"count-univalue-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Subtree Sum\", \"titleSlug\": \"most-frequent-subtree-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Tree",
          "slug": "tree"
        },
        {
          "name": "Depth-First Search",
          "slug": "depth-first-search"
        },
        {
          "name": "String Matching",
          "slug": "string-matching"
        },
        {
          "name": "Binary Tree",
          "slug": "binary-tree"
        },
        {
          "name": "Hash Function",
          "slug": "hash-function"
        }
      ],
      "stats": "{\"totalAccepted\": \"772K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 772026, \"totalSubmissionRaw\": 1630499, \"acRate\": \"47.3%\"}",
      "hints": [
        "Which approach is better here- recursive or iterative?",
        "If recursive approach is better, can you write recursive function with its parameters?",
        "Two trees <b>s</b> and <b>t</b> are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae?",
        "Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)"
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "count-univalue-subtrees",
        "title": "Count Univalue Subtrees",
        "isPaidOnly": true
      },
      {
        "difficulty": "Medium",
        "titleSlug": "most-frequent-subtree-sum",
        "title": "Most Frequent Subtree Sum",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Which approach is better here- recursive or iterative?",
      "If recursive approach is better, can you write recursive function with its parameters?",
      "Two trees <b>s</b> and <b>t</b> are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae?",
      "Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)"
    ],
    "relatedTopics": [
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Depth-First Search",
        "slug": "depth-first-search"
      },
      {
        "name": "String Matching",
        "slug": "string-matching"
      },
      {
        "name": "Binary Tree",
        "slug": "binary-tree"
      },
      {
        "name": "Hash Function",
        "slug": "hash-function"
      }
    ]
  }
}