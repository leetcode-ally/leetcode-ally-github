{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2360",
      "title": "Longest Cycle in a Graph",
      "titleSlug": "longest-cycle-in-a-graph",
      "content": "<p>You are given a <strong>directed</strong> graph of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>, where each node has <strong>at most one</strong> outgoing edge.</p>\n\n<p>The graph is represented with a given <strong>0-indexed</strong> array <code>edges</code> of size <code>n</code>, indicating that there is a directed edge from node <code>i</code> to node <code>edges[i]</code>. If there is no outgoing edge from node <code>i</code>, then <code>edges[i] == -1</code>.</p>\n\n<p>Return <em>the length of the <strong>longest</strong> cycle in the graph</em>. If no cycle exists, return <code>-1</code>.</p>\n\n<p>A cycle is a path that starts and ends at the <strong>same</strong> node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/06/08/graph4drawio-5.png\" style=\"width: 335px; height: 191px;\" />\n<pre>\n<strong>Input:</strong> edges = [3,3,4,2,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest cycle in the graph is the cycle: 2 -&gt; 4 -&gt; 3 -&gt; 2.\nThe length of this cycle is 3, so 3 is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-1.png\" style=\"width: 171px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> edges = [2,-1,3,1]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no cycles in this graph.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-1 &lt;= edges[i] &lt; n</code></li>\n\t<li><code>edges[i] != i</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 2253,
      "dislikes": 44,
      "similarQuestions": "[{\"title\": \"Strange Printer II\", \"titleSlug\": \"strange-printer-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Sort a Binary Tree by Level\", \"titleSlug\": \"minimum-number-of-operations-to-sort-a-binary-tree-by-level\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Cycle in a Graph\", \"titleSlug\": \"shortest-cycle-in-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Depth-First Search",
          "slug": "depth-first-search"
        },
        {
          "name": "Graph",
          "slug": "graph"
        },
        {
          "name": "Topological Sort",
          "slug": "topological-sort"
        }
      ],
      "stats": "{\"totalAccepted\": \"70.4K\", \"totalSubmission\": \"140.4K\", \"totalAcceptedRaw\": 70380, \"totalSubmissionRaw\": 140380, \"acRate\": \"50.1%\"}",
      "hints": [
        "How many cycles can each node at most be part of?",
        "Each node can be part of at most one cycle. Start from each node and find the cycle that it is part of if there is any. Save the already visited nodes to not repeat visiting the same cycle multiple times."
      ]
    },
    "similar": [
      {
        "difficulty": "Hard",
        "titleSlug": "strange-printer-ii",
        "title": "Strange Printer II",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
        "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "shortest-cycle-in-a-graph",
        "title": "Shortest Cycle in a Graph",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "How many cycles can each node at most be part of?",
      "Each node can be part of at most one cycle. Start from each node and find the cycle that it is part of if there is any. Save the already visited nodes to not repeat visiting the same cycle multiple times."
    ],
    "relatedTopics": [
      {
        "name": "Depth-First Search",
        "slug": "depth-first-search"
      },
      {
        "name": "Graph",
        "slug": "graph"
      },
      {
        "name": "Topological Sort",
        "slug": "topological-sort"
      }
    ]
  }
}