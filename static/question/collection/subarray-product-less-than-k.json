{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "713",
      "title": "Subarray Product Less Than K",
      "titleSlug": "subarray-product-less-than-k",
      "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than </em><code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,5,2,6], k = 100\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], k = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 5907,
      "dislikes": 185,
      "similarQuestions": "[{\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Size Subarray Sum Equals k\", \"titleSlug\": \"maximum-size-subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum Less Than K\", \"titleSlug\": \"two-sum-less-than-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Smooth Descent Periods of a Stock\", \"titleSlug\": \"number-of-smooth-descent-periods-of-a-stock\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Subarrays With Score Less Than K\", \"titleSlug\": \"count-subarrays-with-score-less-than-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Sliding Window",
          "slug": "sliding-window"
        }
      ],
      "stats": "{\"totalAccepted\": \"260K\", \"totalSubmission\": \"554.9K\", \"totalAcceptedRaw\": 260034, \"totalSubmissionRaw\": 554917, \"acRate\": \"46.9%\"}",
      "hints": [
        "For each j, let opt(j) be the smallest i so that nums[i] * nums[i+1] * ... * nums[j] is less than k.  opt is an increasing function."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "maximum-product-subarray",
        "title": "Maximum Product Subarray",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "maximum-size-subarray-sum-equals-k",
        "title": "Maximum Size Subarray Sum Equals k",
        "isPaidOnly": true
      },
      {
        "difficulty": "Medium",
        "titleSlug": "subarray-sum-equals-k",
        "title": "Subarray Sum Equals K",
        "isPaidOnly": false
      },
      {
        "difficulty": "Easy",
        "titleSlug": "two-sum-less-than-k",
        "title": "Two Sum Less Than K",
        "isPaidOnly": true
      },
      {
        "difficulty": "Medium",
        "titleSlug": "number-of-smooth-descent-periods-of-a-stock",
        "title": "Number of Smooth Descent Periods of a Stock",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "count-subarrays-with-score-less-than-k",
        "title": "Count Subarrays With Score Less Than K",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "For each j, let opt(j) be the smallest i so that nums[i] * nums[i+1] * ... * nums[j] is less than k.  opt is an increasing function."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Sliding Window",
        "slug": "sliding-window"
      }
    ]
  }
}