{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1626",
      "title": "Best Team With No Conflicts",
      "titleSlug": "best-team-with-no-conflicts",
      "content": "<p>You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the <strong>sum</strong> of scores of all the players in the team.</p>\n\n<p>However, the basketball team is not allowed to have <strong>conflicts</strong>. A <strong>conflict</strong> exists if a younger player has a <strong>strictly higher</strong> score than an older player. A conflict does <strong>not</strong> occur between players of the same age.</p>\n\n<p>Given two lists, <code>scores</code> and <code>ages</code>, where each <code>scores[i]</code> and <code>ages[i]</code> represents the score and age of the <code>i<sup>th</sup></code> player, respectively, return <em>the highest overall score of all possible basketball teams</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> scores = [1,3,5,10,15], ages = [1,2,3,4,5]\n<strong>Output:</strong> 34\n<strong>Explanation:</strong>&nbsp;You can choose all the players.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> scores = [4,5,6,5], ages = [2,1,2,1]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong>&nbsp;It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> scores = [1,2,3,5], ages = [8,9,10,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>&nbsp;It is best to choose the first 3 players. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= scores.length, ages.length &lt;= 1000</code></li>\n\t<li><code>scores.length == ages.length</code></li>\n\t<li><code>1 &lt;= scores[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= ages[i] &lt;= 1000</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 2872,
      "dislikes": 93,
      "similarQuestions": "[]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Sorting",
          "slug": "sorting"
        }
      ],
      "stats": "{\"totalAccepted\": \"78.9K\", \"totalSubmission\": \"156.3K\", \"totalAcceptedRaw\": 78947, \"totalSubmissionRaw\": 156323, \"acRate\": \"50.5%\"}",
      "hints": [
        "First, sort players by age and break ties by their score. You can now consider the players from left to right.",
        "If you choose to include a player, you must only choose players with at least that score later on."
      ]
    },
    "similar": [],
    "hints": [
      "First, sort players by age and break ties by their score. You can now consider the players from left to right.",
      "If you choose to include a player, you must only choose players with at least that score later on."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      }
    ]
  }
}