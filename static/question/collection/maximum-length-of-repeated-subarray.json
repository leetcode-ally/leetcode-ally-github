{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "718",
      "title": "Maximum Length of Repeated Subarray",
      "titleSlug": "maximum-length-of-repeated-subarray",
      "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>the maximum length of a subarray that appears in <strong>both</strong> arrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The repeated subarray with maximum length is [3,2,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The repeated subarray with maximum length is [0,0,0,0,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 6614,
      "dislikes": 162,
      "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subpath\", \"titleSlug\": \"longest-common-subpath\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Binary Search",
          "slug": "binary-search"
        },
        {
          "name": "Dynamic Programming",
          "slug": "dynamic-programming"
        },
        {
          "name": "Sliding Window",
          "slug": "sliding-window"
        },
        {
          "name": "Rolling Hash",
          "slug": "rolling-hash"
        },
        {
          "name": "Hash Function",
          "slug": "hash-function"
        }
      ],
      "stats": "{\"totalAccepted\": \"286.1K\", \"totalSubmission\": \"561.1K\", \"totalAcceptedRaw\": 286110, \"totalSubmissionRaw\": 561081, \"acRate\": \"51.0%\"}",
      "hints": [
        "Use dynamic programming.  dp[i][j] will be the longest common prefix of A[i:] and B[j:].",
        "The answer is max(dp[i][j]) over all i, j."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "minimum-size-subarray-sum",
        "title": "Minimum Size Subarray Sum",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "longest-common-subpath",
        "title": "Longest Common Subpath",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "Use dynamic programming.  dp[i][j] will be the longest common prefix of A[i:] and B[j:].",
      "The answer is max(dp[i][j]) over all i, j."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Sliding Window",
        "slug": "sliding-window"
      },
      {
        "name": "Rolling Hash",
        "slug": "rolling-hash"
      },
      {
        "name": "Hash Function",
        "slug": "hash-function"
      }
    ]
  }
}