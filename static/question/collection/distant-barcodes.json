{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "1054",
      "title": "Distant Barcodes",
      "titleSlug": "distant-barcodes",
      "content": "<p>In a warehouse, there is a row of barcodes, where the <code>i<sup>th</sup></code> barcode is <code>barcodes[i]</code>.</p>\n\n<p>Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> barcodes = [1,1,1,2,2,2]\n<strong>Output:</strong> [2,1,2,1,2,1]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> barcodes = [1,1,1,1,2,2,3,3]\n<strong>Output:</strong> [1,3,1,3,1,2,1,2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= barcodes.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= barcodes[i] &lt;= 10000</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 1221,
      "dislikes": 49,
      "similarQuestions": "[]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Hash Table",
          "slug": "hash-table"
        },
        {
          "name": "Greedy",
          "slug": "greedy"
        },
        {
          "name": "Sorting",
          "slug": "sorting"
        },
        {
          "name": "Heap (Priority Queue)",
          "slug": "heap-priority-queue"
        },
        {
          "name": "Counting",
          "slug": "counting"
        }
      ],
      "stats": "{\"totalAccepted\": \"40.3K\", \"totalSubmission\": \"87.3K\", \"totalAcceptedRaw\": 40334, \"totalSubmissionRaw\": 87346, \"acRate\": \"46.2%\"}",
      "hints": [
        "We want to always choose the most common or second most common element to write next.  What data structure allows us to query this effectively?"
      ]
    },
    "similar": [],
    "hints": [
      "We want to always choose the most common or second most common element to write next.  What data structure allows us to query this effectively?"
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      },
      {
        "name": "Heap (Priority Queue)",
        "slug": "heap-priority-queue"
      },
      {
        "name": "Counting",
        "slug": "counting"
      }
    ]
  }
}