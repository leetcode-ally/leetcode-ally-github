{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2087",
      "title": "Minimum Cost Homecoming of a Robot in a Grid",
      "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
      "content": "<p>There is an <code>m x n</code> grid, where <code>(0, 0)</code> is the top-left cell and <code>(m - 1, n - 1)</code> is the bottom-right cell. You are given an integer array <code>startPos</code> where <code>startPos = [start<sub>row</sub>, start<sub>col</sub>]</code> indicates that <strong>initially</strong>, a <strong>robot</strong> is at the cell <code>(start<sub>row</sub>, start<sub>col</sub>)</code>. You are also given an integer array <code>homePos</code> where <code>homePos = [home<sub>row</sub>, home<sub>col</sub>]</code> indicates that its <strong>home</strong> is at the cell <code>(home<sub>row</sub>, home<sub>col</sub>)</code>.</p>\n\n<p>The robot needs to go to its home. It can move one cell in four directions: <strong>left</strong>, <strong>right</strong>, <strong>up</strong>, or <strong>down</strong>, and it can not move outside the boundary. Every move incurs some cost. You are further given two <strong>0-indexed</strong> integer arrays: <code>rowCosts</code> of length <code>m</code> and <code>colCosts</code> of length <code>n</code>.</p>\n\n<ul>\n\t<li>If the robot moves <strong>up</strong> or <strong>down</strong> into a cell whose <strong>row</strong> is <code>r</code>, then this move costs <code>rowCosts[r]</code>.</li>\n\t<li>If the robot moves <strong>left</strong> or <strong>right</strong> into a cell whose <strong>column</strong> is <code>c</code>, then this move costs <code>colCosts[c]</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum total cost</strong> for this robot to return home</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/11/eg-1.png\" style=\"width: 282px; height: 217px;\" />\n<pre>\n<strong>Input:</strong> startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> One optimal path is that:\nStarting from (1, 0)\n-&gt; It goes down to (<u><strong>2</strong></u>, 0). This move costs rowCosts[2] = 3.\n-&gt; It goes right to (2, <u><strong>1</strong></u>). This move costs colCosts[1] = 2.\n-&gt; It goes right to (2, <u><strong>2</strong></u>). This move costs colCosts[2] = 6.\n-&gt; It goes right to (2, <u><strong>3</strong></u>). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The robot is already at its home. Since no moves occur, the total cost is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == rowCosts.length</code></li>\n\t<li><code>n == colCosts.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= rowCosts[r], colCosts[c] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>startPos.length == 2</code></li>\n\t<li><code>homePos.length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>row</sub>, home<sub>row</sub> &lt; m</code></li>\n\t<li><code>0 &lt;= start<sub>col</sub>, home<sub>col</sub> &lt; n</code></li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 638,
      "dislikes": 85,
      "similarQuestions": "[{\"title\": \"Unique Paths\", \"titleSlug\": \"unique-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Sum\", \"titleSlug\": \"minimum-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Bomb Enemy\", \"titleSlug\": \"bomb-enemy\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Square Submatrices with All Ones\", \"titleSlug\": \"count-square-submatrices-with-all-ones\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paths in Matrix Whose Sum Is Divisible by K\", \"titleSlug\": \"paths-in-matrix-whose-sum-is-divisible-by-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if There is a Path With Equal Number of 0's And 1's\", \"titleSlug\": \"check-if-there-is-a-path-with-equal-number-of-0s-and-1s\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Greedy",
          "slug": "greedy"
        },
        {
          "name": "Matrix",
          "slug": "matrix"
        }
      ],
      "stats": "{\"totalAccepted\": \"16.3K\", \"totalSubmission\": \"32.1K\", \"totalAcceptedRaw\": 16315, \"totalSubmissionRaw\": 32052, \"acRate\": \"50.9%\"}",
      "hints": [
        "Irrespective of what path the robot takes, it will have to traverse all the rows between startRow and homeRow and all the columns between startCol and homeCol.",
        "Hence, making any other move other than traversing the required rows and columns will potentially incur more cost which can be avoided."
      ]
    },
    "similar": [
      {
        "difficulty": "Medium",
        "titleSlug": "unique-paths",
        "title": "Unique Paths",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "minimum-path-sum",
        "title": "Minimum Path Sum",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "bomb-enemy",
        "title": "Bomb Enemy",
        "isPaidOnly": true
      },
      {
        "difficulty": "Medium",
        "titleSlug": "count-square-submatrices-with-all-ones",
        "title": "Count Square Submatrices with All Ones",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
        "title": "Paths in Matrix Whose Sum Is Divisible by K",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
        "title": "Check if There is a Path With Equal Number of 0's And 1's",
        "isPaidOnly": true
      }
    ],
    "hints": [
      "Irrespective of what path the robot takes, it will have to traverse all the rows between startRow and homeRow and all the columns between startCol and homeCol.",
      "Hence, making any other move other than traversing the required rows and columns will potentially incur more cost which can be avoided."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      }
    ]
  }
}