{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3292",
            "title": "Minimum Number of Valid Strings to Form Target II",
            "titleSlug": "minimum-number-of-valid-strings-to-form-target-ii",
            "content": "<p>You are given an array of strings <code>words</code> and a string <code>target</code>.</p>\n\n<p>A string <code>x</code> is called <strong>valid</strong> if <code>x</code> is a <span data-keyword=\"string-prefix\">prefix</span> of <strong>any</strong> string in <code>words</code>.</p>\n\n<p>Return the <strong>minimum</strong> number of <strong>valid</strong> strings that can be <em>concatenated</em> to form <code>target</code>. If it is <strong>not</strong> possible to form <code>target</code>, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abc&quot;,&quot;aaaaa&quot;,&quot;bcdef&quot;], target = &quot;aabcdabc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The target string can be formed by concatenating:</p>\n\n<ul>\n\t<li>Prefix of length 2 of <code>words[1]</code>, i.e. <code>&quot;aa&quot;</code>.</li>\n\t<li>Prefix of length 3 of <code>words[2]</code>, i.e. <code>&quot;bcd&quot;</code>.</li>\n\t<li>Prefix of length 3 of <code>words[0]</code>, i.e. <code>&quot;abc&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abababab&quot;,&quot;ab&quot;], target = &quot;ababaababa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The target string can be formed by concatenating:</p>\n\n<ul>\n\t<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>\n\t<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abcdef&quot;], target = &quot;xyz&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li>The input is generated such that <code>sum(words[i].length) &lt;= 10<sup>5</sup></code>.</li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= target.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>target</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 56,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Convert String II\", \"titleSlug\": \"minimum-cost-to-convert-string-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Construct String with Minimum Cost\", \"titleSlug\": \"construct-string-with-minimum-cost\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.1K\", \"totalSubmission\": \"19.4K\", \"totalAcceptedRaw\": 3140, \"totalSubmissionRaw\": 19383, \"acRate\": \"16.2%\"}",
            "hints": [
                "Let <code>dp[i]</code> be the minimum cost to form the prefix of length <code>i</code> of <code>target</code>.",
                "Use Rabin-Karp to hash every prefix and store it in a HashSet.",
                "Use Binary search to find the longest substring starting at index <code>i</code> (<code>target[i..j]</code>) that has a hash present in the HashSet.",
                "Inverse Modulo precomputation can optimise hash calculation.",
                "Use Lazy Segment Tree, or basic Segment Tree to update <code>dp[i..j]</code>.",
                "Is it possible to use two TreeSets to update <code>dp[i..j]</code>?"
            ]
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-convert-string-ii",
                "title": "Minimum Cost to Convert String II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "construct-string-with-minimum-cost",
                "title": "Construct String with Minimum Cost",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i]</code> be the minimum cost to form the prefix of length <code>i</code> of <code>target</code>.",
            "Use Rabin-Karp to hash every prefix and store it in a HashSet.",
            "Use Binary search to find the longest substring starting at index <code>i</code> (<code>target[i..j]</code>) that has a hash present in the HashSet.",
            "Inverse Modulo precomputation can optimise hash calculation.",
            "Use Lazy Segment Tree, or basic Segment Tree to update <code>dp[i..j]</code>.",
            "Is it possible to use two TreeSets to update <code>dp[i..j]</code>?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ]
    }
}