{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": "2179",
      "title": "Count Good Triplets in an Array",
      "titleSlug": "count-good-triplets-in-an-array",
      "content": "<p>You are given two <strong>0-indexed</strong> arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>, both of which are <strong>permutations</strong> of <code>[0, 1, ..., n - 1]</code>.</p>\n\n<p>A <strong>good triplet</strong> is a set of <code>3</code> <strong>distinct</strong> values which are present in <strong>increasing order</strong> by position both in <code>nums1</code> and <code>nums2</code>. In other words, if we consider <code>pos1<sub>v</sub></code> as the index of the value <code>v</code> in <code>nums1</code> and <code>pos2<sub>v</sub></code> as the index of the value <code>v</code> in <code>nums2</code>, then a good triplet will be a set <code>(x, y, z)</code> where <code>0 &lt;= x, y, z &lt;= n - 1</code>, such that <code>pos1<sub>x</sub> &lt; pos1<sub>y</sub> &lt; pos1<sub>z</sub></code> and <code>pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub></code>.</p>\n\n<p>Return <em>the <strong>total number</strong> of good triplets</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,0,1,3], nums2 = [0,1,2,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nThere are 4 triplets (x,y,z) such that pos1<sub>x</sub> &lt; pos1<sub>y</sub> &lt; pos1<sub>z</sub>. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). \nOut of those triplets, only the triplet (0,1,3) satisfies pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub>. Hence, there is only 1 good triplet.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= n - 1</code></li>\n\t<li><code>nums1</code> and <code>nums2</code> are permutations of <code>[0, 1, ..., n - 1]</code>.</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": 589,
      "dislikes": 24,
      "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Increasing Triplet Subsequence\", \"titleSlug\": \"increasing-triplet-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Create Sorted Array through Instructions\", \"titleSlug\": \"create-sorted-array-through-instructions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Good Paths\", \"titleSlug\": \"number-of-good-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Increasing Quadruplets\", \"titleSlug\": \"count-increasing-quadruplets\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
      "topicTags": [
        {
          "name": "Array",
          "slug": "array"
        },
        {
          "name": "Binary Search",
          "slug": "binary-search"
        },
        {
          "name": "Divide and Conquer",
          "slug": "divide-and-conquer"
        },
        {
          "name": "Binary Indexed Tree",
          "slug": "binary-indexed-tree"
        },
        {
          "name": "Segment Tree",
          "slug": "segment-tree"
        },
        {
          "name": "Merge Sort",
          "slug": "merge-sort"
        },
        {
          "name": "Ordered Set",
          "slug": "ordered-set"
        }
      ],
      "stats": "{\"totalAccepted\": \"7.4K\", \"totalSubmission\": \"18.3K\", \"totalAcceptedRaw\": 7426, \"totalSubmissionRaw\": 18270, \"acRate\": \"40.6%\"}",
      "hints": [
        "For every value y, how can you find the number of values x  (0 ≤ x, y ≤ n - 1) such that x appears before y in both of the arrays?",
        "Similarly, for every value y, try finding the number of values z (0 ≤ y, z ≤ n - 1) such that z appears after y in both of the arrays.",
        "Now, for every value y, count the number of good triplets that can be formed if y is considered as the middle element."
      ]
    },
    "similar": [
      {
        "difficulty": "Hard",
        "titleSlug": "count-of-smaller-numbers-after-self",
        "title": "Count of Smaller Numbers After Self",
        "isPaidOnly": false
      },
      {
        "difficulty": "Medium",
        "titleSlug": "increasing-triplet-subsequence",
        "title": "Increasing Triplet Subsequence",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "create-sorted-array-through-instructions",
        "title": "Create Sorted Array through Instructions",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "number-of-good-paths",
        "title": "Number of Good Paths",
        "isPaidOnly": false
      },
      {
        "difficulty": "Hard",
        "titleSlug": "count-increasing-quadruplets",
        "title": "Count Increasing Quadruplets",
        "isPaidOnly": false
      }
    ],
    "hints": [
      "For every value y, how can you find the number of values x  (0 ≤ x, y ≤ n - 1) such that x appears before y in both of the arrays?",
      "Similarly, for every value y, try finding the number of values z (0 ≤ y, z ≤ n - 1) such that z appears after y in both of the arrays.",
      "Now, for every value y, count the number of good triplets that can be formed if y is considered as the middle element."
    ],
    "relatedTopics": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Divide and Conquer",
        "slug": "divide-and-conquer"
      },
      {
        "name": "Binary Indexed Tree",
        "slug": "binary-indexed-tree"
      },
      {
        "name": "Segment Tree",
        "slug": "segment-tree"
      },
      {
        "name": "Merge Sort",
        "slug": "merge-sort"
      },
      {
        "name": "Ordered Set",
        "slug": "ordered-set"
      }
    ]
  }
}